
Micro_OSII_ATMEGA256x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800200  00007cc6  00007d5a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007cc6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a08  008004d0  008004d0  0000802a  2**0
                  ALLOC
  3 .stab         00000768  00000000  00000000  0000802c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00008794  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  000087e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000143d  00000000  00000000  00008968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000062f5  00000000  00000000  00009da5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011ad  00000000  00000000  0001009a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005ba8  00000000  00000000  00011247  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b80  00000000  00000000  00016df0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001033  00000000  00000000  00017970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__ctors_end>
       4:	0c 94 fc 3a 	jmp	0x75f8	; 0x75f8 <__vector_1>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 96 3a 	jmp	0x752c	; 0x752c <__vector_21>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      74:	0c 94 dd 38 	jmp	0x71ba	; 0x71ba <__vector_29>
      78:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      7c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      80:	0c 94 a3 38 	jmp	0x7146	; 0x7146 <__vector_32>
      84:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      88:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      8c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      90:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      94:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      98:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      9c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      a0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      a4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      a8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      ac:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      b0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      b4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      b8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      bc:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      c0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      c4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      c8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      cc:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      d0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      d4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      d8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      dc:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      e0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

000000e4 <OSDebugEn>:
      e4:	01 00                                               ..

000000e6 <OSEndiannessTest>:
      e6:	78 56 34 12                                         xV4.

000000ea <OSEventMax>:
      ea:	0a 00                                               ..

000000ec <OSEventNameSize>:
      ec:	10 00                                               ..

000000ee <OSEventEn>:
      ee:	01 00                                               ..

000000f0 <OSEventSize>:
      f0:	18 00                                               ..

000000f2 <OSEventTblSize>:
      f2:	f0 00                                               ..

000000f4 <OSFlagEn>:
	...

000000f6 <OSFlagGrpSize>:
	...

000000f8 <OSFlagNodeSize>:
	...

000000fa <OSFlagWidth>:
	...

000000fc <OSFlagMax>:
      fc:	05 00                                               ..

000000fe <OSFlagNameSize>:
      fe:	10 00                                               ..

00000100 <OSLowestPrio>:
     100:	0a 00                                               ..

00000102 <OSMboxEn>:
	...

00000104 <OSMemEn>:
	...

00000106 <OSMemMax>:
     106:	05 00                                               ..

00000108 <OSMemNameSize>:
     108:	10 00                                               ..

0000010a <OSMemSize>:
	...

0000010c <OSMemTblSize>:
	...

0000010e <OSMutexEn>:
	...

00000110 <OSPtrSize>:
     110:	02 00                                               ..

00000112 <OSQEn>:
	...

00000114 <OSQMax>:
     114:	04 00                                               ..

00000116 <OSQSize>:
	...

00000118 <OSRdyTblSize>:
     118:	02 00                                               ..

0000011a <OSSemEn>:
     11a:	01 00                                               ..

0000011c <OSStkWidth>:
     11c:	01 00                                               ..

0000011e <OSTaskCreateEn>:
     11e:	01 00                                               ..

00000120 <OSTaskCreateExtEn>:
     120:	01 00                                               ..

00000122 <OSTaskDelEn>:
	...

00000124 <OSTaskIdleStkSize>:
     124:	af 00                                               ..

00000126 <OSTaskProfileEn>:
     126:	01 00                                               ..

00000128 <OSTaskMax>:
     128:	08 00                                               ..

0000012a <OSTaskNameSize>:
     12a:	10 00                                               ..

0000012c <OSTaskStatEn>:
	...

0000012e <OSTaskStatStkSize>:
     12e:	af 00                                               ..

00000130 <OSTaskStatStkChkEn>:
	...

00000132 <OSTaskSwHookEn>:
     132:	01 00                                               ..

00000134 <OSTCBPrioTblMax>:
     134:	0b 00                                               ..

00000136 <OSTCBSize>:
     136:	3f 00                                               ?.

00000138 <OSTicksPerSec>:
     138:	64 00                                               d.

0000013a <OSTimeTickHookEn>:
     13a:	01 00                                               ..

0000013c <OSVersionNbr>:
     13c:	1e 01                                               ..

0000013e <OSDataSize>:
     13e:	cc 03                                               ..

00000140 <__ctors_end>:
     140:	11 24       	eor	r1, r1
     142:	1f be       	out	0x3f, r1	; 63
     144:	cf ef       	ldi	r28, 0xFF	; 255
     146:	d1 e2       	ldi	r29, 0x21	; 33
     148:	de bf       	out	0x3e, r29	; 62
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0c bf       	out	0x3c, r16	; 60

00000150 <__do_copy_data>:
     150:	14 e0       	ldi	r17, 0x04	; 4
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b2 e0       	ldi	r27, 0x02	; 2
     156:	e6 ec       	ldi	r30, 0xC6	; 198
     158:	fc e7       	ldi	r31, 0x7C	; 124
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a0 3d       	cpi	r26, 0xD0	; 208
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	1e e0       	ldi	r17, 0x0E	; 14
     16c:	a0 ed       	ldi	r26, 0xD0	; 208
     16e:	b4 e0       	ldi	r27, 0x04	; 4
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a8 3d       	cpi	r26, 0xD8	; 216
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 38 39 	call	0x7270	; 0x7270 <main>
     17e:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <OS_CPU_SR_Save>:
     186:	8f b7       	in	r24, 0x3f	; 63
     188:	f8 94       	cli
     18a:	08 95       	ret

0000018c <OS_CPU_SR_Restore>:
     18c:	8f bf       	out	0x3f, r24	; 63
     18e:	08 95       	ret

00000190 <OSStartHighRdy>:
     190:	0e 94 8d 03 	call	0x71a	; 0x71a <OSTaskSwHook>
     194:	00 91 12 05 	lds	r16, 0x0512
     198:	03 95       	inc	r16
     19a:	00 93 12 05 	sts	0x0512, r16
     19e:	e0 91 96 07 	lds	r30, 0x0796
     1a2:	f0 91 97 07 	lds	r31, 0x0797
     1a6:	c1 91       	ld	r28, Z+
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	d1 91       	ld	r29, Z+
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f 91       	pop	r16
     1b0:	0f 77       	andi	r16, 0x7F	; 127
     1b2:	0f bf       	out	0x3f, r16	; 63
     1b4:	0f 91       	pop	r16
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	ff 91       	pop	r31
     1ba:	ef 91       	pop	r30
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	bf 91       	pop	r27
     1c2:	af 91       	pop	r26
     1c4:	9f 91       	pop	r25
     1c6:	8f 91       	pop	r24
     1c8:	7f 91       	pop	r23
     1ca:	6f 91       	pop	r22
     1cc:	5f 91       	pop	r21
     1ce:	4f 91       	pop	r20
     1d0:	3f 91       	pop	r19
     1d2:	2f 91       	pop	r18
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	df 90       	pop	r13
     1de:	cf 90       	pop	r12
     1e0:	bf 90       	pop	r11
     1e2:	af 90       	pop	r10
     1e4:	9f 90       	pop	r9
     1e6:	8f 90       	pop	r8
     1e8:	7f 90       	pop	r7
     1ea:	6f 90       	pop	r6
     1ec:	5f 90       	pop	r5
     1ee:	4f 90       	pop	r4
     1f0:	3f 90       	pop	r3
     1f2:	2f 90       	pop	r2
     1f4:	1f 90       	pop	r1
     1f6:	0f 90       	pop	r0
     1f8:	18 95       	reti

000001fa <OSCtxSw>:
     1fa:	0f 92       	push	r0
     1fc:	1f 92       	push	r1
     1fe:	2f 92       	push	r2
     200:	3f 92       	push	r3
     202:	4f 92       	push	r4
     204:	5f 92       	push	r5
     206:	6f 92       	push	r6
     208:	7f 92       	push	r7
     20a:	8f 92       	push	r8
     20c:	9f 92       	push	r9
     20e:	af 92       	push	r10
     210:	bf 92       	push	r11
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ef 93       	push	r30
     238:	ff 93       	push	r31
     23a:	0b b7       	in	r16, 0x3b	; 59
     23c:	0f 93       	push	r16
     23e:	0f b7       	in	r16, 0x3f	; 63
     240:	0f 93       	push	r16
     242:	e0 91 4d 08 	lds	r30, 0x084D
     246:	f0 91 4e 08 	lds	r31, 0x084E
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	c1 93       	st	Z+, r28
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	d1 93       	st	Z+, r29
     252:	0e 94 8d 03 	call	0x71a	; 0x71a <OSTaskSwHook>
     256:	00 91 19 05 	lds	r16, 0x0519
     25a:	00 93 8a 07 	sts	0x078A, r16
     25e:	e0 91 96 07 	lds	r30, 0x0796
     262:	f0 91 97 07 	lds	r31, 0x0797
     266:	e0 93 4d 08 	sts	0x084D, r30
     26a:	f0 93 4e 08 	sts	0x084E, r31
     26e:	c1 91       	ld	r28, Z+
     270:	cd bf       	out	0x3d, r28	; 61
     272:	d1 91       	ld	r29, Z+
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f 91       	pop	r16
     278:	07 fd       	sbrc	r16, 7
     27a:	24 c0       	rjmp	.+72     	; 0x2c4 <OSCtxSw_1>
     27c:	0f bf       	out	0x3f, r16	; 63
     27e:	0f 91       	pop	r16
     280:	0b bf       	out	0x3b, r16	; 59
     282:	ff 91       	pop	r31
     284:	ef 91       	pop	r30
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	bf 91       	pop	r27
     28c:	af 91       	pop	r26
     28e:	9f 91       	pop	r25
     290:	8f 91       	pop	r24
     292:	7f 91       	pop	r23
     294:	6f 91       	pop	r22
     296:	5f 91       	pop	r21
     298:	4f 91       	pop	r20
     29a:	3f 91       	pop	r19
     29c:	2f 91       	pop	r18
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	df 90       	pop	r13
     2a8:	cf 90       	pop	r12
     2aa:	bf 90       	pop	r11
     2ac:	af 90       	pop	r10
     2ae:	9f 90       	pop	r9
     2b0:	8f 90       	pop	r8
     2b2:	7f 90       	pop	r7
     2b4:	6f 90       	pop	r6
     2b6:	5f 90       	pop	r5
     2b8:	4f 90       	pop	r4
     2ba:	3f 90       	pop	r3
     2bc:	2f 90       	pop	r2
     2be:	1f 90       	pop	r1
     2c0:	0f 90       	pop	r0
     2c2:	08 95       	ret

000002c4 <OSCtxSw_1>:
     2c4:	0f 77       	andi	r16, 0x7F	; 127
     2c6:	0f bf       	out	0x3f, r16	; 63
     2c8:	0f 91       	pop	r16
     2ca:	0b bf       	out	0x3b, r16	; 59
     2cc:	ff 91       	pop	r31
     2ce:	ef 91       	pop	r30
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	bf 91       	pop	r27
     2d6:	af 91       	pop	r26
     2d8:	9f 91       	pop	r25
     2da:	8f 91       	pop	r24
     2dc:	7f 91       	pop	r23
     2de:	6f 91       	pop	r22
     2e0:	5f 91       	pop	r21
     2e2:	4f 91       	pop	r20
     2e4:	3f 91       	pop	r19
     2e6:	2f 91       	pop	r18
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	1f 90       	pop	r1
     30a:	0f 90       	pop	r0
     30c:	18 95       	reti

0000030e <OSIntCtxSw>:
     30e:	0e 94 8d 03 	call	0x71a	; 0x71a <OSTaskSwHook>
     312:	00 91 19 05 	lds	r16, 0x0519
     316:	00 93 8a 07 	sts	0x078A, r16
     31a:	e0 91 96 07 	lds	r30, 0x0796
     31e:	f0 91 97 07 	lds	r31, 0x0797
     322:	e0 93 4d 08 	sts	0x084D, r30
     326:	f0 93 4e 08 	sts	0x084E, r31
     32a:	c1 91       	ld	r28, Z+
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	d1 91       	ld	r29, Z+
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f 91       	pop	r16
     334:	07 fd       	sbrc	r16, 7
     336:	24 c0       	rjmp	.+72     	; 0x380 <OSIntCtxSw_1>
     338:	0f bf       	out	0x3f, r16	; 63
     33a:	0f 91       	pop	r16
     33c:	0b bf       	out	0x3b, r16	; 59
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	df 90       	pop	r13
     364:	cf 90       	pop	r12
     366:	bf 90       	pop	r11
     368:	af 90       	pop	r10
     36a:	9f 90       	pop	r9
     36c:	8f 90       	pop	r8
     36e:	7f 90       	pop	r7
     370:	6f 90       	pop	r6
     372:	5f 90       	pop	r5
     374:	4f 90       	pop	r4
     376:	3f 90       	pop	r3
     378:	2f 90       	pop	r2
     37a:	1f 90       	pop	r1
     37c:	0f 90       	pop	r0
     37e:	08 95       	ret

00000380 <OSIntCtxSw_1>:
     380:	0f 77       	andi	r16, 0x7F	; 127
     382:	0f bf       	out	0x3f, r16	; 63
     384:	0f 91       	pop	r16
     386:	0b bf       	out	0x3b, r16	; 59
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	bf 90       	pop	r11
     3b2:	af 90       	pop	r10
     3b4:	9f 90       	pop	r9
     3b6:	8f 90       	pop	r8
     3b8:	7f 90       	pop	r7
     3ba:	6f 90       	pop	r6
     3bc:	5f 90       	pop	r5
     3be:	4f 90       	pop	r4
     3c0:	3f 90       	pop	r3
     3c2:	2f 90       	pop	r2
     3c4:	1f 90       	pop	r1
     3c6:	0f 90       	pop	r0
     3c8:	18 95       	reti

000003ca <OSInitHookBegin>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookBegin (void)
{
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr = 0;
     3d2:	10 92 d1 04 	sts	0x04D1, r1
     3d6:	10 92 d0 04 	sts	0x04D0, r1
#endif
}
     3da:	cf 91       	pop	r28
     3dc:	df 91       	pop	r29
     3de:	08 95       	ret

000003e0 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookEnd (void)
{
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
}
     3e8:	cf 91       	pop	r28
     3ea:	df 91       	pop	r29
     3ec:	08 95       	ret

000003ee <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskCreateHook (OS_TCB *ptcb)
{
     3ee:	df 93       	push	r29
     3f0:	cf 93       	push	r28
     3f2:	0f 92       	push	r0
     3f4:	0f 92       	push	r0
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
#if OS_APP_HOOKS_EN > 0
    App_TaskCreateHook(ptcb);
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	0e 94 5a 3a 	call	0x74b4	; 0x74b4 <App_TaskCreateHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskDelHook (OS_TCB *ptcb)
{
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	0f 92       	push	r0
     416:	0f 92       	push	r0
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
#if OS_APP_HOOKS_EN > 0
    App_TaskDelHook(ptcb);
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	9a 81       	ldd	r25, Y+2	; 0x02
     424:	0e 94 67 3a 	call	0x74ce	; 0x74ce <App_TaskDelHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
void  OSTaskIdleHook (void)
{
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskIdleHook();
     43a:	0e 94 74 3a 	call	0x74e8	; 0x74e8 <App_TaskIdleHook>
#endif
}
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	08 95       	ret

00000444 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0
void  OSTaskStatHook (void)
{
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskStatHook();
     44c:	0e 94 7b 3a 	call	0x74f6	; 0x74f6 <App_TaskStatHook>
#endif
}
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <OSTaskStkInit>:
*
**********************************************************************************************************
*/

OS_STK  *OSTaskStkInit (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT16U opt)
{
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	2c 97       	sbiw	r28, 0x0c	; 12
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	9e 83       	std	Y+6, r25	; 0x06
     46c:	8d 83       	std	Y+5, r24	; 0x05
     46e:	78 87       	std	Y+8, r23	; 0x08
     470:	6f 83       	std	Y+7, r22	; 0x07
     472:	5a 87       	std	Y+10, r21	; 0x0a
     474:	49 87       	std	Y+9, r20	; 0x09
     476:	3c 87       	std	Y+12, r19	; 0x0c
     478:	2b 87       	std	Y+11, r18	; 0x0b
    INT8U  *stk;
    INT16U  tmp;

    (void)opt;                              /* 'opt' is not used, prevent warning                       */
    stk     = (INT8U *)ptos;				/* AVR return stack                                        */
     47a:	89 85       	ldd	r24, Y+9	; 0x09
     47c:	9a 85       	ldd	r25, Y+10	; 0x0a
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	8b 83       	std	Y+3, r24	; 0x03

    tmp     = (INT16U)task;
     482:	8d 81       	ldd	r24, Y+5	; 0x05
     484:	9e 81       	ldd	r25, Y+6	; 0x06
     486:	9a 83       	std	Y+2, r25	; 0x02
     488:	89 83       	std	Y+1, r24	; 0x01
                                            /* Put task start address on top of "hardware stack"        */
    *stk--  = (INT8U)(tmp & 0xFF);    		/* Save PC return address Three Bytes PC in ATMEGA2560/ATMEGA2561 IHA*/
     48a:	89 81       	ldd	r24, Y+1	; 0x01
     48c:	eb 81       	ldd	r30, Y+3	; 0x03
     48e:	fc 81       	ldd	r31, Y+4	; 0x04
     490:	80 83       	st	Z, r24
     492:	8b 81       	ldd	r24, Y+3	; 0x03
     494:	9c 81       	ldd	r25, Y+4	; 0x04
     496:	01 97       	sbiw	r24, 0x01	; 1
     498:	9c 83       	std	Y+4, r25	; 0x04
     49a:	8b 83       	std	Y+3, r24	; 0x03
    tmp >>= 8;
     49c:	89 81       	ldd	r24, Y+1	; 0x01
     49e:	9a 81       	ldd	r25, Y+2	; 0x02
     4a0:	89 2f       	mov	r24, r25
     4a2:	99 27       	eor	r25, r25
     4a4:	9a 83       	std	Y+2, r25	; 0x02
     4a6:	89 83       	std	Y+1, r24	; 0x01
    *stk--  = (INT8U)(tmp & 0xFF);
     4a8:	89 81       	ldd	r24, Y+1	; 0x01
     4aa:	eb 81       	ldd	r30, Y+3	; 0x03
     4ac:	fc 81       	ldd	r31, Y+4	; 0x04
     4ae:	80 83       	st	Z, r24
     4b0:	8b 81       	ldd	r24, Y+3	; 0x03
     4b2:	9c 81       	ldd	r25, Y+4	; 0x04
     4b4:	01 97       	sbiw	r24, 0x01	; 1
     4b6:	9c 83       	std	Y+4, r25	; 0x04
     4b8:	8b 83       	std	Y+3, r24	; 0x03
    tmp = 0x0000;
     4ba:	1a 82       	std	Y+2, r1	; 0x02
     4bc:	19 82       	std	Y+1, r1	; 0x01
    *stk--  = (INT8U)(tmp & 0xFF);
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	eb 81       	ldd	r30, Y+3	; 0x03
     4c2:	fc 81       	ldd	r31, Y+4	; 0x04
     4c4:	80 83       	st	Z, r24
     4c6:	8b 81       	ldd	r24, Y+3	; 0x03
     4c8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ca:	01 97       	sbiw	r24, 0x01	; 1
     4cc:	9c 83       	std	Y+4, r25	; 0x04
     4ce:	8b 83       	std	Y+3, r24	; 0x03

    *stk--  = (INT8U)0x00;            /* R0    = 0x00                                             */
     4d0:	eb 81       	ldd	r30, Y+3	; 0x03
     4d2:	fc 81       	ldd	r31, Y+4	; 0x04
     4d4:	10 82       	st	Z, r1
     4d6:	8b 81       	ldd	r24, Y+3	; 0x03
     4d8:	9c 81       	ldd	r25, Y+4	; 0x04
     4da:	01 97       	sbiw	r24, 0x01	; 1
     4dc:	9c 83       	std	Y+4, r25	; 0x04
     4de:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R1    = 0x00                                             */
     4e0:	eb 81       	ldd	r30, Y+3	; 0x03
     4e2:	fc 81       	ldd	r31, Y+4	; 0x04
     4e4:	10 82       	st	Z, r1
     4e6:	8b 81       	ldd	r24, Y+3	; 0x03
     4e8:	9c 81       	ldd	r25, Y+4	; 0x04
     4ea:	01 97       	sbiw	r24, 0x01	; 1
     4ec:	9c 83       	std	Y+4, r25	; 0x04
     4ee:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R2    = 0x00                                             */
     4f0:	eb 81       	ldd	r30, Y+3	; 0x03
     4f2:	fc 81       	ldd	r31, Y+4	; 0x04
     4f4:	10 82       	st	Z, r1
     4f6:	8b 81       	ldd	r24, Y+3	; 0x03
     4f8:	9c 81       	ldd	r25, Y+4	; 0x04
     4fa:	01 97       	sbiw	r24, 0x01	; 1
     4fc:	9c 83       	std	Y+4, r25	; 0x04
     4fe:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R3    = 0x00                                             */
     500:	eb 81       	ldd	r30, Y+3	; 0x03
     502:	fc 81       	ldd	r31, Y+4	; 0x04
     504:	10 82       	st	Z, r1
     506:	8b 81       	ldd	r24, Y+3	; 0x03
     508:	9c 81       	ldd	r25, Y+4	; 0x04
     50a:	01 97       	sbiw	r24, 0x01	; 1
     50c:	9c 83       	std	Y+4, r25	; 0x04
     50e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R4    = 0x00                                             */
     510:	eb 81       	ldd	r30, Y+3	; 0x03
     512:	fc 81       	ldd	r31, Y+4	; 0x04
     514:	10 82       	st	Z, r1
     516:	8b 81       	ldd	r24, Y+3	; 0x03
     518:	9c 81       	ldd	r25, Y+4	; 0x04
     51a:	01 97       	sbiw	r24, 0x01	; 1
     51c:	9c 83       	std	Y+4, r25	; 0x04
     51e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R5    = 0x00                                             */
     520:	eb 81       	ldd	r30, Y+3	; 0x03
     522:	fc 81       	ldd	r31, Y+4	; 0x04
     524:	10 82       	st	Z, r1
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	9c 83       	std	Y+4, r25	; 0x04
     52e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R6    = 0x00                                             */
     530:	eb 81       	ldd	r30, Y+3	; 0x03
     532:	fc 81       	ldd	r31, Y+4	; 0x04
     534:	10 82       	st	Z, r1
     536:	8b 81       	ldd	r24, Y+3	; 0x03
     538:	9c 81       	ldd	r25, Y+4	; 0x04
     53a:	01 97       	sbiw	r24, 0x01	; 1
     53c:	9c 83       	std	Y+4, r25	; 0x04
     53e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R7    = 0x00                                             */
     540:	eb 81       	ldd	r30, Y+3	; 0x03
     542:	fc 81       	ldd	r31, Y+4	; 0x04
     544:	10 82       	st	Z, r1
     546:	8b 81       	ldd	r24, Y+3	; 0x03
     548:	9c 81       	ldd	r25, Y+4	; 0x04
     54a:	01 97       	sbiw	r24, 0x01	; 1
     54c:	9c 83       	std	Y+4, r25	; 0x04
     54e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R8    = 0x00                                             */
     550:	eb 81       	ldd	r30, Y+3	; 0x03
     552:	fc 81       	ldd	r31, Y+4	; 0x04
     554:	10 82       	st	Z, r1
     556:	8b 81       	ldd	r24, Y+3	; 0x03
     558:	9c 81       	ldd	r25, Y+4	; 0x04
     55a:	01 97       	sbiw	r24, 0x01	; 1
     55c:	9c 83       	std	Y+4, r25	; 0x04
     55e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R9    = 0x00                                             */
     560:	eb 81       	ldd	r30, Y+3	; 0x03
     562:	fc 81       	ldd	r31, Y+4	; 0x04
     564:	10 82       	st	Z, r1
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	01 97       	sbiw	r24, 0x01	; 1
     56c:	9c 83       	std	Y+4, r25	; 0x04
     56e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R10   = 0x00                                             */
     570:	eb 81       	ldd	r30, Y+3	; 0x03
     572:	fc 81       	ldd	r31, Y+4	; 0x04
     574:	10 82       	st	Z, r1
     576:	8b 81       	ldd	r24, Y+3	; 0x03
     578:	9c 81       	ldd	r25, Y+4	; 0x04
     57a:	01 97       	sbiw	r24, 0x01	; 1
     57c:	9c 83       	std	Y+4, r25	; 0x04
     57e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R11   = 0x00                                             */
     580:	eb 81       	ldd	r30, Y+3	; 0x03
     582:	fc 81       	ldd	r31, Y+4	; 0x04
     584:	10 82       	st	Z, r1
     586:	8b 81       	ldd	r24, Y+3	; 0x03
     588:	9c 81       	ldd	r25, Y+4	; 0x04
     58a:	01 97       	sbiw	r24, 0x01	; 1
     58c:	9c 83       	std	Y+4, r25	; 0x04
     58e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R12   = 0x00                                             */
     590:	eb 81       	ldd	r30, Y+3	; 0x03
     592:	fc 81       	ldd	r31, Y+4	; 0x04
     594:	10 82       	st	Z, r1
     596:	8b 81       	ldd	r24, Y+3	; 0x03
     598:	9c 81       	ldd	r25, Y+4	; 0x04
     59a:	01 97       	sbiw	r24, 0x01	; 1
     59c:	9c 83       	std	Y+4, r25	; 0x04
     59e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R13   = 0x00                                             */
     5a0:	eb 81       	ldd	r30, Y+3	; 0x03
     5a2:	fc 81       	ldd	r31, Y+4	; 0x04
     5a4:	10 82       	st	Z, r1
     5a6:	8b 81       	ldd	r24, Y+3	; 0x03
     5a8:	9c 81       	ldd	r25, Y+4	; 0x04
     5aa:	01 97       	sbiw	r24, 0x01	; 1
     5ac:	9c 83       	std	Y+4, r25	; 0x04
     5ae:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R14   = 0x00                                             */
     5b0:	eb 81       	ldd	r30, Y+3	; 0x03
     5b2:	fc 81       	ldd	r31, Y+4	; 0x04
     5b4:	10 82       	st	Z, r1
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	9c 83       	std	Y+4, r25	; 0x04
     5be:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R15   = 0x00                                             */
     5c0:	eb 81       	ldd	r30, Y+3	; 0x03
     5c2:	fc 81       	ldd	r31, Y+4	; 0x04
     5c4:	10 82       	st	Z, r1
     5c6:	8b 81       	ldd	r24, Y+3	; 0x03
     5c8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ca:	01 97       	sbiw	r24, 0x01	; 1
     5cc:	9c 83       	std	Y+4, r25	; 0x04
     5ce:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R16   = 0x00                                             */
     5d0:	eb 81       	ldd	r30, Y+3	; 0x03
     5d2:	fc 81       	ldd	r31, Y+4	; 0x04
     5d4:	10 82       	st	Z, r1
     5d6:	8b 81       	ldd	r24, Y+3	; 0x03
     5d8:	9c 81       	ldd	r25, Y+4	; 0x04
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	9c 83       	std	Y+4, r25	; 0x04
     5de:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R17   = 0x00                                             */
     5e0:	eb 81       	ldd	r30, Y+3	; 0x03
     5e2:	fc 81       	ldd	r31, Y+4	; 0x04
     5e4:	10 82       	st	Z, r1
     5e6:	8b 81       	ldd	r24, Y+3	; 0x03
     5e8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ea:	01 97       	sbiw	r24, 0x01	; 1
     5ec:	9c 83       	std	Y+4, r25	; 0x04
     5ee:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R18   = 0x00                                             */
     5f0:	eb 81       	ldd	r30, Y+3	; 0x03
     5f2:	fc 81       	ldd	r31, Y+4	; 0x04
     5f4:	10 82       	st	Z, r1
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	9c 81       	ldd	r25, Y+4	; 0x04
     5fa:	01 97       	sbiw	r24, 0x01	; 1
     5fc:	9c 83       	std	Y+4, r25	; 0x04
     5fe:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R19   = 0x00                                             */
     600:	eb 81       	ldd	r30, Y+3	; 0x03
     602:	fc 81       	ldd	r31, Y+4	; 0x04
     604:	10 82       	st	Z, r1
     606:	8b 81       	ldd	r24, Y+3	; 0x03
     608:	9c 81       	ldd	r25, Y+4	; 0x04
     60a:	01 97       	sbiw	r24, 0x01	; 1
     60c:	9c 83       	std	Y+4, r25	; 0x04
     60e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R20   = 0x00                                             */
     610:	eb 81       	ldd	r30, Y+3	; 0x03
     612:	fc 81       	ldd	r31, Y+4	; 0x04
     614:	10 82       	st	Z, r1
     616:	8b 81       	ldd	r24, Y+3	; 0x03
     618:	9c 81       	ldd	r25, Y+4	; 0x04
     61a:	01 97       	sbiw	r24, 0x01	; 1
     61c:	9c 83       	std	Y+4, r25	; 0x04
     61e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R21   = 0x00                                             */
     620:	eb 81       	ldd	r30, Y+3	; 0x03
     622:	fc 81       	ldd	r31, Y+4	; 0x04
     624:	10 82       	st	Z, r1
     626:	8b 81       	ldd	r24, Y+3	; 0x03
     628:	9c 81       	ldd	r25, Y+4	; 0x04
     62a:	01 97       	sbiw	r24, 0x01	; 1
     62c:	9c 83       	std	Y+4, r25	; 0x04
     62e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R22   = 0x00                                             */
     630:	eb 81       	ldd	r30, Y+3	; 0x03
     632:	fc 81       	ldd	r31, Y+4	; 0x04
     634:	10 82       	st	Z, r1
     636:	8b 81       	ldd	r24, Y+3	; 0x03
     638:	9c 81       	ldd	r25, Y+4	; 0x04
     63a:	01 97       	sbiw	r24, 0x01	; 1
     63c:	9c 83       	std	Y+4, r25	; 0x04
     63e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R23   = 0x00                                             */
     640:	eb 81       	ldd	r30, Y+3	; 0x03
     642:	fc 81       	ldd	r31, Y+4	; 0x04
     644:	10 82       	st	Z, r1
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	9c 81       	ldd	r25, Y+4	; 0x04
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	8b 83       	std	Y+3, r24	; 0x03
    tmp     = (INT16U)p_arg;
     650:	8f 81       	ldd	r24, Y+7	; 0x07
     652:	98 85       	ldd	r25, Y+8	; 0x08
     654:	9a 83       	std	Y+2, r25	; 0x02
     656:	89 83       	std	Y+1, r24	; 0x01
     *stk--  = (INT8U)tmp;             /* 'p_arg' passed in R24:R25                                */
     658:	89 81       	ldd	r24, Y+1	; 0x01
     65a:	eb 81       	ldd	r30, Y+3	; 0x03
     65c:	fc 81       	ldd	r31, Y+4	; 0x04
     65e:	80 83       	st	Z, r24
     660:	8b 81       	ldd	r24, Y+3	; 0x03
     662:	9c 81       	ldd	r25, Y+4	; 0x04
     664:	01 97       	sbiw	r24, 0x01	; 1
     666:	9c 83       	std	Y+4, r25	; 0x04
     668:	8b 83       	std	Y+3, r24	; 0x03
     *stk--  = (INT8U)(tmp >> 8);
     66a:	89 81       	ldd	r24, Y+1	; 0x01
     66c:	9a 81       	ldd	r25, Y+2	; 0x02
     66e:	89 2f       	mov	r24, r25
     670:	99 27       	eor	r25, r25
     672:	eb 81       	ldd	r30, Y+3	; 0x03
     674:	fc 81       	ldd	r31, Y+4	; 0x04
     676:	80 83       	st	Z, r24
     678:	8b 81       	ldd	r24, Y+3	; 0x03
     67a:	9c 81       	ldd	r25, Y+4	; 0x04
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	9c 83       	std	Y+4, r25	; 0x04
     680:	8b 83       	std	Y+3, r24	; 0x03

    *stk--  = (INT8U)0x00;            /* R26   = 0x00                                             */
     682:	eb 81       	ldd	r30, Y+3	; 0x03
     684:	fc 81       	ldd	r31, Y+4	; 0x04
     686:	10 82       	st	Z, r1
     688:	8b 81       	ldd	r24, Y+3	; 0x03
     68a:	9c 81       	ldd	r25, Y+4	; 0x04
     68c:	01 97       	sbiw	r24, 0x01	; 1
     68e:	9c 83       	std	Y+4, r25	; 0x04
     690:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R27   = 0x00                                             */
     692:	eb 81       	ldd	r30, Y+3	; 0x03
     694:	fc 81       	ldd	r31, Y+4	; 0x04
     696:	10 82       	st	Z, r1
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	9c 81       	ldd	r25, Y+4	; 0x04
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	9c 83       	std	Y+4, r25	; 0x04
     6a0:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R28   = 0x00                                             */
     6a2:	eb 81       	ldd	r30, Y+3	; 0x03
     6a4:	fc 81       	ldd	r31, Y+4	; 0x04
     6a6:	10 82       	st	Z, r1
     6a8:	8b 81       	ldd	r24, Y+3	; 0x03
     6aa:	9c 81       	ldd	r25, Y+4	; 0x04
     6ac:	01 97       	sbiw	r24, 0x01	; 1
     6ae:	9c 83       	std	Y+4, r25	; 0x04
     6b0:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R29   = 0x00                                             */
     6b2:	eb 81       	ldd	r30, Y+3	; 0x03
     6b4:	fc 81       	ldd	r31, Y+4	; 0x04
     6b6:	10 82       	st	Z, r1
     6b8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ba:	9c 81       	ldd	r25, Y+4	; 0x04
     6bc:	01 97       	sbiw	r24, 0x01	; 1
     6be:	9c 83       	std	Y+4, r25	; 0x04
     6c0:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R30   = 0x00                                             */
     6c2:	eb 81       	ldd	r30, Y+3	; 0x03
     6c4:	fc 81       	ldd	r31, Y+4	; 0x04
     6c6:	10 82       	st	Z, r1
     6c8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ca:	9c 81       	ldd	r25, Y+4	; 0x04
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	9c 83       	std	Y+4, r25	; 0x04
     6d0:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R31   = 0x00                                             */
     6d2:	eb 81       	ldd	r30, Y+3	; 0x03
     6d4:	fc 81       	ldd	r31, Y+4	; 0x04
     6d6:	10 82       	st	Z, r1
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	9c 83       	std	Y+4, r25	; 0x04
     6e0:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *stk--  = (INT8U)0x00;            /* RAMPZ = 0x00                                             */
     6e2:	eb 81       	ldd	r30, Y+3	; 0x03
     6e4:	fc 81       	ldd	r31, Y+4	; 0x04
     6e6:	10 82       	st	Z, r1
     6e8:	8b 81       	ldd	r24, Y+3	; 0x03
     6ea:	9c 81       	ldd	r25, Y+4	; 0x04
     6ec:	01 97       	sbiw	r24, 0x01	; 1
     6ee:	9c 83       	std	Y+4, r25	; 0x04
     6f0:	8b 83       	std	Y+3, r24	; 0x03
#endif
    *stk--  = (INT8U)0x80;            /* SREG  = Interrupts enabled                               */
     6f2:	eb 81       	ldd	r30, Y+3	; 0x03
     6f4:	fc 81       	ldd	r31, Y+4	; 0x04
     6f6:	80 e8       	ldi	r24, 0x80	; 128
     6f8:	80 83       	st	Z, r24
     6fa:	8b 81       	ldd	r24, Y+3	; 0x03
     6fc:	9c 81       	ldd	r25, Y+4	; 0x04
     6fe:	01 97       	sbiw	r24, 0x01	; 1
     700:	9c 83       	std	Y+4, r25	; 0x04
     702:	8b 83       	std	Y+3, r24	; 0x03

    return ((OS_STK *)stk);
     704:	8b 81       	ldd	r24, Y+3	; 0x03
     706:	9c 81       	ldd	r25, Y+4	; 0x04
}
     708:	2c 96       	adiw	r28, 0x0c	; 12
     70a:	0f b6       	in	r0, 0x3f	; 63
     70c:	f8 94       	cli
     70e:	de bf       	out	0x3e, r29	; 62
     710:	0f be       	out	0x3f, r0	; 63
     712:	cd bf       	out	0x3d, r28	; 61
     714:	cf 91       	pop	r28
     716:	df 91       	pop	r29
     718:	08 95       	ret

0000071a <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
void  OSTaskSwHook (void)
{
     71a:	df 93       	push	r29
     71c:	cf 93       	push	r28
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskSwHook();
     722:	0e 94 4a 3a 	call	0x7494	; 0x7494 <App_TaskSwHook>
#endif
}
     726:	cf 91       	pop	r28
     728:	df 91       	pop	r29
     72a:	08 95       	ret

0000072c <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSTCBInitHook (OS_TCB *ptcb)
{
     72c:	df 93       	push	r29
     72e:	cf 93       	push	r28
     730:	0f 92       	push	r0
     732:	0f 92       	push	r0
     734:	cd b7       	in	r28, 0x3d	; 61
     736:	de b7       	in	r29, 0x3e	; 62
     738:	9a 83       	std	Y+2, r25	; 0x02
     73a:	89 83       	std	Y+1, r24	; 0x01
#if OS_APP_HOOKS_EN > 0
    App_TCBInitHook(ptcb);
     73c:	89 81       	ldd	r24, Y+1	; 0x01
     73e:	9a 81       	ldd	r25, Y+2	; 0x02
     740:	0e 94 82 3a 	call	0x7504	; 0x7504 <App_TCBInitHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
     744:	0f 90       	pop	r0
     746:	0f 90       	pop	r0
     748:	cf 91       	pop	r28
     74a:	df 91       	pop	r29
     74c:	08 95       	ret

0000074e <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void  OSTimeTickHook (void)
{
     74e:	df 93       	push	r29
     750:	cf 93       	push	r28
     752:	cd b7       	in	r28, 0x3d	; 61
     754:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TimeTickHook();
     756:	0e 94 8f 3a 	call	0x751e	; 0x751e <App_TimeTickHook>
#endif

#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr++;
     75a:	80 91 d0 04 	lds	r24, 0x04D0
     75e:	90 91 d1 04 	lds	r25, 0x04D1
     762:	01 96       	adiw	r24, 0x01	; 1
     764:	90 93 d1 04 	sts	0x04D1, r25
     768:	80 93 d0 04 	sts	0x04D0, r24
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
     76c:	80 91 d0 04 	lds	r24, 0x04D0
     770:	90 91 d1 04 	lds	r25, 0x04D1
     774:	8a 30       	cpi	r24, 0x0A	; 10
     776:	91 05       	cpc	r25, r1
     778:	30 f0       	brcs	.+12     	; 0x786 <OSTimeTickHook+0x38>
        OSTmrCtr = 0;
     77a:	10 92 d1 04 	sts	0x04D1, r1
     77e:	10 92 d0 04 	sts	0x04D0, r1
        OSTmrSignal();
     782:	0e 94 ba 19 	call	0x3374	; 0x3374 <OSTmrSignal>
    }
#endif
}
     786:	cf 91       	pop	r28
     788:	df 91       	pop	r29
     78a:	08 95       	ret

0000078c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_VERSION >= 270 && OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
     78c:	df 93       	push	r29
     78e:	cf 93       	push	r28
     790:	0f 92       	push	r0
     792:	0f 92       	push	r0
     794:	cd b7       	in	r28, 0x3d	; 61
     796:	de b7       	in	r29, 0x3e	; 62
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
     798:	84 ee       	ldi	r24, 0xE4	; 228
     79a:	90 e0       	ldi	r25, 0x00	; 0
     79c:	9a 83       	std	Y+2, r25	; 0x02
     79e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEndiannessTest;
     7a0:	86 ee       	ldi	r24, 0xE6	; 230
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9a 83       	std	Y+2, r25	; 0x02
     7a6:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEventMax;
     7a8:	8a ee       	ldi	r24, 0xEA	; 234
     7aa:	90 e0       	ldi	r25, 0x00	; 0
     7ac:	9a 83       	std	Y+2, r25	; 0x02
     7ae:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventNameSize;
     7b0:	8c ee       	ldi	r24, 0xEC	; 236
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	9a 83       	std	Y+2, r25	; 0x02
     7b6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventEn;
     7b8:	8e ee       	ldi	r24, 0xEE	; 238
     7ba:	90 e0       	ldi	r25, 0x00	; 0
     7bc:	9a 83       	std	Y+2, r25	; 0x02
     7be:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventSize;
     7c0:	80 ef       	ldi	r24, 0xF0	; 240
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	9a 83       	std	Y+2, r25	; 0x02
     7c6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventTblSize;
     7c8:	82 ef       	ldi	r24, 0xF2	; 242
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	9a 83       	std	Y+2, r25	; 0x02
     7ce:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSFlagEn;
     7d0:	84 ef       	ldi	r24, 0xF4	; 244
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	9a 83       	std	Y+2, r25	; 0x02
     7d6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagGrpSize;
     7d8:	86 ef       	ldi	r24, 0xF6	; 246
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	9a 83       	std	Y+2, r25	; 0x02
     7de:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNodeSize;
     7e0:	88 ef       	ldi	r24, 0xF8	; 248
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	9a 83       	std	Y+2, r25	; 0x02
     7e6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagWidth;
     7e8:	8a ef       	ldi	r24, 0xFA	; 250
     7ea:	90 e0       	ldi	r25, 0x00	; 0
     7ec:	9a 83       	std	Y+2, r25	; 0x02
     7ee:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagMax;
     7f0:	8c ef       	ldi	r24, 0xFC	; 252
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9a 83       	std	Y+2, r25	; 0x02
     7f6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNameSize;
     7f8:	8e ef       	ldi	r24, 0xFE	; 254
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9a 83       	std	Y+2, r25	; 0x02
     7fe:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSLowestPrio;
     800:	80 e0       	ldi	r24, 0x00	; 0
     802:	91 e0       	ldi	r25, 0x01	; 1
     804:	9a 83       	std	Y+2, r25	; 0x02
     806:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMboxEn;
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	9a 83       	std	Y+2, r25	; 0x02
     80e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMemEn;
     810:	84 e0       	ldi	r24, 0x04	; 4
     812:	91 e0       	ldi	r25, 0x01	; 1
     814:	9a 83       	std	Y+2, r25	; 0x02
     816:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemMax;
     818:	86 e0       	ldi	r24, 0x06	; 6
     81a:	91 e0       	ldi	r25, 0x01	; 1
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemNameSize;
     820:	88 e0       	ldi	r24, 0x08	; 8
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	9a 83       	std	Y+2, r25	; 0x02
     826:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemSize;
     828:	8a e0       	ldi	r24, 0x0A	; 10
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	9a 83       	std	Y+2, r25	; 0x02
     82e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemTblSize;
     830:	8c e0       	ldi	r24, 0x0C	; 12
     832:	91 e0       	ldi	r25, 0x01	; 1
     834:	9a 83       	std	Y+2, r25	; 0x02
     836:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMutexEn;
     838:	8e e0       	ldi	r24, 0x0E	; 14
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	9a 83       	std	Y+2, r25	; 0x02
     83e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSPtrSize;
     840:	80 e1       	ldi	r24, 0x10	; 16
     842:	91 e0       	ldi	r25, 0x01	; 1
     844:	9a 83       	std	Y+2, r25	; 0x02
     846:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSQEn;
     848:	82 e1       	ldi	r24, 0x12	; 18
     84a:	91 e0       	ldi	r25, 0x01	; 1
     84c:	9a 83       	std	Y+2, r25	; 0x02
     84e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQMax;
     850:	84 e1       	ldi	r24, 0x14	; 20
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	9a 83       	std	Y+2, r25	; 0x02
     856:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQSize;
     858:	86 e1       	ldi	r24, 0x16	; 22
     85a:	91 e0       	ldi	r25, 0x01	; 1
     85c:	9a 83       	std	Y+2, r25	; 0x02
     85e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSRdyTblSize;
     860:	88 e1       	ldi	r24, 0x18	; 24
     862:	91 e0       	ldi	r25, 0x01	; 1
     864:	9a 83       	std	Y+2, r25	; 0x02
     866:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSSemEn;
     868:	8a e1       	ldi	r24, 0x1A	; 26
     86a:	91 e0       	ldi	r25, 0x01	; 1
     86c:	9a 83       	std	Y+2, r25	; 0x02
     86e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSStkWidth;
     870:	8c e1       	ldi	r24, 0x1C	; 28
     872:	91 e0       	ldi	r25, 0x01	; 1
     874:	9a 83       	std	Y+2, r25	; 0x02
     876:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTaskCreateEn;
     878:	8e e1       	ldi	r24, 0x1E	; 30
     87a:	91 e0       	ldi	r25, 0x01	; 1
     87c:	9a 83       	std	Y+2, r25	; 0x02
     87e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskCreateExtEn;
     880:	80 e2       	ldi	r24, 0x20	; 32
     882:	91 e0       	ldi	r25, 0x01	; 1
     884:	9a 83       	std	Y+2, r25	; 0x02
     886:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskDelEn;
     888:	82 e2       	ldi	r24, 0x22	; 34
     88a:	91 e0       	ldi	r25, 0x01	; 1
     88c:	9a 83       	std	Y+2, r25	; 0x02
     88e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskIdleStkSize;
     890:	84 e2       	ldi	r24, 0x24	; 36
     892:	91 e0       	ldi	r25, 0x01	; 1
     894:	9a 83       	std	Y+2, r25	; 0x02
     896:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskProfileEn;
     898:	86 e2       	ldi	r24, 0x26	; 38
     89a:	91 e0       	ldi	r25, 0x01	; 1
     89c:	9a 83       	std	Y+2, r25	; 0x02
     89e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskMax;
     8a0:	88 e2       	ldi	r24, 0x28	; 40
     8a2:	91 e0       	ldi	r25, 0x01	; 1
     8a4:	9a 83       	std	Y+2, r25	; 0x02
     8a6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskNameSize;
     8a8:	8a e2       	ldi	r24, 0x2A	; 42
     8aa:	91 e0       	ldi	r25, 0x01	; 1
     8ac:	9a 83       	std	Y+2, r25	; 0x02
     8ae:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatEn;
     8b0:	8c e2       	ldi	r24, 0x2C	; 44
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	9a 83       	std	Y+2, r25	; 0x02
     8b6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkSize;
     8b8:	8e e2       	ldi	r24, 0x2E	; 46
     8ba:	91 e0       	ldi	r25, 0x01	; 1
     8bc:	9a 83       	std	Y+2, r25	; 0x02
     8be:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkChkEn;
     8c0:	80 e3       	ldi	r24, 0x30	; 48
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	9a 83       	std	Y+2, r25	; 0x02
     8c6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskSwHookEn;
     8c8:	82 e3       	ldi	r24, 0x32	; 50
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	9a 83       	std	Y+2, r25	; 0x02
     8ce:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTCBPrioTblMax;
     8d0:	84 e3       	ldi	r24, 0x34	; 52
     8d2:	91 e0       	ldi	r25, 0x01	; 1
     8d4:	9a 83       	std	Y+2, r25	; 0x02
     8d6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTCBSize;
     8d8:	86 e3       	ldi	r24, 0x36	; 54
     8da:	91 e0       	ldi	r25, 0x01	; 1
     8dc:	9a 83       	std	Y+2, r25	; 0x02
     8de:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTicksPerSec;
     8e0:	88 e3       	ldi	r24, 0x38	; 56
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	9a 83       	std	Y+2, r25	; 0x02
     8e6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTimeTickHookEn;
     8e8:	8a e3       	ldi	r24, 0x3A	; 58
     8ea:	91 e0       	ldi	r25, 0x01	; 1
     8ec:	9a 83       	std	Y+2, r25	; 0x02
     8ee:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSVersionNbr;
     8f0:	8c e3       	ldi	r24, 0x3C	; 60
     8f2:	91 e0       	ldi	r25, 0x01	; 1
     8f4:	9a 83       	std	Y+2, r25	; 0x02
     8f6:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSDataSize;
     8f8:	8e e3       	ldi	r24, 0x3E	; 62
     8fa:	91 e0       	ldi	r25, 0x01	; 1
     8fc:	9a 83       	std	Y+2, r25	; 0x02
     8fe:	89 83       	std	Y+1, r24	; 0x01

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	cf 91       	pop	r28
     906:	df 91       	pop	r29
     908:	08 95       	ret

0000090a <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     90a:	df 93       	push	r29
     90c:	cf 93       	push	r28
     90e:	cd b7       	in	r28, 0x3d	; 61
     910:	de b7       	in	r29, 0x3e	; 62
     912:	29 97       	sbiw	r28, 0x09	; 9
     914:	0f b6       	in	r0, 0x3f	; 63
     916:	f8 94       	cli
     918:	de bf       	out	0x3e, r29	; 62
     91a:	0f be       	out	0x3f, r0	; 63
     91c:	cd bf       	out	0x3d, r28	; 61
     91e:	9c 83       	std	Y+4, r25	; 0x04
     920:	8b 83       	std	Y+3, r24	; 0x03
     922:	7e 83       	std	Y+6, r23	; 0x06
     924:	6d 83       	std	Y+5, r22	; 0x05
     926:	58 87       	std	Y+8, r21	; 0x08
     928:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     92a:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     92c:	80 91 4c 08 	lds	r24, 0x084C
     930:	88 23       	and	r24, r24
     932:	31 f0       	breq	.+12     	; 0x940 <OSEventNameGet+0x36>
        *perr  = OS_ERR_NAME_GET_ISR;
     934:	ef 81       	ldd	r30, Y+7	; 0x07
     936:	f8 85       	ldd	r31, Y+8	; 0x08
     938:	81 e1       	ldi	r24, 0x11	; 17
     93a:	80 83       	st	Z, r24
        return (0);
     93c:	19 86       	std	Y+9, r1	; 0x09
     93e:	25 c0       	rjmp	.+74     	; 0x98a <OSEventNameGet+0x80>
    }
    switch (pevent->OSEventType) {
     940:	eb 81       	ldd	r30, Y+3	; 0x03
     942:	fc 81       	ldd	r31, Y+4	; 0x04
     944:	80 81       	ld	r24, Z
     946:	88 2f       	mov	r24, r24
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	01 97       	sbiw	r24, 0x01	; 1
     94c:	84 30       	cpi	r24, 0x04	; 4
     94e:	91 05       	cpc	r25, r1
     950:	b8 f4       	brcc	.+46     	; 0x980 <OSEventNameGet+0x76>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
     952:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     956:	89 83       	std	Y+1, r24	; 0x01
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
     958:	8b 81       	ldd	r24, Y+3	; 0x03
     95a:	9c 81       	ldd	r25, Y+4	; 0x04
     95c:	9c 01       	movw	r18, r24
     95e:	28 5f       	subi	r18, 0xF8	; 248
     960:	3f 4f       	sbci	r19, 0xFF	; 255
     962:	8d 81       	ldd	r24, Y+5	; 0x05
     964:	9e 81       	ldd	r25, Y+6	; 0x06
     966:	b9 01       	movw	r22, r18
     968:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OS_StrCopy>
     96c:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
     974:	ef 81       	ldd	r30, Y+7	; 0x07
     976:	f8 85       	ldd	r31, Y+8	; 0x08
     978:	10 82       	st	Z, r1
    return (len);
     97a:	8a 81       	ldd	r24, Y+2	; 0x02
     97c:	89 87       	std	Y+9, r24	; 0x09
     97e:	05 c0       	rjmp	.+10     	; 0x98a <OSEventNameGet+0x80>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     980:	ef 81       	ldd	r30, Y+7	; 0x07
     982:	f8 85       	ldd	r31, Y+8	; 0x08
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	80 83       	st	Z, r24
             return (0);
     988:	19 86       	std	Y+9, r1	; 0x09
     98a:	89 85       	ldd	r24, Y+9	; 0x09
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
     98c:	29 96       	adiw	r28, 0x09	; 9
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	f8 94       	cli
     992:	de bf       	out	0x3e, r29	; 62
     994:	0f be       	out	0x3f, r0	; 63
     996:	cd bf       	out	0x3d, r28	; 61
     998:	cf 91       	pop	r28
     99a:	df 91       	pop	r29
     99c:	08 95       	ret

0000099e <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     99e:	df 93       	push	r29
     9a0:	cf 93       	push	r28
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	28 97       	sbiw	r28, 0x08	; 8
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
     9b2:	9c 83       	std	Y+4, r25	; 0x04
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	7e 83       	std	Y+6, r23	; 0x06
     9b8:	6d 83       	std	Y+5, r22	; 0x05
     9ba:	58 87       	std	Y+8, r21	; 0x08
     9bc:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     9be:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     9c0:	80 91 4c 08 	lds	r24, 0x084C
     9c4:	88 23       	and	r24, r24
     9c6:	29 f0       	breq	.+10     	; 0x9d2 <OSEventNameSet+0x34>
        *perr = OS_ERR_NAME_SET_ISR;
     9c8:	ef 81       	ldd	r30, Y+7	; 0x07
     9ca:	f8 85       	ldd	r31, Y+8	; 0x08
     9cc:	82 e1       	ldi	r24, 0x12	; 18
     9ce:	80 83       	st	Z, r24
     9d0:	30 c0       	rjmp	.+96     	; 0xa32 <OSEventNameSet+0x94>
        return;
    }
    switch (pevent->OSEventType) {
     9d2:	eb 81       	ldd	r30, Y+3	; 0x03
     9d4:	fc 81       	ldd	r31, Y+4	; 0x04
     9d6:	80 81       	ld	r24, Z
     9d8:	88 2f       	mov	r24, r24
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	01 97       	sbiw	r24, 0x01	; 1
     9de:	84 30       	cpi	r24, 0x04	; 4
     9e0:	91 05       	cpc	r25, r1
     9e2:	60 f4       	brcc	.+24     	; 0x9fc <OSEventNameSet+0x5e>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
     9e4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     9e8:	89 83       	std	Y+1, r24	; 0x01
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
     9ea:	8d 81       	ldd	r24, Y+5	; 0x05
     9ec:	9e 81       	ldd	r25, Y+6	; 0x06
     9ee:	0e 94 8e 0a 	call	0x151c	; 0x151c <OS_StrLen>
     9f2:	8a 83       	std	Y+2, r24	; 0x02
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
     9f4:	8a 81       	ldd	r24, Y+2	; 0x02
     9f6:	80 31       	cpi	r24, 0x10	; 16
     9f8:	30 f4       	brcc	.+12     	; 0xa06 <OSEventNameSet+0x68>
     9fa:	0d c0       	rjmp	.+26     	; 0xa16 <OSEventNameSet+0x78>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     9fc:	ef 81       	ldd	r30, Y+7	; 0x07
     9fe:	f8 85       	ldd	r31, Y+8	; 0x08
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 83       	st	Z, r24
     a04:	16 c0       	rjmp	.+44     	; 0xa32 <OSEventNameSet+0x94>
             return;
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
     a0c:	ef 81       	ldd	r30, Y+7	; 0x07
     a0e:	f8 85       	ldd	r31, Y+8	; 0x08
     a10:	8b e0       	ldi	r24, 0x0B	; 11
     a12:	80 83       	st	Z, r24
     a14:	0e c0       	rjmp	.+28     	; 0xa32 <OSEventNameSet+0x94>
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	08 96       	adiw	r24, 0x08	; 8
     a1c:	2d 81       	ldd	r18, Y+5	; 0x05
     a1e:	3e 81       	ldd	r19, Y+6	; 0x06
     a20:	b9 01       	movw	r22, r18
     a22:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OS_StrCopy>
    OS_EXIT_CRITICAL();
     a26:	89 81       	ldd	r24, Y+1	; 0x01
     a28:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
     a2c:	ef 81       	ldd	r30, Y+7	; 0x07
     a2e:	f8 85       	ldd	r31, Y+8	; 0x08
     a30:	10 82       	st	Z, r1
}
     a32:	28 96       	adiw	r28, 0x08	; 8
     a34:	0f b6       	in	r0, 0x3f	; 63
     a36:	f8 94       	cli
     a38:	de bf       	out	0x3e, r29	; 62
     a3a:	0f be       	out	0x3f, r0	; 63
     a3c:	cd bf       	out	0x3d, r28	; 61
     a3e:	cf 91       	pop	r28
     a40:	df 91       	pop	r29
     a42:	08 95       	ret

00000a44 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
     a44:	df 93       	push	r29
     a46:	cf 93       	push	r28
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
    OSInitHookBegin();                                           /* Call port specific initialization code   */
     a4c:	0e 94 e5 01 	call	0x3ca	; 0x3ca <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
     a50:	0e 94 98 08 	call	0x1130	; 0x1130 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
     a54:	0e 94 bf 08 	call	0x117e	; 0x117e <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
     a58:	0e 94 39 09 	call	0x1272	; 0x1272 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
     a5c:	0e 94 40 08 	call	0x1080	; 0x1080 <OS_InitEventList>

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
     a60:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
     a64:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
     a68:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
     a6c:	0e 94 c6 03 	call	0x78c	; 0x78c <OSDebugInit>
#endif
}
     a70:	cf 91       	pop	r28
     a72:	df 91       	pop	r29
     a74:	08 95       	ret

00000a76 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
     a76:	df 93       	push	r29
     a78:	cf 93       	push	r28
     a7a:	cd b7       	in	r28, 0x3d	; 61
     a7c:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_TRUE) {
     a7e:	80 91 12 05 	lds	r24, 0x0512
     a82:	81 30       	cpi	r24, 0x01	; 1
     a84:	49 f4       	brne	.+18     	; 0xa98 <OSIntEnter+0x22>
        if (OSIntNesting < 255u) {
     a86:	80 91 4c 08 	lds	r24, 0x084C
     a8a:	8f 3f       	cpi	r24, 0xFF	; 255
     a8c:	29 f0       	breq	.+10     	; 0xa98 <OSIntEnter+0x22>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
     a8e:	80 91 4c 08 	lds	r24, 0x084C
     a92:	8f 5f       	subi	r24, 0xFF	; 255
     a94:	80 93 4c 08 	sts	0x084C, r24
        }
    }
}
     a98:	cf 91       	pop	r28
     a9a:	df 91       	pop	r29
     a9c:	08 95       	ret

00000a9e <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	0f 92       	push	r0
     aa4:	cd b7       	in	r28, 0x3d	; 61
     aa6:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
     aa8:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {
     aaa:	80 91 12 05 	lds	r24, 0x0512
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	09 f0       	breq	.+2      	; 0xab4 <OSIntExit+0x16>
     ab2:	53 c0       	rjmp	.+166    	; 0xb5a <OSIntExit+0xbc>
        OS_ENTER_CRITICAL();
     ab4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     ab8:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
     aba:	80 91 4c 08 	lds	r24, 0x084C
     abe:	88 23       	and	r24, r24
     ac0:	29 f0       	breq	.+10     	; 0xacc <OSIntExit+0x2e>
            OSIntNesting--;
     ac2:	80 91 4c 08 	lds	r24, 0x084C
     ac6:	81 50       	subi	r24, 0x01	; 1
     ac8:	80 93 4c 08 	sts	0x084C, r24
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
     acc:	80 91 4c 08 	lds	r24, 0x084C
     ad0:	88 23       	and	r24, r24
     ad2:	09 f0       	breq	.+2      	; 0xad6 <OSIntExit+0x38>
     ad4:	3f c0       	rjmp	.+126    	; 0xb54 <OSIntExit+0xb6>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
     ad6:	80 91 0f 05 	lds	r24, 0x050F
     ada:	88 23       	and	r24, r24
     adc:	d9 f5       	brne	.+118    	; 0xb54 <OSIntExit+0xb6>
                OS_SchedNew();
     ade:	0e 94 36 0a 	call	0x146c	; 0x146c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
     ae2:	90 91 19 05 	lds	r25, 0x0519
     ae6:	80 91 8a 07 	lds	r24, 0x078A
     aea:	98 17       	cp	r25, r24
     aec:	99 f1       	breq	.+102    	; 0xb54 <OSIntExit+0xb6>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
     aee:	80 91 19 05 	lds	r24, 0x0519
     af2:	88 2f       	mov	r24, r24
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	88 0f       	add	r24, r24
     af8:	99 1f       	adc	r25, r25
     afa:	fc 01       	movw	r30, r24
     afc:	e0 51       	subi	r30, 0x10	; 16
     afe:	f4 4f       	sbci	r31, 0xF4	; 244
     b00:	80 81       	ld	r24, Z
     b02:	91 81       	ldd	r25, Z+1	; 0x01
     b04:	90 93 97 07 	sts	0x0797, r25
     b08:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
     b0c:	e0 91 96 07 	lds	r30, 0x0796
     b10:	f0 91 97 07 	lds	r31, 0x0797
     b14:	85 8d       	ldd	r24, Z+29	; 0x1d
     b16:	96 8d       	ldd	r25, Z+30	; 0x1e
     b18:	a7 8d       	ldd	r26, Z+31	; 0x1f
     b1a:	b0 a1       	ldd	r27, Z+32	; 0x20
     b1c:	01 96       	adiw	r24, 0x01	; 1
     b1e:	a1 1d       	adc	r26, r1
     b20:	b1 1d       	adc	r27, r1
     b22:	85 8f       	std	Z+29, r24	; 0x1d
     b24:	96 8f       	std	Z+30, r25	; 0x1e
     b26:	a7 8f       	std	Z+31, r26	; 0x1f
     b28:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
     b2a:	80 91 8d 07 	lds	r24, 0x078D
     b2e:	90 91 8e 07 	lds	r25, 0x078E
     b32:	a0 91 8f 07 	lds	r26, 0x078F
     b36:	b0 91 90 07 	lds	r27, 0x0790
     b3a:	01 96       	adiw	r24, 0x01	; 1
     b3c:	a1 1d       	adc	r26, r1
     b3e:	b1 1d       	adc	r27, r1
     b40:	80 93 8d 07 	sts	0x078D, r24
     b44:	90 93 8e 07 	sts	0x078E, r25
     b48:	a0 93 8f 07 	sts	0x078F, r26
     b4c:	b0 93 90 07 	sts	0x0790, r27
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
     b50:	0e 94 87 01 	call	0x30e	; 0x30e <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
     b54:	89 81       	ldd	r24, Y+1	; 0x01
     b56:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
     b5a:	0f 90       	pop	r0
     b5c:	cf 91       	pop	r28
     b5e:	df 91       	pop	r29
     b60:	08 95       	ret

00000b62 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
     b62:	df 93       	push	r29
     b64:	cf 93       	push	r28
     b66:	0f 92       	push	r0
     b68:	cd b7       	in	r28, 0x3d	; 61
     b6a:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     b6c:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
     b6e:	80 91 12 05 	lds	r24, 0x0512
     b72:	81 30       	cpi	r24, 0x01	; 1
     b74:	99 f4       	brne	.+38     	; 0xb9c <OSSchedLock+0x3a>
        OS_ENTER_CRITICAL();
     b76:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     b7a:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
     b7c:	80 91 4c 08 	lds	r24, 0x084C
     b80:	88 23       	and	r24, r24
     b82:	49 f4       	brne	.+18     	; 0xb96 <OSSchedLock+0x34>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
     b84:	80 91 0f 05 	lds	r24, 0x050F
     b88:	8f 3f       	cpi	r24, 0xFF	; 255
     b8a:	29 f0       	breq	.+10     	; 0xb96 <OSSchedLock+0x34>
                OSLockNesting++;                 /* Increment lock nesting level                       */
     b8c:	80 91 0f 05 	lds	r24, 0x050F
     b90:	8f 5f       	subi	r24, 0xFF	; 255
     b92:	80 93 0f 05 	sts	0x050F, r24
            }
        }
        OS_EXIT_CRITICAL();
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
     b9c:	0f 90       	pop	r0
     b9e:	cf 91       	pop	r28
     ba0:	df 91       	pop	r29
     ba2:	08 95       	ret

00000ba4 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
     ba4:	df 93       	push	r29
     ba6:	cf 93       	push	r28
     ba8:	0f 92       	push	r0
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
     bae:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
     bb0:	80 91 12 05 	lds	r24, 0x0512
     bb4:	81 30       	cpi	r24, 0x01	; 1
     bb6:	29 f5       	brne	.+74     	; 0xc02 <OSSchedUnlock+0x5e>
        OS_ENTER_CRITICAL();
     bb8:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     bbc:	89 83       	std	Y+1, r24	; 0x01
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
     bbe:	80 91 0f 05 	lds	r24, 0x050F
     bc2:	88 23       	and	r24, r24
     bc4:	d9 f0       	breq	.+54     	; 0xbfc <OSSchedUnlock+0x58>
            OSLockNesting--;                               /* Decrement lock nesting level             */
     bc6:	80 91 0f 05 	lds	r24, 0x050F
     bca:	81 50       	subi	r24, 0x01	; 1
     bcc:	80 93 0f 05 	sts	0x050F, r24
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
     bd0:	80 91 0f 05 	lds	r24, 0x050F
     bd4:	88 23       	and	r24, r24
     bd6:	71 f4       	brne	.+28     	; 0xbf4 <OSSchedUnlock+0x50>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
     bd8:	80 91 4c 08 	lds	r24, 0x084C
     bdc:	88 23       	and	r24, r24
     bde:	31 f4       	brne	.+12     	; 0xbec <OSSchedUnlock+0x48>
                    OS_EXIT_CRITICAL();
     be0:	89 81       	ldd	r24, Y+1	; 0x01
     be2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
     be6:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
     bea:	0b c0       	rjmp	.+22     	; 0xc02 <OSSchedUnlock+0x5e>
                } else {
                    OS_EXIT_CRITICAL();
     bec:	89 81       	ldd	r24, Y+1	; 0x01
     bee:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
     bf2:	07 c0       	rjmp	.+14     	; 0xc02 <OSSchedUnlock+0x5e>
                }
            } else {
                OS_EXIT_CRITICAL();
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
     bfa:	03 c0       	rjmp	.+6      	; 0xc02 <OSSchedUnlock+0x5e>
            }
        } else {
            OS_EXIT_CRITICAL();
     bfc:	89 81       	ldd	r24, Y+1	; 0x01
     bfe:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
    }
}
     c02:	0f 90       	pop	r0
     c04:	cf 91       	pop	r28
     c06:	df 91       	pop	r29
     c08:	08 95       	ret

00000c0a <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
     c0a:	df 93       	push	r29
     c0c:	cf 93       	push	r28
     c0e:	cd b7       	in	r28, 0x3d	; 61
     c10:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_FALSE) {
     c12:	80 91 12 05 	lds	r24, 0x0512
     c16:	88 23       	and	r24, r24
     c18:	f9 f4       	brne	.+62     	; 0xc58 <OSStart+0x4e>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
     c1a:	0e 94 36 0a 	call	0x146c	; 0x146c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
     c1e:	80 91 19 05 	lds	r24, 0x0519
     c22:	80 93 8a 07 	sts	0x078A, r24
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     c26:	80 91 19 05 	lds	r24, 0x0519
     c2a:	88 2f       	mov	r24, r24
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	88 0f       	add	r24, r24
     c30:	99 1f       	adc	r25, r25
     c32:	fc 01       	movw	r30, r24
     c34:	e0 51       	subi	r30, 0x10	; 16
     c36:	f4 4f       	sbci	r31, 0xF4	; 244
     c38:	80 81       	ld	r24, Z
     c3a:	91 81       	ldd	r25, Z+1	; 0x01
     c3c:	90 93 97 07 	sts	0x0797, r25
     c40:	80 93 96 07 	sts	0x0796, r24
        OSTCBCur      = OSTCBHighRdy;
     c44:	80 91 96 07 	lds	r24, 0x0796
     c48:	90 91 97 07 	lds	r25, 0x0797
     c4c:	90 93 4e 08 	sts	0x084E, r25
     c50:	80 93 4d 08 	sts	0x084D, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
     c54:	0e 94 c8 00 	call	0x190	; 0x190 <OSStartHighRdy>
    }
}
     c58:	cf 91       	pop	r28
     c5a:	df 91       	pop	r29
     c5c:	08 95       	ret

00000c5e <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
     c5e:	df 93       	push	r29
     c60:	cf 93       	push	r28
     c62:	00 d0       	rcall	.+0      	; 0xc64 <OSTimeTick+0x6>
     c64:	cd b7       	in	r28, 0x3d	; 61
     c66:	de b7       	in	r29, 0x3e	; 62
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
     c68:	19 82       	std	Y+1, r1	; 0x01
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
     c6a:	0e 94 a7 03 	call	0x74e	; 0x74e <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
     c6e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     c72:	89 83       	std	Y+1, r24	; 0x01
    OSTime++;
     c74:	80 91 53 08 	lds	r24, 0x0853
     c78:	90 91 54 08 	lds	r25, 0x0854
     c7c:	a0 91 55 08 	lds	r26, 0x0855
     c80:	b0 91 56 08 	lds	r27, 0x0856
     c84:	01 96       	adiw	r24, 0x01	; 1
     c86:	a1 1d       	adc	r26, r1
     c88:	b1 1d       	adc	r27, r1
     c8a:	80 93 53 08 	sts	0x0853, r24
     c8e:	90 93 54 08 	sts	0x0854, r25
     c92:	a0 93 55 08 	sts	0x0855, r26
     c96:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
     c9a:	89 81       	ldd	r24, Y+1	; 0x01
     c9c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
     ca0:	80 91 12 05 	lds	r24, 0x0512
     ca4:	81 30       	cpi	r24, 0x01	; 1
     ca6:	09 f0       	breq	.+2      	; 0xcaa <OSTimeTick+0x4c>
     ca8:	6f c0       	rjmp	.+222    	; 0xd88 <OSTimeTick+0x12a>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
     caa:	80 91 8b 07 	lds	r24, 0x078B
     cae:	90 91 8c 07 	lds	r25, 0x078C
     cb2:	9b 83       	std	Y+3, r25	; 0x03
     cb4:	8a 83       	std	Y+2, r24	; 0x02
     cb6:	62 c0       	rjmp	.+196    	; 0xd7c <OSTimeTick+0x11e>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
     cb8:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     cbc:	89 83       	std	Y+1, r24	; 0x01
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
     cbe:	ea 81       	ldd	r30, Y+2	; 0x02
     cc0:	fb 81       	ldd	r31, Y+3	; 0x03
     cc2:	84 89       	ldd	r24, Z+20	; 0x14
     cc4:	95 89       	ldd	r25, Z+21	; 0x15
     cc6:	00 97       	sbiw	r24, 0x00	; 0
     cc8:	09 f4       	brne	.+2      	; 0xccc <OSTimeTick+0x6e>
     cca:	4f c0       	rjmp	.+158    	; 0xd6a <OSTimeTick+0x10c>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
     ccc:	ea 81       	ldd	r30, Y+2	; 0x02
     cce:	fb 81       	ldd	r31, Y+3	; 0x03
     cd0:	84 89       	ldd	r24, Z+20	; 0x14
     cd2:	95 89       	ldd	r25, Z+21	; 0x15
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	ea 81       	ldd	r30, Y+2	; 0x02
     cd8:	fb 81       	ldd	r31, Y+3	; 0x03
     cda:	95 8b       	std	Z+21, r25	; 0x15
     cdc:	84 8b       	std	Z+20, r24	; 0x14
     cde:	ea 81       	ldd	r30, Y+2	; 0x02
     ce0:	fb 81       	ldd	r31, Y+3	; 0x03
     ce2:	84 89       	ldd	r24, Z+20	; 0x14
     ce4:	95 89       	ldd	r25, Z+21	; 0x15
     ce6:	00 97       	sbiw	r24, 0x00	; 0
     ce8:	09 f0       	breq	.+2      	; 0xcec <OSTimeTick+0x8e>
     cea:	3f c0       	rjmp	.+126    	; 0xd6a <OSTimeTick+0x10c>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
     cec:	ea 81       	ldd	r30, Y+2	; 0x02
     cee:	fb 81       	ldd	r31, Y+3	; 0x03
     cf0:	86 89       	ldd	r24, Z+22	; 0x16
     cf2:	88 2f       	mov	r24, r24
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	87 73       	andi	r24, 0x37	; 55
     cf8:	90 70       	andi	r25, 0x00	; 0
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	61 f0       	breq	.+24     	; 0xd16 <OSTimeTick+0xb8>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
     cfe:	ea 81       	ldd	r30, Y+2	; 0x02
     d00:	fb 81       	ldd	r31, Y+3	; 0x03
     d02:	86 89       	ldd	r24, Z+22	; 0x16
     d04:	88 7c       	andi	r24, 0xC8	; 200
     d06:	ea 81       	ldd	r30, Y+2	; 0x02
     d08:	fb 81       	ldd	r31, Y+3	; 0x03
     d0a:	86 8b       	std	Z+22, r24	; 0x16
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
     d0c:	ea 81       	ldd	r30, Y+2	; 0x02
     d0e:	fb 81       	ldd	r31, Y+3	; 0x03
     d10:	81 e0       	ldi	r24, 0x01	; 1
     d12:	87 8b       	std	Z+23, r24	; 0x17
     d14:	03 c0       	rjmp	.+6      	; 0xd1c <OSTimeTick+0xbe>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
     d16:	ea 81       	ldd	r30, Y+2	; 0x02
     d18:	fb 81       	ldd	r31, Y+3	; 0x03
     d1a:	17 8a       	std	Z+23, r1	; 0x17
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
     d1c:	ea 81       	ldd	r30, Y+2	; 0x02
     d1e:	fb 81       	ldd	r31, Y+3	; 0x03
     d20:	86 89       	ldd	r24, Z+22	; 0x16
     d22:	88 2f       	mov	r24, r24
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	88 70       	andi	r24, 0x08	; 8
     d28:	90 70       	andi	r25, 0x00	; 0
     d2a:	00 97       	sbiw	r24, 0x00	; 0
     d2c:	f1 f4       	brne	.+60     	; 0xd6a <OSTimeTick+0x10c>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
     d2e:	ea 81       	ldd	r30, Y+2	; 0x02
     d30:	fb 81       	ldd	r31, Y+3	; 0x03
     d32:	94 8d       	ldd	r25, Z+28	; 0x1c
     d34:	80 91 98 07 	lds	r24, 0x0798
     d38:	89 2b       	or	r24, r25
     d3a:	80 93 98 07 	sts	0x0798, r24
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     d3e:	ea 81       	ldd	r30, Y+2	; 0x02
     d40:	fb 81       	ldd	r31, Y+3	; 0x03
     d42:	82 8d       	ldd	r24, Z+26	; 0x1a
     d44:	28 2f       	mov	r18, r24
     d46:	30 e0       	ldi	r19, 0x00	; 0
     d48:	ea 81       	ldd	r30, Y+2	; 0x02
     d4a:	fb 81       	ldd	r31, Y+3	; 0x03
     d4c:	82 8d       	ldd	r24, Z+26	; 0x1a
     d4e:	88 2f       	mov	r24, r24
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	fc 01       	movw	r30, r24
     d54:	e7 56       	subi	r30, 0x67	; 103
     d56:	f8 4f       	sbci	r31, 0xF8	; 248
     d58:	90 81       	ld	r25, Z
     d5a:	ea 81       	ldd	r30, Y+2	; 0x02
     d5c:	fb 81       	ldd	r31, Y+3	; 0x03
     d5e:	83 8d       	ldd	r24, Z+27	; 0x1b
     d60:	89 2b       	or	r24, r25
     d62:	f9 01       	movw	r30, r18
     d64:	e7 56       	subi	r30, 0x67	; 103
     d66:	f8 4f       	sbci	r31, 0xF8	; 248
     d68:	80 83       	st	Z, r24
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
     d6a:	ea 81       	ldd	r30, Y+2	; 0x02
     d6c:	fb 81       	ldd	r31, Y+3	; 0x03
     d6e:	86 85       	ldd	r24, Z+14	; 0x0e
     d70:	97 85       	ldd	r25, Z+15	; 0x0f
     d72:	9b 83       	std	Y+3, r25	; 0x03
     d74:	8a 83       	std	Y+2, r24	; 0x02
            OS_EXIT_CRITICAL();
     d76:	89 81       	ldd	r24, Y+1	; 0x01
     d78:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
     d7c:	ea 81       	ldd	r30, Y+2	; 0x02
     d7e:	fb 81       	ldd	r31, Y+3	; 0x03
     d80:	80 8d       	ldd	r24, Z+24	; 0x18
     d82:	8a 30       	cpi	r24, 0x0A	; 10
     d84:	09 f0       	breq	.+2      	; 0xd88 <OSTimeTick+0x12a>
     d86:	98 cf       	rjmp	.-208    	; 0xcb8 <OSTimeTick+0x5a>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
     d88:	0f 90       	pop	r0
     d8a:	0f 90       	pop	r0
     d8c:	0f 90       	pop	r0
     d8e:	cf 91       	pop	r28
     d90:	df 91       	pop	r29
     d92:	08 95       	ret

00000d94 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
     d94:	df 93       	push	r29
     d96:	cf 93       	push	r28
     d98:	cd b7       	in	r28, 0x3d	; 61
     d9a:	de b7       	in	r29, 0x3e	; 62
    return (OS_VERSION);
     d9c:	8e e1       	ldi	r24, 0x1E	; 30
     d9e:	91 e0       	ldi	r25, 0x01	; 1
}
     da0:	cf 91       	pop	r28
     da2:	df 91       	pop	r29
     da4:	08 95       	ret

00000da6 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
     da6:	df 93       	push	r29
     da8:	cf 93       	push	r28
     daa:	cd b7       	in	r28, 0x3d	; 61
     dac:	de b7       	in	r29, 0x3e	; 62
     dae:	2b 97       	sbiw	r28, 0x0b	; 11
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	9f 83       	std	Y+7, r25	; 0x07
     dbc:	8e 83       	std	Y+6, r24	; 0x06
     dbe:	79 87       	std	Y+9, r23	; 0x09
     dc0:	68 87       	std	Y+8, r22	; 0x08
     dc2:	4a 87       	std	Y+10, r20	; 0x0a
     dc4:	2b 87       	std	Y+11, r18	; 0x0b
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
     dc6:	ee 81       	ldd	r30, Y+6	; 0x06
     dc8:	ff 81       	ldd	r31, Y+7	; 0x07
     dca:	85 81       	ldd	r24, Z+5	; 0x05
     dcc:	88 2f       	mov	r24, r24
     dce:	90 e0       	ldi	r25, 0x00	; 0
     dd0:	fc 01       	movw	r30, r24
     dd2:	e0 50       	subi	r30, 0x00	; 0
     dd4:	fe 4f       	sbci	r31, 0xFE	; 254
     dd6:	80 81       	ld	r24, Z
     dd8:	8b 83       	std	Y+3, r24	; 0x03
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     dda:	8b 81       	ldd	r24, Y+3	; 0x03
     ddc:	28 2f       	mov	r18, r24
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	9f 81       	ldd	r25, Y+7	; 0x07
     de4:	82 0f       	add	r24, r18
     de6:	93 1f       	adc	r25, r19
     de8:	fc 01       	movw	r30, r24
     dea:	36 96       	adiw	r30, 0x06	; 6
     dec:	80 81       	ld	r24, Z
     dee:	88 2f       	mov	r24, r24
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	fc 01       	movw	r30, r24
     df4:	e0 50       	subi	r30, 0x00	; 0
     df6:	fe 4f       	sbci	r31, 0xFE	; 254
     df8:	80 81       	ld	r24, Z
     dfa:	8a 83       	std	Y+2, r24	; 0x02
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
     dfc:	8b 81       	ldd	r24, Y+3	; 0x03
     dfe:	98 2f       	mov	r25, r24
     e00:	99 0f       	add	r25, r25
     e02:	99 0f       	add	r25, r25
     e04:	99 0f       	add	r25, r25
     e06:	8a 81       	ldd	r24, Y+2	; 0x02
     e08:	89 0f       	add	r24, r25
     e0a:	89 83       	std	Y+1, r24	; 0x01
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	88 0f       	add	r24, r24
     e14:	99 1f       	adc	r25, r25
     e16:	fc 01       	movw	r30, r24
     e18:	e0 51       	subi	r30, 0x10	; 16
     e1a:	f4 4f       	sbci	r31, 0xF4	; 244
     e1c:	80 81       	ld	r24, Z
     e1e:	91 81       	ldd	r25, Z+1	; 0x01
     e20:	9d 83       	std	Y+5, r25	; 0x05
     e22:	8c 83       	std	Y+4, r24	; 0x04
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
     e24:	ec 81       	ldd	r30, Y+4	; 0x04
     e26:	fd 81       	ldd	r31, Y+5	; 0x05
     e28:	15 8a       	std	Z+21, r1	; 0x15
     e2a:	14 8a       	std	Z+20, r1	; 0x14
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
     e2c:	ec 81       	ldd	r30, Y+4	; 0x04
     e2e:	fd 81       	ldd	r31, Y+5	; 0x05
     e30:	86 89       	ldd	r24, Z+22	; 0x16
     e32:	98 2f       	mov	r25, r24
     e34:	8a 85       	ldd	r24, Y+10	; 0x0a
     e36:	80 95       	com	r24
     e38:	89 23       	and	r24, r25
     e3a:	ec 81       	ldd	r30, Y+4	; 0x04
     e3c:	fd 81       	ldd	r31, Y+5	; 0x05
     e3e:	86 8b       	std	Z+22, r24	; 0x16
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
     e40:	ec 81       	ldd	r30, Y+4	; 0x04
     e42:	fd 81       	ldd	r31, Y+5	; 0x05
     e44:	8b 85       	ldd	r24, Y+11	; 0x0b
     e46:	87 8b       	std	Z+23, r24	; 0x17
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
     e48:	ec 81       	ldd	r30, Y+4	; 0x04
     e4a:	fd 81       	ldd	r31, Y+5	; 0x05
     e4c:	86 89       	ldd	r24, Z+22	; 0x16
     e4e:	88 2f       	mov	r24, r24
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	88 70       	andi	r24, 0x08	; 8
     e54:	90 70       	andi	r25, 0x00	; 0
     e56:	00 97       	sbiw	r24, 0x00	; 0
     e58:	d1 f4       	brne	.+52     	; 0xe8e <OS_EventTaskRdy+0xe8>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
     e5a:	ec 81       	ldd	r30, Y+4	; 0x04
     e5c:	fd 81       	ldd	r31, Y+5	; 0x05
     e5e:	94 8d       	ldd	r25, Z+28	; 0x1c
     e60:	80 91 98 07 	lds	r24, 0x0798
     e64:	89 2b       	or	r24, r25
     e66:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	28 2f       	mov	r18, r24
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	88 2f       	mov	r24, r24
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	fc 01       	movw	r30, r24
     e78:	e7 56       	subi	r30, 0x67	; 103
     e7a:	f8 4f       	sbci	r31, 0xF8	; 248
     e7c:	90 81       	ld	r25, Z
     e7e:	ec 81       	ldd	r30, Y+4	; 0x04
     e80:	fd 81       	ldd	r31, Y+5	; 0x05
     e82:	83 8d       	ldd	r24, Z+27	; 0x1b
     e84:	89 2b       	or	r24, r25
     e86:	f9 01       	movw	r30, r18
     e88:	e7 56       	subi	r30, 0x67	; 103
     e8a:	f8 4f       	sbci	r31, 0xF8	; 248
     e8c:	80 83       	st	Z, r24
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
     e8e:	8c 81       	ldd	r24, Y+4	; 0x04
     e90:	9d 81       	ldd	r25, Y+5	; 0x05
     e92:	2e 81       	ldd	r18, Y+6	; 0x06
     e94:	3f 81       	ldd	r19, Y+7	; 0x07
     e96:	b9 01       	movw	r22, r18
     e98:	0e 94 cd 07 	call	0xf9a	; 0xf9a <OS_EventTaskRemove>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    }
#endif

    return (prio);
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
}
     e9e:	2b 96       	adiw	r28, 0x0b	; 11
     ea0:	0f b6       	in	r0, 0x3f	; 63
     ea2:	f8 94       	cli
     ea4:	de bf       	out	0x3e, r29	; 62
     ea6:	0f be       	out	0x3f, r0	; 63
     ea8:	cd bf       	out	0x3d, r28	; 61
     eaa:	cf 91       	pop	r28
     eac:	df 91       	pop	r29
     eae:	08 95       	ret

00000eb0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
     eb0:	df 93       	push	r29
     eb2:	cf 93       	push	r28
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <OS_EventTaskWait+0x6>
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	9b 83       	std	Y+3, r25	; 0x03
     ebc:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
     ebe:	e0 91 4d 08 	lds	r30, 0x084D
     ec2:	f0 91 4e 08 	lds	r31, 0x084E
     ec6:	8a 81       	ldd	r24, Y+2	; 0x02
     ec8:	9b 81       	ldd	r25, Y+3	; 0x03
     eca:	93 8b       	std	Z+19, r25	; 0x13
     ecc:	82 8b       	std	Z+18, r24	; 0x12

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
     ece:	e0 91 4d 08 	lds	r30, 0x084D
     ed2:	f0 91 4e 08 	lds	r31, 0x084E
     ed6:	82 8d       	ldd	r24, Z+26	; 0x1a
     ed8:	48 2f       	mov	r20, r24
     eda:	50 e0       	ldi	r21, 0x00	; 0
     edc:	e0 91 4d 08 	lds	r30, 0x084D
     ee0:	f0 91 4e 08 	lds	r31, 0x084E
     ee4:	82 8d       	ldd	r24, Z+26	; 0x1a
     ee6:	28 2f       	mov	r18, r24
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	8a 81       	ldd	r24, Y+2	; 0x02
     eec:	9b 81       	ldd	r25, Y+3	; 0x03
     eee:	82 0f       	add	r24, r18
     ef0:	93 1f       	adc	r25, r19
     ef2:	fc 01       	movw	r30, r24
     ef4:	36 96       	adiw	r30, 0x06	; 6
     ef6:	90 81       	ld	r25, Z
     ef8:	e0 91 4d 08 	lds	r30, 0x084D
     efc:	f0 91 4e 08 	lds	r31, 0x084E
     f00:	83 8d       	ldd	r24, Z+27	; 0x1b
     f02:	29 2f       	mov	r18, r25
     f04:	28 2b       	or	r18, r24
     f06:	8a 81       	ldd	r24, Y+2	; 0x02
     f08:	9b 81       	ldd	r25, Y+3	; 0x03
     f0a:	84 0f       	add	r24, r20
     f0c:	95 1f       	adc	r25, r21
     f0e:	fc 01       	movw	r30, r24
     f10:	36 96       	adiw	r30, 0x06	; 6
     f12:	20 83       	st	Z, r18
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     f14:	ea 81       	ldd	r30, Y+2	; 0x02
     f16:	fb 81       	ldd	r31, Y+3	; 0x03
     f18:	95 81       	ldd	r25, Z+5	; 0x05
     f1a:	e0 91 4d 08 	lds	r30, 0x084D
     f1e:	f0 91 4e 08 	lds	r31, 0x084E
     f22:	84 8d       	ldd	r24, Z+28	; 0x1c
     f24:	89 2b       	or	r24, r25
     f26:	ea 81       	ldd	r30, Y+2	; 0x02
     f28:	fb 81       	ldd	r31, Y+3	; 0x03
     f2a:	85 83       	std	Z+5, r24	; 0x05

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
     f2c:	e0 91 4d 08 	lds	r30, 0x084D
     f30:	f0 91 4e 08 	lds	r31, 0x084E
     f34:	82 8d       	ldd	r24, Z+26	; 0x1a
     f36:	89 83       	std	Y+1, r24	; 0x01
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
     f38:	89 81       	ldd	r24, Y+1	; 0x01
     f3a:	28 2f       	mov	r18, r24
     f3c:	30 e0       	ldi	r19, 0x00	; 0
     f3e:	89 81       	ldd	r24, Y+1	; 0x01
     f40:	88 2f       	mov	r24, r24
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	fc 01       	movw	r30, r24
     f46:	e7 56       	subi	r30, 0x67	; 103
     f48:	f8 4f       	sbci	r31, 0xF8	; 248
     f4a:	80 81       	ld	r24, Z
     f4c:	98 2f       	mov	r25, r24
     f4e:	e0 91 4d 08 	lds	r30, 0x084D
     f52:	f0 91 4e 08 	lds	r31, 0x084E
     f56:	83 8d       	ldd	r24, Z+27	; 0x1b
     f58:	80 95       	com	r24
     f5a:	89 23       	and	r24, r25
     f5c:	f9 01       	movw	r30, r18
     f5e:	e7 56       	subi	r30, 0x67	; 103
     f60:	f8 4f       	sbci	r31, 0xF8	; 248
     f62:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0) {
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	88 2f       	mov	r24, r24
     f68:	90 e0       	ldi	r25, 0x00	; 0
     f6a:	fc 01       	movw	r30, r24
     f6c:	e7 56       	subi	r30, 0x67	; 103
     f6e:	f8 4f       	sbci	r31, 0xF8	; 248
     f70:	80 81       	ld	r24, Z
     f72:	88 23       	and	r24, r24
     f74:	61 f4       	brne	.+24     	; 0xf8e <OS_EventTaskWait+0xde>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
     f76:	e0 91 4d 08 	lds	r30, 0x084D
     f7a:	f0 91 4e 08 	lds	r31, 0x084E
     f7e:	84 8d       	ldd	r24, Z+28	; 0x1c
     f80:	98 2f       	mov	r25, r24
     f82:	90 95       	com	r25
     f84:	80 91 98 07 	lds	r24, 0x0798
     f88:	89 23       	and	r24, r25
     f8a:	80 93 98 07 	sts	0x0798, r24
    }
}
     f8e:	0f 90       	pop	r0
     f90:	0f 90       	pop	r0
     f92:	0f 90       	pop	r0
     f94:	cf 91       	pop	r28
     f96:	df 91       	pop	r29
     f98:	08 95       	ret

00000f9a <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
     f9a:	df 93       	push	r29
     f9c:	cf 93       	push	r28
     f9e:	00 d0       	rcall	.+0      	; 0xfa0 <OS_EventTaskRemove+0x6>
     fa0:	0f 92       	push	r0
     fa2:	0f 92       	push	r0
     fa4:	cd b7       	in	r28, 0x3d	; 61
     fa6:	de b7       	in	r29, 0x3e	; 62
     fa8:	9b 83       	std	Y+3, r25	; 0x03
     faa:	8a 83       	std	Y+2, r24	; 0x02
     fac:	7d 83       	std	Y+5, r23	; 0x05
     fae:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  y;


    y                       =  ptcb->OSTCBY;
     fb0:	ea 81       	ldd	r30, Y+2	; 0x02
     fb2:	fb 81       	ldd	r31, Y+3	; 0x03
     fb4:	82 8d       	ldd	r24, Z+26	; 0x1a
     fb6:	89 83       	std	Y+1, r24	; 0x01
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
     fb8:	89 81       	ldd	r24, Y+1	; 0x01
     fba:	48 2f       	mov	r20, r24
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	89 81       	ldd	r24, Y+1	; 0x01
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	8c 81       	ldd	r24, Y+4	; 0x04
     fc6:	9d 81       	ldd	r25, Y+5	; 0x05
     fc8:	82 0f       	add	r24, r18
     fca:	93 1f       	adc	r25, r19
     fcc:	fc 01       	movw	r30, r24
     fce:	36 96       	adiw	r30, 0x06	; 6
     fd0:	80 81       	ld	r24, Z
     fd2:	98 2f       	mov	r25, r24
     fd4:	ea 81       	ldd	r30, Y+2	; 0x02
     fd6:	fb 81       	ldd	r31, Y+3	; 0x03
     fd8:	83 8d       	ldd	r24, Z+27	; 0x1b
     fda:	80 95       	com	r24
     fdc:	89 23       	and	r24, r25
     fde:	28 2f       	mov	r18, r24
     fe0:	8c 81       	ldd	r24, Y+4	; 0x04
     fe2:	9d 81       	ldd	r25, Y+5	; 0x05
     fe4:	84 0f       	add	r24, r20
     fe6:	95 1f       	adc	r25, r21
     fe8:	fc 01       	movw	r30, r24
     fea:	36 96       	adiw	r30, 0x06	; 6
     fec:	20 83       	st	Z, r18
    if (pevent->OSEventTbl[y] == 0) {
     fee:	89 81       	ldd	r24, Y+1	; 0x01
     ff0:	28 2f       	mov	r18, r24
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	8c 81       	ldd	r24, Y+4	; 0x04
     ff6:	9d 81       	ldd	r25, Y+5	; 0x05
     ff8:	82 0f       	add	r24, r18
     ffa:	93 1f       	adc	r25, r19
     ffc:	fc 01       	movw	r30, r24
     ffe:	36 96       	adiw	r30, 0x06	; 6
    1000:	80 81       	ld	r24, Z
    1002:	88 23       	and	r24, r24
    1004:	61 f4       	brne	.+24     	; 0x101e <OS_EventTaskRemove+0x84>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    1006:	ec 81       	ldd	r30, Y+4	; 0x04
    1008:	fd 81       	ldd	r31, Y+5	; 0x05
    100a:	85 81       	ldd	r24, Z+5	; 0x05
    100c:	98 2f       	mov	r25, r24
    100e:	ea 81       	ldd	r30, Y+2	; 0x02
    1010:	fb 81       	ldd	r31, Y+3	; 0x03
    1012:	84 8d       	ldd	r24, Z+28	; 0x1c
    1014:	80 95       	com	r24
    1016:	89 23       	and	r24, r25
    1018:	ec 81       	ldd	r30, Y+4	; 0x04
    101a:	fd 81       	ldd	r31, Y+5	; 0x05
    101c:	85 83       	std	Z+5, r24	; 0x05
    }
}
    101e:	0f 90       	pop	r0
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	00 d0       	rcall	.+0      	; 0x1034 <OS_EventWaitListInit+0x6>
    1034:	0f 92       	push	r0
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	9d 83       	std	Y+5, r25	; 0x05
    103e:	8c 83       	std	Y+4, r24	; 0x04
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    1040:	ec 81       	ldd	r30, Y+4	; 0x04
    1042:	fd 81       	ldd	r31, Y+5	; 0x05
    1044:	15 82       	std	Z+5, r1	; 0x05
    ptbl               = &pevent->OSEventTbl[0];
    1046:	8c 81       	ldd	r24, Y+4	; 0x04
    1048:	9d 81       	ldd	r25, Y+5	; 0x05
    104a:	06 96       	adiw	r24, 0x06	; 6
    104c:	9b 83       	std	Y+3, r25	; 0x03
    104e:	8a 83       	std	Y+2, r24	; 0x02

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1050:	19 82       	std	Y+1, r1	; 0x01
    1052:	0b c0       	rjmp	.+22     	; 0x106a <OS_EventWaitListInit+0x3c>
        *ptbl++ = 0;
    1054:	ea 81       	ldd	r30, Y+2	; 0x02
    1056:	fb 81       	ldd	r31, Y+3	; 0x03
    1058:	10 82       	st	Z, r1
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	01 96       	adiw	r24, 0x01	; 1
    1060:	9b 83       	std	Y+3, r25	; 0x03
    1062:	8a 83       	std	Y+2, r24	; 0x02


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	8f 5f       	subi	r24, 0xFF	; 255
    1068:	89 83       	std	Y+1, r24	; 0x01
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	82 30       	cpi	r24, 0x02	; 2
    106e:	90 f3       	brcs	.-28     	; 0x1054 <OS_EventWaitListInit+0x26>
        *ptbl++ = 0;
    }
}
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	0f 90       	pop	r0
    1078:	0f 90       	pop	r0
    107a:	cf 91       	pop	r28
    107c:	df 91       	pop	r29
    107e:	08 95       	ret

00001080 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	00 d0       	rcall	.+0      	; 0x1086 <OS_InitEventList+0x6>
    1086:	00 d0       	rcall	.+0      	; 0x1088 <OS_InitEventList+0x8>
    1088:	cd b7       	in	r28, 0x3d	; 61
    108a:	de b7       	in	r29, 0x3e	; 62
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    108c:	88 e0       	ldi	r24, 0x08	; 8
    108e:	99 e0       	ldi	r25, 0x09	; 9
    1090:	60 ef       	ldi	r22, 0xF0	; 240
    1092:	70 e0       	ldi	r23, 0x00	; 0
    1094:	0e 94 90 09 	call	0x1320	; 0x1320 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    1098:	88 e0       	ldi	r24, 0x08	; 8
    109a:	99 e0       	ldi	r25, 0x09	; 9
    109c:	9c 83       	std	Y+4, r25	; 0x04
    109e:	8b 83       	std	Y+3, r24	; 0x03
    pevent2 = &OSEventTbl[1];
    10a0:	80 e2       	ldi	r24, 0x20	; 32
    10a2:	99 e0       	ldi	r25, 0x09	; 9
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    10a8:	1e 82       	std	Y+6, r1	; 0x06
    10aa:	1d 82       	std	Y+5, r1	; 0x05
    10ac:	1f c0       	rjmp	.+62     	; 0x10ec <OS_InitEventList+0x6c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    10ae:	eb 81       	ldd	r30, Y+3	; 0x03
    10b0:	fc 81       	ldd	r31, Y+4	; 0x04
    10b2:	10 82       	st	Z, r1
        pevent1->OSEventPtr     = pevent2;
    10b4:	eb 81       	ldd	r30, Y+3	; 0x03
    10b6:	fc 81       	ldd	r31, Y+4	; 0x04
    10b8:	89 81       	ldd	r24, Y+1	; 0x01
    10ba:	9a 81       	ldd	r25, Y+2	; 0x02
    10bc:	92 83       	std	Z+2, r25	; 0x02
    10be:	81 83       	std	Z+1, r24	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    10c0:	eb 81       	ldd	r30, Y+3	; 0x03
    10c2:	fc 81       	ldd	r31, Y+4	; 0x04
    10c4:	8f e3       	ldi	r24, 0x3F	; 63
    10c6:	80 87       	std	Z+8, r24	; 0x08
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    10c8:	eb 81       	ldd	r30, Y+3	; 0x03
    10ca:	fc 81       	ldd	r31, Y+4	; 0x04
    10cc:	11 86       	std	Z+9, r1	; 0x09
#endif
        pevent1++;
    10ce:	8b 81       	ldd	r24, Y+3	; 0x03
    10d0:	9c 81       	ldd	r25, Y+4	; 0x04
    10d2:	48 96       	adiw	r24, 0x18	; 24
    10d4:	9c 83       	std	Y+4, r25	; 0x04
    10d6:	8b 83       	std	Y+3, r24	; 0x03
        pevent2++;
    10d8:	89 81       	ldd	r24, Y+1	; 0x01
    10da:	9a 81       	ldd	r25, Y+2	; 0x02
    10dc:	48 96       	adiw	r24, 0x18	; 24
    10de:	9a 83       	std	Y+2, r25	; 0x02
    10e0:	89 83       	std	Y+1, r24	; 0x01


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    10e2:	8d 81       	ldd	r24, Y+5	; 0x05
    10e4:	9e 81       	ldd	r25, Y+6	; 0x06
    10e6:	01 96       	adiw	r24, 0x01	; 1
    10e8:	9e 83       	std	Y+6, r25	; 0x06
    10ea:	8d 83       	std	Y+5, r24	; 0x05
    10ec:	8d 81       	ldd	r24, Y+5	; 0x05
    10ee:	9e 81       	ldd	r25, Y+6	; 0x06
    10f0:	89 30       	cpi	r24, 0x09	; 9
    10f2:	91 05       	cpc	r25, r1
    10f4:	e0 f2       	brcs	.-72     	; 0x10ae <OS_InitEventList+0x2e>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    10f6:	eb 81       	ldd	r30, Y+3	; 0x03
    10f8:	fc 81       	ldd	r31, Y+4	; 0x04
    10fa:	10 82       	st	Z, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    10fc:	eb 81       	ldd	r30, Y+3	; 0x03
    10fe:	fc 81       	ldd	r31, Y+4	; 0x04
    1100:	12 82       	std	Z+2, r1	; 0x02
    1102:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    1104:	eb 81       	ldd	r30, Y+3	; 0x03
    1106:	fc 81       	ldd	r31, Y+4	; 0x04
    1108:	8f e3       	ldi	r24, 0x3F	; 63
    110a:	80 87       	std	Z+8, r24	; 0x08
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    110c:	eb 81       	ldd	r30, Y+3	; 0x03
    110e:	fc 81       	ldd	r31, Y+4	; 0x04
    1110:	11 86       	std	Z+9, r1	; 0x09
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    1112:	88 e0       	ldi	r24, 0x08	; 8
    1114:	99 e0       	ldi	r25, 0x09	; 9
    1116:	90 93 4b 08 	sts	0x084B, r25
    111a:	80 93 4a 08 	sts	0x084A, r24
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    111e:	26 96       	adiw	r28, 0x06	; 6
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
    112a:	cf 91       	pop	r28
    112c:	df 91       	pop	r29
    112e:	08 95       	ret

00001130 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    1130:	df 93       	push	r29
    1132:	cf 93       	push	r28
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    1138:	10 92 53 08 	sts	0x0853, r1
    113c:	10 92 54 08 	sts	0x0854, r1
    1140:	10 92 55 08 	sts	0x0855, r1
    1144:	10 92 56 08 	sts	0x0856, r1
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    1148:	10 92 4c 08 	sts	0x084C, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    114c:	10 92 0f 05 	sts	0x050F, r1

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    1150:	10 92 95 07 	sts	0x0795, r1

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    1154:	10 92 12 05 	sts	0x0512, r1

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    1158:	10 92 8d 07 	sts	0x078D, r1
    115c:	10 92 8e 07 	sts	0x078E, r1
    1160:	10 92 8f 07 	sts	0x078F, r1
    1164:	10 92 90 07 	sts	0x0790, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    1168:	10 92 13 05 	sts	0x0513, r1
    116c:	10 92 14 05 	sts	0x0514, r1
    1170:	10 92 15 05 	sts	0x0515, r1
    1174:	10 92 16 05 	sts	0x0516, r1
#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
#endif
}
    1178:	cf 91       	pop	r28
    117a:	df 91       	pop	r29
    117c:	08 95       	ret

0000117e <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    117e:	df 93       	push	r29
    1180:	cf 93       	push	r28
    1182:	00 d0       	rcall	.+0      	; 0x1184 <OS_InitRdyList+0x6>
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    1188:	10 92 98 07 	sts	0x0798, r1
    prdytbl       = &OSRdyTbl[0];
    118c:	89 e9       	ldi	r24, 0x99	; 153
    118e:	97 e0       	ldi	r25, 0x07	; 7
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1194:	1b 82       	std	Y+3, r1	; 0x03
    1196:	0b c0       	rjmp	.+22     	; 0x11ae <OS_InitRdyList+0x30>
        *prdytbl++ = 0;
    1198:	e9 81       	ldd	r30, Y+1	; 0x01
    119a:	fa 81       	ldd	r31, Y+2	; 0x02
    119c:	10 82       	st	Z, r1
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	01 96       	adiw	r24, 0x01	; 1
    11a4:	9a 83       	std	Y+2, r25	; 0x02
    11a6:	89 83       	std	Y+1, r24	; 0x01
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    11a8:	8b 81       	ldd	r24, Y+3	; 0x03
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	8b 83       	std	Y+3, r24	; 0x03
    11ae:	8b 81       	ldd	r24, Y+3	; 0x03
    11b0:	82 30       	cpi	r24, 0x02	; 2
    11b2:	90 f3       	brcs	.-28     	; 0x1198 <OS_InitRdyList+0x1a>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    11b4:	10 92 8a 07 	sts	0x078A, r1
    OSPrioHighRdy = 0;
    11b8:	10 92 19 05 	sts	0x0519, r1

    OSTCBHighRdy  = (OS_TCB *)0;
    11bc:	10 92 97 07 	sts	0x0797, r1
    11c0:	10 92 96 07 	sts	0x0796, r1
    OSTCBCur      = (OS_TCB *)0;
    11c4:	10 92 4e 08 	sts	0x084E, r1
    11c8:	10 92 4d 08 	sts	0x084D, r1
}
    11cc:	0f 90       	pop	r0
    11ce:	0f 90       	pop	r0
    11d0:	0f 90       	pop	r0
    11d2:	cf 91       	pop	r28
    11d4:	df 91       	pop	r29
    11d6:	08 95       	ret

000011d8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    11d8:	8f 92       	push	r8
    11da:	9f 92       	push	r9
    11dc:	af 92       	push	r10
    11de:	bf 92       	push	r11
    11e0:	cf 92       	push	r12
    11e2:	df 92       	push	r13
    11e4:	ef 92       	push	r14
    11e6:	ff 92       	push	r15
    11e8:	0f 93       	push	r16
    11ea:	1f 93       	push	r17
    11ec:	df 93       	push	r29
    11ee:	cf 93       	push	r28
    11f0:	0f 92       	push	r0
    11f2:	cd b7       	in	r28, 0x3d	; 61
    11f4:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    11f6:	0f 92       	push	r0
    11f8:	0f 92       	push	r0
    11fa:	ed b7       	in	r30, 0x3d	; 61
    11fc:	fe b7       	in	r31, 0x3e	; 62
    11fe:	31 96       	adiw	r30, 0x01	; 1
    1200:	2b ea       	ldi	r18, 0xAB	; 171
    1202:	3a e0       	ldi	r19, 0x0A	; 10
    1204:	47 e0       	ldi	r20, 0x07	; 7
    1206:	59 e0       	ldi	r21, 0x09	; 9
    1208:	a9 e5       	ldi	r26, 0x59	; 89
    120a:	b8 e0       	ldi	r27, 0x08	; 8
    120c:	83 e0       	ldi	r24, 0x03	; 3
    120e:	90 e0       	ldi	r25, 0x00	; 0
    1210:	91 83       	std	Z+1, r25	; 0x01
    1212:	80 83       	st	Z, r24
    1214:	c9 01       	movw	r24, r18
    1216:	60 e0       	ldi	r22, 0x00	; 0
    1218:	70 e0       	ldi	r23, 0x00	; 0
    121a:	2a e0       	ldi	r18, 0x0A	; 10
    121c:	0f ef       	ldi	r16, 0xFF	; 255
    121e:	1f ef       	ldi	r17, 0xFF	; 255
    1220:	7d 01       	movw	r14, r26
    1222:	0f 2e       	mov	r0, r31
    1224:	ff ea       	ldi	r31, 0xAF	; 175
    1226:	af 2e       	mov	r10, r31
    1228:	f0 e0       	ldi	r31, 0x00	; 0
    122a:	bf 2e       	mov	r11, r31
    122c:	f0 e0       	ldi	r31, 0x00	; 0
    122e:	cf 2e       	mov	r12, r31
    1230:	f0 e0       	ldi	r31, 0x00	; 0
    1232:	df 2e       	mov	r13, r31
    1234:	f0 2d       	mov	r31, r0
    1236:	88 24       	eor	r8, r8
    1238:	99 24       	eor	r9, r9
    123a:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <OSTaskCreateExt>
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	33 e0       	ldi	r19, 0x03	; 3
    1246:	8a e0       	ldi	r24, 0x0A	; 10
    1248:	b9 01       	movw	r22, r18
    124a:	9e 01       	movw	r18, r28
    124c:	2f 5f       	subi	r18, 0xFF	; 255
    124e:	3f 4f       	sbci	r19, 0xFF	; 255
    1250:	a9 01       	movw	r20, r18
    1252:	0e 94 03 12 	call	0x2406	; 0x2406 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    1256:	0f 90       	pop	r0
    1258:	cf 91       	pop	r28
    125a:	df 91       	pop	r29
    125c:	1f 91       	pop	r17
    125e:	0f 91       	pop	r16
    1260:	ff 90       	pop	r15
    1262:	ef 90       	pop	r14
    1264:	df 90       	pop	r13
    1266:	cf 90       	pop	r12
    1268:	bf 90       	pop	r11
    126a:	af 90       	pop	r10
    126c:	9f 90       	pop	r9
    126e:	8f 90       	pop	r8
    1270:	08 95       	ret

00001272 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    1272:	df 93       	push	r29
    1274:	cf 93       	push	r28
    1276:	00 d0       	rcall	.+0      	; 0x1278 <OS_InitTCBList+0x6>
    1278:	0f 92       	push	r0
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    1280:	88 ef       	ldi	r24, 0xF8	; 248
    1282:	99 e0       	ldi	r25, 0x09	; 9
    1284:	68 ef       	ldi	r22, 0xF8	; 248
    1286:	71 e0       	ldi	r23, 0x01	; 1
    1288:	0e 94 90 09 	call	0x1320	; 0x1320 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    128c:	80 ef       	ldi	r24, 0xF0	; 240
    128e:	9b e0       	ldi	r25, 0x0B	; 11
    1290:	66 e1       	ldi	r22, 0x16	; 22
    1292:	70 e0       	ldi	r23, 0x00	; 0
    1294:	0e 94 90 09 	call	0x1320	; 0x1320 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    1298:	88 ef       	ldi	r24, 0xF8	; 248
    129a:	99 e0       	ldi	r25, 0x09	; 9
    129c:	9c 83       	std	Y+4, r25	; 0x04
    129e:	8b 83       	std	Y+3, r24	; 0x03
    ptcb2 = &OSTCBTbl[1];
    12a0:	87 e3       	ldi	r24, 0x37	; 55
    12a2:	9a e0       	ldi	r25, 0x0A	; 10
    12a4:	9a 83       	std	Y+2, r25	; 0x02
    12a6:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    12a8:	1d 82       	std	Y+5, r1	; 0x05
    12aa:	1a c0       	rjmp	.+52     	; 0x12e0 <OS_InitTCBList+0x6e>
        ptcb1->OSTCBNext = ptcb2;
    12ac:	eb 81       	ldd	r30, Y+3	; 0x03
    12ae:	fc 81       	ldd	r31, Y+4	; 0x04
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	97 87       	std	Z+15, r25	; 0x0f
    12b6:	86 87       	std	Z+14, r24	; 0x0e
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    12b8:	eb 81       	ldd	r30, Y+3	; 0x03
    12ba:	fc 81       	ldd	r31, Y+4	; 0x04
    12bc:	8f e3       	ldi	r24, 0x3F	; 63
    12be:	87 a7       	std	Z+47, r24	; 0x2f
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    12c0:	eb 81       	ldd	r30, Y+3	; 0x03
    12c2:	fc 81       	ldd	r31, Y+4	; 0x04
    12c4:	10 aa       	std	Z+48, r1	; 0x30
#endif
        ptcb1++;
    12c6:	8b 81       	ldd	r24, Y+3	; 0x03
    12c8:	9c 81       	ldd	r25, Y+4	; 0x04
    12ca:	cf 96       	adiw	r24, 0x3f	; 63
    12cc:	9c 83       	std	Y+4, r25	; 0x04
    12ce:	8b 83       	std	Y+3, r24	; 0x03
        ptcb2++;
    12d0:	89 81       	ldd	r24, Y+1	; 0x01
    12d2:	9a 81       	ldd	r25, Y+2	; 0x02
    12d4:	cf 96       	adiw	r24, 0x3f	; 63
    12d6:	9a 83       	std	Y+2, r25	; 0x02
    12d8:	89 83       	std	Y+1, r24	; 0x01

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    12da:	8d 81       	ldd	r24, Y+5	; 0x05
    12dc:	8f 5f       	subi	r24, 0xFF	; 255
    12de:	8d 83       	std	Y+5, r24	; 0x05
    12e0:	8d 81       	ldd	r24, Y+5	; 0x05
    12e2:	87 30       	cpi	r24, 0x07	; 7
    12e4:	18 f3       	brcs	.-58     	; 0x12ac <OS_InitTCBList+0x3a>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    12e6:	eb 81       	ldd	r30, Y+3	; 0x03
    12e8:	fc 81       	ldd	r31, Y+4	; 0x04
    12ea:	17 86       	std	Z+15, r1	; 0x0f
    12ec:	16 86       	std	Z+14, r1	; 0x0e
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    12ee:	eb 81       	ldd	r30, Y+3	; 0x03
    12f0:	fc 81       	ldd	r31, Y+4	; 0x04
    12f2:	8f e3       	ldi	r24, 0x3F	; 63
    12f4:	87 a7       	std	Z+47, r24	; 0x2f
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    12f6:	eb 81       	ldd	r30, Y+3	; 0x03
    12f8:	fc 81       	ldd	r31, Y+4	; 0x04
    12fa:	10 aa       	std	Z+48, r1	; 0x30
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    12fc:	10 92 8c 07 	sts	0x078C, r1
    1300:	10 92 8b 07 	sts	0x078B, r1
    OSTCBFreeList           = &OSTCBTbl[0];
    1304:	88 ef       	ldi	r24, 0xF8	; 248
    1306:	99 e0       	ldi	r25, 0x09	; 9
    1308:	90 93 94 07 	sts	0x0794, r25
    130c:	80 93 93 07 	sts	0x0793, r24
}
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	08 95       	ret

00001320 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    1320:	df 93       	push	r29
    1322:	cf 93       	push	r28
    1324:	00 d0       	rcall	.+0      	; 0x1326 <OS_MemClr+0x6>
    1326:	0f 92       	push	r0
    1328:	cd b7       	in	r28, 0x3d	; 61
    132a:	de b7       	in	r29, 0x3e	; 62
    132c:	9a 83       	std	Y+2, r25	; 0x02
    132e:	89 83       	std	Y+1, r24	; 0x01
    1330:	7c 83       	std	Y+4, r23	; 0x04
    1332:	6b 83       	std	Y+3, r22	; 0x03
    1334:	0d c0       	rjmp	.+26     	; 0x1350 <OS_MemClr+0x30>
    while (size > 0) {
        *pdest++ = (INT8U)0;
    1336:	e9 81       	ldd	r30, Y+1	; 0x01
    1338:	fa 81       	ldd	r31, Y+2	; 0x02
    133a:	10 82       	st	Z, r1
    133c:	89 81       	ldd	r24, Y+1	; 0x01
    133e:	9a 81       	ldd	r25, Y+2	; 0x02
    1340:	01 96       	adiw	r24, 0x01	; 1
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
        size--;
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	9c 81       	ldd	r25, Y+4	; 0x04
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	9c 83       	std	Y+4, r25	; 0x04
    134e:	8b 83       	std	Y+3, r24	; 0x03
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    1350:	8b 81       	ldd	r24, Y+3	; 0x03
    1352:	9c 81       	ldd	r25, Y+4	; 0x04
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	79 f7       	brne	.-34     	; 0x1336 <OS_MemClr+0x16>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    1358:	0f 90       	pop	r0
    135a:	0f 90       	pop	r0
    135c:	0f 90       	pop	r0
    135e:	0f 90       	pop	r0
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <OS_MemCopy+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <OS_MemCopy+0x8>
    136e:	cd b7       	in	r28, 0x3d	; 61
    1370:	de b7       	in	r29, 0x3e	; 62
    1372:	9a 83       	std	Y+2, r25	; 0x02
    1374:	89 83       	std	Y+1, r24	; 0x01
    1376:	7c 83       	std	Y+4, r23	; 0x04
    1378:	6b 83       	std	Y+3, r22	; 0x03
    137a:	5e 83       	std	Y+6, r21	; 0x06
    137c:	4d 83       	std	Y+5, r20	; 0x05
    137e:	15 c0       	rjmp	.+42     	; 0x13aa <OS_MemCopy+0x44>
    while (size > 0) {
        *pdest++ = *psrc++;
    1380:	eb 81       	ldd	r30, Y+3	; 0x03
    1382:	fc 81       	ldd	r31, Y+4	; 0x04
    1384:	80 81       	ld	r24, Z
    1386:	e9 81       	ldd	r30, Y+1	; 0x01
    1388:	fa 81       	ldd	r31, Y+2	; 0x02
    138a:	80 83       	st	Z, r24
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	9a 81       	ldd	r25, Y+2	; 0x02
    1390:	01 96       	adiw	r24, 0x01	; 1
    1392:	9a 83       	std	Y+2, r25	; 0x02
    1394:	89 83       	std	Y+1, r24	; 0x01
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	9c 83       	std	Y+4, r25	; 0x04
    139e:	8b 83       	std	Y+3, r24	; 0x03
        size--;
    13a0:	8d 81       	ldd	r24, Y+5	; 0x05
    13a2:	9e 81       	ldd	r25, Y+6	; 0x06
    13a4:	01 97       	sbiw	r24, 0x01	; 1
    13a6:	9e 83       	std	Y+6, r25	; 0x06
    13a8:	8d 83       	std	Y+5, r24	; 0x05
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    13aa:	8d 81       	ldd	r24, Y+5	; 0x05
    13ac:	9e 81       	ldd	r25, Y+6	; 0x06
    13ae:	00 97       	sbiw	r24, 0x00	; 0
    13b0:	39 f7       	brne	.-50     	; 0x1380 <OS_MemCopy+0x1a>
        *pdest++ = *psrc++;
        size--;
    }
}
    13b2:	26 96       	adiw	r28, 0x06	; 6
    13b4:	0f b6       	in	r0, 0x3f	; 63
    13b6:	f8 94       	cli
    13b8:	de bf       	out	0x3e, r29	; 62
    13ba:	0f be       	out	0x3f, r0	; 63
    13bc:	cd bf       	out	0x3d, r28	; 61
    13be:	cf 91       	pop	r28
    13c0:	df 91       	pop	r29
    13c2:	08 95       	ret

000013c4 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    13c4:	df 93       	push	r29
    13c6:	cf 93       	push	r28
    13c8:	0f 92       	push	r0
    13ca:	cd b7       	in	r28, 0x3d	; 61
    13cc:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    13ce:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    13d0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    13d4:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    13d6:	80 91 4c 08 	lds	r24, 0x084C
    13da:	88 23       	and	r24, r24
    13dc:	09 f0       	breq	.+2      	; 0x13e0 <OS_Sched+0x1c>
    13de:	3f c0       	rjmp	.+126    	; 0x145e <OS_Sched+0x9a>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    13e0:	80 91 0f 05 	lds	r24, 0x050F
    13e4:	88 23       	and	r24, r24
    13e6:	d9 f5       	brne	.+118    	; 0x145e <OS_Sched+0x9a>
            OS_SchedNew();
    13e8:	0e 94 36 0a 	call	0x146c	; 0x146c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    13ec:	90 91 19 05 	lds	r25, 0x0519
    13f0:	80 91 8a 07 	lds	r24, 0x078A
    13f4:	98 17       	cp	r25, r24
    13f6:	99 f1       	breq	.+102    	; 0x145e <OS_Sched+0x9a>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    13f8:	80 91 19 05 	lds	r24, 0x0519
    13fc:	88 2f       	mov	r24, r24
    13fe:	90 e0       	ldi	r25, 0x00	; 0
    1400:	88 0f       	add	r24, r24
    1402:	99 1f       	adc	r25, r25
    1404:	fc 01       	movw	r30, r24
    1406:	e0 51       	subi	r30, 0x10	; 16
    1408:	f4 4f       	sbci	r31, 0xF4	; 244
    140a:	80 81       	ld	r24, Z
    140c:	91 81       	ldd	r25, Z+1	; 0x01
    140e:	90 93 97 07 	sts	0x0797, r25
    1412:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    1416:	e0 91 96 07 	lds	r30, 0x0796
    141a:	f0 91 97 07 	lds	r31, 0x0797
    141e:	85 8d       	ldd	r24, Z+29	; 0x1d
    1420:	96 8d       	ldd	r25, Z+30	; 0x1e
    1422:	a7 8d       	ldd	r26, Z+31	; 0x1f
    1424:	b0 a1       	ldd	r27, Z+32	; 0x20
    1426:	01 96       	adiw	r24, 0x01	; 1
    1428:	a1 1d       	adc	r26, r1
    142a:	b1 1d       	adc	r27, r1
    142c:	85 8f       	std	Z+29, r24	; 0x1d
    142e:	96 8f       	std	Z+30, r25	; 0x1e
    1430:	a7 8f       	std	Z+31, r26	; 0x1f
    1432:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    1434:	80 91 8d 07 	lds	r24, 0x078D
    1438:	90 91 8e 07 	lds	r25, 0x078E
    143c:	a0 91 8f 07 	lds	r26, 0x078F
    1440:	b0 91 90 07 	lds	r27, 0x0790
    1444:	01 96       	adiw	r24, 0x01	; 1
    1446:	a1 1d       	adc	r26, r1
    1448:	b1 1d       	adc	r27, r1
    144a:	80 93 8d 07 	sts	0x078D, r24
    144e:	90 93 8e 07 	sts	0x078E, r25
    1452:	a0 93 8f 07 	sts	0x078F, r26
    1456:	b0 93 90 07 	sts	0x0790, r27
                OS_TASK_SW();                          /* Perform a context switch                     */
    145a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    1464:	0f 90       	pop	r0
    1466:	cf 91       	pop	r28
    1468:	df 91       	pop	r29
    146a:	08 95       	ret

0000146c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	0f 92       	push	r0
    1472:	cd b7       	in	r28, 0x3d	; 61
    1474:	de b7       	in	r29, 0x3e	; 62
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    1476:	80 91 98 07 	lds	r24, 0x0798
    147a:	88 2f       	mov	r24, r24
    147c:	90 e0       	ldi	r25, 0x00	; 0
    147e:	fc 01       	movw	r30, r24
    1480:	e0 50       	subi	r30, 0x00	; 0
    1482:	fe 4f       	sbci	r31, 0xFE	; 254
    1484:	80 81       	ld	r24, Z
    1486:	89 83       	std	Y+1, r24	; 0x01
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    1488:	89 81       	ldd	r24, Y+1	; 0x01
    148a:	28 2f       	mov	r18, r24
    148c:	22 0f       	add	r18, r18
    148e:	22 0f       	add	r18, r18
    1490:	22 0f       	add	r18, r18
    1492:	89 81       	ldd	r24, Y+1	; 0x01
    1494:	88 2f       	mov	r24, r24
    1496:	90 e0       	ldi	r25, 0x00	; 0
    1498:	fc 01       	movw	r30, r24
    149a:	e7 56       	subi	r30, 0x67	; 103
    149c:	f8 4f       	sbci	r31, 0xF8	; 248
    149e:	80 81       	ld	r24, Z
    14a0:	88 2f       	mov	r24, r24
    14a2:	90 e0       	ldi	r25, 0x00	; 0
    14a4:	fc 01       	movw	r30, r24
    14a6:	e0 50       	subi	r30, 0x00	; 0
    14a8:	fe 4f       	sbci	r31, 0xFE	; 254
    14aa:	80 81       	ld	r24, Z
    14ac:	82 0f       	add	r24, r18
    14ae:	80 93 19 05 	sts	0x0519, r24
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    14b2:	0f 90       	pop	r0
    14b4:	cf 91       	pop	r28
    14b6:	df 91       	pop	r29
    14b8:	08 95       	ret

000014ba <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	00 d0       	rcall	.+0      	; 0x14c0 <OS_StrCopy+0x6>
    14c0:	0f 92       	push	r0
    14c2:	0f 92       	push	r0
    14c4:	cd b7       	in	r28, 0x3d	; 61
    14c6:	de b7       	in	r29, 0x3e	; 62
    14c8:	9b 83       	std	Y+3, r25	; 0x03
    14ca:	8a 83       	std	Y+2, r24	; 0x02
    14cc:	7d 83       	std	Y+5, r23	; 0x05
    14ce:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  len;


    len = 0;
    14d0:	19 82       	std	Y+1, r1	; 0x01
    14d2:	13 c0       	rjmp	.+38     	; 0x14fa <OS_StrCopy+0x40>
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
    14d4:	ec 81       	ldd	r30, Y+4	; 0x04
    14d6:	fd 81       	ldd	r31, Y+5	; 0x05
    14d8:	80 81       	ld	r24, Z
    14da:	ea 81       	ldd	r30, Y+2	; 0x02
    14dc:	fb 81       	ldd	r31, Y+3	; 0x03
    14de:	80 83       	st	Z, r24
    14e0:	8a 81       	ldd	r24, Y+2	; 0x02
    14e2:	9b 81       	ldd	r25, Y+3	; 0x03
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	9b 83       	std	Y+3, r25	; 0x03
    14e8:	8a 83       	std	Y+2, r24	; 0x02
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9d 83       	std	Y+5, r25	; 0x05
    14f2:	8c 83       	std	Y+4, r24	; 0x04
        len++;
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	8f 5f       	subi	r24, 0xFF	; 255
    14f8:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    14fa:	ec 81       	ldd	r30, Y+4	; 0x04
    14fc:	fd 81       	ldd	r31, Y+5	; 0x05
    14fe:	80 81       	ld	r24, Z
    1500:	88 23       	and	r24, r24
    1502:	41 f7       	brne	.-48     	; 0x14d4 <OS_StrCopy+0x1a>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    1504:	ea 81       	ldd	r30, Y+2	; 0x02
    1506:	fb 81       	ldd	r31, Y+3	; 0x03
    1508:	10 82       	st	Z, r1
    return (len);
    150a:	89 81       	ldd	r24, Y+1	; 0x01
}
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	0f 90       	pop	r0
    1512:	0f 90       	pop	r0
    1514:	0f 90       	pop	r0
    1516:	cf 91       	pop	r28
    1518:	df 91       	pop	r29
    151a:	08 95       	ret

0000151c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    151c:	df 93       	push	r29
    151e:	cf 93       	push	r28
    1520:	00 d0       	rcall	.+0      	; 0x1522 <OS_StrLen+0x6>
    1522:	cd b7       	in	r28, 0x3d	; 61
    1524:	de b7       	in	r29, 0x3e	; 62
    1526:	9b 83       	std	Y+3, r25	; 0x03
    1528:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  len;


    len = 0;
    152a:	19 82       	std	Y+1, r1	; 0x01
    152c:	08 c0       	rjmp	.+16     	; 0x153e <OS_StrLen+0x22>
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
    152e:	8a 81       	ldd	r24, Y+2	; 0x02
    1530:	9b 81       	ldd	r25, Y+3	; 0x03
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	9b 83       	std	Y+3, r25	; 0x03
    1536:	8a 83       	std	Y+2, r24	; 0x02
        len++;
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	8f 5f       	subi	r24, 0xFF	; 255
    153c:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    153e:	ea 81       	ldd	r30, Y+2	; 0x02
    1540:	fb 81       	ldd	r31, Y+3	; 0x03
    1542:	80 81       	ld	r24, Z
    1544:	88 23       	and	r24, r24
    1546:	99 f7       	brne	.-26     	; 0x152e <OS_StrLen+0x12>
        psrc++;
        len++;
    }
    return (len);
    1548:	89 81       	ldd	r24, Y+1	; 0x01
}
    154a:	0f 90       	pop	r0
    154c:	0f 90       	pop	r0
    154e:	0f 90       	pop	r0
    1550:	cf 91       	pop	r28
    1552:	df 91       	pop	r29
    1554:	08 95       	ret

00001556 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    1556:	df 93       	push	r29
    1558:	cf 93       	push	r28
    155a:	00 d0       	rcall	.+0      	; 0x155c <OS_TaskIdle+0x6>
    155c:	cd b7       	in	r28, 0x3d	; 61
    155e:	de b7       	in	r29, 0x3e	; 62
    1560:	9b 83       	std	Y+3, r25	; 0x03
    1562:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1564:	19 82       	std	Y+1, r1	; 0x01



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    1566:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    156a:	89 83       	std	Y+1, r24	; 0x01
        OSIdleCtr++;
    156c:	80 91 13 05 	lds	r24, 0x0513
    1570:	90 91 14 05 	lds	r25, 0x0514
    1574:	a0 91 15 05 	lds	r26, 0x0515
    1578:	b0 91 16 05 	lds	r27, 0x0516
    157c:	01 96       	adiw	r24, 0x01	; 1
    157e:	a1 1d       	adc	r26, r1
    1580:	b1 1d       	adc	r27, r1
    1582:	80 93 13 05 	sts	0x0513, r24
    1586:	90 93 14 05 	sts	0x0514, r25
    158a:	a0 93 15 05 	sts	0x0515, r26
    158e:	b0 93 16 05 	sts	0x0516, r27
        OS_EXIT_CRITICAL();
    1592:	89 81       	ldd	r24, Y+1	; 0x01
    1594:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    1598:	0e 94 19 02 	call	0x432	; 0x432 <OSTaskIdleHook>
    159c:	e4 cf       	rjmp	.-56     	; 0x1566 <OS_TaskIdle+0x10>

0000159e <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    159e:	af 92       	push	r10
    15a0:	bf 92       	push	r11
    15a2:	cf 92       	push	r12
    15a4:	df 92       	push	r13
    15a6:	ef 92       	push	r14
    15a8:	ff 92       	push	r15
    15aa:	0f 93       	push	r16
    15ac:	1f 93       	push	r17
    15ae:	df 93       	push	r29
    15b0:	cf 93       	push	r28
    15b2:	cd b7       	in	r28, 0x3d	; 61
    15b4:	de b7       	in	r29, 0x3e	; 62
    15b6:	63 97       	sbiw	r28, 0x13	; 19
    15b8:	0f b6       	in	r0, 0x3f	; 63
    15ba:	f8 94       	cli
    15bc:	de bf       	out	0x3e, r29	; 62
    15be:	0f be       	out	0x3f, r0	; 63
    15c0:	cd bf       	out	0x3d, r28	; 61
    15c2:	8c 83       	std	Y+4, r24	; 0x04
    15c4:	7e 83       	std	Y+6, r23	; 0x06
    15c6:	6d 83       	std	Y+5, r22	; 0x05
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	4f 83       	std	Y+7, r20	; 0x07
    15cc:	3a 87       	std	Y+10, r19	; 0x0a
    15ce:	29 87       	std	Y+9, r18	; 0x09
    15d0:	eb 86       	std	Y+11, r14	; 0x0b
    15d2:	fc 86       	std	Y+12, r15	; 0x0c
    15d4:	0d 87       	std	Y+13, r16	; 0x0d
    15d6:	1e 87       	std	Y+14, r17	; 0x0e
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	cf 86       	std	Y+15, r12	; 0x0f
    15dc:	ba 8a       	std	Y+18, r11	; 0x12
    15de:	a9 8a       	std	Y+17, r10	; 0x11
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    15e0:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    15e2:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    15e6:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    15e8:	80 91 93 07 	lds	r24, 0x0793
    15ec:	90 91 94 07 	lds	r25, 0x0794
    15f0:	9b 83       	std	Y+3, r25	; 0x03
    15f2:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb != (OS_TCB *)0) {
    15f4:	8a 81       	ldd	r24, Y+2	; 0x02
    15f6:	9b 81       	ldd	r25, Y+3	; 0x03
    15f8:	00 97       	sbiw	r24, 0x00	; 0
    15fa:	09 f4       	brne	.+2      	; 0x15fe <OS_TCBInit+0x60>
    15fc:	f1 c0       	rjmp	.+482    	; 0x17e0 <OS_TCBInit+0x242>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    15fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1600:	fb 81       	ldd	r31, Y+3	; 0x03
    1602:	86 85       	ldd	r24, Z+14	; 0x0e
    1604:	97 85       	ldd	r25, Z+15	; 0x0f
    1606:	90 93 94 07 	sts	0x0794, r25
    160a:	80 93 93 07 	sts	0x0793, r24
        OS_EXIT_CRITICAL();
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    1614:	ea 81       	ldd	r30, Y+2	; 0x02
    1616:	fb 81       	ldd	r31, Y+3	; 0x03
    1618:	8d 81       	ldd	r24, Y+5	; 0x05
    161a:	9e 81       	ldd	r25, Y+6	; 0x06
    161c:	91 83       	std	Z+1, r25	; 0x01
    161e:	80 83       	st	Z, r24
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    1620:	ea 81       	ldd	r30, Y+2	; 0x02
    1622:	fb 81       	ldd	r31, Y+3	; 0x03
    1624:	8c 81       	ldd	r24, Y+4	; 0x04
    1626:	80 8f       	std	Z+24, r24	; 0x18
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    1628:	ea 81       	ldd	r30, Y+2	; 0x02
    162a:	fb 81       	ldd	r31, Y+3	; 0x03
    162c:	16 8a       	std	Z+22, r1	; 0x16
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    162e:	ea 81       	ldd	r30, Y+2	; 0x02
    1630:	fb 81       	ldd	r31, Y+3	; 0x03
    1632:	17 8a       	std	Z+23, r1	; 0x17
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    1634:	ea 81       	ldd	r30, Y+2	; 0x02
    1636:	fb 81       	ldd	r31, Y+3	; 0x03
    1638:	15 8a       	std	Z+21, r1	; 0x15
    163a:	14 8a       	std	Z+20, r1	; 0x14

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    163c:	ea 81       	ldd	r30, Y+2	; 0x02
    163e:	fb 81       	ldd	r31, Y+3	; 0x03
    1640:	8f 85       	ldd	r24, Y+15	; 0x0f
    1642:	98 89       	ldd	r25, Y+16	; 0x10
    1644:	93 83       	std	Z+3, r25	; 0x03
    1646:	82 83       	std	Z+2, r24	; 0x02
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    1648:	ea 81       	ldd	r30, Y+2	; 0x02
    164a:	fb 81       	ldd	r31, Y+3	; 0x03
    164c:	8b 85       	ldd	r24, Y+11	; 0x0b
    164e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1650:	ad 85       	ldd	r26, Y+13	; 0x0d
    1652:	be 85       	ldd	r27, Y+14	; 0x0e
    1654:	86 83       	std	Z+6, r24	; 0x06
    1656:	97 83       	std	Z+7, r25	; 0x07
    1658:	a0 87       	std	Z+8, r26	; 0x08
    165a:	b1 87       	std	Z+9, r27	; 0x09
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    165c:	ea 81       	ldd	r30, Y+2	; 0x02
    165e:	fb 81       	ldd	r31, Y+3	; 0x03
    1660:	8f 81       	ldd	r24, Y+7	; 0x07
    1662:	98 85       	ldd	r25, Y+8	; 0x08
    1664:	95 83       	std	Z+5, r25	; 0x05
    1666:	84 83       	std	Z+4, r24	; 0x04
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    1668:	ea 81       	ldd	r30, Y+2	; 0x02
    166a:	fb 81       	ldd	r31, Y+3	; 0x03
    166c:	89 89       	ldd	r24, Y+17	; 0x11
    166e:	9a 89       	ldd	r25, Y+18	; 0x12
    1670:	93 87       	std	Z+11, r25	; 0x0b
    1672:	82 87       	std	Z+10, r24	; 0x0a
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    1674:	ea 81       	ldd	r30, Y+2	; 0x02
    1676:	fb 81       	ldd	r31, Y+3	; 0x03
    1678:	89 85       	ldd	r24, Y+9	; 0x09
    167a:	9a 85       	ldd	r25, Y+10	; 0x0a
    167c:	95 87       	std	Z+13, r25	; 0x0d
    167e:	84 87       	std	Z+12, r24	; 0x0c
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    1680:	8c 81       	ldd	r24, Y+4	; 0x04
    1682:	86 95       	lsr	r24
    1684:	86 95       	lsr	r24
    1686:	86 95       	lsr	r24
    1688:	ea 81       	ldd	r30, Y+2	; 0x02
    168a:	fb 81       	ldd	r31, Y+3	; 0x03
    168c:	82 8f       	std	Z+26, r24	; 0x1a
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    168e:	8c 81       	ldd	r24, Y+4	; 0x04
    1690:	87 70       	andi	r24, 0x07	; 7
    1692:	ea 81       	ldd	r30, Y+2	; 0x02
    1694:	fb 81       	ldd	r31, Y+3	; 0x03
    1696:	81 8f       	std	Z+25, r24	; 0x19
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    1698:	ea 81       	ldd	r30, Y+2	; 0x02
    169a:	fb 81       	ldd	r31, Y+3	; 0x03
    169c:	82 8d       	ldd	r24, Z+26	; 0x1a
    169e:	28 2f       	mov	r18, r24
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	81 e0       	ldi	r24, 0x01	; 1
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <OS_TCBInit+0x10e>
    16a8:	88 0f       	add	r24, r24
    16aa:	99 1f       	adc	r25, r25
    16ac:	2a 95       	dec	r18
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <OS_TCBInit+0x10a>
    16b0:	ea 81       	ldd	r30, Y+2	; 0x02
    16b2:	fb 81       	ldd	r31, Y+3	; 0x03
    16b4:	84 8f       	std	Z+28, r24	; 0x1c
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    16b6:	ea 81       	ldd	r30, Y+2	; 0x02
    16b8:	fb 81       	ldd	r31, Y+3	; 0x03
    16ba:	81 8d       	ldd	r24, Z+25	; 0x19
    16bc:	28 2f       	mov	r18, r24
    16be:	30 e0       	ldi	r19, 0x00	; 0
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	90 e0       	ldi	r25, 0x00	; 0
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <OS_TCBInit+0x12c>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	2a 95       	dec	r18
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <OS_TCBInit+0x128>
    16ce:	ea 81       	ldd	r30, Y+2	; 0x02
    16d0:	fb 81       	ldd	r31, Y+3	; 0x03
    16d2:	83 8f       	std	Z+27, r24	; 0x1b
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    16d4:	ea 81       	ldd	r30, Y+2	; 0x02
    16d6:	fb 81       	ldd	r31, Y+3	; 0x03
    16d8:	13 8a       	std	Z+19, r1	; 0x13
    16da:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    16dc:	ea 81       	ldd	r30, Y+2	; 0x02
    16de:	fb 81       	ldd	r31, Y+3	; 0x03
    16e0:	15 8e       	std	Z+29, r1	; 0x1d
    16e2:	16 8e       	std	Z+30, r1	; 0x1e
    16e4:	17 8e       	std	Z+31, r1	; 0x1f
    16e6:	10 a2       	std	Z+32, r1	; 0x20
        ptcb->OSTCBCyclesStart = 0L;
    16e8:	ea 81       	ldd	r30, Y+2	; 0x02
    16ea:	fb 81       	ldd	r31, Y+3	; 0x03
    16ec:	15 a2       	std	Z+37, r1	; 0x25
    16ee:	16 a2       	std	Z+38, r1	; 0x26
    16f0:	17 a2       	std	Z+39, r1	; 0x27
    16f2:	10 a6       	std	Z+40, r1	; 0x28
        ptcb->OSTCBCyclesTot   = 0L;
    16f4:	ea 81       	ldd	r30, Y+2	; 0x02
    16f6:	fb 81       	ldd	r31, Y+3	; 0x03
    16f8:	11 a2       	std	Z+33, r1	; 0x21
    16fa:	12 a2       	std	Z+34, r1	; 0x22
    16fc:	13 a2       	std	Z+35, r1	; 0x23
    16fe:	14 a2       	std	Z+36, r1	; 0x24
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    1700:	ea 81       	ldd	r30, Y+2	; 0x02
    1702:	fb 81       	ldd	r31, Y+3	; 0x03
    1704:	12 a6       	std	Z+42, r1	; 0x2a
    1706:	11 a6       	std	Z+41, r1	; 0x29
        ptcb->OSTCBStkUsed     = 0L;
    1708:	ea 81       	ldd	r30, Y+2	; 0x02
    170a:	fb 81       	ldd	r31, Y+3	; 0x03
    170c:	13 a6       	std	Z+43, r1	; 0x2b
    170e:	14 a6       	std	Z+44, r1	; 0x2c
    1710:	15 a6       	std	Z+45, r1	; 0x2d
    1712:	16 a6       	std	Z+46, r1	; 0x2e
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    1714:	ea 81       	ldd	r30, Y+2	; 0x02
    1716:	fb 81       	ldd	r31, Y+3	; 0x03
    1718:	8f e3       	ldi	r24, 0x3F	; 63
    171a:	87 a7       	std	Z+47, r24	; 0x2f
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    171c:	ea 81       	ldd	r30, Y+2	; 0x02
    171e:	fb 81       	ldd	r31, Y+3	; 0x03
    1720:	10 aa       	std	Z+48, r1	; 0x30
#endif

        OSTCBInitHook(ptcb);
    1722:	8a 81       	ldd	r24, Y+2	; 0x02
    1724:	9b 81       	ldd	r25, Y+3	; 0x03
    1726:	0e 94 96 03 	call	0x72c	; 0x72c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    172a:	8a 81       	ldd	r24, Y+2	; 0x02
    172c:	9b 81       	ldd	r25, Y+3	; 0x03
    172e:	0e 94 f7 01 	call	0x3ee	; 0x3ee <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
    1732:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1736:	89 83       	std	Y+1, r24	; 0x01
        OSTCBPrioTbl[prio] = ptcb;
    1738:	8c 81       	ldd	r24, Y+4	; 0x04
    173a:	88 2f       	mov	r24, r24
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	fc 01       	movw	r30, r24
    1744:	e0 51       	subi	r30, 0x10	; 16
    1746:	f4 4f       	sbci	r31, 0xF4	; 244
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	91 83       	std	Z+1, r25	; 0x01
    174e:	80 83       	st	Z, r24
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    1750:	80 91 8b 07 	lds	r24, 0x078B
    1754:	90 91 8c 07 	lds	r25, 0x078C
    1758:	ea 81       	ldd	r30, Y+2	; 0x02
    175a:	fb 81       	ldd	r31, Y+3	; 0x03
    175c:	97 87       	std	Z+15, r25	; 0x0f
    175e:	86 87       	std	Z+14, r24	; 0x0e
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    1760:	ea 81       	ldd	r30, Y+2	; 0x02
    1762:	fb 81       	ldd	r31, Y+3	; 0x03
    1764:	11 8a       	std	Z+17, r1	; 0x11
    1766:	10 8a       	std	Z+16, r1	; 0x10
        if (OSTCBList != (OS_TCB *)0) {
    1768:	80 91 8b 07 	lds	r24, 0x078B
    176c:	90 91 8c 07 	lds	r25, 0x078C
    1770:	00 97       	sbiw	r24, 0x00	; 0
    1772:	41 f0       	breq	.+16     	; 0x1784 <OS_TCBInit+0x1e6>
            OSTCBList->OSTCBPrev = ptcb;
    1774:	e0 91 8b 07 	lds	r30, 0x078B
    1778:	f0 91 8c 07 	lds	r31, 0x078C
    177c:	8a 81       	ldd	r24, Y+2	; 0x02
    177e:	9b 81       	ldd	r25, Y+3	; 0x03
    1780:	91 8b       	std	Z+17, r25	; 0x11
    1782:	80 8b       	std	Z+16, r24	; 0x10
        }
        OSTCBList               = ptcb;
    1784:	8a 81       	ldd	r24, Y+2	; 0x02
    1786:	9b 81       	ldd	r25, Y+3	; 0x03
    1788:	90 93 8c 07 	sts	0x078C, r25
    178c:	80 93 8b 07 	sts	0x078B, r24
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    1790:	ea 81       	ldd	r30, Y+2	; 0x02
    1792:	fb 81       	ldd	r31, Y+3	; 0x03
    1794:	94 8d       	ldd	r25, Z+28	; 0x1c
    1796:	80 91 98 07 	lds	r24, 0x0798
    179a:	89 2b       	or	r24, r25
    179c:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    17a0:	ea 81       	ldd	r30, Y+2	; 0x02
    17a2:	fb 81       	ldd	r31, Y+3	; 0x03
    17a4:	82 8d       	ldd	r24, Z+26	; 0x1a
    17a6:	28 2f       	mov	r18, r24
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	ea 81       	ldd	r30, Y+2	; 0x02
    17ac:	fb 81       	ldd	r31, Y+3	; 0x03
    17ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    17b0:	88 2f       	mov	r24, r24
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	fc 01       	movw	r30, r24
    17b6:	e7 56       	subi	r30, 0x67	; 103
    17b8:	f8 4f       	sbci	r31, 0xF8	; 248
    17ba:	90 81       	ld	r25, Z
    17bc:	ea 81       	ldd	r30, Y+2	; 0x02
    17be:	fb 81       	ldd	r31, Y+3	; 0x03
    17c0:	83 8d       	ldd	r24, Z+27	; 0x1b
    17c2:	89 2b       	or	r24, r25
    17c4:	f9 01       	movw	r30, r18
    17c6:	e7 56       	subi	r30, 0x67	; 103
    17c8:	f8 4f       	sbci	r31, 0xF8	; 248
    17ca:	80 83       	st	Z, r24
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    17cc:	80 91 95 07 	lds	r24, 0x0795
    17d0:	8f 5f       	subi	r24, 0xFF	; 255
    17d2:	80 93 95 07 	sts	0x0795, r24
        OS_EXIT_CRITICAL();
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    17dc:	1b 8a       	std	Y+19, r1	; 0x13
    17de:	05 c0       	rjmp	.+10     	; 0x17ea <OS_TCBInit+0x24c>
    }
    OS_EXIT_CRITICAL();
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
    17e6:	82 e4       	ldi	r24, 0x42	; 66
    17e8:	8b 8b       	std	Y+19, r24	; 0x13
    17ea:	8b 89       	ldd	r24, Y+19	; 0x13
}
    17ec:	63 96       	adiw	r28, 0x13	; 19
    17ee:	0f b6       	in	r0, 0x3f	; 63
    17f0:	f8 94       	cli
    17f2:	de bf       	out	0x3e, r29	; 62
    17f4:	0f be       	out	0x3f, r0	; 63
    17f6:	cd bf       	out	0x3d, r28	; 61
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	1f 91       	pop	r17
    17fe:	0f 91       	pop	r16
    1800:	ff 90       	pop	r15
    1802:	ef 90       	pop	r14
    1804:	df 90       	pop	r13
    1806:	cf 90       	pop	r12
    1808:	bf 90       	pop	r11
    180a:	af 90       	pop	r10
    180c:	08 95       	ret
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    180e:	df 93       	push	r29
    1810:	cf 93       	push	r28
    1812:	0f 92       	push	r0
    1814:	0f 92       	push	r0
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    181a:	8e e0       	ldi	r24, 0x0E	; 14
    181c:	93 e0       	ldi	r25, 0x03	; 3
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEndiannessTest;
    1822:	80 e1       	ldi	r24, 0x10	; 16
    1824:	93 e0       	ldi	r25, 0x03	; 3
    1826:	9a 83       	std	Y+2, r25	; 0x02
    1828:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEventMax;
    182a:	86 e1       	ldi	r24, 0x16	; 22
    182c:	93 e0       	ldi	r25, 0x03	; 3
    182e:	9a 83       	std	Y+2, r25	; 0x02
    1830:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventNameSize;
    1832:	88 e1       	ldi	r24, 0x18	; 24
    1834:	93 e0       	ldi	r25, 0x03	; 3
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventEn;
    183a:	84 e1       	ldi	r24, 0x14	; 20
    183c:	93 e0       	ldi	r25, 0x03	; 3
    183e:	9a 83       	std	Y+2, r25	; 0x02
    1840:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventSize;
    1842:	8a e1       	ldi	r24, 0x1A	; 26
    1844:	93 e0       	ldi	r25, 0x03	; 3
    1846:	9a 83       	std	Y+2, r25	; 0x02
    1848:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventTblSize;
    184a:	8c e1       	ldi	r24, 0x1C	; 28
    184c:	93 e0       	ldi	r25, 0x03	; 3
    184e:	9a 83       	std	Y+2, r25	; 0x02
    1850:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventMultiEn;
    1852:	8e e1       	ldi	r24, 0x1E	; 30
    1854:	93 e0       	ldi	r25, 0x03	; 3
    1856:	9a 83       	std	Y+2, r25	; 0x02
    1858:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSFlagEn;
    185a:	80 e2       	ldi	r24, 0x20	; 32
    185c:	93 e0       	ldi	r25, 0x03	; 3
    185e:	9a 83       	std	Y+2, r25	; 0x02
    1860:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagGrpSize;
    1862:	82 e2       	ldi	r24, 0x22	; 34
    1864:	93 e0       	ldi	r25, 0x03	; 3
    1866:	9a 83       	std	Y+2, r25	; 0x02
    1868:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNodeSize;
    186a:	84 e2       	ldi	r24, 0x24	; 36
    186c:	93 e0       	ldi	r25, 0x03	; 3
    186e:	9a 83       	std	Y+2, r25	; 0x02
    1870:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagWidth;
    1872:	86 e2       	ldi	r24, 0x26	; 38
    1874:	93 e0       	ldi	r25, 0x03	; 3
    1876:	9a 83       	std	Y+2, r25	; 0x02
    1878:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagMax;
    187a:	88 e2       	ldi	r24, 0x28	; 40
    187c:	93 e0       	ldi	r25, 0x03	; 3
    187e:	9a 83       	std	Y+2, r25	; 0x02
    1880:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNameSize;
    1882:	8a e2       	ldi	r24, 0x2A	; 42
    1884:	93 e0       	ldi	r25, 0x03	; 3
    1886:	9a 83       	std	Y+2, r25	; 0x02
    1888:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSLowestPrio;
    188a:	8c e2       	ldi	r24, 0x2C	; 44
    188c:	93 e0       	ldi	r25, 0x03	; 3
    188e:	9a 83       	std	Y+2, r25	; 0x02
    1890:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMboxEn;
    1892:	8e e2       	ldi	r24, 0x2E	; 46
    1894:	93 e0       	ldi	r25, 0x03	; 3
    1896:	9a 83       	std	Y+2, r25	; 0x02
    1898:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMemEn;
    189a:	80 e3       	ldi	r24, 0x30	; 48
    189c:	93 e0       	ldi	r25, 0x03	; 3
    189e:	9a 83       	std	Y+2, r25	; 0x02
    18a0:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemMax;
    18a2:	82 e3       	ldi	r24, 0x32	; 50
    18a4:	93 e0       	ldi	r25, 0x03	; 3
    18a6:	9a 83       	std	Y+2, r25	; 0x02
    18a8:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemNameSize;
    18aa:	84 e3       	ldi	r24, 0x34	; 52
    18ac:	93 e0       	ldi	r25, 0x03	; 3
    18ae:	9a 83       	std	Y+2, r25	; 0x02
    18b0:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemSize;
    18b2:	86 e3       	ldi	r24, 0x36	; 54
    18b4:	93 e0       	ldi	r25, 0x03	; 3
    18b6:	9a 83       	std	Y+2, r25	; 0x02
    18b8:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemTblSize;
    18ba:	88 e3       	ldi	r24, 0x38	; 56
    18bc:	93 e0       	ldi	r25, 0x03	; 3
    18be:	9a 83       	std	Y+2, r25	; 0x02
    18c0:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMutexEn;
    18c2:	8a e3       	ldi	r24, 0x3A	; 58
    18c4:	93 e0       	ldi	r25, 0x03	; 3
    18c6:	9a 83       	std	Y+2, r25	; 0x02
    18c8:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSPtrSize;
    18ca:	8c e3       	ldi	r24, 0x3C	; 60
    18cc:	93 e0       	ldi	r25, 0x03	; 3
    18ce:	9a 83       	std	Y+2, r25	; 0x02
    18d0:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSQEn;
    18d2:	8e e3       	ldi	r24, 0x3E	; 62
    18d4:	93 e0       	ldi	r25, 0x03	; 3
    18d6:	9a 83       	std	Y+2, r25	; 0x02
    18d8:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQMax;
    18da:	80 e4       	ldi	r24, 0x40	; 64
    18dc:	93 e0       	ldi	r25, 0x03	; 3
    18de:	9a 83       	std	Y+2, r25	; 0x02
    18e0:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQSize;
    18e2:	82 e4       	ldi	r24, 0x42	; 66
    18e4:	93 e0       	ldi	r25, 0x03	; 3
    18e6:	9a 83       	std	Y+2, r25	; 0x02
    18e8:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSRdyTblSize;
    18ea:	84 e4       	ldi	r24, 0x44	; 68
    18ec:	93 e0       	ldi	r25, 0x03	; 3
    18ee:	9a 83       	std	Y+2, r25	; 0x02
    18f0:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSSemEn;
    18f2:	86 e4       	ldi	r24, 0x46	; 70
    18f4:	93 e0       	ldi	r25, 0x03	; 3
    18f6:	9a 83       	std	Y+2, r25	; 0x02
    18f8:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSStkWidth;
    18fa:	88 e4       	ldi	r24, 0x48	; 72
    18fc:	93 e0       	ldi	r25, 0x03	; 3
    18fe:	9a 83       	std	Y+2, r25	; 0x02
    1900:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTaskCreateEn;
    1902:	8a e4       	ldi	r24, 0x4A	; 74
    1904:	93 e0       	ldi	r25, 0x03	; 3
    1906:	9a 83       	std	Y+2, r25	; 0x02
    1908:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskCreateExtEn;
    190a:	8c e4       	ldi	r24, 0x4C	; 76
    190c:	93 e0       	ldi	r25, 0x03	; 3
    190e:	9a 83       	std	Y+2, r25	; 0x02
    1910:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskDelEn;
    1912:	8e e4       	ldi	r24, 0x4E	; 78
    1914:	93 e0       	ldi	r25, 0x03	; 3
    1916:	9a 83       	std	Y+2, r25	; 0x02
    1918:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskIdleStkSize;
    191a:	80 e5       	ldi	r24, 0x50	; 80
    191c:	93 e0       	ldi	r25, 0x03	; 3
    191e:	9a 83       	std	Y+2, r25	; 0x02
    1920:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskProfileEn;
    1922:	82 e5       	ldi	r24, 0x52	; 82
    1924:	93 e0       	ldi	r25, 0x03	; 3
    1926:	9a 83       	std	Y+2, r25	; 0x02
    1928:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskMax;
    192a:	84 e5       	ldi	r24, 0x54	; 84
    192c:	93 e0       	ldi	r25, 0x03	; 3
    192e:	9a 83       	std	Y+2, r25	; 0x02
    1930:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskNameSize;
    1932:	86 e5       	ldi	r24, 0x56	; 86
    1934:	93 e0       	ldi	r25, 0x03	; 3
    1936:	9a 83       	std	Y+2, r25	; 0x02
    1938:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatEn;
    193a:	88 e5       	ldi	r24, 0x58	; 88
    193c:	93 e0       	ldi	r25, 0x03	; 3
    193e:	9a 83       	std	Y+2, r25	; 0x02
    1940:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkSize;
    1942:	8a e5       	ldi	r24, 0x5A	; 90
    1944:	93 e0       	ldi	r25, 0x03	; 3
    1946:	9a 83       	std	Y+2, r25	; 0x02
    1948:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkChkEn;
    194a:	8c e5       	ldi	r24, 0x5C	; 92
    194c:	93 e0       	ldi	r25, 0x03	; 3
    194e:	9a 83       	std	Y+2, r25	; 0x02
    1950:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskSwHookEn;
    1952:	8e e5       	ldi	r24, 0x5E	; 94
    1954:	93 e0       	ldi	r25, 0x03	; 3
    1956:	9a 83       	std	Y+2, r25	; 0x02
    1958:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTCBPrioTblMax;
    195a:	80 e6       	ldi	r24, 0x60	; 96
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	9a 83       	std	Y+2, r25	; 0x02
    1960:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTCBSize;
    1962:	82 e6       	ldi	r24, 0x62	; 98
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	9a 83       	std	Y+2, r25	; 0x02
    1968:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTicksPerSec;
    196a:	84 e6       	ldi	r24, 0x64	; 100
    196c:	93 e0       	ldi	r25, 0x03	; 3
    196e:	9a 83       	std	Y+2, r25	; 0x02
    1970:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTimeTickHookEn;
    1972:	86 e6       	ldi	r24, 0x66	; 102
    1974:	93 e0       	ldi	r25, 0x03	; 3
    1976:	9a 83       	std	Y+2, r25	; 0x02
    1978:	89 83       	std	Y+1, r24	; 0x01

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
    197a:	8a e1       	ldi	r24, 0x1A	; 26
    197c:	95 e0       	ldi	r25, 0x05	; 5
    197e:	9a 83       	std	Y+2, r25	; 0x02
    1980:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrWheelTbl[0];
    1982:	8f ee       	ldi	r24, 0xEF	; 239
    1984:	94 e0       	ldi	r25, 0x04	; 4
    1986:	9a 83       	std	Y+2, r25	; 0x02
    1988:	89 83       	std	Y+1, r24	; 0x01
    
    ptemp = (void *)&OSTmrEn;
    198a:	8a e6       	ldi	r24, 0x6A	; 106
    198c:	93 e0       	ldi	r25, 0x03	; 3
    198e:	9a 83       	std	Y+2, r25	; 0x02
    1990:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgMax;
    1992:	8c e6       	ldi	r24, 0x6C	; 108
    1994:	93 e0       	ldi	r25, 0x03	; 3
    1996:	9a 83       	std	Y+2, r25	; 0x02
    1998:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgNameSize;
    199a:	8e e6       	ldi	r24, 0x6E	; 110
    199c:	93 e0       	ldi	r25, 0x03	; 3
    199e:	9a 83       	std	Y+2, r25	; 0x02
    19a0:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgWheelSize;
    19a2:	80 e7       	ldi	r24, 0x70	; 112
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	9a 83       	std	Y+2, r25	; 0x02
    19a8:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgTicksPerSec;
    19aa:	82 e7       	ldi	r24, 0x72	; 114
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	9a 83       	std	Y+2, r25	; 0x02
    19b0:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrSize;
    19b2:	84 e7       	ldi	r24, 0x74	; 116
    19b4:	93 e0       	ldi	r25, 0x03	; 3
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrTblSize;
    19ba:	86 e7       	ldi	r24, 0x76	; 118
    19bc:	93 e0       	ldi	r25, 0x03	; 3
    19be:	9a 83       	std	Y+2, r25	; 0x02
    19c0:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTmrWheelSize;
    19c2:	88 e7       	ldi	r24, 0x78	; 120
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrWheelTblSize;
    19ca:	8a e7       	ldi	r24, 0x7A	; 122
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	9a 83       	std	Y+2, r25	; 0x02
    19d0:	89 83       	std	Y+1, r24	; 0x01
#endif

    ptemp = (void *)&OSVersionNbr;
    19d2:	88 e6       	ldi	r24, 0x68	; 104
    19d4:	93 e0       	ldi	r25, 0x03	; 3
    19d6:	9a 83       	std	Y+2, r25	; 0x02
    19d8:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSDataSize;
    19da:	8c e7       	ldi	r24, 0x7C	; 124
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	9a 83       	std	Y+2, r25	; 0x02
    19e0:	89 83       	std	Y+1, r24	; 0x01

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    19e2:	0f 90       	pop	r0
    19e4:	0f 90       	pop	r0
    19e6:	cf 91       	pop	r28
    19e8:	df 91       	pop	r29
    19ea:	08 95       	ret

000019ec <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    19ec:	df 93       	push	r29
    19ee:	cf 93       	push	r28
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
    19f4:	27 97       	sbiw	r28, 0x07	; 7
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	9d 83       	std	Y+5, r25	; 0x05
    1a02:	8c 83       	std	Y+4, r24	; 0x04
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    1a04:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1a06:	ec 81       	ldd	r30, Y+4	; 0x04
    1a08:	fd 81       	ldd	r31, Y+5	; 0x05
    1a0a:	80 81       	ld	r24, Z
    1a0c:	83 30       	cpi	r24, 0x03	; 3
    1a0e:	19 f0       	breq	.+6      	; 0x1a16 <OSSemAccept+0x2a>
        return (0);
    1a10:	1f 82       	std	Y+7, r1	; 0x07
    1a12:	1e 82       	std	Y+6, r1	; 0x06
    1a14:	1d c0       	rjmp	.+58     	; 0x1a50 <OSSemAccept+0x64>
    }
    OS_ENTER_CRITICAL();
    1a16:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    cnt = pevent->OSEventCnt;
    1a1c:	ec 81       	ldd	r30, Y+4	; 0x04
    1a1e:	fd 81       	ldd	r31, Y+5	; 0x05
    1a20:	83 81       	ldd	r24, Z+3	; 0x03
    1a22:	94 81       	ldd	r25, Z+4	; 0x04
    1a24:	9b 83       	std	Y+3, r25	; 0x03
    1a26:	8a 83       	std	Y+2, r24	; 0x02
    if (cnt > 0) {                                    /* See if resource is available                  */
    1a28:	8a 81       	ldd	r24, Y+2	; 0x02
    1a2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2c:	00 97       	sbiw	r24, 0x00	; 0
    1a2e:	49 f0       	breq	.+18     	; 0x1a42 <OSSemAccept+0x56>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    1a30:	ec 81       	ldd	r30, Y+4	; 0x04
    1a32:	fd 81       	ldd	r31, Y+5	; 0x05
    1a34:	83 81       	ldd	r24, Z+3	; 0x03
    1a36:	94 81       	ldd	r25, Z+4	; 0x04
    1a38:	01 97       	sbiw	r24, 0x01	; 1
    1a3a:	ec 81       	ldd	r30, Y+4	; 0x04
    1a3c:	fd 81       	ldd	r31, Y+5	; 0x05
    1a3e:	94 83       	std	Z+4, r25	; 0x04
    1a40:	83 83       	std	Z+3, r24	; 0x03
    }
    OS_EXIT_CRITICAL();
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (cnt);                                     /* Return semaphore count                        */
    1a48:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4a:	9b 81       	ldd	r25, Y+3	; 0x03
    1a4c:	9f 83       	std	Y+7, r25	; 0x07
    1a4e:	8e 83       	std	Y+6, r24	; 0x06
    1a50:	8e 81       	ldd	r24, Y+6	; 0x06
    1a52:	9f 81       	ldd	r25, Y+7	; 0x07
}
    1a54:	27 96       	adiw	r28, 0x07	; 7
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	cd b7       	in	r28, 0x3d	; 61
    1a6c:	de b7       	in	r29, 0x3e	; 62
    1a6e:	27 97       	sbiw	r28, 0x07	; 7
    1a70:	0f b6       	in	r0, 0x3f	; 63
    1a72:	f8 94       	cli
    1a74:	de bf       	out	0x3e, r29	; 62
    1a76:	0f be       	out	0x3f, r0	; 63
    1a78:	cd bf       	out	0x3d, r28	; 61
    1a7a:	9d 83       	std	Y+5, r25	; 0x05
    1a7c:	8c 83       	std	Y+4, r24	; 0x04
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1a7e:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    1a80:	80 91 4c 08 	lds	r24, 0x084C
    1a84:	88 23       	and	r24, r24
    1a86:	19 f0       	breq	.+6      	; 0x1a8e <OSSemCreate+0x28>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    1a88:	1f 82       	std	Y+7, r1	; 0x07
    1a8a:	1e 82       	std	Y+6, r1	; 0x06
    1a8c:	3d c0       	rjmp	.+122    	; 0x1b08 <OSSemCreate+0xa2>
    }
    OS_ENTER_CRITICAL();
    1a8e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1a92:	89 83       	std	Y+1, r24	; 0x01
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    1a94:	80 91 4a 08 	lds	r24, 0x084A
    1a98:	90 91 4b 08 	lds	r25, 0x084B
    1a9c:	9b 83       	std	Y+3, r25	; 0x03
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    1aa0:	80 91 4a 08 	lds	r24, 0x084A
    1aa4:	90 91 4b 08 	lds	r25, 0x084B
    1aa8:	00 97       	sbiw	r24, 0x00	; 0
    1aaa:	51 f0       	breq	.+20     	; 0x1ac0 <OSSemCreate+0x5a>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    1aac:	e0 91 4a 08 	lds	r30, 0x084A
    1ab0:	f0 91 4b 08 	lds	r31, 0x084B
    1ab4:	81 81       	ldd	r24, Z+1	; 0x01
    1ab6:	92 81       	ldd	r25, Z+2	; 0x02
    1ab8:	90 93 4b 08 	sts	0x084B, r25
    1abc:	80 93 4a 08 	sts	0x084A, r24
    }
    OS_EXIT_CRITICAL();
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    1ac6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac8:	9b 81       	ldd	r25, Y+3	; 0x03
    1aca:	00 97       	sbiw	r24, 0x00	; 0
    1acc:	c9 f0       	breq	.+50     	; 0x1b00 <OSSemCreate+0x9a>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    1ace:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ad2:	83 e0       	ldi	r24, 0x03	; 3
    1ad4:	80 83       	st	Z, r24
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    1ad6:	ea 81       	ldd	r30, Y+2	; 0x02
    1ad8:	fb 81       	ldd	r31, Y+3	; 0x03
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	94 83       	std	Z+4, r25	; 0x04
    1ae0:	83 83       	std	Z+3, r24	; 0x03
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    1ae2:	ea 81       	ldd	r30, Y+2	; 0x02
    1ae4:	fb 81       	ldd	r31, Y+3	; 0x03
    1ae6:	12 82       	std	Z+2, r1	; 0x02
    1ae8:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    1aea:	ea 81       	ldd	r30, Y+2	; 0x02
    1aec:	fb 81       	ldd	r31, Y+3	; 0x03
    1aee:	8f e3       	ldi	r24, 0x3F	; 63
    1af0:	80 87       	std	Z+8, r24	; 0x08
        pevent->OSEventName[1] = OS_ASCII_NUL;
    1af2:	ea 81       	ldd	r30, Y+2	; 0x02
    1af4:	fb 81       	ldd	r31, Y+3	; 0x03
    1af6:	11 86       	std	Z+9, r1	; 0x09
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    1af8:	8a 81       	ldd	r24, Y+2	; 0x02
    1afa:	9b 81       	ldd	r25, Y+3	; 0x03
    1afc:	0e 94 17 08 	call	0x102e	; 0x102e <OS_EventWaitListInit>
    }
    return (pevent);
    1b00:	8a 81       	ldd	r24, Y+2	; 0x02
    1b02:	9b 81       	ldd	r25, Y+3	; 0x03
    1b04:	9f 83       	std	Y+7, r25	; 0x07
    1b06:	8e 83       	std	Y+6, r24	; 0x06
    1b08:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0a:	9f 81       	ldd	r25, Y+7	; 0x07
}
    1b0c:	27 96       	adiw	r28, 0x07	; 7
    1b0e:	0f b6       	in	r0, 0x3f	; 63
    1b10:	f8 94       	cli
    1b12:	de bf       	out	0x3e, r29	; 62
    1b14:	0f be       	out	0x3f, r0	; 63
    1b16:	cd bf       	out	0x3d, r28	; 61
    1b18:	cf 91       	pop	r28
    1b1a:	df 91       	pop	r29
    1b1c:	08 95       	ret

00001b1e <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    1b1e:	df 93       	push	r29
    1b20:	cf 93       	push	r28
    1b22:	cd b7       	in	r28, 0x3d	; 61
    1b24:	de b7       	in	r29, 0x3e	; 62
    1b26:	2d 97       	sbiw	r28, 0x0d	; 13
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	f8 94       	cli
    1b2c:	de bf       	out	0x3e, r29	; 62
    1b2e:	0f be       	out	0x3f, r0	; 63
    1b30:	cd bf       	out	0x3d, r28	; 61
    1b32:	9e 83       	std	Y+6, r25	; 0x06
    1b34:	8d 83       	std	Y+5, r24	; 0x05
    1b36:	6f 83       	std	Y+7, r22	; 0x07
    1b38:	59 87       	std	Y+9, r21	; 0x09
    1b3a:	48 87       	std	Y+8, r20	; 0x08
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1b3c:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    1b3e:	ed 81       	ldd	r30, Y+5	; 0x05
    1b40:	fe 81       	ldd	r31, Y+6	; 0x06
    1b42:	80 81       	ld	r24, Z
    1b44:	83 30       	cpi	r24, 0x03	; 3
    1b46:	49 f0       	breq	.+18     	; 0x1b5a <OSSemDel+0x3c>
        *perr = OS_ERR_EVENT_TYPE;
    1b48:	e8 85       	ldd	r30, Y+8	; 0x08
    1b4a:	f9 85       	ldd	r31, Y+9	; 0x09
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 83       	st	Z, r24
        return (pevent);
    1b50:	2d 81       	ldd	r18, Y+5	; 0x05
    1b52:	3e 81       	ldd	r19, Y+6	; 0x06
    1b54:	3d 87       	std	Y+13, r19	; 0x0d
    1b56:	2c 87       	std	Y+12, r18	; 0x0c
    1b58:	a2 c0       	rjmp	.+324    	; 0x1c9e <OSSemDel+0x180>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    1b5a:	80 91 4c 08 	lds	r24, 0x084C
    1b5e:	88 23       	and	r24, r24
    1b60:	49 f0       	breq	.+18     	; 0x1b74 <OSSemDel+0x56>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    1b62:	e8 85       	ldd	r30, Y+8	; 0x08
    1b64:	f9 85       	ldd	r31, Y+9	; 0x09
    1b66:	8f e0       	ldi	r24, 0x0F	; 15
    1b68:	80 83       	st	Z, r24
        return (pevent);
    1b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b6e:	9d 87       	std	Y+13, r25	; 0x0d
    1b70:	8c 87       	std	Y+12, r24	; 0x0c
    1b72:	95 c0       	rjmp	.+298    	; 0x1c9e <OSSemDel+0x180>
    }
    OS_ENTER_CRITICAL();
    1b74:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1b78:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    1b7a:	ed 81       	ldd	r30, Y+5	; 0x05
    1b7c:	fe 81       	ldd	r31, Y+6	; 0x06
    1b7e:	85 81       	ldd	r24, Z+5	; 0x05
    1b80:	88 23       	and	r24, r24
    1b82:	19 f0       	breq	.+6      	; 0x1b8a <OSSemDel+0x6c>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8c 83       	std	Y+4, r24	; 0x04
    1b88:	01 c0       	rjmp	.+2      	; 0x1b8c <OSSemDel+0x6e>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    1b8a:	1c 82       	std	Y+4, r1	; 0x04
    }
    switch (opt) {
    1b8c:	8f 81       	ldd	r24, Y+7	; 0x07
    1b8e:	28 2f       	mov	r18, r24
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	3b 87       	std	Y+11, r19	; 0x0b
    1b94:	2a 87       	std	Y+10, r18	; 0x0a
    1b96:	8a 85       	ldd	r24, Y+10	; 0x0a
    1b98:	9b 85       	ldd	r25, Y+11	; 0x0b
    1b9a:	00 97       	sbiw	r24, 0x00	; 0
    1b9c:	31 f0       	breq	.+12     	; 0x1baa <OSSemDel+0x8c>
    1b9e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ba0:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ba2:	21 30       	cpi	r18, 0x01	; 1
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	e9 f1       	breq	.+122    	; 0x1c22 <OSSemDel+0x104>
    1ba8:	6b c0       	rjmp	.+214    	; 0x1c80 <OSSemDel+0x162>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    1baa:	8c 81       	ldd	r24, Y+4	; 0x04
    1bac:	88 23       	and	r24, r24
    1bae:	29 f5       	brne	.+74     	; 0x1bfa <OSSemDel+0xdc>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    1bb0:	ed 81       	ldd	r30, Y+5	; 0x05
    1bb2:	fe 81       	ldd	r31, Y+6	; 0x06
    1bb4:	8f e3       	ldi	r24, 0x3F	; 63
    1bb6:	80 87       	std	Z+8, r24	; 0x08
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    1bb8:	ed 81       	ldd	r30, Y+5	; 0x05
    1bba:	fe 81       	ldd	r31, Y+6	; 0x06
    1bbc:	11 86       	std	Z+9, r1	; 0x09
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1bbe:	ed 81       	ldd	r30, Y+5	; 0x05
    1bc0:	fe 81       	ldd	r31, Y+6	; 0x06
    1bc2:	10 82       	st	Z, r1
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    1bc4:	80 91 4a 08 	lds	r24, 0x084A
    1bc8:	90 91 4b 08 	lds	r25, 0x084B
    1bcc:	ed 81       	ldd	r30, Y+5	; 0x05
    1bce:	fe 81       	ldd	r31, Y+6	; 0x06
    1bd0:	92 83       	std	Z+2, r25	; 0x02
    1bd2:	81 83       	std	Z+1, r24	; 0x01
                 pevent->OSEventCnt     = 0;
    1bd4:	ed 81       	ldd	r30, Y+5	; 0x05
    1bd6:	fe 81       	ldd	r31, Y+6	; 0x06
    1bd8:	14 82       	std	Z+4, r1	; 0x04
    1bda:	13 82       	std	Z+3, r1	; 0x03
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    1bdc:	8d 81       	ldd	r24, Y+5	; 0x05
    1bde:	9e 81       	ldd	r25, Y+6	; 0x06
    1be0:	90 93 4b 08 	sts	0x084B, r25
    1be4:	80 93 4a 08 	sts	0x084A, r24
                 OS_EXIT_CRITICAL();
    1be8:	89 81       	ldd	r24, Y+1	; 0x01
    1bea:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_NONE;
    1bee:	e8 85       	ldd	r30, Y+8	; 0x08
    1bf0:	f9 85       	ldd	r31, Y+9	; 0x09
    1bf2:	10 82       	st	Z, r1
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    1bf4:	1b 82       	std	Y+3, r1	; 0x03
    1bf6:	1a 82       	std	Y+2, r1	; 0x02
    1bf8:	4e c0       	rjmp	.+156    	; 0x1c96 <OSSemDel+0x178>
             } else {
                 OS_EXIT_CRITICAL();
    1bfa:	89 81       	ldd	r24, Y+1	; 0x01
    1bfc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_TASK_WAITING;
    1c00:	e8 85       	ldd	r30, Y+8	; 0x08
    1c02:	f9 85       	ldd	r31, Y+9	; 0x09
    1c04:	89 e4       	ldi	r24, 0x49	; 73
    1c06:	80 83       	st	Z, r24
                 pevent_return          = pevent;
    1c08:	8d 81       	ldd	r24, Y+5	; 0x05
    1c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c0c:	9b 83       	std	Y+3, r25	; 0x03
    1c0e:	8a 83       	std	Y+2, r24	; 0x02
    1c10:	42 c0       	rjmp	.+132    	; 0x1c96 <OSSemDel+0x178>
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    1c12:	8d 81       	ldd	r24, Y+5	; 0x05
    1c14:	9e 81       	ldd	r25, Y+6	; 0x06
    1c16:	60 e0       	ldi	r22, 0x00	; 0
    1c18:	70 e0       	ldi	r23, 0x00	; 0
    1c1a:	41 e0       	ldi	r20, 0x01	; 1
    1c1c:	20 e0       	ldi	r18, 0x00	; 0
    1c1e:	0e 94 d3 06 	call	0xda6	; 0xda6 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    1c22:	ed 81       	ldd	r30, Y+5	; 0x05
    1c24:	fe 81       	ldd	r31, Y+6	; 0x06
    1c26:	85 81       	ldd	r24, Z+5	; 0x05
    1c28:	88 23       	and	r24, r24
    1c2a:	99 f7       	brne	.-26     	; 0x1c12 <OSSemDel+0xf4>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    1c2c:	ed 81       	ldd	r30, Y+5	; 0x05
    1c2e:	fe 81       	ldd	r31, Y+6	; 0x06
    1c30:	8f e3       	ldi	r24, 0x3F	; 63
    1c32:	80 87       	std	Z+8, r24	; 0x08
             pevent->OSEventName[1] = OS_ASCII_NUL;
    1c34:	ed 81       	ldd	r30, Y+5	; 0x05
    1c36:	fe 81       	ldd	r31, Y+6	; 0x06
    1c38:	11 86       	std	Z+9, r1	; 0x09
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1c3a:	ed 81       	ldd	r30, Y+5	; 0x05
    1c3c:	fe 81       	ldd	r31, Y+6	; 0x06
    1c3e:	10 82       	st	Z, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    1c40:	80 91 4a 08 	lds	r24, 0x084A
    1c44:	90 91 4b 08 	lds	r25, 0x084B
    1c48:	ed 81       	ldd	r30, Y+5	; 0x05
    1c4a:	fe 81       	ldd	r31, Y+6	; 0x06
    1c4c:	92 83       	std	Z+2, r25	; 0x02
    1c4e:	81 83       	std	Z+1, r24	; 0x01
             pevent->OSEventCnt     = 0;
    1c50:	ed 81       	ldd	r30, Y+5	; 0x05
    1c52:	fe 81       	ldd	r31, Y+6	; 0x06
    1c54:	14 82       	std	Z+4, r1	; 0x04
    1c56:	13 82       	std	Z+3, r1	; 0x03
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    1c58:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5c:	90 93 4b 08 	sts	0x084B, r25
    1c60:	80 93 4a 08 	sts	0x084A, r24
             OS_EXIT_CRITICAL();
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    1c6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	11 f4       	brne	.+4      	; 0x1c74 <OSSemDel+0x156>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    1c70:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    1c74:	e8 85       	ldd	r30, Y+8	; 0x08
    1c76:	f9 85       	ldd	r31, Y+9	; 0x09
    1c78:	10 82       	st	Z, r1
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    1c7a:	1b 82       	std	Y+3, r1	; 0x03
    1c7c:	1a 82       	std	Y+2, r1	; 0x02
    1c7e:	0b c0       	rjmp	.+22     	; 0x1c96 <OSSemDel+0x178>
             break;

        default:
             OS_EXIT_CRITICAL();
    1c80:	89 81       	ldd	r24, Y+1	; 0x01
    1c82:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             *perr                  = OS_ERR_INVALID_OPT;
    1c86:	e8 85       	ldd	r30, Y+8	; 0x08
    1c88:	f9 85       	ldd	r31, Y+9	; 0x09
    1c8a:	87 e0       	ldi	r24, 0x07	; 7
    1c8c:	80 83       	st	Z, r24
             pevent_return          = pevent;
    1c8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c90:	9e 81       	ldd	r25, Y+6	; 0x06
    1c92:	9b 83       	std	Y+3, r25	; 0x03
    1c94:	8a 83       	std	Y+2, r24	; 0x02
             break;
    }
    return (pevent_return);
    1c96:	8a 81       	ldd	r24, Y+2	; 0x02
    1c98:	9b 81       	ldd	r25, Y+3	; 0x03
    1c9a:	9d 87       	std	Y+13, r25	; 0x0d
    1c9c:	8c 87       	std	Y+12, r24	; 0x0c
    1c9e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1ca0:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    1ca2:	2d 96       	adiw	r28, 0x0d	; 13
    1ca4:	0f b6       	in	r0, 0x3f	; 63
    1ca6:	f8 94       	cli
    1ca8:	de bf       	out	0x3e, r29	; 62
    1caa:	0f be       	out	0x3f, r0	; 63
    1cac:	cd bf       	out	0x3d, r28	; 61
    1cae:	cf 91       	pop	r28
    1cb0:	df 91       	pop	r29
    1cb2:	08 95       	ret

00001cb4 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    1cb4:	df 93       	push	r29
    1cb6:	cf 93       	push	r28
    1cb8:	cd b7       	in	r28, 0x3d	; 61
    1cba:	de b7       	in	r29, 0x3e	; 62
    1cbc:	29 97       	sbiw	r28, 0x09	; 9
    1cbe:	0f b6       	in	r0, 0x3f	; 63
    1cc0:	f8 94       	cli
    1cc2:	de bf       	out	0x3e, r29	; 62
    1cc4:	0f be       	out	0x3f, r0	; 63
    1cc6:	cd bf       	out	0x3d, r28	; 61
    1cc8:	9b 83       	std	Y+3, r25	; 0x03
    1cca:	8a 83       	std	Y+2, r24	; 0x02
    1ccc:	7d 83       	std	Y+5, r23	; 0x05
    1cce:	6c 83       	std	Y+4, r22	; 0x04
    1cd0:	5f 83       	std	Y+7, r21	; 0x07
    1cd2:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    1cd4:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1cd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1cd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1cda:	80 81       	ld	r24, Z
    1cdc:	83 30       	cpi	r24, 0x03	; 3
    1cde:	29 f0       	breq	.+10     	; 0x1cea <OSSemPend+0x36>
        *perr = OS_ERR_EVENT_TYPE;
    1ce0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ce2:	ff 81       	ldd	r31, Y+7	; 0x07
    1ce4:	81 e0       	ldi	r24, 0x01	; 1
    1ce6:	80 83       	st	Z, r24
    1ce8:	8c c0       	rjmp	.+280    	; 0x1e02 <OSSemPend+0x14e>
        return;
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    1cea:	80 91 4c 08 	lds	r24, 0x084C
    1cee:	88 23       	and	r24, r24
    1cf0:	29 f0       	breq	.+10     	; 0x1cfc <OSSemPend+0x48>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    1cf2:	ee 81       	ldd	r30, Y+6	; 0x06
    1cf4:	ff 81       	ldd	r31, Y+7	; 0x07
    1cf6:	82 e0       	ldi	r24, 0x02	; 2
    1cf8:	80 83       	st	Z, r24
    1cfa:	83 c0       	rjmp	.+262    	; 0x1e02 <OSSemPend+0x14e>
        return;
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    1cfc:	80 91 0f 05 	lds	r24, 0x050F
    1d00:	88 23       	and	r24, r24
    1d02:	29 f0       	breq	.+10     	; 0x1d0e <OSSemPend+0x5a>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    1d04:	ee 81       	ldd	r30, Y+6	; 0x06
    1d06:	ff 81       	ldd	r31, Y+7	; 0x07
    1d08:	8d e0       	ldi	r24, 0x0D	; 13
    1d0a:	80 83       	st	Z, r24
    1d0c:	7a c0       	rjmp	.+244    	; 0x1e02 <OSSemPend+0x14e>
        return;
    }
    OS_ENTER_CRITICAL();
    1d0e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1d12:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    1d14:	ea 81       	ldd	r30, Y+2	; 0x02
    1d16:	fb 81       	ldd	r31, Y+3	; 0x03
    1d18:	83 81       	ldd	r24, Z+3	; 0x03
    1d1a:	94 81       	ldd	r25, Z+4	; 0x04
    1d1c:	00 97       	sbiw	r24, 0x00	; 0
    1d1e:	81 f0       	breq	.+32     	; 0x1d40 <OSSemPend+0x8c>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    1d20:	ea 81       	ldd	r30, Y+2	; 0x02
    1d22:	fb 81       	ldd	r31, Y+3	; 0x03
    1d24:	83 81       	ldd	r24, Z+3	; 0x03
    1d26:	94 81       	ldd	r25, Z+4	; 0x04
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2c:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2e:	94 83       	std	Z+4, r25	; 0x04
    1d30:	83 83       	std	Z+3, r24	; 0x03
        OS_EXIT_CRITICAL();
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
    1d38:	ee 81       	ldd	r30, Y+6	; 0x06
    1d3a:	ff 81       	ldd	r31, Y+7	; 0x07
    1d3c:	10 82       	st	Z, r1
    1d3e:	61 c0       	rjmp	.+194    	; 0x1e02 <OSSemPend+0x14e>
        return;
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    1d40:	a0 91 4d 08 	lds	r26, 0x084D
    1d44:	b0 91 4e 08 	lds	r27, 0x084E
    1d48:	e0 91 4d 08 	lds	r30, 0x084D
    1d4c:	f0 91 4e 08 	lds	r31, 0x084E
    1d50:	86 89       	ldd	r24, Z+22	; 0x16
    1d52:	81 60       	ori	r24, 0x01	; 1
    1d54:	56 96       	adiw	r26, 0x16	; 22
    1d56:	8c 93       	st	X, r24
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    1d58:	e0 91 4d 08 	lds	r30, 0x084D
    1d5c:	f0 91 4e 08 	lds	r31, 0x084E
    1d60:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    1d62:	e0 91 4d 08 	lds	r30, 0x084D
    1d66:	f0 91 4e 08 	lds	r31, 0x084E
    1d6a:	8c 81       	ldd	r24, Y+4	; 0x04
    1d6c:	9d 81       	ldd	r25, Y+5	; 0x05
    1d6e:	95 8b       	std	Z+21, r25	; 0x15
    1d70:	84 8b       	std	Z+20, r24	; 0x14
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    1d72:	8a 81       	ldd	r24, Y+2	; 0x02
    1d74:	9b 81       	ldd	r25, Y+3	; 0x03
    1d76:	0e 94 58 07 	call	0xeb0	; 0xeb0 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    1d7a:	89 81       	ldd	r24, Y+1	; 0x01
    1d7c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
    1d80:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
    OS_ENTER_CRITICAL();
    1d84:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1d88:	89 83       	std	Y+1, r24	; 0x01
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    1d8a:	e0 91 4d 08 	lds	r30, 0x084D
    1d8e:	f0 91 4e 08 	lds	r31, 0x084E
    1d92:	87 89       	ldd	r24, Z+23	; 0x17
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	39 87       	std	Y+9, r19	; 0x09
    1d9a:	28 87       	std	Y+8, r18	; 0x08
    1d9c:	88 85       	ldd	r24, Y+8	; 0x08
    1d9e:	99 85       	ldd	r25, Y+9	; 0x09
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	31 f0       	breq	.+12     	; 0x1db0 <OSSemPend+0xfc>
    1da4:	28 85       	ldd	r18, Y+8	; 0x08
    1da6:	39 85       	ldd	r19, Y+9	; 0x09
    1da8:	22 30       	cpi	r18, 0x02	; 2
    1daa:	31 05       	cpc	r19, r1
    1dac:	29 f0       	breq	.+10     	; 0x1db8 <OSSemPend+0x104>
    1dae:	09 c0       	rjmp	.+18     	; 0x1dc2 <OSSemPend+0x10e>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    1db0:	ee 81       	ldd	r30, Y+6	; 0x06
    1db2:	ff 81       	ldd	r31, Y+7	; 0x07
    1db4:	10 82       	st	Z, r1
    1db6:	12 c0       	rjmp	.+36     	; 0x1ddc <OSSemPend+0x128>
             break;

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    1db8:	ee 81       	ldd	r30, Y+6	; 0x06
    1dba:	ff 81       	ldd	r31, Y+7	; 0x07
    1dbc:	8e e0       	ldi	r24, 0x0E	; 14
    1dbe:	80 83       	st	Z, r24
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <OSSemPend+0x128>
             break;

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    1dc2:	80 91 4d 08 	lds	r24, 0x084D
    1dc6:	90 91 4e 08 	lds	r25, 0x084E
    1dca:	2a 81       	ldd	r18, Y+2	; 0x02
    1dcc:	3b 81       	ldd	r19, Y+3	; 0x03
    1dce:	b9 01       	movw	r22, r18
    1dd0:	0e 94 cd 07 	call	0xf9a	; 0xf9a <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    1dd4:	ee 81       	ldd	r30, Y+6	; 0x06
    1dd6:	ff 81       	ldd	r31, Y+7	; 0x07
    1dd8:	8a e0       	ldi	r24, 0x0A	; 10
    1dda:	80 83       	st	Z, r24
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    1ddc:	e0 91 4d 08 	lds	r30, 0x084D
    1de0:	f0 91 4e 08 	lds	r31, 0x084E
    1de4:	16 8a       	std	Z+22, r1	; 0x16
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    1de6:	e0 91 4d 08 	lds	r30, 0x084D
    1dea:	f0 91 4e 08 	lds	r31, 0x084E
    1dee:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    1df0:	e0 91 4d 08 	lds	r30, 0x084D
    1df4:	f0 91 4e 08 	lds	r31, 0x084E
    1df8:	13 8a       	std	Z+19, r1	; 0x13
    1dfa:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    1e02:	29 96       	adiw	r28, 0x09	; 9
    1e04:	0f b6       	in	r0, 0x3f	; 63
    1e06:	f8 94       	cli
    1e08:	de bf       	out	0x3e, r29	; 62
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	cd bf       	out	0x3d, r28	; 61
    1e0e:	cf 91       	pop	r28
    1e10:	df 91       	pop	r29
    1e12:	08 95       	ret

00001e14 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    1e14:	df 93       	push	r29
    1e16:	cf 93       	push	r28
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	28 97       	sbiw	r28, 0x08	; 8
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	9c 83       	std	Y+4, r25	; 0x04
    1e2a:	8b 83       	std	Y+3, r24	; 0x03
    1e2c:	6d 83       	std	Y+5, r22	; 0x05
    1e2e:	5f 83       	std	Y+7, r21	; 0x07
    1e30:	4e 83       	std	Y+6, r20	; 0x06
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    1e32:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1e34:	eb 81       	ldd	r30, Y+3	; 0x03
    1e36:	fc 81       	ldd	r31, Y+4	; 0x04
    1e38:	80 81       	ld	r24, Z
    1e3a:	83 30       	cpi	r24, 0x03	; 3
    1e3c:	31 f0       	breq	.+12     	; 0x1e4a <OSSemPendAbort+0x36>
        *perr = OS_ERR_EVENT_TYPE;
    1e3e:	ee 81       	ldd	r30, Y+6	; 0x06
    1e40:	ff 81       	ldd	r31, Y+7	; 0x07
    1e42:	81 e0       	ldi	r24, 0x01	; 1
    1e44:	80 83       	st	Z, r24
        return (0);
    1e46:	18 86       	std	Y+8, r1	; 0x08
    1e48:	3f c0       	rjmp	.+126    	; 0x1ec8 <OSSemPendAbort+0xb4>
    }
    OS_ENTER_CRITICAL();
    1e4a:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1e4e:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    1e50:	eb 81       	ldd	r30, Y+3	; 0x03
    1e52:	fc 81       	ldd	r31, Y+4	; 0x04
    1e54:	85 81       	ldd	r24, Z+5	; 0x05
    1e56:	88 23       	and	r24, r24
    1e58:	81 f1       	breq	.+96     	; 0x1eba <OSSemPendAbort+0xa6>
        nbr_tasks = 0;
    1e5a:	1a 82       	std	Y+2, r1	; 0x02
        switch (opt) {
    1e5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e5e:	88 2f       	mov	r24, r24
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	81 30       	cpi	r24, 0x01	; 1
    1e64:	91 05       	cpc	r25, r1
    1e66:	61 f0       	breq	.+24     	; 0x1e80 <OSSemPendAbort+0x6c>
    1e68:	11 c0       	rjmp	.+34     	; 0x1e8c <OSSemPendAbort+0x78>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    1e6a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e6c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e6e:	60 e0       	ldi	r22, 0x00	; 0
    1e70:	70 e0       	ldi	r23, 0x00	; 0
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	22 e0       	ldi	r18, 0x02	; 2
    1e76:	0e 94 d3 06 	call	0xda6	; 0xda6 <OS_EventTaskRdy>
                     nbr_tasks++;
    1e7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7c:	8f 5f       	subi	r24, 0xFF	; 255
    1e7e:	8a 83       	std	Y+2, r24	; 0x02
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    1e80:	eb 81       	ldd	r30, Y+3	; 0x03
    1e82:	fc 81       	ldd	r31, Y+4	; 0x04
    1e84:	85 81       	ldd	r24, Z+5	; 0x05
    1e86:	88 23       	and	r24, r24
    1e88:	81 f7       	brne	.-32     	; 0x1e6a <OSSemPendAbort+0x56>
    1e8a:	0b c0       	rjmp	.+22     	; 0x1ea2 <OSSemPendAbort+0x8e>
                 }
                 break;
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    1e8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	70 e0       	ldi	r23, 0x00	; 0
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	22 e0       	ldi	r18, 0x02	; 2
    1e98:	0e 94 d3 06 	call	0xda6	; 0xda6 <OS_EventTaskRdy>
                 nbr_tasks++;
    1e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	8a 83       	std	Y+2, r24	; 0x02
                 break;
        }
        OS_EXIT_CRITICAL();
    1ea2:	89 81       	ldd	r24, Y+1	; 0x01
    1ea4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    1ea8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    1eac:	ee 81       	ldd	r30, Y+6	; 0x06
    1eae:	ff 81       	ldd	r31, Y+7	; 0x07
    1eb0:	8e e0       	ldi	r24, 0x0E	; 14
    1eb2:	80 83       	st	Z, r24
        return (nbr_tasks);
    1eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb6:	88 87       	std	Y+8, r24	; 0x08
    1eb8:	07 c0       	rjmp	.+14     	; 0x1ec8 <OSSemPendAbort+0xb4>
    }
    OS_EXIT_CRITICAL();
    1eba:	89 81       	ldd	r24, Y+1	; 0x01
    1ebc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    1ec0:	ee 81       	ldd	r30, Y+6	; 0x06
    1ec2:	ff 81       	ldd	r31, Y+7	; 0x07
    1ec4:	10 82       	st	Z, r1
    return (0);                                       /* No tasks waiting on semaphore                 */
    1ec6:	18 86       	std	Y+8, r1	; 0x08
    1ec8:	88 85       	ldd	r24, Y+8	; 0x08
}
    1eca:	28 96       	adiw	r28, 0x08	; 8
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret

00001edc <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    1edc:	df 93       	push	r29
    1ede:	cf 93       	push	r28
    1ee0:	00 d0       	rcall	.+0      	; 0x1ee2 <OSSemPost+0x6>
    1ee2:	0f 92       	push	r0
    1ee4:	cd b7       	in	r28, 0x3d	; 61
    1ee6:	de b7       	in	r29, 0x3e	; 62
    1ee8:	9b 83       	std	Y+3, r25	; 0x03
    1eea:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    1eec:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1eee:	ea 81       	ldd	r30, Y+2	; 0x02
    1ef0:	fb 81       	ldd	r31, Y+3	; 0x03
    1ef2:	80 81       	ld	r24, Z
    1ef4:	83 30       	cpi	r24, 0x03	; 3
    1ef6:	19 f0       	breq	.+6      	; 0x1efe <OSSemPost+0x22>
        return (OS_ERR_EVENT_TYPE);
    1ef8:	21 e0       	ldi	r18, 0x01	; 1
    1efa:	2c 83       	std	Y+4, r18	; 0x04
    1efc:	32 c0       	rjmp	.+100    	; 0x1f62 <OSSemPost+0x86>
    }
    OS_ENTER_CRITICAL();
    1efe:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1f02:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    1f04:	ea 81       	ldd	r30, Y+2	; 0x02
    1f06:	fb 81       	ldd	r31, Y+3	; 0x03
    1f08:	85 81       	ldd	r24, Z+5	; 0x05
    1f0a:	88 23       	and	r24, r24
    1f0c:	79 f0       	breq	.+30     	; 0x1f2c <OSSemPost+0x50>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    1f0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f10:	9b 81       	ldd	r25, Y+3	; 0x03
    1f12:	60 e0       	ldi	r22, 0x00	; 0
    1f14:	70 e0       	ldi	r23, 0x00	; 0
    1f16:	41 e0       	ldi	r20, 0x01	; 1
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	0e 94 d3 06 	call	0xda6	; 0xda6 <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    1f1e:	89 81       	ldd	r24, Y+1	; 0x01
    1f20:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    1f24:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
        return (OS_ERR_NONE);
    1f28:	1c 82       	std	Y+4, r1	; 0x04
    1f2a:	1b c0       	rjmp	.+54     	; 0x1f62 <OSSemPost+0x86>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    1f2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f30:	83 81       	ldd	r24, Z+3	; 0x03
    1f32:	94 81       	ldd	r25, Z+4	; 0x04
    1f34:	2f ef       	ldi	r18, 0xFF	; 255
    1f36:	8f 3f       	cpi	r24, 0xFF	; 255
    1f38:	92 07       	cpc	r25, r18
    1f3a:	71 f0       	breq	.+28     	; 0x1f58 <OSSemPost+0x7c>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    1f3c:	ea 81       	ldd	r30, Y+2	; 0x02
    1f3e:	fb 81       	ldd	r31, Y+3	; 0x03
    1f40:	83 81       	ldd	r24, Z+3	; 0x03
    1f42:	94 81       	ldd	r25, Z+4	; 0x04
    1f44:	01 96       	adiw	r24, 0x01	; 1
    1f46:	ea 81       	ldd	r30, Y+2	; 0x02
    1f48:	fb 81       	ldd	r31, Y+3	; 0x03
    1f4a:	94 83       	std	Z+4, r25	; 0x04
    1f4c:	83 83       	std	Z+3, r24	; 0x03
        OS_EXIT_CRITICAL();
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    1f54:	1c 82       	std	Y+4, r1	; 0x04
    1f56:	05 c0       	rjmp	.+10     	; 0x1f62 <OSSemPost+0x86>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    1f58:	89 81       	ldd	r24, Y+1	; 0x01
    1f5a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
    1f5e:	82 e3       	ldi	r24, 0x32	; 50
    1f60:	8c 83       	std	Y+4, r24	; 0x04
    1f62:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	0f 90       	pop	r0
    1f6a:	0f 90       	pop	r0
    1f6c:	cf 91       	pop	r28
    1f6e:	df 91       	pop	r29
    1f70:	08 95       	ret

00001f72 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	2b 97       	sbiw	r28, 0x0b	; 11
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	98 87       	std	Y+8, r25	; 0x08
    1f88:	8f 83       	std	Y+7, r24	; 0x07
    1f8a:	7a 87       	std	Y+10, r23	; 0x0a
    1f8c:	69 87       	std	Y+9, r22	; 0x09
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1f8e:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    1f90:	ef 81       	ldd	r30, Y+7	; 0x07
    1f92:	f8 85       	ldd	r31, Y+8	; 0x08
    1f94:	80 81       	ld	r24, Z
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	19 f0       	breq	.+6      	; 0x1fa0 <OSSemQuery+0x2e>
        return (OS_ERR_EVENT_TYPE);
    1f9a:	81 e0       	ldi	r24, 0x01	; 1
    1f9c:	8b 87       	std	Y+11, r24	; 0x0b
    1f9e:	37 c0       	rjmp	.+110    	; 0x200e <OSSemQuery+0x9c>
    }
    OS_ENTER_CRITICAL();
    1fa0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    1fa6:	ef 81       	ldd	r30, Y+7	; 0x07
    1fa8:	f8 85       	ldd	r31, Y+8	; 0x08
    1faa:	85 81       	ldd	r24, Z+5	; 0x05
    1fac:	e9 85       	ldd	r30, Y+9	; 0x09
    1fae:	fa 85       	ldd	r31, Y+10	; 0x0a
    1fb0:	84 83       	std	Z+4, r24	; 0x04
    psrc                   = &pevent->OSEventTbl[0];
    1fb2:	8f 81       	ldd	r24, Y+7	; 0x07
    1fb4:	98 85       	ldd	r25, Y+8	; 0x08
    1fb6:	06 96       	adiw	r24, 0x06	; 6
    1fb8:	9e 83       	std	Y+6, r25	; 0x06
    1fba:	8d 83       	std	Y+5, r24	; 0x05
    pdest                  = &p_sem_data->OSEventTbl[0];
    1fbc:	89 85       	ldd	r24, Y+9	; 0x09
    1fbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fc0:	02 96       	adiw	r24, 0x02	; 2
    1fc2:	9c 83       	std	Y+4, r25	; 0x04
    1fc4:	8b 83       	std	Y+3, r24	; 0x03
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1fc6:	1a 82       	std	Y+2, r1	; 0x02
    1fc8:	13 c0       	rjmp	.+38     	; 0x1ff0 <OSSemQuery+0x7e>
        *pdest++ = *psrc++;
    1fca:	ed 81       	ldd	r30, Y+5	; 0x05
    1fcc:	fe 81       	ldd	r31, Y+6	; 0x06
    1fce:	80 81       	ld	r24, Z
    1fd0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fd2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fd4:	80 83       	st	Z, r24
    1fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1fda:	01 96       	adiw	r24, 0x01	; 1
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
    1fe0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe4:	01 96       	adiw	r24, 0x01	; 1
    1fe6:	9e 83       	std	Y+6, r25	; 0x06
    1fe8:	8d 83       	std	Y+5, r24	; 0x05
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1fea:	8a 81       	ldd	r24, Y+2	; 0x02
    1fec:	8f 5f       	subi	r24, 0xFF	; 255
    1fee:	8a 83       	std	Y+2, r24	; 0x02
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	82 30       	cpi	r24, 0x02	; 2
    1ff4:	50 f3       	brcs	.-44     	; 0x1fca <OSSemQuery+0x58>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    1ff6:	ef 81       	ldd	r30, Y+7	; 0x07
    1ff8:	f8 85       	ldd	r31, Y+8	; 0x08
    1ffa:	83 81       	ldd	r24, Z+3	; 0x03
    1ffc:	94 81       	ldd	r25, Z+4	; 0x04
    1ffe:	e9 85       	ldd	r30, Y+9	; 0x09
    2000:	fa 85       	ldd	r31, Y+10	; 0x0a
    2002:	91 83       	std	Z+1, r25	; 0x01
    2004:	80 83       	st	Z, r24
    OS_EXIT_CRITICAL();
    2006:	89 81       	ldd	r24, Y+1	; 0x01
    2008:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    200c:	1b 86       	std	Y+11, r1	; 0x0b
    200e:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    2010:	2b 96       	adiw	r28, 0x0b	; 11
    2012:	0f b6       	in	r0, 0x3f	; 63
    2014:	f8 94       	cli
    2016:	de bf       	out	0x3e, r29	; 62
    2018:	0f be       	out	0x3f, r0	; 63
    201a:	cd bf       	out	0x3d, r28	; 61
    201c:	cf 91       	pop	r28
    201e:	df 91       	pop	r29
    2020:	08 95       	ret

00002022 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	27 97       	sbiw	r28, 0x07	; 7
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
    2036:	9b 83       	std	Y+3, r25	; 0x03
    2038:	8a 83       	std	Y+2, r24	; 0x02
    203a:	7d 83       	std	Y+5, r23	; 0x05
    203c:	6c 83       	std	Y+4, r22	; 0x04
    203e:	5f 83       	std	Y+7, r21	; 0x07
    2040:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    2042:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    2044:	ea 81       	ldd	r30, Y+2	; 0x02
    2046:	fb 81       	ldd	r31, Y+3	; 0x03
    2048:	80 81       	ld	r24, Z
    204a:	83 30       	cpi	r24, 0x03	; 3
    204c:	29 f0       	breq	.+10     	; 0x2058 <OSSemSet+0x36>
        *perr = OS_ERR_EVENT_TYPE;
    204e:	ee 81       	ldd	r30, Y+6	; 0x06
    2050:	ff 81       	ldd	r31, Y+7	; 0x07
    2052:	81 e0       	ldi	r24, 0x01	; 1
    2054:	80 83       	st	Z, r24
    2056:	26 c0       	rjmp	.+76     	; 0x20a4 <OSSemSet+0x82>
        return;
    }
    OS_ENTER_CRITICAL();
    2058:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    205c:	89 83       	std	Y+1, r24	; 0x01
    *perr = OS_ERR_NONE;
    205e:	ee 81       	ldd	r30, Y+6	; 0x06
    2060:	ff 81       	ldd	r31, Y+7	; 0x07
    2062:	10 82       	st	Z, r1
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    2064:	ea 81       	ldd	r30, Y+2	; 0x02
    2066:	fb 81       	ldd	r31, Y+3	; 0x03
    2068:	83 81       	ldd	r24, Z+3	; 0x03
    206a:	94 81       	ldd	r25, Z+4	; 0x04
    206c:	00 97       	sbiw	r24, 0x00	; 0
    206e:	39 f0       	breq	.+14     	; 0x207e <OSSemSet+0x5c>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    2070:	ea 81       	ldd	r30, Y+2	; 0x02
    2072:	fb 81       	ldd	r31, Y+3	; 0x03
    2074:	8c 81       	ldd	r24, Y+4	; 0x04
    2076:	9d 81       	ldd	r25, Y+5	; 0x05
    2078:	94 83       	std	Z+4, r25	; 0x04
    207a:	83 83       	std	Z+3, r24	; 0x03
    207c:	10 c0       	rjmp	.+32     	; 0x209e <OSSemSet+0x7c>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    207e:	ea 81       	ldd	r30, Y+2	; 0x02
    2080:	fb 81       	ldd	r31, Y+3	; 0x03
    2082:	85 81       	ldd	r24, Z+5	; 0x05
    2084:	88 23       	and	r24, r24
    2086:	39 f4       	brne	.+14     	; 0x2096 <OSSemSet+0x74>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    2088:	ea 81       	ldd	r30, Y+2	; 0x02
    208a:	fb 81       	ldd	r31, Y+3	; 0x03
    208c:	8c 81       	ldd	r24, Y+4	; 0x04
    208e:	9d 81       	ldd	r25, Y+5	; 0x05
    2090:	94 83       	std	Z+4, r25	; 0x04
    2092:	83 83       	std	Z+3, r24	; 0x03
    2094:	04 c0       	rjmp	.+8      	; 0x209e <OSSemSet+0x7c>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    2096:	ee 81       	ldd	r30, Y+6	; 0x06
    2098:	ff 81       	ldd	r31, Y+7	; 0x07
    209a:	89 e4       	ldi	r24, 0x49	; 73
    209c:	80 83       	st	Z, r24
        }
    }
    OS_EXIT_CRITICAL();
    209e:	89 81       	ldd	r24, Y+1	; 0x01
    20a0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    20a4:	27 96       	adiw	r28, 0x07	; 7
    20a6:	0f b6       	in	r0, 0x3f	; 63
    20a8:	f8 94       	cli
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	0f be       	out	0x3f, r0	; 63
    20ae:	cd bf       	out	0x3d, r28	; 61
    20b0:	cf 91       	pop	r28
    20b2:	df 91       	pop	r29
    20b4:	08 95       	ret

000020b6 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    20b6:	af 92       	push	r10
    20b8:	bf 92       	push	r11
    20ba:	cf 92       	push	r12
    20bc:	df 92       	push	r13
    20be:	ef 92       	push	r14
    20c0:	ff 92       	push	r15
    20c2:	0f 93       	push	r16
    20c4:	1f 93       	push	r17
    20c6:	df 93       	push	r29
    20c8:	cf 93       	push	r28
    20ca:	cd b7       	in	r28, 0x3d	; 61
    20cc:	de b7       	in	r29, 0x3e	; 62
    20ce:	2c 97       	sbiw	r28, 0x0c	; 12
    20d0:	0f b6       	in	r0, 0x3f	; 63
    20d2:	f8 94       	cli
    20d4:	de bf       	out	0x3e, r29	; 62
    20d6:	0f be       	out	0x3f, r0	; 63
    20d8:	cd bf       	out	0x3d, r28	; 61
    20da:	9e 83       	std	Y+6, r25	; 0x06
    20dc:	8d 83       	std	Y+5, r24	; 0x05
    20de:	78 87       	std	Y+8, r23	; 0x08
    20e0:	6f 83       	std	Y+7, r22	; 0x07
    20e2:	5a 87       	std	Y+10, r21	; 0x0a
    20e4:	49 87       	std	Y+9, r20	; 0x09
    20e6:	2b 87       	std	Y+11, r18	; 0x0b
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    20e8:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    20ea:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    20ee:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    20f0:	80 91 4c 08 	lds	r24, 0x084C
    20f4:	88 23       	and	r24, r24
    20f6:	31 f0       	breq	.+12     	; 0x2104 <OSTaskCreate+0x4e>
        OS_EXIT_CRITICAL();
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
    20fa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    20fe:	8c e3       	ldi	r24, 0x3C	; 60
    2100:	8c 87       	std	Y+12, r24	; 0x0c
    2102:	5d c0       	rjmp	.+186    	; 0x21be <OSTaskCreate+0x108>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    2104:	8b 85       	ldd	r24, Y+11	; 0x0b
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	88 0f       	add	r24, r24
    210c:	99 1f       	adc	r25, r25
    210e:	fc 01       	movw	r30, r24
    2110:	e0 51       	subi	r30, 0x10	; 16
    2112:	f4 4f       	sbci	r31, 0xF4	; 244
    2114:	80 81       	ld	r24, Z
    2116:	91 81       	ldd	r25, Z+1	; 0x01
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	09 f0       	breq	.+2      	; 0x211e <OSTaskCreate+0x68>
    211c:	4b c0       	rjmp	.+150    	; 0x21b4 <OSTaskCreate+0xfe>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    211e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2120:	88 2f       	mov	r24, r24
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	88 0f       	add	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	fc 01       	movw	r30, r24
    212a:	e0 51       	subi	r30, 0x10	; 16
    212c:	f4 4f       	sbci	r31, 0xF4	; 244
    212e:	81 e0       	ldi	r24, 0x01	; 1
    2130:	90 e0       	ldi	r25, 0x00	; 0
    2132:	91 83       	std	Z+1, r25	; 0x01
    2134:	80 83       	st	Z, r24
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    2136:	89 81       	ldd	r24, Y+1	; 0x01
    2138:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    213c:	8d 81       	ldd	r24, Y+5	; 0x05
    213e:	9e 81       	ldd	r25, Y+6	; 0x06
    2140:	2f 81       	ldd	r18, Y+7	; 0x07
    2142:	38 85       	ldd	r19, Y+8	; 0x08
    2144:	49 85       	ldd	r20, Y+9	; 0x09
    2146:	5a 85       	ldd	r21, Y+10	; 0x0a
    2148:	b9 01       	movw	r22, r18
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    2152:	9c 83       	std	Y+4, r25	; 0x04
    2154:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    2156:	2b 81       	ldd	r18, Y+3	; 0x03
    2158:	3c 81       	ldd	r19, Y+4	; 0x04
    215a:	8b 85       	ldd	r24, Y+11	; 0x0b
    215c:	b9 01       	movw	r22, r18
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	50 e0       	ldi	r21, 0x00	; 0
    2162:	20 e0       	ldi	r18, 0x00	; 0
    2164:	30 e0       	ldi	r19, 0x00	; 0
    2166:	ee 24       	eor	r14, r14
    2168:	ff 24       	eor	r15, r15
    216a:	87 01       	movw	r16, r14
    216c:	cc 24       	eor	r12, r12
    216e:	dd 24       	eor	r13, r13
    2170:	aa 24       	eor	r10, r10
    2172:	bb 24       	eor	r11, r11
    2174:	0e 94 cf 0a 	call	0x159e	; 0x159e <OS_TCBInit>
    2178:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	88 23       	and	r24, r24
    217e:	39 f4       	brne	.+14     	; 0x218e <OSTaskCreate+0xd8>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    2180:	80 91 12 05 	lds	r24, 0x0512
    2184:	81 30       	cpi	r24, 0x01	; 1
    2186:	99 f4       	brne	.+38     	; 0x21ae <OSTaskCreate+0xf8>
                OS_Sched();
    2188:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
    218c:	10 c0       	rjmp	.+32     	; 0x21ae <OSTaskCreate+0xf8>
            }
        } else {
            OS_ENTER_CRITICAL();
    218e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2192:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    2194:	8b 85       	ldd	r24, Y+11	; 0x0b
    2196:	88 2f       	mov	r24, r24
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	88 0f       	add	r24, r24
    219c:	99 1f       	adc	r25, r25
    219e:	fc 01       	movw	r30, r24
    21a0:	e0 51       	subi	r30, 0x10	; 16
    21a2:	f4 4f       	sbci	r31, 0xF4	; 244
    21a4:	11 82       	std	Z+1, r1	; 0x01
    21a6:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
        return (err);
    21ae:	8a 81       	ldd	r24, Y+2	; 0x02
    21b0:	8c 87       	std	Y+12, r24	; 0x0c
    21b2:	05 c0       	rjmp	.+10     	; 0x21be <OSTaskCreate+0x108>
    }
    OS_EXIT_CRITICAL();
    21b4:	89 81       	ldd	r24, Y+1	; 0x01
    21b6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    21ba:	88 e2       	ldi	r24, 0x28	; 40
    21bc:	8c 87       	std	Y+12, r24	; 0x0c
    21be:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    21c0:	2c 96       	adiw	r28, 0x0c	; 12
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	1f 91       	pop	r17
    21d2:	0f 91       	pop	r16
    21d4:	ff 90       	pop	r15
    21d6:	ef 90       	pop	r14
    21d8:	df 90       	pop	r13
    21da:	cf 90       	pop	r12
    21dc:	bf 90       	pop	r11
    21de:	af 90       	pop	r10
    21e0:	08 95       	ret

000021e2 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    21e2:	8f 92       	push	r8
    21e4:	9f 92       	push	r9
    21e6:	af 92       	push	r10
    21e8:	bf 92       	push	r11
    21ea:	cf 92       	push	r12
    21ec:	df 92       	push	r13
    21ee:	ef 92       	push	r14
    21f0:	ff 92       	push	r15
    21f2:	0f 93       	push	r16
    21f4:	1f 93       	push	r17
    21f6:	df 93       	push	r29
    21f8:	cf 93       	push	r28
    21fa:	cd b7       	in	r28, 0x3d	; 61
    21fc:	de b7       	in	r29, 0x3e	; 62
    21fe:	66 97       	sbiw	r28, 0x16	; 22
    2200:	0f b6       	in	r0, 0x3f	; 63
    2202:	f8 94       	cli
    2204:	de bf       	out	0x3e, r29	; 62
    2206:	0f be       	out	0x3f, r0	; 63
    2208:	cd bf       	out	0x3d, r28	; 61
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
    220e:	78 87       	std	Y+8, r23	; 0x08
    2210:	6f 83       	std	Y+7, r22	; 0x07
    2212:	5a 87       	std	Y+10, r21	; 0x0a
    2214:	49 87       	std	Y+9, r20	; 0x09
    2216:	2b 87       	std	Y+11, r18	; 0x0b
    2218:	1d 87       	std	Y+13, r17	; 0x0d
    221a:	0c 87       	std	Y+12, r16	; 0x0c
    221c:	ff 86       	std	Y+15, r15	; 0x0f
    221e:	ee 86       	std	Y+14, r14	; 0x0e
    2220:	a8 8a       	std	Y+16, r10	; 0x10
    2222:	b9 8a       	std	Y+17, r11	; 0x11
    2224:	ca 8a       	std	Y+18, r12	; 0x12
    2226:	db 8a       	std	Y+19, r13	; 0x13
    2228:	9d 8a       	std	Y+21, r9	; 0x15
    222a:	8c 8a       	std	Y+20, r8	; 0x14
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    222c:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    222e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2232:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    2234:	80 91 4c 08 	lds	r24, 0x084C
    2238:	88 23       	and	r24, r24
    223a:	31 f0       	breq	.+12     	; 0x2248 <__stack+0x49>
        OS_EXIT_CRITICAL();
    223c:	89 81       	ldd	r24, Y+1	; 0x01
    223e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    2242:	8c e3       	ldi	r24, 0x3C	; 60
    2244:	8e 8b       	std	Y+22, r24	; 0x16
    2246:	61 c0       	rjmp	.+194    	; 0x230a <__stack+0x10b>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    2248:	8b 85       	ldd	r24, Y+11	; 0x0b
    224a:	88 2f       	mov	r24, r24
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	88 0f       	add	r24, r24
    2250:	99 1f       	adc	r25, r25
    2252:	fc 01       	movw	r30, r24
    2254:	e0 51       	subi	r30, 0x10	; 16
    2256:	f4 4f       	sbci	r31, 0xF4	; 244
    2258:	80 81       	ld	r24, Z
    225a:	91 81       	ldd	r25, Z+1	; 0x01
    225c:	00 97       	sbiw	r24, 0x00	; 0
    225e:	09 f0       	breq	.+2      	; 0x2262 <__stack+0x63>
    2260:	4f c0       	rjmp	.+158    	; 0x2300 <__stack+0x101>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    2262:	8b 85       	ldd	r24, Y+11	; 0x0b
    2264:	88 2f       	mov	r24, r24
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	88 0f       	add	r24, r24
    226a:	99 1f       	adc	r25, r25
    226c:	fc 01       	movw	r30, r24
    226e:	e0 51       	subi	r30, 0x10	; 16
    2270:	f4 4f       	sbci	r31, 0xF4	; 244
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	80 83       	st	Z, r24
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    227a:	89 81       	ldd	r24, Y+1	; 0x01
    227c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	2f 81       	ldd	r18, Y+7	; 0x07
    2286:	38 85       	ldd	r19, Y+8	; 0x08
    2288:	49 85       	ldd	r20, Y+9	; 0x09
    228a:	5a 85       	ldd	r21, Y+10	; 0x0a
    228c:	ee a1       	ldd	r30, Y+38	; 0x26
    228e:	ff a1       	ldd	r31, Y+39	; 0x27
    2290:	b9 01       	movw	r22, r18
    2292:	9f 01       	movw	r18, r30
    2294:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    229c:	2b 81       	ldd	r18, Y+3	; 0x03
    229e:	3c 81       	ldd	r19, Y+4	; 0x04
    22a0:	4e 85       	ldd	r20, Y+14	; 0x0e
    22a2:	5f 85       	ldd	r21, Y+15	; 0x0f
    22a4:	ec 85       	ldd	r30, Y+12	; 0x0c
    22a6:	fd 85       	ldd	r31, Y+13	; 0x0d
    22a8:	e8 88       	ldd	r14, Y+16	; 0x10
    22aa:	f9 88       	ldd	r15, Y+17	; 0x11
    22ac:	0a 89       	ldd	r16, Y+18	; 0x12
    22ae:	1b 89       	ldd	r17, Y+19	; 0x13
    22b0:	ac 89       	ldd	r26, Y+20	; 0x14
    22b2:	bd 89       	ldd	r27, Y+21	; 0x15
    22b4:	ae a0       	ldd	r10, Y+38	; 0x26
    22b6:	bf a0       	ldd	r11, Y+39	; 0x27
    22b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ba:	b9 01       	movw	r22, r18
    22bc:	9f 01       	movw	r18, r30
    22be:	6d 01       	movw	r12, r26
    22c0:	0e 94 cf 0a 	call	0x159e	; 0x159e <OS_TCBInit>
    22c4:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    22c6:	8a 81       	ldd	r24, Y+2	; 0x02
    22c8:	88 23       	and	r24, r24
    22ca:	39 f4       	brne	.+14     	; 0x22da <__stack+0xdb>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    22cc:	80 91 12 05 	lds	r24, 0x0512
    22d0:	81 30       	cpi	r24, 0x01	; 1
    22d2:	99 f4       	brne	.+38     	; 0x22fa <__stack+0xfb>
                OS_Sched();
    22d4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
    22d8:	10 c0       	rjmp	.+32     	; 0x22fa <__stack+0xfb>
            }
        } else {
            OS_ENTER_CRITICAL();
    22da:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    22de:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    22e0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e2:	88 2f       	mov	r24, r24
    22e4:	90 e0       	ldi	r25, 0x00	; 0
    22e6:	88 0f       	add	r24, r24
    22e8:	99 1f       	adc	r25, r25
    22ea:	fc 01       	movw	r30, r24
    22ec:	e0 51       	subi	r30, 0x10	; 16
    22ee:	f4 4f       	sbci	r31, 0xF4	; 244
    22f0:	11 82       	std	Z+1, r1	; 0x01
    22f2:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
        return (err);
    22fa:	8a 81       	ldd	r24, Y+2	; 0x02
    22fc:	8e 8b       	std	Y+22, r24	; 0x16
    22fe:	05 c0       	rjmp	.+10     	; 0x230a <__stack+0x10b>
    }
    OS_EXIT_CRITICAL();
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    2306:	88 e2       	ldi	r24, 0x28	; 40
    2308:	8e 8b       	std	Y+22, r24	; 0x16
    230a:	8e 89       	ldd	r24, Y+22	; 0x16
}
    230c:	66 96       	adiw	r28, 0x16	; 22
    230e:	0f b6       	in	r0, 0x3f	; 63
    2310:	f8 94       	cli
    2312:	de bf       	out	0x3e, r29	; 62
    2314:	0f be       	out	0x3f, r0	; 63
    2316:	cd bf       	out	0x3d, r28	; 61
    2318:	cf 91       	pop	r28
    231a:	df 91       	pop	r29
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	ff 90       	pop	r15
    2322:	ef 90       	pop	r14
    2324:	df 90       	pop	r13
    2326:	cf 90       	pop	r12
    2328:	bf 90       	pop	r11
    232a:	af 90       	pop	r10
    232c:	9f 90       	pop	r9
    232e:	8f 90       	pop	r8
    2330:	08 95       	ret

00002332 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    2332:	df 93       	push	r29
    2334:	cf 93       	push	r28
    2336:	cd b7       	in	r28, 0x3d	; 61
    2338:	de b7       	in	r29, 0x3e	; 62
    233a:	2a 97       	sbiw	r28, 0x0a	; 10
    233c:	0f b6       	in	r0, 0x3f	; 63
    233e:	f8 94       	cli
    2340:	de bf       	out	0x3e, r29	; 62
    2342:	0f be       	out	0x3f, r0	; 63
    2344:	cd bf       	out	0x3d, r28	; 61
    2346:	8d 83       	std	Y+5, r24	; 0x05
    2348:	7f 83       	std	Y+7, r23	; 0x07
    234a:	6e 83       	std	Y+6, r22	; 0x06
    234c:	59 87       	std	Y+9, r21	; 0x09
    234e:	48 87       	std	Y+8, r20	; 0x08
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    2350:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    2352:	80 91 4c 08 	lds	r24, 0x084C
    2356:	88 23       	and	r24, r24
    2358:	31 f0       	breq	.+12     	; 0x2366 <OSTaskNameGet+0x34>
        *perr = OS_ERR_NAME_GET_ISR;
    235a:	e8 85       	ldd	r30, Y+8	; 0x08
    235c:	f9 85       	ldd	r31, Y+9	; 0x09
    235e:	81 e1       	ldi	r24, 0x11	; 17
    2360:	80 83       	st	Z, r24
        return (0);
    2362:	1a 86       	std	Y+10, r1	; 0x0a
    2364:	46 c0       	rjmp	.+140    	; 0x23f2 <OSTaskNameGet+0xc0>
    }
    OS_ENTER_CRITICAL();
    2366:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    236a:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    236c:	8d 81       	ldd	r24, Y+5	; 0x05
    236e:	8f 3f       	cpi	r24, 0xFF	; 255
    2370:	31 f4       	brne	.+12     	; 0x237e <OSTaskNameGet+0x4c>
        prio = OSTCBCur->OSTCBPrio;
    2372:	e0 91 4d 08 	lds	r30, 0x084D
    2376:	f0 91 4e 08 	lds	r31, 0x084E
    237a:	80 8d       	ldd	r24, Z+24	; 0x18
    237c:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	88 2f       	mov	r24, r24
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	88 0f       	add	r24, r24
    2386:	99 1f       	adc	r25, r25
    2388:	fc 01       	movw	r30, r24
    238a:	e0 51       	subi	r30, 0x10	; 16
    238c:	f4 4f       	sbci	r31, 0xF4	; 244
    238e:	80 81       	ld	r24, Z
    2390:	91 81       	ldd	r25, Z+1	; 0x01
    2392:	9c 83       	std	Y+4, r25	; 0x04
    2394:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	00 97       	sbiw	r24, 0x00	; 0
    239c:	49 f4       	brne	.+18     	; 0x23b0 <OSTaskNameGet+0x7e>
        OS_EXIT_CRITICAL();                              /* No                                         */
    239e:	89 81       	ldd	r24, Y+1	; 0x01
    23a0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    23a4:	e8 85       	ldd	r30, Y+8	; 0x08
    23a6:	f9 85       	ldd	r31, Y+9	; 0x09
    23a8:	83 e4       	ldi	r24, 0x43	; 67
    23aa:	80 83       	st	Z, r24
        return (0);
    23ac:	1a 86       	std	Y+10, r1	; 0x0a
    23ae:	21 c0       	rjmp	.+66     	; 0x23f2 <OSTaskNameGet+0xc0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    23b0:	8b 81       	ldd	r24, Y+3	; 0x03
    23b2:	9c 81       	ldd	r25, Y+4	; 0x04
    23b4:	81 30       	cpi	r24, 0x01	; 1
    23b6:	91 05       	cpc	r25, r1
    23b8:	49 f4       	brne	.+18     	; 0x23cc <OSTaskNameGet+0x9a>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
    23ba:	89 81       	ldd	r24, Y+1	; 0x01
    23bc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    23c0:	e8 85       	ldd	r30, Y+8	; 0x08
    23c2:	f9 85       	ldd	r31, Y+9	; 0x09
    23c4:	83 e4       	ldi	r24, 0x43	; 67
    23c6:	80 83       	st	Z, r24
        return (0);
    23c8:	1a 86       	std	Y+10, r1	; 0x0a
    23ca:	13 c0       	rjmp	.+38     	; 0x23f2 <OSTaskNameGet+0xc0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    23cc:	8b 81       	ldd	r24, Y+3	; 0x03
    23ce:	9c 81       	ldd	r25, Y+4	; 0x04
    23d0:	9c 01       	movw	r18, r24
    23d2:	21 5d       	subi	r18, 0xD1	; 209
    23d4:	3f 4f       	sbci	r19, 0xFF	; 255
    23d6:	8e 81       	ldd	r24, Y+6	; 0x06
    23d8:	9f 81       	ldd	r25, Y+7	; 0x07
    23da:	b9 01       	movw	r22, r18
    23dc:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OS_StrCopy>
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    23e8:	e8 85       	ldd	r30, Y+8	; 0x08
    23ea:	f9 85       	ldd	r31, Y+9	; 0x09
    23ec:	10 82       	st	Z, r1
    return (len);
    23ee:	8a 81       	ldd	r24, Y+2	; 0x02
    23f0:	8a 87       	std	Y+10, r24	; 0x0a
    23f2:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    23f4:	2a 96       	adiw	r28, 0x0a	; 10
    23f6:	0f b6       	in	r0, 0x3f	; 63
    23f8:	f8 94       	cli
    23fa:	de bf       	out	0x3e, r29	; 62
    23fc:	0f be       	out	0x3f, r0	; 63
    23fe:	cd bf       	out	0x3d, r28	; 61
    2400:	cf 91       	pop	r28
    2402:	df 91       	pop	r29
    2404:	08 95       	ret

00002406 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    2406:	df 93       	push	r29
    2408:	cf 93       	push	r28
    240a:	cd b7       	in	r28, 0x3d	; 61
    240c:	de b7       	in	r29, 0x3e	; 62
    240e:	29 97       	sbiw	r28, 0x09	; 9
    2410:	0f b6       	in	r0, 0x3f	; 63
    2412:	f8 94       	cli
    2414:	de bf       	out	0x3e, r29	; 62
    2416:	0f be       	out	0x3f, r0	; 63
    2418:	cd bf       	out	0x3d, r28	; 61
    241a:	8d 83       	std	Y+5, r24	; 0x05
    241c:	7f 83       	std	Y+7, r23	; 0x07
    241e:	6e 83       	std	Y+6, r22	; 0x06
    2420:	59 87       	std	Y+9, r21	; 0x09
    2422:	48 87       	std	Y+8, r20	; 0x08
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    2424:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    2426:	80 91 4c 08 	lds	r24, 0x084C
    242a:	88 23       	and	r24, r24
    242c:	29 f0       	breq	.+10     	; 0x2438 <OSTaskNameSet+0x32>
        *perr = OS_ERR_NAME_SET_ISR;
    242e:	e8 85       	ldd	r30, Y+8	; 0x08
    2430:	f9 85       	ldd	r31, Y+9	; 0x09
    2432:	82 e1       	ldi	r24, 0x12	; 18
    2434:	80 83       	st	Z, r24
    2436:	4f c0       	rjmp	.+158    	; 0x24d6 <OSTaskNameSet+0xd0>
        return;
    }
    OS_ENTER_CRITICAL();
    2438:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    243c:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	8f 3f       	cpi	r24, 0xFF	; 255
    2442:	31 f4       	brne	.+12     	; 0x2450 <OSTaskNameSet+0x4a>
        prio = OSTCBCur->OSTCBPrio;
    2444:	e0 91 4d 08 	lds	r30, 0x084D
    2448:	f0 91 4e 08 	lds	r31, 0x084E
    244c:	80 8d       	ldd	r24, Z+24	; 0x18
    244e:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    2450:	8d 81       	ldd	r24, Y+5	; 0x05
    2452:	88 2f       	mov	r24, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	88 0f       	add	r24, r24
    2458:	99 1f       	adc	r25, r25
    245a:	fc 01       	movw	r30, r24
    245c:	e0 51       	subi	r30, 0x10	; 16
    245e:	f4 4f       	sbci	r31, 0xF4	; 244
    2460:	80 81       	ld	r24, Z
    2462:	91 81       	ldd	r25, Z+1	; 0x01
    2464:	9b 83       	std	Y+3, r25	; 0x03
    2466:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    2468:	8a 81       	ldd	r24, Y+2	; 0x02
    246a:	9b 81       	ldd	r25, Y+3	; 0x03
    246c:	00 97       	sbiw	r24, 0x00	; 0
    246e:	41 f4       	brne	.+16     	; 0x2480 <OSTaskNameSet+0x7a>
        OS_EXIT_CRITICAL();                          /* No                                             */
    2470:	89 81       	ldd	r24, Y+1	; 0x01
    2472:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    2476:	e8 85       	ldd	r30, Y+8	; 0x08
    2478:	f9 85       	ldd	r31, Y+9	; 0x09
    247a:	83 e4       	ldi	r24, 0x43	; 67
    247c:	80 83       	st	Z, r24
    247e:	2b c0       	rjmp	.+86     	; 0x24d6 <OSTaskNameSet+0xd0>
        return;
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    2480:	8a 81       	ldd	r24, Y+2	; 0x02
    2482:	9b 81       	ldd	r25, Y+3	; 0x03
    2484:	81 30       	cpi	r24, 0x01	; 1
    2486:	91 05       	cpc	r25, r1
    2488:	41 f4       	brne	.+16     	; 0x249a <OSTaskNameSet+0x94>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
    248a:	89 81       	ldd	r24, Y+1	; 0x01
    248c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    2490:	e8 85       	ldd	r30, Y+8	; 0x08
    2492:	f9 85       	ldd	r31, Y+9	; 0x09
    2494:	83 e4       	ldi	r24, 0x43	; 67
    2496:	80 83       	st	Z, r24
    2498:	1e c0       	rjmp	.+60     	; 0x24d6 <OSTaskNameSet+0xd0>
        return;
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    249a:	8e 81       	ldd	r24, Y+6	; 0x06
    249c:	9f 81       	ldd	r25, Y+7	; 0x07
    249e:	0e 94 8e 0a 	call	0x151c	; 0x151c <OS_StrLen>
    24a2:	8c 83       	std	Y+4, r24	; 0x04
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    24a4:	8c 81       	ldd	r24, Y+4	; 0x04
    24a6:	80 31       	cpi	r24, 0x10	; 16
    24a8:	40 f0       	brcs	.+16     	; 0x24ba <OSTaskNameSet+0xb4>
        OS_EXIT_CRITICAL();
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    24b0:	e8 85       	ldd	r30, Y+8	; 0x08
    24b2:	f9 85       	ldd	r31, Y+9	; 0x09
    24b4:	81 e4       	ldi	r24, 0x41	; 65
    24b6:	80 83       	st	Z, r24
    24b8:	0e c0       	rjmp	.+28     	; 0x24d6 <OSTaskNameSet+0xd0>
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    24ba:	8a 81       	ldd	r24, Y+2	; 0x02
    24bc:	9b 81       	ldd	r25, Y+3	; 0x03
    24be:	8f 96       	adiw	r24, 0x2f	; 47
    24c0:	2e 81       	ldd	r18, Y+6	; 0x06
    24c2:	3f 81       	ldd	r19, Y+7	; 0x07
    24c4:	b9 01       	movw	r22, r18
    24c6:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OS_StrCopy>
    OS_EXIT_CRITICAL();
    24ca:	89 81       	ldd	r24, Y+1	; 0x01
    24cc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    24d0:	e8 85       	ldd	r30, Y+8	; 0x08
    24d2:	f9 85       	ldd	r31, Y+9	; 0x09
    24d4:	10 82       	st	Z, r1
}
    24d6:	29 96       	adiw	r28, 0x09	; 9
    24d8:	0f b6       	in	r0, 0x3f	; 63
    24da:	f8 94       	cli
    24dc:	de bf       	out	0x3e, r29	; 62
    24de:	0f be       	out	0x3f, r0	; 63
    24e0:	cd bf       	out	0x3d, r28	; 61
    24e2:	cf 91       	pop	r28
    24e4:	df 91       	pop	r29
    24e6:	08 95       	ret

000024e8 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    24e8:	df 93       	push	r29
    24ea:	cf 93       	push	r28
    24ec:	00 d0       	rcall	.+0      	; 0x24ee <OSTaskResume+0x6>
    24ee:	0f 92       	push	r0
    24f0:	0f 92       	push	r0
    24f2:	cd b7       	in	r28, 0x3d	; 61
    24f4:	de b7       	in	r29, 0x3e	; 62
    24f6:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    24f8:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    24fa:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    24fe:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	88 2f       	mov	r24, r24
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	88 0f       	add	r24, r24
    2508:	99 1f       	adc	r25, r25
    250a:	fc 01       	movw	r30, r24
    250c:	e0 51       	subi	r30, 0x10	; 16
    250e:	f4 4f       	sbci	r31, 0xF4	; 244
    2510:	80 81       	ld	r24, Z
    2512:	91 81       	ldd	r25, Z+1	; 0x01
    2514:	9b 83       	std	Y+3, r25	; 0x03
    2516:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    2518:	8a 81       	ldd	r24, Y+2	; 0x02
    251a:	9b 81       	ldd	r25, Y+3	; 0x03
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	31 f4       	brne	.+12     	; 0x252c <OSTaskResume+0x44>
        OS_EXIT_CRITICAL();
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
    2526:	86 e4       	ldi	r24, 0x46	; 70
    2528:	8d 83       	std	Y+5, r24	; 0x05
    252a:	5d c0       	rjmp	.+186    	; 0x25e6 <OSTaskResume+0xfe>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    252c:	8a 81       	ldd	r24, Y+2	; 0x02
    252e:	9b 81       	ldd	r25, Y+3	; 0x03
    2530:	81 30       	cpi	r24, 0x01	; 1
    2532:	91 05       	cpc	r25, r1
    2534:	31 f4       	brne	.+12     	; 0x2542 <OSTaskResume+0x5a>
        OS_EXIT_CRITICAL();
    2536:	89 81       	ldd	r24, Y+1	; 0x01
    2538:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    253c:	83 e4       	ldi	r24, 0x43	; 67
    253e:	8d 83       	std	Y+5, r24	; 0x05
    2540:	52 c0       	rjmp	.+164    	; 0x25e6 <OSTaskResume+0xfe>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    2542:	ea 81       	ldd	r30, Y+2	; 0x02
    2544:	fb 81       	ldd	r31, Y+3	; 0x03
    2546:	86 89       	ldd	r24, Z+22	; 0x16
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	88 70       	andi	r24, 0x08	; 8
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	09 f4       	brne	.+2      	; 0x2556 <OSTaskResume+0x6e>
    2554:	43 c0       	rjmp	.+134    	; 0x25dc <OSTaskResume+0xf4>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    2556:	ea 81       	ldd	r30, Y+2	; 0x02
    2558:	fb 81       	ldd	r31, Y+3	; 0x03
    255a:	86 89       	ldd	r24, Z+22	; 0x16
    255c:	87 7f       	andi	r24, 0xF7	; 247
    255e:	ea 81       	ldd	r30, Y+2	; 0x02
    2560:	fb 81       	ldd	r31, Y+3	; 0x03
    2562:	86 8b       	std	Z+22, r24	; 0x16
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    2564:	ea 81       	ldd	r30, Y+2	; 0x02
    2566:	fb 81       	ldd	r31, Y+3	; 0x03
    2568:	86 89       	ldd	r24, Z+22	; 0x16
    256a:	88 23       	and	r24, r24
    256c:	91 f5       	brne	.+100    	; 0x25d2 <OSTaskResume+0xea>
            if (ptcb->OSTCBDly == 0) {
    256e:	ea 81       	ldd	r30, Y+2	; 0x02
    2570:	fb 81       	ldd	r31, Y+3	; 0x03
    2572:	84 89       	ldd	r24, Z+20	; 0x14
    2574:	95 89       	ldd	r25, Z+21	; 0x15
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	41 f5       	brne	.+80     	; 0x25ca <OSTaskResume+0xe2>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    257a:	ea 81       	ldd	r30, Y+2	; 0x02
    257c:	fb 81       	ldd	r31, Y+3	; 0x03
    257e:	94 8d       	ldd	r25, Z+28	; 0x1c
    2580:	80 91 98 07 	lds	r24, 0x0798
    2584:	89 2b       	or	r24, r25
    2586:	80 93 98 07 	sts	0x0798, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    258a:	ea 81       	ldd	r30, Y+2	; 0x02
    258c:	fb 81       	ldd	r31, Y+3	; 0x03
    258e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2590:	28 2f       	mov	r18, r24
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	ea 81       	ldd	r30, Y+2	; 0x02
    2596:	fb 81       	ldd	r31, Y+3	; 0x03
    2598:	82 8d       	ldd	r24, Z+26	; 0x1a
    259a:	88 2f       	mov	r24, r24
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	fc 01       	movw	r30, r24
    25a0:	e7 56       	subi	r30, 0x67	; 103
    25a2:	f8 4f       	sbci	r31, 0xF8	; 248
    25a4:	90 81       	ld	r25, Z
    25a6:	ea 81       	ldd	r30, Y+2	; 0x02
    25a8:	fb 81       	ldd	r31, Y+3	; 0x03
    25aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    25ac:	89 2b       	or	r24, r25
    25ae:	f9 01       	movw	r30, r18
    25b0:	e7 56       	subi	r30, 0x67	; 103
    25b2:	f8 4f       	sbci	r31, 0xF8	; 248
    25b4:	80 83       	st	Z, r24
                OS_EXIT_CRITICAL();
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
    25bc:	80 91 12 05 	lds	r24, 0x0512
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	51 f4       	brne	.+20     	; 0x25d8 <OSTaskResume+0xf0>
                    OS_Sched();                               /* Find new highest priority task        */
    25c4:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
    25c8:	07 c0       	rjmp	.+14     	; 0x25d8 <OSTaskResume+0xf0>
                }
            } else {
                OS_EXIT_CRITICAL();
    25ca:	89 81       	ldd	r24, Y+1	; 0x01
    25cc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    25d0:	03 c0       	rjmp	.+6      	; 0x25d8 <OSTaskResume+0xf0>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
    25d2:	89 81       	ldd	r24, Y+1	; 0x01
    25d4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
        return (OS_ERR_NONE);
    25d8:	1d 82       	std	Y+5, r1	; 0x05
    25da:	05 c0       	rjmp	.+10     	; 0x25e6 <OSTaskResume+0xfe>
    }
    OS_EXIT_CRITICAL();
    25dc:	89 81       	ldd	r24, Y+1	; 0x01
    25de:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
    25e2:	84 e4       	ldi	r24, 0x44	; 68
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    25e8:	0f 90       	pop	r0
    25ea:	0f 90       	pop	r0
    25ec:	0f 90       	pop	r0
    25ee:	0f 90       	pop	r0
    25f0:	0f 90       	pop	r0
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
    2600:	27 97       	sbiw	r28, 0x07	; 7
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	de bf       	out	0x3e, r29	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	cd bf       	out	0x3d, r28	; 61
    260c:	8e 83       	std	Y+6, r24	; 0x06
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    260e:	19 82       	std	Y+1, r1	; 0x01
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    2610:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2614:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    2616:	8e 81       	ldd	r24, Y+6	; 0x06
    2618:	8f 3f       	cpi	r24, 0xFF	; 255
    261a:	49 f4       	brne	.+18     	; 0x262e <OSTaskSuspend+0x36>
        prio = OSTCBCur->OSTCBPrio;
    261c:	e0 91 4d 08 	lds	r30, 0x084D
    2620:	f0 91 4e 08 	lds	r31, 0x084E
    2624:	80 8d       	ldd	r24, Z+24	; 0x18
    2626:	8e 83       	std	Y+6, r24	; 0x06
        self = OS_TRUE;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	8d 83       	std	Y+5, r24	; 0x05
    262c:	0c c0       	rjmp	.+24     	; 0x2646 <OSTaskSuspend+0x4e>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    262e:	e0 91 4d 08 	lds	r30, 0x084D
    2632:	f0 91 4e 08 	lds	r31, 0x084E
    2636:	90 8d       	ldd	r25, Z+24	; 0x18
    2638:	8e 81       	ldd	r24, Y+6	; 0x06
    263a:	98 17       	cp	r25, r24
    263c:	19 f4       	brne	.+6      	; 0x2644 <OSTaskSuspend+0x4c>
        self = OS_TRUE;
    263e:	81 e0       	ldi	r24, 0x01	; 1
    2640:	8d 83       	std	Y+5, r24	; 0x05
    2642:	01 c0       	rjmp	.+2      	; 0x2646 <OSTaskSuspend+0x4e>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    2644:	1d 82       	std	Y+5, r1	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    2646:	8e 81       	ldd	r24, Y+6	; 0x06
    2648:	88 2f       	mov	r24, r24
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	88 0f       	add	r24, r24
    264e:	99 1f       	adc	r25, r25
    2650:	fc 01       	movw	r30, r24
    2652:	e0 51       	subi	r30, 0x10	; 16
    2654:	f4 4f       	sbci	r31, 0xF4	; 244
    2656:	80 81       	ld	r24, Z
    2658:	91 81       	ldd	r25, Z+1	; 0x01
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    265e:	8b 81       	ldd	r24, Y+3	; 0x03
    2660:	9c 81       	ldd	r25, Y+4	; 0x04
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	31 f4       	brne	.+12     	; 0x2672 <OSTaskSuspend+0x7a>
        OS_EXIT_CRITICAL();
    2666:	89 81       	ldd	r24, Y+1	; 0x01
    2668:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
    266c:	88 e4       	ldi	r24, 0x48	; 72
    266e:	8f 83       	std	Y+7, r24	; 0x07
    2670:	46 c0       	rjmp	.+140    	; 0x26fe <OSTaskSuspend+0x106>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	81 30       	cpi	r24, 0x01	; 1
    2678:	91 05       	cpc	r25, r1
    267a:	31 f4       	brne	.+12     	; 0x2688 <OSTaskSuspend+0x90>
        OS_EXIT_CRITICAL();
    267c:	89 81       	ldd	r24, Y+1	; 0x01
    267e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    2682:	83 e4       	ldi	r24, 0x43	; 67
    2684:	8f 83       	std	Y+7, r24	; 0x07
    2686:	3b c0       	rjmp	.+118    	; 0x26fe <OSTaskSuspend+0x106>
    }
    y            = ptcb->OSTCBY;
    2688:	eb 81       	ldd	r30, Y+3	; 0x03
    268a:	fc 81       	ldd	r31, Y+4	; 0x04
    268c:	82 8d       	ldd	r24, Z+26	; 0x1a
    268e:	8a 83       	std	Y+2, r24	; 0x02
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    2690:	8a 81       	ldd	r24, Y+2	; 0x02
    2692:	28 2f       	mov	r18, r24
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	8a 81       	ldd	r24, Y+2	; 0x02
    2698:	88 2f       	mov	r24, r24
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	fc 01       	movw	r30, r24
    269e:	e7 56       	subi	r30, 0x67	; 103
    26a0:	f8 4f       	sbci	r31, 0xF8	; 248
    26a2:	80 81       	ld	r24, Z
    26a4:	98 2f       	mov	r25, r24
    26a6:	eb 81       	ldd	r30, Y+3	; 0x03
    26a8:	fc 81       	ldd	r31, Y+4	; 0x04
    26aa:	83 8d       	ldd	r24, Z+27	; 0x1b
    26ac:	80 95       	com	r24
    26ae:	89 23       	and	r24, r25
    26b0:	f9 01       	movw	r30, r18
    26b2:	e7 56       	subi	r30, 0x67	; 103
    26b4:	f8 4f       	sbci	r31, 0xF8	; 248
    26b6:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0) {
    26b8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ba:	88 2f       	mov	r24, r24
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	fc 01       	movw	r30, r24
    26c0:	e7 56       	subi	r30, 0x67	; 103
    26c2:	f8 4f       	sbci	r31, 0xF8	; 248
    26c4:	80 81       	ld	r24, Z
    26c6:	88 23       	and	r24, r24
    26c8:	51 f4       	brne	.+20     	; 0x26de <OSTaskSuspend+0xe6>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    26ca:	eb 81       	ldd	r30, Y+3	; 0x03
    26cc:	fc 81       	ldd	r31, Y+4	; 0x04
    26ce:	84 8d       	ldd	r24, Z+28	; 0x1c
    26d0:	98 2f       	mov	r25, r24
    26d2:	90 95       	com	r25
    26d4:	80 91 98 07 	lds	r24, 0x0798
    26d8:	89 23       	and	r24, r25
    26da:	80 93 98 07 	sts	0x0798, r24
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    26de:	eb 81       	ldd	r30, Y+3	; 0x03
    26e0:	fc 81       	ldd	r31, Y+4	; 0x04
    26e2:	86 89       	ldd	r24, Z+22	; 0x16
    26e4:	88 60       	ori	r24, 0x08	; 8
    26e6:	eb 81       	ldd	r30, Y+3	; 0x03
    26e8:	fc 81       	ldd	r31, Y+4	; 0x04
    26ea:	86 8b       	std	Z+22, r24	; 0x16
    OS_EXIT_CRITICAL();
    26ec:	89 81       	ldd	r24, Y+1	; 0x01
    26ee:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    26f2:	8d 81       	ldd	r24, Y+5	; 0x05
    26f4:	81 30       	cpi	r24, 0x01	; 1
    26f6:	11 f4       	brne	.+4      	; 0x26fc <OSTaskSuspend+0x104>
        OS_Sched();                                             /* Find new highest priority task      */
    26f8:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
    }
    return (OS_ERR_NONE);
    26fc:	1f 82       	std	Y+7, r1	; 0x07
    26fe:	8f 81       	ldd	r24, Y+7	; 0x07
}
    2700:	27 96       	adiw	r28, 0x07	; 7
    2702:	0f b6       	in	r0, 0x3f	; 63
    2704:	f8 94       	cli
    2706:	de bf       	out	0x3e, r29	; 62
    2708:	0f be       	out	0x3f, r0	; 63
    270a:	cd bf       	out	0x3d, r28	; 61
    270c:	cf 91       	pop	r28
    270e:	df 91       	pop	r29
    2710:	08 95       	ret

00002712 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    2712:	df 93       	push	r29
    2714:	cf 93       	push	r28
    2716:	cd b7       	in	r28, 0x3d	; 61
    2718:	de b7       	in	r29, 0x3e	; 62
    271a:	27 97       	sbiw	r28, 0x07	; 7
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	8c 83       	std	Y+4, r24	; 0x04
    2728:	7e 83       	std	Y+6, r23	; 0x06
    272a:	6d 83       	std	Y+5, r22	; 0x05
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    272c:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
    272e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2732:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    2734:	8c 81       	ldd	r24, Y+4	; 0x04
    2736:	8f 3f       	cpi	r24, 0xFF	; 255
    2738:	31 f4       	brne	.+12     	; 0x2746 <OSTaskQuery+0x34>
        prio = OSTCBCur->OSTCBPrio;
    273a:	e0 91 4d 08 	lds	r30, 0x084D
    273e:	f0 91 4e 08 	lds	r31, 0x084E
    2742:	80 8d       	ldd	r24, Z+24	; 0x18
    2744:	8c 83       	std	Y+4, r24	; 0x04
    }
    ptcb = OSTCBPrioTbl[prio];
    2746:	8c 81       	ldd	r24, Y+4	; 0x04
    2748:	88 2f       	mov	r24, r24
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	88 0f       	add	r24, r24
    274e:	99 1f       	adc	r25, r25
    2750:	fc 01       	movw	r30, r24
    2752:	e0 51       	subi	r30, 0x10	; 16
    2754:	f4 4f       	sbci	r31, 0xF4	; 244
    2756:	80 81       	ld	r24, Z
    2758:	91 81       	ldd	r25, Z+1	; 0x01
    275a:	9b 83       	std	Y+3, r25	; 0x03
    275c:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    275e:	8a 81       	ldd	r24, Y+2	; 0x02
    2760:	9b 81       	ldd	r25, Y+3	; 0x03
    2762:	00 97       	sbiw	r24, 0x00	; 0
    2764:	31 f4       	brne	.+12     	; 0x2772 <OSTaskQuery+0x60>
        OS_EXIT_CRITICAL();
    2766:	89 81       	ldd	r24, Y+1	; 0x01
    2768:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO);
    276c:	89 e2       	ldi	r24, 0x29	; 41
    276e:	8f 83       	std	Y+7, r24	; 0x07
    2770:	18 c0       	rjmp	.+48     	; 0x27a2 <OSTaskQuery+0x90>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    2772:	8a 81       	ldd	r24, Y+2	; 0x02
    2774:	9b 81       	ldd	r25, Y+3	; 0x03
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	91 05       	cpc	r25, r1
    277a:	31 f4       	brne	.+12     	; 0x2788 <OSTaskQuery+0x76>
        OS_EXIT_CRITICAL();
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    2782:	83 e4       	ldi	r24, 0x43	; 67
    2784:	8f 83       	std	Y+7, r24	; 0x07
    2786:	0d c0       	rjmp	.+26     	; 0x27a2 <OSTaskQuery+0x90>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	2a 81       	ldd	r18, Y+2	; 0x02
    278e:	3b 81       	ldd	r19, Y+3	; 0x03
    2790:	b9 01       	movw	r22, r18
    2792:	4f e3       	ldi	r20, 0x3F	; 63
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	0e 94 b3 09 	call	0x1366	; 0x1366 <OS_MemCopy>
    OS_EXIT_CRITICAL();
    279a:	89 81       	ldd	r24, Y+1	; 0x01
    279c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    27a0:	1f 82       	std	Y+7, r1	; 0x07
    27a2:	8f 81       	ldd	r24, Y+7	; 0x07
}
    27a4:	27 96       	adiw	r28, 0x07	; 7
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <OSTimeDly+0x6>
    27bc:	0f 92       	push	r0
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	9c 83       	std	Y+4, r25	; 0x04
    27c4:	8b 83       	std	Y+3, r24	; 0x03
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    27c6:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    27c8:	80 91 4c 08 	lds	r24, 0x084C
    27cc:	88 23       	and	r24, r24
    27ce:	09 f0       	breq	.+2      	; 0x27d2 <OSTimeDly+0x1c>
    27d0:	46 c0       	rjmp	.+140    	; 0x285e <OSTimeDly+0xa8>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    27d2:	8b 81       	ldd	r24, Y+3	; 0x03
    27d4:	9c 81       	ldd	r25, Y+4	; 0x04
    27d6:	00 97       	sbiw	r24, 0x00	; 0
    27d8:	09 f4       	brne	.+2      	; 0x27dc <OSTimeDly+0x26>
    27da:	41 c0       	rjmp	.+130    	; 0x285e <OSTimeDly+0xa8>
        OS_ENTER_CRITICAL();
    27dc:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    27e0:	89 83       	std	Y+1, r24	; 0x01
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    27e2:	e0 91 4d 08 	lds	r30, 0x084D
    27e6:	f0 91 4e 08 	lds	r31, 0x084E
    27ea:	82 8d       	ldd	r24, Z+26	; 0x1a
    27ec:	8a 83       	std	Y+2, r24	; 0x02
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	28 2f       	mov	r18, r24
    27f2:	30 e0       	ldi	r19, 0x00	; 0
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	88 2f       	mov	r24, r24
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	fc 01       	movw	r30, r24
    27fc:	e7 56       	subi	r30, 0x67	; 103
    27fe:	f8 4f       	sbci	r31, 0xF8	; 248
    2800:	80 81       	ld	r24, Z
    2802:	98 2f       	mov	r25, r24
    2804:	e0 91 4d 08 	lds	r30, 0x084D
    2808:	f0 91 4e 08 	lds	r31, 0x084E
    280c:	83 8d       	ldd	r24, Z+27	; 0x1b
    280e:	80 95       	com	r24
    2810:	89 23       	and	r24, r25
    2812:	f9 01       	movw	r30, r18
    2814:	e7 56       	subi	r30, 0x67	; 103
    2816:	f8 4f       	sbci	r31, 0xF8	; 248
    2818:	80 83       	st	Z, r24
        if (OSRdyTbl[y] == 0) {
    281a:	8a 81       	ldd	r24, Y+2	; 0x02
    281c:	88 2f       	mov	r24, r24
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	fc 01       	movw	r30, r24
    2822:	e7 56       	subi	r30, 0x67	; 103
    2824:	f8 4f       	sbci	r31, 0xF8	; 248
    2826:	80 81       	ld	r24, Z
    2828:	88 23       	and	r24, r24
    282a:	61 f4       	brne	.+24     	; 0x2844 <OSTimeDly+0x8e>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    282c:	e0 91 4d 08 	lds	r30, 0x084D
    2830:	f0 91 4e 08 	lds	r31, 0x084E
    2834:	84 8d       	ldd	r24, Z+28	; 0x1c
    2836:	98 2f       	mov	r25, r24
    2838:	90 95       	com	r25
    283a:	80 91 98 07 	lds	r24, 0x0798
    283e:	89 23       	and	r24, r25
    2840:	80 93 98 07 	sts	0x0798, r24
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    2844:	e0 91 4d 08 	lds	r30, 0x084D
    2848:	f0 91 4e 08 	lds	r31, 0x084E
    284c:	8b 81       	ldd	r24, Y+3	; 0x03
    284e:	9c 81       	ldd	r25, Y+4	; 0x04
    2850:	95 8b       	std	Z+21, r25	; 0x15
    2852:	84 8b       	std	Z+20, r24	; 0x14
        OS_EXIT_CRITICAL();
    2854:	89 81       	ldd	r24, Y+1	; 0x01
    2856:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
    285a:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
    }
}
    285e:	0f 90       	pop	r0
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	cf 91       	pop	r28
    2868:	df 91       	pop	r29
    286a:	08 95       	ret

0000286c <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    286c:	ef 92       	push	r14
    286e:	ff 92       	push	r15
    2870:	0f 93       	push	r16
    2872:	1f 93       	push	r17
    2874:	df 93       	push	r29
    2876:	cf 93       	push	r28
    2878:	cd b7       	in	r28, 0x3d	; 61
    287a:	de b7       	in	r29, 0x3e	; 62
    287c:	2c 97       	sbiw	r28, 0x0c	; 12
    287e:	0f b6       	in	r0, 0x3f	; 63
    2880:	f8 94       	cli
    2882:	de bf       	out	0x3e, r29	; 62
    2884:	0f be       	out	0x3f, r0	; 63
    2886:	cd bf       	out	0x3d, r28	; 61
    2888:	8f 83       	std	Y+7, r24	; 0x07
    288a:	68 87       	std	Y+8, r22	; 0x08
    288c:	49 87       	std	Y+9, r20	; 0x09
    288e:	3b 87       	std	Y+11, r19	; 0x0b
    2890:	2a 87       	std	Y+10, r18	; 0x0a
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    2892:	80 91 4c 08 	lds	r24, 0x084C
    2896:	88 23       	and	r24, r24
    2898:	19 f0       	breq	.+6      	; 0x28a0 <OSTimeDlyHMSM+0x34>
        return (OS_ERR_TIME_DLY_ISR);
    289a:	85 e5       	ldi	r24, 0x55	; 85
    289c:	8c 87       	std	Y+12, r24	; 0x0c
    289e:	86 c0       	rjmp	.+268    	; 0x29ac <OSTimeDlyHMSM+0x140>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    28a0:	8f 81       	ldd	r24, Y+7	; 0x07
    28a2:	88 2f       	mov	r24, r24
    28a4:	90 e0       	ldi	r25, 0x00	; 0
    28a6:	a0 e0       	ldi	r26, 0x00	; 0
    28a8:	b0 e0       	ldi	r27, 0x00	; 0
    28aa:	20 e1       	ldi	r18, 0x10	; 16
    28ac:	3e e0       	ldi	r19, 0x0E	; 14
    28ae:	40 e0       	ldi	r20, 0x00	; 0
    28b0:	50 e0       	ldi	r21, 0x00	; 0
    28b2:	bc 01       	movw	r22, r24
    28b4:	cd 01       	movw	r24, r26
    28b6:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    28ba:	7b 01       	movw	r14, r22
    28bc:	8c 01       	movw	r16, r24
    28be:	88 85       	ldd	r24, Y+8	; 0x08
    28c0:	88 2f       	mov	r24, r24
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	a0 e0       	ldi	r26, 0x00	; 0
    28c6:	b0 e0       	ldi	r27, 0x00	; 0
    28c8:	2c e3       	ldi	r18, 0x3C	; 60
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	40 e0       	ldi	r20, 0x00	; 0
    28ce:	50 e0       	ldi	r21, 0x00	; 0
    28d0:	bc 01       	movw	r22, r24
    28d2:	cd 01       	movw	r24, r26
    28d4:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	a8 01       	movw	r20, r16
    28de:	97 01       	movw	r18, r14
    28e0:	28 0f       	add	r18, r24
    28e2:	39 1f       	adc	r19, r25
    28e4:	4a 1f       	adc	r20, r26
    28e6:	5b 1f       	adc	r21, r27
    28e8:	89 85       	ldd	r24, Y+9	; 0x09
    28ea:	88 2f       	mov	r24, r24
    28ec:	90 e0       	ldi	r25, 0x00	; 0
    28ee:	a0 e0       	ldi	r26, 0x00	; 0
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	82 0f       	add	r24, r18
    28f4:	93 1f       	adc	r25, r19
    28f6:	a4 1f       	adc	r26, r20
    28f8:	b5 1f       	adc	r27, r21
    28fa:	24 e6       	ldi	r18, 0x64	; 100
    28fc:	30 e0       	ldi	r19, 0x00	; 0
    28fe:	40 e0       	ldi	r20, 0x00	; 0
    2900:	50 e0       	ldi	r21, 0x00	; 0
    2902:	bc 01       	movw	r22, r24
    2904:	cd 01       	movw	r24, r26
    2906:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    290a:	7b 01       	movw	r14, r22
    290c:	8c 01       	movw	r16, r24
    290e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2910:	9b 85       	ldd	r25, Y+11	; 0x0b
    2912:	cc 01       	movw	r24, r24
    2914:	a0 e0       	ldi	r26, 0x00	; 0
    2916:	b0 e0       	ldi	r27, 0x00	; 0
    2918:	24 e6       	ldi	r18, 0x64	; 100
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e0       	ldi	r20, 0x00	; 0
    291e:	50 e0       	ldi	r21, 0x00	; 0
    2920:	bc 01       	movw	r22, r24
    2922:	cd 01       	movw	r24, r26
    2924:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	8c 50       	subi	r24, 0x0C	; 12
    292e:	9e 4f       	sbci	r25, 0xFE	; 254
    2930:	af 4f       	sbci	r26, 0xFF	; 255
    2932:	bf 4f       	sbci	r27, 0xFF	; 255
    2934:	28 ee       	ldi	r18, 0xE8	; 232
    2936:	33 e0       	ldi	r19, 0x03	; 3
    2938:	40 e0       	ldi	r20, 0x00	; 0
    293a:	50 e0       	ldi	r21, 0x00	; 0
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <__udivmodsi4>
    2944:	da 01       	movw	r26, r20
    2946:	c9 01       	movw	r24, r18
    2948:	8e 0d       	add	r24, r14
    294a:	9f 1d       	adc	r25, r15
    294c:	a0 1f       	adc	r26, r16
    294e:	b1 1f       	adc	r27, r17
    2950:	8b 83       	std	Y+3, r24	; 0x03
    2952:	9c 83       	std	Y+4, r25	; 0x04
    2954:	ad 83       	std	Y+5, r26	; 0x05
    2956:	be 83       	std	Y+6, r27	; 0x06
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    2958:	8b 81       	ldd	r24, Y+3	; 0x03
    295a:	9c 81       	ldd	r25, Y+4	; 0x04
    295c:	ad 81       	ldd	r26, Y+5	; 0x05
    295e:	be 81       	ldd	r27, Y+6	; 0x06
    2960:	cd 01       	movw	r24, r26
    2962:	aa 27       	eor	r26, r26
    2964:	bb 27       	eor	r27, r27
    2966:	9a 83       	std	Y+2, r25	; 0x02
    2968:	89 83       	std	Y+1, r24	; 0x01
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    296a:	8b 81       	ldd	r24, Y+3	; 0x03
    296c:	9c 81       	ldd	r25, Y+4	; 0x04
    296e:	ad 81       	ldd	r26, Y+5	; 0x05
    2970:	be 81       	ldd	r27, Y+6	; 0x06
    2972:	a0 70       	andi	r26, 0x00	; 0
    2974:	b0 70       	andi	r27, 0x00	; 0
    2976:	8b 83       	std	Y+3, r24	; 0x03
    2978:	9c 83       	std	Y+4, r25	; 0x04
    297a:	ad 83       	std	Y+5, r26	; 0x05
    297c:	be 83       	std	Y+6, r27	; 0x06
    OSTimeDly((INT16U)ticks);
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	9c 81       	ldd	r25, Y+4	; 0x04
    2982:	0e 94 db 13 	call	0x27b6	; 0x27b6 <OSTimeDly>
    2986:	0d c0       	rjmp	.+26     	; 0x29a2 <OSTimeDlyHMSM+0x136>
    while (loops > 0) {
        OSTimeDly((INT16U)32768u);
    2988:	80 e0       	ldi	r24, 0x00	; 0
    298a:	90 e8       	ldi	r25, 0x80	; 128
    298c:	0e 94 db 13 	call	0x27b6	; 0x27b6 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    2990:	80 e0       	ldi	r24, 0x00	; 0
    2992:	90 e8       	ldi	r25, 0x80	; 128
    2994:	0e 94 db 13 	call	0x27b6	; 0x27b6 <OSTimeDly>
        loops--;
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	9a 81       	ldd	r25, Y+2	; 0x02
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	9a 81       	ldd	r25, Y+2	; 0x02
    29a6:	00 97       	sbiw	r24, 0x00	; 0
    29a8:	79 f7       	brne	.-34     	; 0x2988 <OSTimeDlyHMSM+0x11c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    29aa:	1c 86       	std	Y+12, r1	; 0x0c
    29ac:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    29ae:	2c 96       	adiw	r28, 0x0c	; 12
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	de bf       	out	0x3e, r29	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	cd bf       	out	0x3d, r28	; 61
    29ba:	cf 91       	pop	r28
    29bc:	df 91       	pop	r29
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
    29c2:	ff 90       	pop	r15
    29c4:	ef 90       	pop	r14
    29c6:	08 95       	ret

000029c8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    29c8:	df 93       	push	r29
    29ca:	cf 93       	push	r28
    29cc:	00 d0       	rcall	.+0      	; 0x29ce <OSTimeDlyResume+0x6>
    29ce:	0f 92       	push	r0
    29d0:	0f 92       	push	r0
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
    29d6:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    29d8:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (prio >= OS_LOWEST_PRIO) {
    29da:	8c 81       	ldd	r24, Y+4	; 0x04
    29dc:	8a 30       	cpi	r24, 0x0A	; 10
    29de:	18 f0       	brcs	.+6      	; 0x29e6 <OSTimeDlyResume+0x1e>
        return (OS_ERR_PRIO_INVALID);
    29e0:	8a e2       	ldi	r24, 0x2A	; 42
    29e2:	8d 83       	std	Y+5, r24	; 0x05
    29e4:	7d c0       	rjmp	.+250    	; 0x2ae0 <OSTimeDlyResume+0x118>
    }
    OS_ENTER_CRITICAL();
    29e6:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    29ea:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    29ec:	8c 81       	ldd	r24, Y+4	; 0x04
    29ee:	88 2f       	mov	r24, r24
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	88 0f       	add	r24, r24
    29f4:	99 1f       	adc	r25, r25
    29f6:	fc 01       	movw	r30, r24
    29f8:	e0 51       	subi	r30, 0x10	; 16
    29fa:	f4 4f       	sbci	r31, 0xF4	; 244
    29fc:	80 81       	ld	r24, Z
    29fe:	91 81       	ldd	r25, Z+1	; 0x01
    2a00:	9b 83       	std	Y+3, r25	; 0x03
    2a02:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {
    2a04:	8a 81       	ldd	r24, Y+2	; 0x02
    2a06:	9b 81       	ldd	r25, Y+3	; 0x03
    2a08:	00 97       	sbiw	r24, 0x00	; 0
    2a0a:	31 f4       	brne	.+12     	; 0x2a18 <OSTimeDlyResume+0x50>
        OS_EXIT_CRITICAL();
    2a0c:	89 81       	ldd	r24, Y+1	; 0x01
    2a0e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    2a12:	83 e4       	ldi	r24, 0x43	; 67
    2a14:	8d 83       	std	Y+5, r24	; 0x05
    2a16:	64 c0       	rjmp	.+200    	; 0x2ae0 <OSTimeDlyResume+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {
    2a18:	8a 81       	ldd	r24, Y+2	; 0x02
    2a1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2a1c:	81 30       	cpi	r24, 0x01	; 1
    2a1e:	91 05       	cpc	r25, r1
    2a20:	31 f4       	brne	.+12     	; 0x2a2e <OSTimeDlyResume+0x66>
        OS_EXIT_CRITICAL();
    2a22:	89 81       	ldd	r24, Y+1	; 0x01
    2a24:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    2a28:	83 e4       	ldi	r24, 0x43	; 67
    2a2a:	8d 83       	std	Y+5, r24	; 0x05
    2a2c:	59 c0       	rjmp	.+178    	; 0x2ae0 <OSTimeDlyResume+0x118>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    2a2e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a30:	fb 81       	ldd	r31, Y+3	; 0x03
    2a32:	84 89       	ldd	r24, Z+20	; 0x14
    2a34:	95 89       	ldd	r25, Z+21	; 0x15
    2a36:	00 97       	sbiw	r24, 0x00	; 0
    2a38:	31 f4       	brne	.+12     	; 0x2a46 <OSTimeDlyResume+0x7e>
        OS_EXIT_CRITICAL();
    2a3a:	89 81       	ldd	r24, Y+1	; 0x01
    2a3c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    2a40:	80 e5       	ldi	r24, 0x50	; 80
    2a42:	8d 83       	std	Y+5, r24	; 0x05
    2a44:	4d c0       	rjmp	.+154    	; 0x2ae0 <OSTimeDlyResume+0x118>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    2a46:	ea 81       	ldd	r30, Y+2	; 0x02
    2a48:	fb 81       	ldd	r31, Y+3	; 0x03
    2a4a:	15 8a       	std	Z+21, r1	; 0x15
    2a4c:	14 8a       	std	Z+20, r1	; 0x14
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    2a4e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a50:	fb 81       	ldd	r31, Y+3	; 0x03
    2a52:	86 89       	ldd	r24, Z+22	; 0x16
    2a54:	88 2f       	mov	r24, r24
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	87 73       	andi	r24, 0x37	; 55
    2a5a:	90 70       	andi	r25, 0x00	; 0
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	61 f0       	breq	.+24     	; 0x2a78 <OSTimeDlyResume+0xb0>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    2a60:	ea 81       	ldd	r30, Y+2	; 0x02
    2a62:	fb 81       	ldd	r31, Y+3	; 0x03
    2a64:	86 89       	ldd	r24, Z+22	; 0x16
    2a66:	88 7c       	andi	r24, 0xC8	; 200
    2a68:	ea 81       	ldd	r30, Y+2	; 0x02
    2a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a6c:	86 8b       	std	Z+22, r24	; 0x16
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    2a6e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a70:	fb 81       	ldd	r31, Y+3	; 0x03
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	87 8b       	std	Z+23, r24	; 0x17
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <OSTimeDlyResume+0xb6>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    2a78:	ea 81       	ldd	r30, Y+2	; 0x02
    2a7a:	fb 81       	ldd	r31, Y+3	; 0x03
    2a7c:	17 8a       	std	Z+23, r1	; 0x17
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    2a7e:	ea 81       	ldd	r30, Y+2	; 0x02
    2a80:	fb 81       	ldd	r31, Y+3	; 0x03
    2a82:	86 89       	ldd	r24, Z+22	; 0x16
    2a84:	88 2f       	mov	r24, r24
    2a86:	90 e0       	ldi	r25, 0x00	; 0
    2a88:	88 70       	andi	r24, 0x08	; 8
    2a8a:	90 70       	andi	r25, 0x00	; 0
    2a8c:	00 97       	sbiw	r24, 0x00	; 0
    2a8e:	21 f5       	brne	.+72     	; 0x2ad8 <OSTimeDlyResume+0x110>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    2a90:	ea 81       	ldd	r30, Y+2	; 0x02
    2a92:	fb 81       	ldd	r31, Y+3	; 0x03
    2a94:	94 8d       	ldd	r25, Z+28	; 0x1c
    2a96:	80 91 98 07 	lds	r24, 0x0798
    2a9a:	89 2b       	or	r24, r25
    2a9c:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2aa0:	ea 81       	ldd	r30, Y+2	; 0x02
    2aa2:	fb 81       	ldd	r31, Y+3	; 0x03
    2aa4:	82 8d       	ldd	r24, Z+26	; 0x1a
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	ea 81       	ldd	r30, Y+2	; 0x02
    2aac:	fb 81       	ldd	r31, Y+3	; 0x03
    2aae:	82 8d       	ldd	r24, Z+26	; 0x1a
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	fc 01       	movw	r30, r24
    2ab6:	e7 56       	subi	r30, 0x67	; 103
    2ab8:	f8 4f       	sbci	r31, 0xF8	; 248
    2aba:	90 81       	ld	r25, Z
    2abc:	ea 81       	ldd	r30, Y+2	; 0x02
    2abe:	fb 81       	ldd	r31, Y+3	; 0x03
    2ac0:	83 8d       	ldd	r24, Z+27	; 0x1b
    2ac2:	89 2b       	or	r24, r25
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	e7 56       	subi	r30, 0x67	; 103
    2ac8:	f8 4f       	sbci	r31, 0xF8	; 248
    2aca:	80 83       	st	Z, r24
        OS_EXIT_CRITICAL();
    2acc:	89 81       	ldd	r24, Y+1	; 0x01
    2ace:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                            /* See if this is new highest priority  */
    2ad2:	0e 94 e2 09 	call	0x13c4	; 0x13c4 <OS_Sched>
    2ad6:	03 c0       	rjmp	.+6      	; 0x2ade <OSTimeDlyResume+0x116>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    2ad8:	89 81       	ldd	r24, Y+1	; 0x01
    2ada:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
    return (OS_ERR_NONE);
    2ade:	1d 82       	std	Y+5, r1	; 0x05
    2ae0:	8d 81       	ldd	r24, Y+5	; 0x05
}
    2ae2:	0f 90       	pop	r0
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <OSTimeGet+0x6>
    2af8:	0f 92       	push	r0
    2afa:	0f 92       	push	r0
    2afc:	cd b7       	in	r28, 0x3d	; 61
    2afe:	de b7       	in	r29, 0x3e	; 62
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2b00:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    2b02:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2b06:	89 83       	std	Y+1, r24	; 0x01
    ticks = OSTime;
    2b08:	80 91 53 08 	lds	r24, 0x0853
    2b0c:	90 91 54 08 	lds	r25, 0x0854
    2b10:	a0 91 55 08 	lds	r26, 0x0855
    2b14:	b0 91 56 08 	lds	r27, 0x0856
    2b18:	8a 83       	std	Y+2, r24	; 0x02
    2b1a:	9b 83       	std	Y+3, r25	; 0x03
    2b1c:	ac 83       	std	Y+4, r26	; 0x04
    2b1e:	bd 83       	std	Y+5, r27	; 0x05
    OS_EXIT_CRITICAL();
    2b20:	89 81       	ldd	r24, Y+1	; 0x01
    2b22:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (ticks);
    2b26:	8a 81       	ldd	r24, Y+2	; 0x02
    2b28:	9b 81       	ldd	r25, Y+3	; 0x03
    2b2a:	ac 81       	ldd	r26, Y+4	; 0x04
    2b2c:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	0f 90       	pop	r0
    2b3c:	cf 91       	pop	r28
    2b3e:	df 91       	pop	r29
    2b40:	08 95       	ret

00002b42 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    2b42:	df 93       	push	r29
    2b44:	cf 93       	push	r28
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <OSTimeSet+0x6>
    2b48:	0f 92       	push	r0
    2b4a:	0f 92       	push	r0
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	6a 83       	std	Y+2, r22	; 0x02
    2b52:	7b 83       	std	Y+3, r23	; 0x03
    2b54:	8c 83       	std	Y+4, r24	; 0x04
    2b56:	9d 83       	std	Y+5, r25	; 0x05
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2b58:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    2b5a:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    OSTime = ticks;
    2b60:	8a 81       	ldd	r24, Y+2	; 0x02
    2b62:	9b 81       	ldd	r25, Y+3	; 0x03
    2b64:	ac 81       	ldd	r26, Y+4	; 0x04
    2b66:	bd 81       	ldd	r27, Y+5	; 0x05
    2b68:	80 93 53 08 	sts	0x0853, r24
    2b6c:	90 93 54 08 	sts	0x0854, r25
    2b70:	a0 93 55 08 	sts	0x0855, r26
    2b74:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
    2b78:	89 81       	ldd	r24, Y+1	; 0x01
    2b7a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0
    2b88:	cf 91       	pop	r28
    2b8a:	df 91       	pop	r29
    2b8c:	08 95       	ret

00002b8e <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
    2b8e:	8f 92       	push	r8
    2b90:	9f 92       	push	r9
    2b92:	af 92       	push	r10
    2b94:	bf 92       	push	r11
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    2ba8:	66 97       	sbiw	r28, 0x16	; 22
    2baa:	0f b6       	in	r0, 0x3f	; 63
    2bac:	f8 94       	cli
    2bae:	de bf       	out	0x3e, r29	; 62
    2bb0:	0f be       	out	0x3f, r0	; 63
    2bb2:	cd bf       	out	0x3d, r28	; 61
    2bb4:	6c 83       	std	Y+4, r22	; 0x04
    2bb6:	7d 83       	std	Y+5, r23	; 0x05
    2bb8:	8e 83       	std	Y+6, r24	; 0x06
    2bba:	9f 83       	std	Y+7, r25	; 0x07
    2bbc:	28 87       	std	Y+8, r18	; 0x08
    2bbe:	39 87       	std	Y+9, r19	; 0x09
    2bc0:	4a 87       	std	Y+10, r20	; 0x0a
    2bc2:	5b 87       	std	Y+11, r21	; 0x0b
    2bc4:	0c 87       	std	Y+12, r16	; 0x0c
    2bc6:	fe 86       	std	Y+14, r15	; 0x0e
    2bc8:	ed 86       	std	Y+13, r14	; 0x0d
    2bca:	d8 8a       	std	Y+16, r13	; 0x10
    2bcc:	cf 86       	std	Y+15, r12	; 0x0f
    2bce:	ba 8a       	std	Y+18, r11	; 0x12
    2bd0:	a9 8a       	std	Y+17, r10	; 0x11
    2bd2:	9c 8a       	std	Y+20, r9	; 0x14
    2bd4:	8b 8a       	std	Y+19, r8	; 0x13
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    2bd6:	80 91 4c 08 	lds	r24, 0x084C
    2bda:	88 23       	and	r24, r24
    2bdc:	39 f0       	breq	.+14     	; 0x2bec <OSTmrCreate+0x5e>
        *perr  = OS_ERR_TMR_ISR;
    2bde:	eb 89       	ldd	r30, Y+19	; 0x13
    2be0:	fc 89       	ldd	r31, Y+20	; 0x14
    2be2:	8b e8       	ldi	r24, 0x8B	; 139
    2be4:	80 83       	st	Z, r24
        return ((OS_TMR *)0);
    2be6:	1e 8a       	std	Y+22, r1	; 0x16
    2be8:	1d 8a       	std	Y+21, r1	; 0x15
    2bea:	6b c0       	rjmp	.+214    	; 0x2cc2 <OSTmrCreate+0x134>
    }
    OSTmr_Lock();
    2bec:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
    2bf0:	0e 94 cb 19 	call	0x3396	; 0x3396 <OSTmr_Alloc>
    2bf4:	9b 83       	std	Y+3, r25	; 0x03
    2bf6:	8a 83       	std	Y+2, r24	; 0x02
    if (ptmr == (OS_TMR *)0) {
    2bf8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfa:	9b 81       	ldd	r25, Y+3	; 0x03
    2bfc:	00 97       	sbiw	r24, 0x00	; 0
    2bfe:	49 f4       	brne	.+18     	; 0x2c12 <OSTmrCreate+0x84>
        OSTmr_Unlock();
    2c00:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
    2c04:	eb 89       	ldd	r30, Y+19	; 0x13
    2c06:	fc 89       	ldd	r31, Y+20	; 0x14
    2c08:	86 e8       	ldi	r24, 0x86	; 134
    2c0a:	80 83       	st	Z, r24
        return ((OS_TMR *)0);
    2c0c:	1e 8a       	std	Y+22, r1	; 0x16
    2c0e:	1d 8a       	std	Y+21, r1	; 0x15
    2c10:	58 c0       	rjmp	.+176    	; 0x2cc2 <OSTmrCreate+0x134>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
    2c12:	ea 81       	ldd	r30, Y+2	; 0x02
    2c14:	fb 81       	ldd	r31, Y+3	; 0x03
    2c16:	81 e0       	ldi	r24, 0x01	; 1
    2c18:	86 a3       	std	Z+38, r24	; 0x26
    ptmr->OSTmrDly         = dly;
    2c1a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c1c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c1e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c20:	9d 81       	ldd	r25, Y+5	; 0x05
    2c22:	ae 81       	ldd	r26, Y+6	; 0x06
    2c24:	bf 81       	ldd	r27, Y+7	; 0x07
    2c26:	85 87       	std	Z+13, r24	; 0x0d
    2c28:	96 87       	std	Z+14, r25	; 0x0e
    2c2a:	a7 87       	std	Z+15, r26	; 0x0f
    2c2c:	b0 8b       	std	Z+16, r27	; 0x10
    ptmr->OSTmrPeriod      = period;
    2c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    2c30:	fb 81       	ldd	r31, Y+3	; 0x03
    2c32:	88 85       	ldd	r24, Y+8	; 0x08
    2c34:	99 85       	ldd	r25, Y+9	; 0x09
    2c36:	aa 85       	ldd	r26, Y+10	; 0x0a
    2c38:	bb 85       	ldd	r27, Y+11	; 0x0b
    2c3a:	81 8b       	std	Z+17, r24	; 0x11
    2c3c:	92 8b       	std	Z+18, r25	; 0x12
    2c3e:	a3 8b       	std	Z+19, r26	; 0x13
    2c40:	b4 8b       	std	Z+20, r27	; 0x14
    ptmr->OSTmrOpt         = opt;
    2c42:	ea 81       	ldd	r30, Y+2	; 0x02
    2c44:	fb 81       	ldd	r31, Y+3	; 0x03
    2c46:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c48:	85 a3       	std	Z+37, r24	; 0x25
    ptmr->OSTmrCallback    = callback;
    2c4a:	ea 81       	ldd	r30, Y+2	; 0x02
    2c4c:	fb 81       	ldd	r31, Y+3	; 0x03
    2c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c52:	92 83       	std	Z+2, r25	; 0x02
    2c54:	81 83       	std	Z+1, r24	; 0x01
    ptmr->OSTmrCallbackArg = callback_arg;
    2c56:	ea 81       	ldd	r30, Y+2	; 0x02
    2c58:	fb 81       	ldd	r31, Y+3	; 0x03
    2c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c5c:	98 89       	ldd	r25, Y+16	; 0x10
    2c5e:	94 83       	std	Z+4, r25	; 0x04
    2c60:	83 83       	std	Z+3, r24	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
    2c62:	89 89       	ldd	r24, Y+17	; 0x11
    2c64:	9a 89       	ldd	r25, Y+18	; 0x12
    2c66:	00 97       	sbiw	r24, 0x00	; 0
    2c68:	19 f1       	breq	.+70     	; 0x2cb0 <OSTmrCreate+0x122>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
    2c6a:	89 89       	ldd	r24, Y+17	; 0x11
    2c6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2c6e:	0e 94 8e 0a 	call	0x151c	; 0x151c <OS_StrLen>
    2c72:	89 83       	std	Y+1, r24	; 0x01
        if (len < OS_TMR_CFG_NAME_SIZE) {
    2c74:	89 81       	ldd	r24, Y+1	; 0x01
    2c76:	80 31       	cpi	r24, 0x10	; 16
    2c78:	48 f4       	brcc	.+18     	; 0x2c8c <OSTmrCreate+0xfe>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
    2c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2c7e:	45 96       	adiw	r24, 0x15	; 21
    2c80:	29 89       	ldd	r18, Y+17	; 0x11
    2c82:	3a 89       	ldd	r19, Y+18	; 0x12
    2c84:	b9 01       	movw	r22, r18
    2c86:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OS_StrCopy>
    2c8a:	12 c0       	rjmp	.+36     	; 0x2cb0 <OSTmrCreate+0x122>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
    2c8c:	ea 81       	ldd	r30, Y+2	; 0x02
    2c8e:	fb 81       	ldd	r31, Y+3	; 0x03
    2c90:	83 e2       	ldi	r24, 0x23	; 35
    2c92:	85 8b       	std	Z+21, r24	; 0x15
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
    2c94:	ea 81       	ldd	r30, Y+2	; 0x02
    2c96:	fb 81       	ldd	r31, Y+3	; 0x03
    2c98:	16 8a       	std	Z+22, r1	; 0x16
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
    2c9a:	eb 89       	ldd	r30, Y+19	; 0x13
    2c9c:	fc 89       	ldd	r31, Y+20	; 0x14
    2c9e:	8c e8       	ldi	r24, 0x8C	; 140
    2ca0:	80 83       	st	Z, r24
            OSTmr_Unlock();
    2ca2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
            return (ptmr);
    2ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    2caa:	9e 8b       	std	Y+22, r25	; 0x16
    2cac:	8d 8b       	std	Y+21, r24	; 0x15
    2cae:	09 c0       	rjmp	.+18     	; 0x2cc2 <OSTmrCreate+0x134>
        }
    }
#endif
    OSTmr_Unlock();
    2cb0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
    2cb4:	eb 89       	ldd	r30, Y+19	; 0x13
    2cb6:	fc 89       	ldd	r31, Y+20	; 0x14
    2cb8:	10 82       	st	Z, r1
    return (ptmr);
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbe:	9e 8b       	std	Y+22, r25	; 0x16
    2cc0:	8d 8b       	std	Y+21, r24	; 0x15
    2cc2:	8d 89       	ldd	r24, Y+21	; 0x15
    2cc4:	9e 89       	ldd	r25, Y+22	; 0x16
}
    2cc6:	66 96       	adiw	r28, 0x16	; 22
    2cc8:	0f b6       	in	r0, 0x3f	; 63
    2cca:	f8 94       	cli
    2ccc:	de bf       	out	0x3e, r29	; 62
    2cce:	0f be       	out	0x3f, r0	; 63
    2cd0:	cd bf       	out	0x3d, r28	; 61
    2cd2:	cf 91       	pop	r28
    2cd4:	df 91       	pop	r29
    2cd6:	0f 91       	pop	r16
    2cd8:	ff 90       	pop	r15
    2cda:	ef 90       	pop	r14
    2cdc:	df 90       	pop	r13
    2cde:	cf 90       	pop	r12
    2ce0:	bf 90       	pop	r11
    2ce2:	af 90       	pop	r10
    2ce4:	9f 90       	pop	r9
    2ce6:	8f 90       	pop	r8
    2ce8:	08 95       	ret

00002cea <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
    2cf2:	27 97       	sbiw	r28, 0x07	; 7
    2cf4:	0f b6       	in	r0, 0x3f	; 63
    2cf6:	f8 94       	cli
    2cf8:	de bf       	out	0x3e, r29	; 62
    2cfa:	0f be       	out	0x3f, r0	; 63
    2cfc:	cd bf       	out	0x3d, r28	; 61
    2cfe:	9a 83       	std	Y+2, r25	; 0x02
    2d00:	89 83       	std	Y+1, r24	; 0x01
    2d02:	7c 83       	std	Y+4, r23	; 0x04
    2d04:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    2d06:	e9 81       	ldd	r30, Y+1	; 0x01
    2d08:	fa 81       	ldd	r31, Y+2	; 0x02
    2d0a:	80 81       	ld	r24, Z
    2d0c:	84 36       	cpi	r24, 0x64	; 100
    2d0e:	31 f0       	breq	.+12     	; 0x2d1c <OSTmrDel+0x32>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    2d10:	eb 81       	ldd	r30, Y+3	; 0x03
    2d12:	fc 81       	ldd	r31, Y+4	; 0x04
    2d14:	89 e8       	ldi	r24, 0x89	; 137
    2d16:	80 83       	st	Z, r24
        return (OS_FALSE);
    2d18:	1f 82       	std	Y+7, r1	; 0x07
    2d1a:	52 c0       	rjmp	.+164    	; 0x2dc0 <OSTmrDel+0xd6>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    2d1c:	80 91 4c 08 	lds	r24, 0x084C
    2d20:	88 23       	and	r24, r24
    2d22:	31 f0       	breq	.+12     	; 0x2d30 <OSTmrDel+0x46>
        *perr  = OS_ERR_TMR_ISR;
    2d24:	eb 81       	ldd	r30, Y+3	; 0x03
    2d26:	fc 81       	ldd	r31, Y+4	; 0x04
    2d28:	8b e8       	ldi	r24, 0x8B	; 139
    2d2a:	80 83       	st	Z, r24
        return (OS_FALSE);
    2d2c:	1f 82       	std	Y+7, r1	; 0x07
    2d2e:	48 c0       	rjmp	.+144    	; 0x2dc0 <OSTmrDel+0xd6>
    }
    OSTmr_Lock();
    2d30:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    2d34:	e9 81       	ldd	r30, Y+1	; 0x01
    2d36:	fa 81       	ldd	r31, Y+2	; 0x02
    2d38:	86 a1       	ldd	r24, Z+38	; 0x26
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	3e 83       	std	Y+6, r19	; 0x06
    2d40:	2d 83       	std	Y+5, r18	; 0x05
    2d42:	8d 81       	ldd	r24, Y+5	; 0x05
    2d44:	9e 81       	ldd	r25, Y+6	; 0x06
    2d46:	83 30       	cpi	r24, 0x03	; 3
    2d48:	91 05       	cpc	r25, r1
    2d4a:	54 f4       	brge	.+20     	; 0x2d60 <OSTmrDel+0x76>
    2d4c:	2d 81       	ldd	r18, Y+5	; 0x05
    2d4e:	3e 81       	ldd	r19, Y+6	; 0x06
    2d50:	21 30       	cpi	r18, 0x01	; 1
    2d52:	31 05       	cpc	r19, r1
    2d54:	d4 f4       	brge	.+52     	; 0x2d8a <OSTmrDel+0xa0>
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	00 97       	sbiw	r24, 0x00	; 0
    2d5c:	11 f1       	breq	.+68     	; 0x2da2 <OSTmrDel+0xb8>
    2d5e:	29 c0       	rjmp	.+82     	; 0x2db2 <OSTmrDel+0xc8>
    2d60:	2d 81       	ldd	r18, Y+5	; 0x05
    2d62:	3e 81       	ldd	r19, Y+6	; 0x06
    2d64:	23 30       	cpi	r18, 0x03	; 3
    2d66:	31 05       	cpc	r19, r1
    2d68:	21 f5       	brne	.+72     	; 0x2db2 <OSTmrDel+0xc8>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d6e:	0e 94 15 1c 	call	0x382a	; 0x382a <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    2d72:	89 81       	ldd	r24, Y+1	; 0x01
    2d74:	9a 81       	ldd	r25, Y+2	; 0x02
    2d76:	0e 94 0f 1a 	call	0x341e	; 0x341e <OSTmr_Free>
             OSTmr_Unlock();
    2d7a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    2d7e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d80:	fc 81       	ldd	r31, Y+4	; 0x04
    2d82:	10 82       	st	Z, r1
             return (OS_TRUE);
    2d84:	31 e0       	ldi	r19, 0x01	; 1
    2d86:	3f 83       	std	Y+7, r19	; 0x07
    2d88:	1b c0       	rjmp	.+54     	; 0x2dc0 <OSTmrDel+0xd6>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    2d8a:	89 81       	ldd	r24, Y+1	; 0x01
    2d8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2d8e:	0e 94 0f 1a 	call	0x341e	; 0x341e <OSTmr_Free>
             OSTmr_Unlock();
    2d92:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    2d96:	eb 81       	ldd	r30, Y+3	; 0x03
    2d98:	fc 81       	ldd	r31, Y+4	; 0x04
    2d9a:	10 82       	st	Z, r1
             return (OS_TRUE);
    2d9c:	81 e0       	ldi	r24, 0x01	; 1
    2d9e:	8f 83       	std	Y+7, r24	; 0x07
    2da0:	0f c0       	rjmp	.+30     	; 0x2dc0 <OSTmrDel+0xd6>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
    2da2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    2da6:	eb 81       	ldd	r30, Y+3	; 0x03
    2da8:	fc 81       	ldd	r31, Y+4	; 0x04
    2daa:	87 e8       	ldi	r24, 0x87	; 135
    2dac:	80 83       	st	Z, r24
             return (OS_FALSE);
    2dae:	1f 82       	std	Y+7, r1	; 0x07
    2db0:	07 c0       	rjmp	.+14     	; 0x2dc0 <OSTmrDel+0xd6>

        default:
             OSTmr_Unlock();
    2db2:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    2db6:	eb 81       	ldd	r30, Y+3	; 0x03
    2db8:	fc 81       	ldd	r31, Y+4	; 0x04
    2dba:	8d e8       	ldi	r24, 0x8D	; 141
    2dbc:	80 83       	st	Z, r24
             return (OS_FALSE);
    2dbe:	1f 82       	std	Y+7, r1	; 0x07
    2dc0:	8f 81       	ldd	r24, Y+7	; 0x07
    }
}
    2dc2:	27 96       	adiw	r28, 0x07	; 7
    2dc4:	0f b6       	in	r0, 0x3f	; 63
    2dc6:	f8 94       	cli
    2dc8:	de bf       	out	0x3e, r29	; 62
    2dca:	0f be       	out	0x3f, r0	; 63
    2dcc:	cd bf       	out	0x3d, r28	; 61
    2dce:	cf 91       	pop	r28
    2dd0:	df 91       	pop	r29
    2dd2:	08 95       	ret

00002dd4 <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
    2dd4:	df 93       	push	r29
    2dd6:	cf 93       	push	r28
    2dd8:	cd b7       	in	r28, 0x3d	; 61
    2dda:	de b7       	in	r29, 0x3e	; 62
    2ddc:	2a 97       	sbiw	r28, 0x0a	; 10
    2dde:	0f b6       	in	r0, 0x3f	; 63
    2de0:	f8 94       	cli
    2de2:	de bf       	out	0x3e, r29	; 62
    2de4:	0f be       	out	0x3f, r0	; 63
    2de6:	cd bf       	out	0x3d, r28	; 61
    2de8:	9b 83       	std	Y+3, r25	; 0x03
    2dea:	8a 83       	std	Y+2, r24	; 0x02
    2dec:	7d 83       	std	Y+5, r23	; 0x05
    2dee:	6c 83       	std	Y+4, r22	; 0x04
    2df0:	5f 83       	std	Y+7, r21	; 0x07
    2df2:	4e 83       	std	Y+6, r20	; 0x06
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    2df4:	ea 81       	ldd	r30, Y+2	; 0x02
    2df6:	fb 81       	ldd	r31, Y+3	; 0x03
    2df8:	80 81       	ld	r24, Z
    2dfa:	84 36       	cpi	r24, 0x64	; 100
    2dfc:	31 f0       	breq	.+12     	; 0x2e0a <OSTmrNameGet+0x36>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    2dfe:	ee 81       	ldd	r30, Y+6	; 0x06
    2e00:	ff 81       	ldd	r31, Y+7	; 0x07
    2e02:	89 e8       	ldi	r24, 0x89	; 137
    2e04:	80 83       	st	Z, r24
        return (0);
    2e06:	1a 86       	std	Y+10, r1	; 0x0a
    2e08:	42 c0       	rjmp	.+132    	; 0x2e8e <OSTmrNameGet+0xba>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    2e0a:	80 91 4c 08 	lds	r24, 0x084C
    2e0e:	88 23       	and	r24, r24
    2e10:	31 f0       	breq	.+12     	; 0x2e1e <OSTmrNameGet+0x4a>
        *perr = OS_ERR_NAME_GET_ISR;
    2e12:	ee 81       	ldd	r30, Y+6	; 0x06
    2e14:	ff 81       	ldd	r31, Y+7	; 0x07
    2e16:	81 e1       	ldi	r24, 0x11	; 17
    2e18:	80 83       	st	Z, r24
        return (0);
    2e1a:	1a 86       	std	Y+10, r1	; 0x0a
    2e1c:	38 c0       	rjmp	.+112    	; 0x2e8e <OSTmrNameGet+0xba>
    }
    OSTmr_Lock();
    2e1e:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    2e22:	ea 81       	ldd	r30, Y+2	; 0x02
    2e24:	fb 81       	ldd	r31, Y+3	; 0x03
    2e26:	86 a1       	ldd	r24, Z+38	; 0x26
    2e28:	28 2f       	mov	r18, r24
    2e2a:	30 e0       	ldi	r19, 0x00	; 0
    2e2c:	39 87       	std	Y+9, r19	; 0x09
    2e2e:	28 87       	std	Y+8, r18	; 0x08
    2e30:	88 85       	ldd	r24, Y+8	; 0x08
    2e32:	99 85       	ldd	r25, Y+9	; 0x09
    2e34:	00 97       	sbiw	r24, 0x00	; 0
    2e36:	e1 f0       	breq	.+56     	; 0x2e70 <OSTmrNameGet+0x9c>
    2e38:	28 85       	ldd	r18, Y+8	; 0x08
    2e3a:	39 85       	ldd	r19, Y+9	; 0x09
    2e3c:	33 23       	and	r19, r19
    2e3e:	04 f1       	brlt	.+64     	; 0x2e80 <OSTmrNameGet+0xac>
    2e40:	88 85       	ldd	r24, Y+8	; 0x08
    2e42:	99 85       	ldd	r25, Y+9	; 0x09
    2e44:	84 30       	cpi	r24, 0x04	; 4
    2e46:	91 05       	cpc	r25, r1
    2e48:	dc f4       	brge	.+54     	; 0x2e80 <OSTmrNameGet+0xac>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
    2e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4e:	9c 01       	movw	r18, r24
    2e50:	2b 5e       	subi	r18, 0xEB	; 235
    2e52:	3f 4f       	sbci	r19, 0xFF	; 255
    2e54:	8c 81       	ldd	r24, Y+4	; 0x04
    2e56:	9d 81       	ldd	r25, Y+5	; 0x05
    2e58:	b9 01       	movw	r22, r18
    2e5a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <OS_StrCopy>
    2e5e:	89 83       	std	Y+1, r24	; 0x01
             OSTmr_Unlock();
    2e60:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    2e64:	ee 81       	ldd	r30, Y+6	; 0x06
    2e66:	ff 81       	ldd	r31, Y+7	; 0x07
    2e68:	10 82       	st	Z, r1
             return (len);
    2e6a:	99 81       	ldd	r25, Y+1	; 0x01
    2e6c:	9a 87       	std	Y+10, r25	; 0x0a
    2e6e:	0f c0       	rjmp	.+30     	; 0x2e8e <OSTmrNameGet+0xba>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
    2e70:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    2e74:	ee 81       	ldd	r30, Y+6	; 0x06
    2e76:	ff 81       	ldd	r31, Y+7	; 0x07
    2e78:	87 e8       	ldi	r24, 0x87	; 135
    2e7a:	80 83       	st	Z, r24
             return (0);
    2e7c:	1a 86       	std	Y+10, r1	; 0x0a
    2e7e:	07 c0       	rjmp	.+14     	; 0x2e8e <OSTmrNameGet+0xba>

        default:
             OSTmr_Unlock();
    2e80:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    2e84:	ee 81       	ldd	r30, Y+6	; 0x06
    2e86:	ff 81       	ldd	r31, Y+7	; 0x07
    2e88:	8d e8       	ldi	r24, 0x8D	; 141
    2e8a:	80 83       	st	Z, r24
             return (0);
    2e8c:	1a 86       	std	Y+10, r1	; 0x0a
    2e8e:	8a 85       	ldd	r24, Y+10	; 0x0a
    }
}
    2e90:	2a 96       	adiw	r28, 0x0a	; 10
    2e92:	0f b6       	in	r0, 0x3f	; 63
    2e94:	f8 94       	cli
    2e96:	de bf       	out	0x3e, r29	; 62
    2e98:	0f be       	out	0x3f, r0	; 63
    2e9a:	cd bf       	out	0x3d, r28	; 61
    2e9c:	cf 91       	pop	r28
    2e9e:	df 91       	pop	r29
    2ea0:	08 95       	ret

00002ea2 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
    2ea2:	ef 92       	push	r14
    2ea4:	ff 92       	push	r15
    2ea6:	0f 93       	push	r16
    2ea8:	1f 93       	push	r17
    2eaa:	df 93       	push	r29
    2eac:	cf 93       	push	r28
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	2e 97       	sbiw	r28, 0x0e	; 14
    2eb4:	0f b6       	in	r0, 0x3f	; 63
    2eb6:	f8 94       	cli
    2eb8:	de bf       	out	0x3e, r29	; 62
    2eba:	0f be       	out	0x3f, r0	; 63
    2ebc:	cd bf       	out	0x3d, r28	; 61
    2ebe:	9e 83       	std	Y+6, r25	; 0x06
    2ec0:	8d 83       	std	Y+5, r24	; 0x05
    2ec2:	78 87       	std	Y+8, r23	; 0x08
    2ec4:	6f 83       	std	Y+7, r22	; 0x07
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    2ec6:	ed 81       	ldd	r30, Y+5	; 0x05
    2ec8:	fe 81       	ldd	r31, Y+6	; 0x06
    2eca:	80 81       	ld	r24, Z
    2ecc:	84 36       	cpi	r24, 0x64	; 100
    2ece:	49 f0       	breq	.+18     	; 0x2ee2 <OSTmrRemainGet+0x40>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    2ed0:	ef 81       	ldd	r30, Y+7	; 0x07
    2ed2:	f8 85       	ldd	r31, Y+8	; 0x08
    2ed4:	89 e8       	ldi	r24, 0x89	; 137
    2ed6:	80 83       	st	Z, r24
        return (0);
    2ed8:	1b 86       	std	Y+11, r1	; 0x0b
    2eda:	1c 86       	std	Y+12, r1	; 0x0c
    2edc:	1d 86       	std	Y+13, r1	; 0x0d
    2ede:	1e 86       	std	Y+14, r1	; 0x0e
    2ee0:	bf c0       	rjmp	.+382    	; 0x3060 <OSTmrRemainGet+0x1be>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    2ee2:	80 91 4c 08 	lds	r24, 0x084C
    2ee6:	88 23       	and	r24, r24
    2ee8:	49 f0       	breq	.+18     	; 0x2efc <OSTmrRemainGet+0x5a>
        *perr = OS_ERR_TMR_ISR;
    2eea:	ef 81       	ldd	r30, Y+7	; 0x07
    2eec:	f8 85       	ldd	r31, Y+8	; 0x08
    2eee:	8b e8       	ldi	r24, 0x8B	; 139
    2ef0:	80 83       	st	Z, r24
        return (0);
    2ef2:	1b 86       	std	Y+11, r1	; 0x0b
    2ef4:	1c 86       	std	Y+12, r1	; 0x0c
    2ef6:	1d 86       	std	Y+13, r1	; 0x0d
    2ef8:	1e 86       	std	Y+14, r1	; 0x0e
    2efa:	b2 c0       	rjmp	.+356    	; 0x3060 <OSTmrRemainGet+0x1be>
    }
    OSTmr_Lock();
    2efc:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    2f00:	ed 81       	ldd	r30, Y+5	; 0x05
    2f02:	fe 81       	ldd	r31, Y+6	; 0x06
    2f04:	86 a1       	ldd	r24, Z+38	; 0x26
    2f06:	e8 2e       	mov	r14, r24
    2f08:	ff 24       	eor	r15, r15
    2f0a:	fa 86       	std	Y+10, r15	; 0x0a
    2f0c:	e9 86       	std	Y+9, r14	; 0x09
    2f0e:	09 85       	ldd	r16, Y+9	; 0x09
    2f10:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f12:	01 30       	cpi	r16, 0x01	; 1
    2f14:	11 05       	cpc	r17, r1
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <OSTmrRemainGet+0x78>
    2f18:	3f c0       	rjmp	.+126    	; 0x2f98 <OSTmrRemainGet+0xf6>
    2f1a:	29 85       	ldd	r18, Y+9	; 0x09
    2f1c:	3a 85       	ldd	r19, Y+10	; 0x0a
    2f1e:	22 30       	cpi	r18, 0x02	; 2
    2f20:	31 05       	cpc	r19, r1
    2f22:	34 f4       	brge	.+12     	; 0x2f30 <OSTmrRemainGet+0x8e>
    2f24:	89 85       	ldd	r24, Y+9	; 0x09
    2f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f28:	00 97       	sbiw	r24, 0x00	; 0
    2f2a:	09 f4       	brne	.+2      	; 0x2f2e <OSTmrRemainGet+0x8c>
    2f2c:	84 c0       	rjmp	.+264    	; 0x3036 <OSTmrRemainGet+0x194>
    2f2e:	8e c0       	rjmp	.+284    	; 0x304c <OSTmrRemainGet+0x1aa>
    2f30:	a9 85       	ldd	r26, Y+9	; 0x09
    2f32:	ba 85       	ldd	r27, Y+10	; 0x0a
    2f34:	a2 30       	cpi	r26, 0x02	; 2
    2f36:	b1 05       	cpc	r27, r1
    2f38:	09 f4       	brne	.+2      	; 0x2f3c <OSTmrRemainGet+0x9a>
    2f3a:	73 c0       	rjmp	.+230    	; 0x3022 <OSTmrRemainGet+0x180>
    2f3c:	09 85       	ldd	r16, Y+9	; 0x09
    2f3e:	1a 85       	ldd	r17, Y+10	; 0x0a
    2f40:	03 30       	cpi	r16, 0x03	; 3
    2f42:	11 05       	cpc	r17, r1
    2f44:	09 f0       	breq	.+2      	; 0x2f48 <OSTmrRemainGet+0xa6>
    2f46:	82 c0       	rjmp	.+260    	; 0x304c <OSTmrRemainGet+0x1aa>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
    2f48:	ed 81       	ldd	r30, Y+5	; 0x05
    2f4a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f4c:	21 85       	ldd	r18, Z+9	; 0x09
    2f4e:	32 85       	ldd	r19, Z+10	; 0x0a
    2f50:	43 85       	ldd	r20, Z+11	; 0x0b
    2f52:	54 85       	ldd	r21, Z+12	; 0x0c
    2f54:	80 91 4f 08 	lds	r24, 0x084F
    2f58:	90 91 50 08 	lds	r25, 0x0850
    2f5c:	a0 91 51 08 	lds	r26, 0x0851
    2f60:	b0 91 52 08 	lds	r27, 0x0852
    2f64:	79 01       	movw	r14, r18
    2f66:	8a 01       	movw	r16, r20
    2f68:	e8 1a       	sub	r14, r24
    2f6a:	f9 0a       	sbc	r15, r25
    2f6c:	0a 0b       	sbc	r16, r26
    2f6e:	1b 0b       	sbc	r17, r27
    2f70:	d8 01       	movw	r26, r16
    2f72:	c7 01       	movw	r24, r14
    2f74:	89 83       	std	Y+1, r24	; 0x01
    2f76:	9a 83       	std	Y+2, r25	; 0x02
    2f78:	ab 83       	std	Y+3, r26	; 0x03
    2f7a:	bc 83       	std	Y+4, r27	; 0x04
             OSTmr_Unlock();
    2f7c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
    2f80:	ef 81       	ldd	r30, Y+7	; 0x07
    2f82:	f8 85       	ldd	r31, Y+8	; 0x08
    2f84:	10 82       	st	Z, r1
             return (remain);
    2f86:	09 81       	ldd	r16, Y+1	; 0x01
    2f88:	1a 81       	ldd	r17, Y+2	; 0x02
    2f8a:	2b 81       	ldd	r18, Y+3	; 0x03
    2f8c:	3c 81       	ldd	r19, Y+4	; 0x04
    2f8e:	0b 87       	std	Y+11, r16	; 0x0b
    2f90:	1c 87       	std	Y+12, r17	; 0x0c
    2f92:	2d 87       	std	Y+13, r18	; 0x0d
    2f94:	3e 87       	std	Y+14, r19	; 0x0e
    2f96:	64 c0       	rjmp	.+200    	; 0x3060 <OSTmrRemainGet+0x1be>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
    2f98:	ed 81       	ldd	r30, Y+5	; 0x05
    2f9a:	fe 81       	ldd	r31, Y+6	; 0x06
    2f9c:	85 a1       	ldd	r24, Z+37	; 0x25
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	82 30       	cpi	r24, 0x02	; 2
    2fa4:	91 05       	cpc	r25, r1
    2fa6:	29 f5       	brne	.+74     	; 0x2ff2 <OSTmrRemainGet+0x150>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
    2fa8:	ed 81       	ldd	r30, Y+5	; 0x05
    2faa:	fe 81       	ldd	r31, Y+6	; 0x06
    2fac:	85 85       	ldd	r24, Z+13	; 0x0d
    2fae:	96 85       	ldd	r25, Z+14	; 0x0e
    2fb0:	a7 85       	ldd	r26, Z+15	; 0x0f
    2fb2:	b0 89       	ldd	r27, Z+16	; 0x10
    2fb4:	00 97       	sbiw	r24, 0x00	; 0
    2fb6:	a1 05       	cpc	r26, r1
    2fb8:	b1 05       	cpc	r27, r1
    2fba:	59 f4       	brne	.+22     	; 0x2fd2 <OSTmrRemainGet+0x130>
                          remain = ptmr->OSTmrPeriod;
    2fbc:	ed 81       	ldd	r30, Y+5	; 0x05
    2fbe:	fe 81       	ldd	r31, Y+6	; 0x06
    2fc0:	81 89       	ldd	r24, Z+17	; 0x11
    2fc2:	92 89       	ldd	r25, Z+18	; 0x12
    2fc4:	a3 89       	ldd	r26, Z+19	; 0x13
    2fc6:	b4 89       	ldd	r27, Z+20	; 0x14
    2fc8:	89 83       	std	Y+1, r24	; 0x01
    2fca:	9a 83       	std	Y+2, r25	; 0x02
    2fcc:	ab 83       	std	Y+3, r26	; 0x03
    2fce:	bc 83       	std	Y+4, r27	; 0x04
    2fd0:	0a c0       	rjmp	.+20     	; 0x2fe6 <OSTmrRemainGet+0x144>
                      } else {
                          remain = ptmr->OSTmrDly;
    2fd2:	ed 81       	ldd	r30, Y+5	; 0x05
    2fd4:	fe 81       	ldd	r31, Y+6	; 0x06
    2fd6:	85 85       	ldd	r24, Z+13	; 0x0d
    2fd8:	96 85       	ldd	r25, Z+14	; 0x0e
    2fda:	a7 85       	ldd	r26, Z+15	; 0x0f
    2fdc:	b0 89       	ldd	r27, Z+16	; 0x10
    2fde:	89 83       	std	Y+1, r24	; 0x01
    2fe0:	9a 83       	std	Y+2, r25	; 0x02
    2fe2:	ab 83       	std	Y+3, r26	; 0x03
    2fe4:	bc 83       	std	Y+4, r27	; 0x04
                      }
                      OSTmr_Unlock();
    2fe6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    2fea:	ef 81       	ldd	r30, Y+7	; 0x07
    2fec:	f8 85       	ldd	r31, Y+8	; 0x08
    2fee:	10 82       	st	Z, r1
    2ff0:	0f c0       	rjmp	.+30     	; 0x3010 <OSTmrRemainGet+0x16e>
                      break;

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
    2ff2:	ed 81       	ldd	r30, Y+5	; 0x05
    2ff4:	fe 81       	ldd	r31, Y+6	; 0x06
    2ff6:	85 85       	ldd	r24, Z+13	; 0x0d
    2ff8:	96 85       	ldd	r25, Z+14	; 0x0e
    2ffa:	a7 85       	ldd	r26, Z+15	; 0x0f
    2ffc:	b0 89       	ldd	r27, Z+16	; 0x10
    2ffe:	89 83       	std	Y+1, r24	; 0x01
    3000:	9a 83       	std	Y+2, r25	; 0x02
    3002:	ab 83       	std	Y+3, r26	; 0x03
    3004:	bc 83       	std	Y+4, r27	; 0x04
                      OSTmr_Unlock();
    3006:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    300a:	ef 81       	ldd	r30, Y+7	; 0x07
    300c:	f8 85       	ldd	r31, Y+8	; 0x08
    300e:	10 82       	st	Z, r1
                      break;
             }
             return (remain);
    3010:	89 81       	ldd	r24, Y+1	; 0x01
    3012:	9a 81       	ldd	r25, Y+2	; 0x02
    3014:	ab 81       	ldd	r26, Y+3	; 0x03
    3016:	bc 81       	ldd	r27, Y+4	; 0x04
    3018:	8b 87       	std	Y+11, r24	; 0x0b
    301a:	9c 87       	std	Y+12, r25	; 0x0c
    301c:	ad 87       	std	Y+13, r26	; 0x0d
    301e:	be 87       	std	Y+14, r27	; 0x0e
    3020:	1f c0       	rjmp	.+62     	; 0x3060 <OSTmrRemainGet+0x1be>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
    3022:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    3026:	ef 81       	ldd	r30, Y+7	; 0x07
    3028:	f8 85       	ldd	r31, Y+8	; 0x08
    302a:	10 82       	st	Z, r1
             return (0);
    302c:	1b 86       	std	Y+11, r1	; 0x0b
    302e:	1c 86       	std	Y+12, r1	; 0x0c
    3030:	1d 86       	std	Y+13, r1	; 0x0d
    3032:	1e 86       	std	Y+14, r1	; 0x0e
    3034:	15 c0       	rjmp	.+42     	; 0x3060 <OSTmrRemainGet+0x1be>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
    3036:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    303a:	ef 81       	ldd	r30, Y+7	; 0x07
    303c:	f8 85       	ldd	r31, Y+8	; 0x08
    303e:	87 e8       	ldi	r24, 0x87	; 135
    3040:	80 83       	st	Z, r24
             return (0);
    3042:	1b 86       	std	Y+11, r1	; 0x0b
    3044:	1c 86       	std	Y+12, r1	; 0x0c
    3046:	1d 86       	std	Y+13, r1	; 0x0d
    3048:	1e 86       	std	Y+14, r1	; 0x0e
    304a:	0a c0       	rjmp	.+20     	; 0x3060 <OSTmrRemainGet+0x1be>

        default:
             OSTmr_Unlock();
    304c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    3050:	ef 81       	ldd	r30, Y+7	; 0x07
    3052:	f8 85       	ldd	r31, Y+8	; 0x08
    3054:	8d e8       	ldi	r24, 0x8D	; 141
    3056:	80 83       	st	Z, r24
             return (0);
    3058:	1b 86       	std	Y+11, r1	; 0x0b
    305a:	1c 86       	std	Y+12, r1	; 0x0c
    305c:	1d 86       	std	Y+13, r1	; 0x0d
    305e:	1e 86       	std	Y+14, r1	; 0x0e
    3060:	8b 85       	ldd	r24, Y+11	; 0x0b
    3062:	9c 85       	ldd	r25, Y+12	; 0x0c
    3064:	ad 85       	ldd	r26, Y+13	; 0x0d
    3066:	be 85       	ldd	r27, Y+14	; 0x0e
    }
}
    3068:	bc 01       	movw	r22, r24
    306a:	cd 01       	movw	r24, r26
    306c:	2e 96       	adiw	r28, 0x0e	; 14
    306e:	0f b6       	in	r0, 0x3f	; 63
    3070:	f8 94       	cli
    3072:	de bf       	out	0x3e, r29	; 62
    3074:	0f be       	out	0x3f, r0	; 63
    3076:	cd bf       	out	0x3d, r28	; 61
    3078:	cf 91       	pop	r28
    307a:	df 91       	pop	r29
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	ff 90       	pop	r15
    3082:	ef 90       	pop	r14
    3084:	08 95       	ret

00003086 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	00 d0       	rcall	.+0      	; 0x308c <OSTmrStateGet+0x6>
    308c:	00 d0       	rcall	.+0      	; 0x308e <OSTmrStateGet+0x8>
    308e:	cd b7       	in	r28, 0x3d	; 61
    3090:	de b7       	in	r29, 0x3e	; 62
    3092:	9b 83       	std	Y+3, r25	; 0x03
    3094:	8a 83       	std	Y+2, r24	; 0x02
    3096:	7d 83       	std	Y+5, r23	; 0x05
    3098:	6c 83       	std	Y+4, r22	; 0x04
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    309a:	ea 81       	ldd	r30, Y+2	; 0x02
    309c:	fb 81       	ldd	r31, Y+3	; 0x03
    309e:	80 81       	ld	r24, Z
    30a0:	84 36       	cpi	r24, 0x64	; 100
    30a2:	31 f0       	breq	.+12     	; 0x30b0 <OSTmrStateGet+0x2a>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    30a4:	ec 81       	ldd	r30, Y+4	; 0x04
    30a6:	fd 81       	ldd	r31, Y+5	; 0x05
    30a8:	89 e8       	ldi	r24, 0x89	; 137
    30aa:	80 83       	st	Z, r24
        return (0);
    30ac:	1e 82       	std	Y+6, r1	; 0x06
    30ae:	23 c0       	rjmp	.+70     	; 0x30f6 <OSTmrStateGet+0x70>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    30b0:	80 91 4c 08 	lds	r24, 0x084C
    30b4:	88 23       	and	r24, r24
    30b6:	31 f0       	breq	.+12     	; 0x30c4 <OSTmrStateGet+0x3e>
        *perr = OS_ERR_TMR_ISR;
    30b8:	ec 81       	ldd	r30, Y+4	; 0x04
    30ba:	fd 81       	ldd	r31, Y+5	; 0x05
    30bc:	8b e8       	ldi	r24, 0x8B	; 139
    30be:	80 83       	st	Z, r24
        return (0);
    30c0:	1e 82       	std	Y+6, r1	; 0x06
    30c2:	19 c0       	rjmp	.+50     	; 0x30f6 <OSTmrStateGet+0x70>
    }
    OSTmr_Lock();
    30c4:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
    state = ptmr->OSTmrState;
    30c8:	ea 81       	ldd	r30, Y+2	; 0x02
    30ca:	fb 81       	ldd	r31, Y+3	; 0x03
    30cc:	86 a1       	ldd	r24, Z+38	; 0x26
    30ce:	89 83       	std	Y+1, r24	; 0x01
    switch (state) {
    30d0:	89 81       	ldd	r24, Y+1	; 0x01
    30d2:	88 2f       	mov	r24, r24
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	00 96       	adiw	r24, 0x00	; 0
    30d8:	84 30       	cpi	r24, 0x04	; 4
    30da:	91 05       	cpc	r25, r1
    30dc:	20 f4       	brcc	.+8      	; 0x30e6 <OSTmrStateGet+0x60>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
    30de:	ec 81       	ldd	r30, Y+4	; 0x04
    30e0:	fd 81       	ldd	r31, Y+5	; 0x05
    30e2:	10 82       	st	Z, r1
    30e4:	04 c0       	rjmp	.+8      	; 0x30ee <OSTmrStateGet+0x68>
             break;
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
    30e6:	ec 81       	ldd	r30, Y+4	; 0x04
    30e8:	fd 81       	ldd	r31, Y+5	; 0x05
    30ea:	8d e8       	ldi	r24, 0x8D	; 141
    30ec:	80 83       	st	Z, r24
             break;
    }
    OSTmr_Unlock();
    30ee:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
    return (state);
    30f2:	89 81       	ldd	r24, Y+1	; 0x01
    30f4:	8e 83       	std	Y+6, r24	; 0x06
    30f6:	8e 81       	ldd	r24, Y+6	; 0x06
}
    30f8:	26 96       	adiw	r28, 0x06	; 6
    30fa:	0f b6       	in	r0, 0x3f	; 63
    30fc:	f8 94       	cli
    30fe:	de bf       	out	0x3e, r29	; 62
    3100:	0f be       	out	0x3f, r0	; 63
    3102:	cd bf       	out	0x3d, r28	; 61
    3104:	cf 91       	pop	r28
    3106:	df 91       	pop	r29
    3108:	08 95       	ret

0000310a <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
    310a:	df 93       	push	r29
    310c:	cf 93       	push	r28
    310e:	cd b7       	in	r28, 0x3d	; 61
    3110:	de b7       	in	r29, 0x3e	; 62
    3112:	27 97       	sbiw	r28, 0x07	; 7
    3114:	0f b6       	in	r0, 0x3f	; 63
    3116:	f8 94       	cli
    3118:	de bf       	out	0x3e, r29	; 62
    311a:	0f be       	out	0x3f, r0	; 63
    311c:	cd bf       	out	0x3d, r28	; 61
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	7c 83       	std	Y+4, r23	; 0x04
    3124:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    3126:	e9 81       	ldd	r30, Y+1	; 0x01
    3128:	fa 81       	ldd	r31, Y+2	; 0x02
    312a:	80 81       	ld	r24, Z
    312c:	84 36       	cpi	r24, 0x64	; 100
    312e:	31 f0       	breq	.+12     	; 0x313c <OSTmrStart+0x32>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    3130:	eb 81       	ldd	r30, Y+3	; 0x03
    3132:	fc 81       	ldd	r31, Y+4	; 0x04
    3134:	89 e8       	ldi	r24, 0x89	; 137
    3136:	80 83       	st	Z, r24
        return (OS_FALSE);
    3138:	1f 82       	std	Y+7, r1	; 0x07
    313a:	54 c0       	rjmp	.+168    	; 0x31e4 <OSTmrStart+0xda>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    313c:	80 91 4c 08 	lds	r24, 0x084C
    3140:	88 23       	and	r24, r24
    3142:	31 f0       	breq	.+12     	; 0x3150 <OSTmrStart+0x46>
        *perr  = OS_ERR_TMR_ISR;
    3144:	eb 81       	ldd	r30, Y+3	; 0x03
    3146:	fc 81       	ldd	r31, Y+4	; 0x04
    3148:	8b e8       	ldi	r24, 0x8B	; 139
    314a:	80 83       	st	Z, r24
        return (OS_FALSE);
    314c:	1f 82       	std	Y+7, r1	; 0x07
    314e:	4a c0       	rjmp	.+148    	; 0x31e4 <OSTmrStart+0xda>
    }
    OSTmr_Lock();
    3150:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    3154:	e9 81       	ldd	r30, Y+1	; 0x01
    3156:	fa 81       	ldd	r31, Y+2	; 0x02
    3158:	86 a1       	ldd	r24, Z+38	; 0x26
    315a:	28 2f       	mov	r18, r24
    315c:	30 e0       	ldi	r19, 0x00	; 0
    315e:	3e 83       	std	Y+6, r19	; 0x06
    3160:	2d 83       	std	Y+5, r18	; 0x05
    3162:	8d 81       	ldd	r24, Y+5	; 0x05
    3164:	9e 81       	ldd	r25, Y+6	; 0x06
    3166:	83 30       	cpi	r24, 0x03	; 3
    3168:	91 05       	cpc	r25, r1
    316a:	54 f4       	brge	.+20     	; 0x3180 <OSTmrStart+0x76>
    316c:	2d 81       	ldd	r18, Y+5	; 0x05
    316e:	3e 81       	ldd	r19, Y+6	; 0x06
    3170:	21 30       	cpi	r18, 0x01	; 1
    3172:	31 05       	cpc	r19, r1
    3174:	dc f4       	brge	.+54     	; 0x31ac <OSTmrStart+0xa2>
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	21 f1       	breq	.+72     	; 0x31c6 <OSTmrStart+0xbc>
    317e:	2b c0       	rjmp	.+86     	; 0x31d6 <OSTmrStart+0xcc>
    3180:	2d 81       	ldd	r18, Y+5	; 0x05
    3182:	3e 81       	ldd	r19, Y+6	; 0x06
    3184:	23 30       	cpi	r18, 0x03	; 3
    3186:	31 05       	cpc	r19, r1
    3188:	31 f5       	brne	.+76     	; 0x31d6 <OSTmrStart+0xcc>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	9a 81       	ldd	r25, Y+2	; 0x02
    318e:	0e 94 15 1c 	call	0x382a	; 0x382a <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    3192:	89 81       	ldd	r24, Y+1	; 0x01
    3194:	9a 81       	ldd	r25, Y+2	; 0x02
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <OSTmr_Link>
             OSTmr_Unlock();
    319c:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    31a0:	eb 81       	ldd	r30, Y+3	; 0x03
    31a2:	fc 81       	ldd	r31, Y+4	; 0x04
    31a4:	10 82       	st	Z, r1
             return (OS_TRUE);
    31a6:	31 e0       	ldi	r19, 0x01	; 1
    31a8:	3f 83       	std	Y+7, r19	; 0x07
    31aa:	1c c0       	rjmp	.+56     	; 0x31e4 <OSTmrStart+0xda>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    31ac:	89 81       	ldd	r24, Y+1	; 0x01
    31ae:	9a 81       	ldd	r25, Y+2	; 0x02
    31b0:	60 e0       	ldi	r22, 0x00	; 0
    31b2:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <OSTmr_Link>
             OSTmr_Unlock();
    31b6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    31ba:	eb 81       	ldd	r30, Y+3	; 0x03
    31bc:	fc 81       	ldd	r31, Y+4	; 0x04
    31be:	10 82       	st	Z, r1
             return (OS_TRUE);
    31c0:	81 e0       	ldi	r24, 0x01	; 1
    31c2:	8f 83       	std	Y+7, r24	; 0x07
    31c4:	0f c0       	rjmp	.+30     	; 0x31e4 <OSTmrStart+0xda>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
    31c6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    31ca:	eb 81       	ldd	r30, Y+3	; 0x03
    31cc:	fc 81       	ldd	r31, Y+4	; 0x04
    31ce:	87 e8       	ldi	r24, 0x87	; 135
    31d0:	80 83       	st	Z, r24
             return (OS_FALSE);
    31d2:	1f 82       	std	Y+7, r1	; 0x07
    31d4:	07 c0       	rjmp	.+14     	; 0x31e4 <OSTmrStart+0xda>

        default:
             OSTmr_Unlock();
    31d6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    31da:	eb 81       	ldd	r30, Y+3	; 0x03
    31dc:	fc 81       	ldd	r31, Y+4	; 0x04
    31de:	8d e8       	ldi	r24, 0x8D	; 141
    31e0:	80 83       	st	Z, r24
             return (OS_FALSE);
    31e2:	1f 82       	std	Y+7, r1	; 0x07
    31e4:	8f 81       	ldd	r24, Y+7	; 0x07
    }
}
    31e6:	27 96       	adiw	r28, 0x07	; 7
    31e8:	0f b6       	in	r0, 0x3f	; 63
    31ea:	f8 94       	cli
    31ec:	de bf       	out	0x3e, r29	; 62
    31ee:	0f be       	out	0x3f, r0	; 63
    31f0:	cd bf       	out	0x3d, r28	; 61
    31f2:	cf 91       	pop	r28
    31f4:	df 91       	pop	r29
    31f6:	08 95       	ret

000031f8 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
    31f8:	df 93       	push	r29
    31fa:	cf 93       	push	r28
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	2e 97       	sbiw	r28, 0x0e	; 14
    3202:	0f b6       	in	r0, 0x3f	; 63
    3204:	f8 94       	cli
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	0f be       	out	0x3f, r0	; 63
    320a:	cd bf       	out	0x3d, r28	; 61
    320c:	9c 83       	std	Y+4, r25	; 0x04
    320e:	8b 83       	std	Y+3, r24	; 0x03
    3210:	6d 83       	std	Y+5, r22	; 0x05
    3212:	5f 83       	std	Y+7, r21	; 0x07
    3214:	4e 83       	std	Y+6, r20	; 0x06
    3216:	39 87       	std	Y+9, r19	; 0x09
    3218:	28 87       	std	Y+8, r18	; 0x08
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
    321a:	eb 81       	ldd	r30, Y+3	; 0x03
    321c:	fc 81       	ldd	r31, Y+4	; 0x04
    321e:	80 81       	ld	r24, Z
    3220:	84 36       	cpi	r24, 0x64	; 100
    3222:	31 f0       	breq	.+12     	; 0x3230 <OSTmrStop+0x38>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    3224:	e8 85       	ldd	r30, Y+8	; 0x08
    3226:	f9 85       	ldd	r31, Y+9	; 0x09
    3228:	89 e8       	ldi	r24, 0x89	; 137
    322a:	80 83       	st	Z, r24
        return (OS_FALSE);
    322c:	1e 86       	std	Y+14, r1	; 0x0e
    322e:	98 c0       	rjmp	.+304    	; 0x3360 <OSTmrStop+0x168>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
    3230:	80 91 4c 08 	lds	r24, 0x084C
    3234:	88 23       	and	r24, r24
    3236:	31 f0       	breq	.+12     	; 0x3244 <OSTmrStop+0x4c>
        *perr  = OS_ERR_TMR_ISR;
    3238:	e8 85       	ldd	r30, Y+8	; 0x08
    323a:	f9 85       	ldd	r31, Y+9	; 0x09
    323c:	8b e8       	ldi	r24, 0x8B	; 139
    323e:	80 83       	st	Z, r24
        return (OS_FALSE);
    3240:	1e 86       	std	Y+14, r1	; 0x0e
    3242:	8e c0       	rjmp	.+284    	; 0x3360 <OSTmrStop+0x168>
    }
    OSTmr_Lock();
    3244:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    3248:	eb 81       	ldd	r30, Y+3	; 0x03
    324a:	fc 81       	ldd	r31, Y+4	; 0x04
    324c:	86 a1       	ldd	r24, Z+38	; 0x26
    324e:	28 2f       	mov	r18, r24
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	3d 87       	std	Y+13, r19	; 0x0d
    3254:	2c 87       	std	Y+12, r18	; 0x0c
    3256:	8c 85       	ldd	r24, Y+12	; 0x0c
    3258:	9d 85       	ldd	r25, Y+13	; 0x0d
    325a:	83 30       	cpi	r24, 0x03	; 3
    325c:	91 05       	cpc	r25, r1
    325e:	64 f4       	brge	.+24     	; 0x3278 <OSTmrStop+0x80>
    3260:	2c 85       	ldd	r18, Y+12	; 0x0c
    3262:	3d 85       	ldd	r19, Y+13	; 0x0d
    3264:	21 30       	cpi	r18, 0x01	; 1
    3266:	31 05       	cpc	r19, r1
    3268:	0c f0       	brlt	.+2      	; 0x326c <OSTmrStop+0x74>
    326a:	62 c0       	rjmp	.+196    	; 0x3330 <OSTmrStop+0x138>
    326c:	8c 85       	ldd	r24, Y+12	; 0x0c
    326e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3270:	00 97       	sbiw	r24, 0x00	; 0
    3272:	09 f4       	brne	.+2      	; 0x3276 <OSTmrStop+0x7e>
    3274:	66 c0       	rjmp	.+204    	; 0x3342 <OSTmrStop+0x14a>
    3276:	6d c0       	rjmp	.+218    	; 0x3352 <OSTmrStop+0x15a>
    3278:	2c 85       	ldd	r18, Y+12	; 0x0c
    327a:	3d 85       	ldd	r19, Y+13	; 0x0d
    327c:	23 30       	cpi	r18, 0x03	; 3
    327e:	31 05       	cpc	r19, r1
    3280:	09 f0       	breq	.+2      	; 0x3284 <OSTmrStop+0x8c>
    3282:	67 c0       	rjmp	.+206    	; 0x3352 <OSTmrStop+0x15a>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	9c 81       	ldd	r25, Y+4	; 0x04
    3288:	0e 94 15 1c 	call	0x382a	; 0x382a <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
    328c:	e8 85       	ldd	r30, Y+8	; 0x08
    328e:	f9 85       	ldd	r31, Y+9	; 0x09
    3290:	10 82       	st	Z, r1
             switch (opt) {
    3292:	8d 81       	ldd	r24, Y+5	; 0x05
    3294:	28 2f       	mov	r18, r24
    3296:	30 e0       	ldi	r19, 0x00	; 0
    3298:	3b 87       	std	Y+11, r19	; 0x0b
    329a:	2a 87       	std	Y+10, r18	; 0x0a
    329c:	8a 85       	ldd	r24, Y+10	; 0x0a
    329e:	9b 85       	ldd	r25, Y+11	; 0x0b
    32a0:	83 30       	cpi	r24, 0x03	; 3
    32a2:	91 05       	cpc	r25, r1
    32a4:	51 f0       	breq	.+20     	; 0x32ba <OSTmrStop+0xc2>
    32a6:	2a 85       	ldd	r18, Y+10	; 0x0a
    32a8:	3b 85       	ldd	r19, Y+11	; 0x0b
    32aa:	24 30       	cpi	r18, 0x04	; 4
    32ac:	31 05       	cpc	r19, r1
    32ae:	f9 f0       	breq	.+62     	; 0x32ee <OSTmrStop+0xf6>
    32b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    32b4:	00 97       	sbiw	r24, 0x00	; 0
    32b6:	b9 f1       	breq	.+110    	; 0x3326 <OSTmrStop+0x12e>
    32b8:	32 c0       	rjmp	.+100    	; 0x331e <OSTmrStop+0x126>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    32ba:	eb 81       	ldd	r30, Y+3	; 0x03
    32bc:	fc 81       	ldd	r31, Y+4	; 0x04
    32be:	81 81       	ldd	r24, Z+1	; 0x01
    32c0:	92 81       	ldd	r25, Z+2	; 0x02
    32c2:	9a 83       	std	Y+2, r25	; 0x02
    32c4:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    32c6:	89 81       	ldd	r24, Y+1	; 0x01
    32c8:	9a 81       	ldd	r25, Y+2	; 0x02
    32ca:	00 97       	sbiw	r24, 0x00	; 0
    32cc:	59 f0       	breq	.+22     	; 0x32e4 <OSTmrStop+0xec>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
    32ce:	eb 81       	ldd	r30, Y+3	; 0x03
    32d0:	fc 81       	ldd	r31, Y+4	; 0x04
    32d2:	23 81       	ldd	r18, Z+3	; 0x03
    32d4:	34 81       	ldd	r19, Z+4	; 0x04
    32d6:	8b 81       	ldd	r24, Y+3	; 0x03
    32d8:	9c 81       	ldd	r25, Y+4	; 0x04
    32da:	e9 81       	ldd	r30, Y+1	; 0x01
    32dc:	fa 81       	ldd	r31, Y+2	; 0x02
    32de:	b9 01       	movw	r22, r18
    32e0:	19 95       	eicall
    32e2:	21 c0       	rjmp	.+66     	; 0x3326 <OSTmrStop+0x12e>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    32e4:	e8 85       	ldd	r30, Y+8	; 0x08
    32e6:	f9 85       	ldd	r31, Y+9	; 0x09
    32e8:	8f e8       	ldi	r24, 0x8F	; 143
    32ea:	80 83       	st	Z, r24
    32ec:	1c c0       	rjmp	.+56     	; 0x3326 <OSTmrStop+0x12e>
                      }
                      break;

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    32ee:	eb 81       	ldd	r30, Y+3	; 0x03
    32f0:	fc 81       	ldd	r31, Y+4	; 0x04
    32f2:	81 81       	ldd	r24, Z+1	; 0x01
    32f4:	92 81       	ldd	r25, Z+2	; 0x02
    32f6:	9a 83       	std	Y+2, r25	; 0x02
    32f8:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    32fa:	89 81       	ldd	r24, Y+1	; 0x01
    32fc:	9a 81       	ldd	r25, Y+2	; 0x02
    32fe:	00 97       	sbiw	r24, 0x00	; 0
    3300:	49 f0       	breq	.+18     	; 0x3314 <OSTmrStop+0x11c>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
    3302:	8b 81       	ldd	r24, Y+3	; 0x03
    3304:	9c 81       	ldd	r25, Y+4	; 0x04
    3306:	2e 81       	ldd	r18, Y+6	; 0x06
    3308:	3f 81       	ldd	r19, Y+7	; 0x07
    330a:	e9 81       	ldd	r30, Y+1	; 0x01
    330c:	fa 81       	ldd	r31, Y+2	; 0x02
    330e:	b9 01       	movw	r22, r18
    3310:	19 95       	eicall
    3312:	09 c0       	rjmp	.+18     	; 0x3326 <OSTmrStop+0x12e>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    3314:	e8 85       	ldd	r30, Y+8	; 0x08
    3316:	f9 85       	ldd	r31, Y+9	; 0x09
    3318:	8f e8       	ldi	r24, 0x8F	; 143
    331a:	80 83       	st	Z, r24
    331c:	04 c0       	rjmp	.+8      	; 0x3326 <OSTmrStop+0x12e>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
    331e:	e8 85       	ldd	r30, Y+8	; 0x08
    3320:	f9 85       	ldd	r31, Y+9	; 0x09
    3322:	84 e8       	ldi	r24, 0x84	; 132
    3324:	80 83       	st	Z, r24
                     break;
             }
             OSTmr_Unlock();
    3326:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             return (OS_TRUE);
    332a:	91 e0       	ldi	r25, 0x01	; 1
    332c:	9e 87       	std	Y+14, r25	; 0x0e
    332e:	18 c0       	rjmp	.+48     	; 0x3360 <OSTmrStop+0x168>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
    3330:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
    3334:	e8 85       	ldd	r30, Y+8	; 0x08
    3336:	f9 85       	ldd	r31, Y+9	; 0x09
    3338:	8e e8       	ldi	r24, 0x8E	; 142
    333a:	80 83       	st	Z, r24
             return (OS_TRUE);
    333c:	21 e0       	ldi	r18, 0x01	; 1
    333e:	2e 87       	std	Y+14, r18	; 0x0e
    3340:	0f c0       	rjmp	.+30     	; 0x3360 <OSTmrStop+0x168>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
    3342:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    3346:	e8 85       	ldd	r30, Y+8	; 0x08
    3348:	f9 85       	ldd	r31, Y+9	; 0x09
    334a:	87 e8       	ldi	r24, 0x87	; 135
    334c:	80 83       	st	Z, r24
             return (OS_FALSE);
    334e:	1e 86       	std	Y+14, r1	; 0x0e
    3350:	07 c0       	rjmp	.+14     	; 0x3360 <OSTmrStop+0x168>

        default:
             OSTmr_Unlock();
    3352:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    3356:	e8 85       	ldd	r30, Y+8	; 0x08
    3358:	f9 85       	ldd	r31, Y+9	; 0x09
    335a:	8d e8       	ldi	r24, 0x8D	; 141
    335c:	80 83       	st	Z, r24
             return (OS_FALSE);
    335e:	1e 86       	std	Y+14, r1	; 0x0e
    3360:	8e 85       	ldd	r24, Y+14	; 0x0e
    }
}
    3362:	2e 96       	adiw	r28, 0x0e	; 14
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	08 95       	ret

00003374 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
    3374:	df 93       	push	r29
    3376:	cf 93       	push	r28
    3378:	0f 92       	push	r0
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
    337e:	80 91 10 05 	lds	r24, 0x0510
    3382:	90 91 11 05 	lds	r25, 0x0511
    3386:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <OSSemPost>
    338a:	89 83       	std	Y+1, r24	; 0x01
    return (err);
    338c:	89 81       	ldd	r24, Y+1	; 0x01
}
    338e:	0f 90       	pop	r0
    3390:	cf 91       	pop	r28
    3392:	df 91       	pop	r29
    3394:	08 95       	ret

00003396 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
    3396:	df 93       	push	r29
    3398:	cf 93       	push	r28
    339a:	00 d0       	rcall	.+0      	; 0x339c <OSTmr_Alloc+0x6>
    339c:	0f 92       	push	r0
    339e:	cd b7       	in	r28, 0x3d	; 61
    33a0:	de b7       	in	r29, 0x3e	; 62
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
    33a2:	80 91 ed 04 	lds	r24, 0x04ED
    33a6:	90 91 ee 04 	lds	r25, 0x04EE
    33aa:	00 97       	sbiw	r24, 0x00	; 0
    33ac:	19 f4       	brne	.+6      	; 0x33b4 <OSTmr_Alloc+0x1e>
        return ((OS_TMR *)0);
    33ae:	1c 82       	std	Y+4, r1	; 0x04
    33b0:	1b 82       	std	Y+3, r1	; 0x03
    33b2:	2c c0       	rjmp	.+88     	; 0x340c <OSTmr_Alloc+0x76>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    33b4:	80 91 ed 04 	lds	r24, 0x04ED
    33b8:	90 91 ee 04 	lds	r25, 0x04EE
    33bc:	9a 83       	std	Y+2, r25	; 0x02
    33be:	89 83       	std	Y+1, r24	; 0x01
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    33c0:	e9 81       	ldd	r30, Y+1	; 0x01
    33c2:	fa 81       	ldd	r31, Y+2	; 0x02
    33c4:	85 81       	ldd	r24, Z+5	; 0x05
    33c6:	96 81       	ldd	r25, Z+6	; 0x06
    33c8:	90 93 ee 04 	sts	0x04EE, r25
    33cc:	80 93 ed 04 	sts	0x04ED, r24
    ptmr->OSTmrNext = (OS_TCB *)0;
    33d0:	e9 81       	ldd	r30, Y+1	; 0x01
    33d2:	fa 81       	ldd	r31, Y+2	; 0x02
    33d4:	16 82       	std	Z+6, r1	; 0x06
    33d6:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev = (OS_TCB *)0;
    33d8:	e9 81       	ldd	r30, Y+1	; 0x01
    33da:	fa 81       	ldd	r31, Y+2	; 0x02
    33dc:	10 86       	std	Z+8, r1	; 0x08
    33de:	17 82       	std	Z+7, r1	; 0x07
    OSTmrUsed++;
    33e0:	80 91 17 05 	lds	r24, 0x0517
    33e4:	90 91 18 05 	lds	r25, 0x0518
    33e8:	01 96       	adiw	r24, 0x01	; 1
    33ea:	90 93 18 05 	sts	0x0518, r25
    33ee:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree--;
    33f2:	80 91 91 07 	lds	r24, 0x0791
    33f6:	90 91 92 07 	lds	r25, 0x0792
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	90 93 92 07 	sts	0x0792, r25
    3400:	80 93 91 07 	sts	0x0791, r24
    return (ptmr);
    3404:	89 81       	ldd	r24, Y+1	; 0x01
    3406:	9a 81       	ldd	r25, Y+2	; 0x02
    3408:	9c 83       	std	Y+4, r25	; 0x04
    340a:	8b 83       	std	Y+3, r24	; 0x03
    340c:	8b 81       	ldd	r24, Y+3	; 0x03
    340e:	9c 81       	ldd	r25, Y+4	; 0x04
}
    3410:	0f 90       	pop	r0
    3412:	0f 90       	pop	r0
    3414:	0f 90       	pop	r0
    3416:	0f 90       	pop	r0
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	0f 92       	push	r0
    3424:	0f 92       	push	r0
    3426:	cd b7       	in	r28, 0x3d	; 61
    3428:	de b7       	in	r29, 0x3e	; 62
    342a:	9a 83       	std	Y+2, r25	; 0x02
    342c:	89 83       	std	Y+1, r24	; 0x01
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
    342e:	e9 81       	ldd	r30, Y+1	; 0x01
    3430:	fa 81       	ldd	r31, Y+2	; 0x02
    3432:	16 a2       	std	Z+38, r1	; 0x26
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
    3434:	e9 81       	ldd	r30, Y+1	; 0x01
    3436:	fa 81       	ldd	r31, Y+2	; 0x02
    3438:	15 a2       	std	Z+37, r1	; 0x25
    ptmr->OSTmrPeriod      = 0;
    343a:	e9 81       	ldd	r30, Y+1	; 0x01
    343c:	fa 81       	ldd	r31, Y+2	; 0x02
    343e:	11 8a       	std	Z+17, r1	; 0x11
    3440:	12 8a       	std	Z+18, r1	; 0x12
    3442:	13 8a       	std	Z+19, r1	; 0x13
    3444:	14 8a       	std	Z+20, r1	; 0x14
    ptmr->OSTmrMatch       = 0;
    3446:	e9 81       	ldd	r30, Y+1	; 0x01
    3448:	fa 81       	ldd	r31, Y+2	; 0x02
    344a:	11 86       	std	Z+9, r1	; 0x09
    344c:	12 86       	std	Z+10, r1	; 0x0a
    344e:	13 86       	std	Z+11, r1	; 0x0b
    3450:	14 86       	std	Z+12, r1	; 0x0c
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    3452:	e9 81       	ldd	r30, Y+1	; 0x01
    3454:	fa 81       	ldd	r31, Y+2	; 0x02
    3456:	12 82       	std	Z+2, r1	; 0x02
    3458:	11 82       	std	Z+1, r1	; 0x01
    ptmr->OSTmrCallbackArg = (void *)0;
    345a:	e9 81       	ldd	r30, Y+1	; 0x01
    345c:	fa 81       	ldd	r31, Y+2	; 0x02
    345e:	14 82       	std	Z+4, r1	; 0x04
    3460:	13 82       	std	Z+3, r1	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    3462:	e9 81       	ldd	r30, Y+1	; 0x01
    3464:	fa 81       	ldd	r31, Y+2	; 0x02
    3466:	8f e3       	ldi	r24, 0x3F	; 63
    3468:	85 8b       	std	Z+21, r24	; 0x15
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
    346a:	e9 81       	ldd	r30, Y+1	; 0x01
    346c:	fa 81       	ldd	r31, Y+2	; 0x02
    346e:	16 8a       	std	Z+22, r1	; 0x16
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    3470:	e9 81       	ldd	r30, Y+1	; 0x01
    3472:	fa 81       	ldd	r31, Y+2	; 0x02
    3474:	10 86       	std	Z+8, r1	; 0x08
    3476:	17 82       	std	Z+7, r1	; 0x07
    ptmr->OSTmrNext        = OSTmrFreeList;
    3478:	80 91 ed 04 	lds	r24, 0x04ED
    347c:	90 91 ee 04 	lds	r25, 0x04EE
    3480:	e9 81       	ldd	r30, Y+1	; 0x01
    3482:	fa 81       	ldd	r31, Y+2	; 0x02
    3484:	96 83       	std	Z+6, r25	; 0x06
    3486:	85 83       	std	Z+5, r24	; 0x05
    OSTmrFreeList          = ptmr;
    3488:	89 81       	ldd	r24, Y+1	; 0x01
    348a:	9a 81       	ldd	r25, Y+2	; 0x02
    348c:	90 93 ee 04 	sts	0x04EE, r25
    3490:	80 93 ed 04 	sts	0x04ED, r24

    OSTmrUsed--;                                       /* Update timer object statistics                              */
    3494:	80 91 17 05 	lds	r24, 0x0517
    3498:	90 91 18 05 	lds	r25, 0x0518
    349c:	01 97       	sbiw	r24, 0x01	; 1
    349e:	90 93 18 05 	sts	0x0518, r25
    34a2:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree++;
    34a6:	80 91 91 07 	lds	r24, 0x0791
    34aa:	90 91 92 07 	lds	r25, 0x0792
    34ae:	01 96       	adiw	r24, 0x01	; 1
    34b0:	90 93 92 07 	sts	0x0792, r25
    34b4:	80 93 91 07 	sts	0x0791, r24
}
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	cf 91       	pop	r28
    34be:	df 91       	pop	r29
    34c0:	08 95       	ret

000034c2 <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
    34c2:	df 93       	push	r29
    34c4:	cf 93       	push	r28
    34c6:	cd b7       	in	r28, 0x3d	; 61
    34c8:	de b7       	in	r29, 0x3e	; 62
    34ca:	27 97       	sbiw	r28, 0x07	; 7
    34cc:	0f b6       	in	r0, 0x3f	; 63
    34ce:	f8 94       	cli
    34d0:	de bf       	out	0x3e, r29	; 62
    34d2:	0f be       	out	0x3f, r0	; 63
    34d4:	cd bf       	out	0x3d, r28	; 61
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    34d6:	8a e1       	ldi	r24, 0x1A	; 26
    34d8:	95 e0       	ldi	r25, 0x05	; 5
    34da:	60 e7       	ldi	r22, 0x70	; 112
    34dc:	72 e0       	ldi	r23, 0x02	; 2
    34de:	0e 94 90 09 	call	0x1320	; 0x1320 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
    34e2:	8f ee       	ldi	r24, 0xEF	; 239
    34e4:	94 e0       	ldi	r25, 0x04	; 4
    34e6:	60 e2       	ldi	r22, 0x20	; 32
    34e8:	70 e0       	ldi	r23, 0x00	; 0
    34ea:	0e 94 90 09 	call	0x1320	; 0x1320 <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
    34ee:	8a e1       	ldi	r24, 0x1A	; 26
    34f0:	95 e0       	ldi	r25, 0x05	; 5
    34f2:	9c 83       	std	Y+4, r25	; 0x04
    34f4:	8b 83       	std	Y+3, r24	; 0x03
    ptmr2 = &OSTmrTbl[1];
    34f6:	81 e4       	ldi	r24, 0x41	; 65
    34f8:	95 e0       	ldi	r25, 0x05	; 5
    34fa:	9a 83       	std	Y+2, r25	; 0x02
    34fc:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    34fe:	1e 82       	std	Y+6, r1	; 0x06
    3500:	1d 82       	std	Y+5, r1	; 0x05
    3502:	23 c0       	rjmp	.+70     	; 0x354a <OSTmr_Init+0x88>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
    3504:	eb 81       	ldd	r30, Y+3	; 0x03
    3506:	fc 81       	ldd	r31, Y+4	; 0x04
    3508:	84 e6       	ldi	r24, 0x64	; 100
    350a:	80 83       	st	Z, r24
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
    350c:	eb 81       	ldd	r30, Y+3	; 0x03
    350e:	fc 81       	ldd	r31, Y+4	; 0x04
    3510:	16 a2       	std	Z+38, r1	; 0x26
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
    3512:	eb 81       	ldd	r30, Y+3	; 0x03
    3514:	fc 81       	ldd	r31, Y+4	; 0x04
    3516:	89 81       	ldd	r24, Y+1	; 0x01
    3518:	9a 81       	ldd	r25, Y+2	; 0x02
    351a:	96 83       	std	Z+6, r25	; 0x06
    351c:	85 83       	std	Z+5, r24	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
    351e:	eb 81       	ldd	r30, Y+3	; 0x03
    3520:	fc 81       	ldd	r31, Y+4	; 0x04
    3522:	8f e3       	ldi	r24, 0x3F	; 63
    3524:	85 8b       	std	Z+21, r24	; 0x15
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    3526:	eb 81       	ldd	r30, Y+3	; 0x03
    3528:	fc 81       	ldd	r31, Y+4	; 0x04
    352a:	16 8a       	std	Z+22, r1	; 0x16
#endif
        ptmr1++;
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	9c 81       	ldd	r25, Y+4	; 0x04
    3530:	87 96       	adiw	r24, 0x27	; 39
    3532:	9c 83       	std	Y+4, r25	; 0x04
    3534:	8b 83       	std	Y+3, r24	; 0x03
        ptmr2++;
    3536:	89 81       	ldd	r24, Y+1	; 0x01
    3538:	9a 81       	ldd	r25, Y+2	; 0x02
    353a:	87 96       	adiw	r24, 0x27	; 39
    353c:	9a 83       	std	Y+2, r25	; 0x02
    353e:	89 83       	std	Y+1, r24	; 0x01
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    3540:	8d 81       	ldd	r24, Y+5	; 0x05
    3542:	9e 81       	ldd	r25, Y+6	; 0x06
    3544:	01 96       	adiw	r24, 0x01	; 1
    3546:	9e 83       	std	Y+6, r25	; 0x06
    3548:	8d 83       	std	Y+5, r24	; 0x05
    354a:	8d 81       	ldd	r24, Y+5	; 0x05
    354c:	9e 81       	ldd	r25, Y+6	; 0x06
    354e:	8f 30       	cpi	r24, 0x0F	; 15
    3550:	91 05       	cpc	r25, r1
    3552:	c0 f2       	brcs	.-80     	; 0x3504 <OSTmr_Init+0x42>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    3554:	eb 81       	ldd	r30, Y+3	; 0x03
    3556:	fc 81       	ldd	r31, Y+4	; 0x04
    3558:	84 e6       	ldi	r24, 0x64	; 100
    355a:	80 83       	st	Z, r24
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    355c:	eb 81       	ldd	r30, Y+3	; 0x03
    355e:	fc 81       	ldd	r31, Y+4	; 0x04
    3560:	16 a2       	std	Z+38, r1	; 0x26
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
    3562:	eb 81       	ldd	r30, Y+3	; 0x03
    3564:	fc 81       	ldd	r31, Y+4	; 0x04
    3566:	16 82       	std	Z+6, r1	; 0x06
    3568:	15 82       	std	Z+5, r1	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
    356a:	eb 81       	ldd	r30, Y+3	; 0x03
    356c:	fc 81       	ldd	r31, Y+4	; 0x04
    356e:	8f e3       	ldi	r24, 0x3F	; 63
    3570:	85 8b       	std	Z+21, r24	; 0x15
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    3572:	eb 81       	ldd	r30, Y+3	; 0x03
    3574:	fc 81       	ldd	r31, Y+4	; 0x04
    3576:	16 8a       	std	Z+22, r1	; 0x16
#endif
    OSTmrTime           = 0;
    3578:	10 92 4f 08 	sts	0x084F, r1
    357c:	10 92 50 08 	sts	0x0850, r1
    3580:	10 92 51 08 	sts	0x0851, r1
    3584:	10 92 52 08 	sts	0x0852, r1
    OSTmrUsed           = 0;
    3588:	10 92 18 05 	sts	0x0518, r1
    358c:	10 92 17 05 	sts	0x0517, r1
    OSTmrFree           = OS_TMR_CFG_MAX;
    3590:	80 e1       	ldi	r24, 0x10	; 16
    3592:	90 e0       	ldi	r25, 0x00	; 0
    3594:	90 93 92 07 	sts	0x0792, r25
    3598:	80 93 91 07 	sts	0x0791, r24
    OSTmrFreeList       = &OSTmrTbl[0];
    359c:	8a e1       	ldi	r24, 0x1A	; 26
    359e:	95 e0       	ldi	r25, 0x05	; 5
    35a0:	90 93 ee 04 	sts	0x04EE, r25
    35a4:	80 93 ed 04 	sts	0x04ED, r24
    OSTmrSem            = OSSemCreate(1);
    35a8:	81 e0       	ldi	r24, 0x01	; 1
    35aa:	90 e0       	ldi	r25, 0x00	; 0
    35ac:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <OSSemCreate>
    35b0:	90 93 58 08 	sts	0x0858, r25
    35b4:	80 93 57 08 	sts	0x0857, r24
    OSTmrSemSignal      = OSSemCreate(0);
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <OSSemCreate>
    35c0:	90 93 11 05 	sts	0x0511, r25
    35c4:	80 93 10 05 	sts	0x0510, r24

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
    35c8:	80 91 57 08 	lds	r24, 0x0857
    35cc:	90 91 58 08 	lds	r25, 0x0858
    35d0:	2e e7       	ldi	r18, 0x7E	; 126
    35d2:	33 e0       	ldi	r19, 0x03	; 3
    35d4:	ae 01       	movw	r20, r28
    35d6:	49 5f       	subi	r20, 0xF9	; 249
    35d8:	5f 4f       	sbci	r21, 0xFF	; 255
    35da:	b9 01       	movw	r22, r18
    35dc:	0e 94 cf 04 	call	0x99e	; 0x99e <OSEventNameSet>

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
    35e0:	80 91 10 05 	lds	r24, 0x0510
    35e4:	90 91 11 05 	lds	r25, 0x0511
    35e8:	29 e8       	ldi	r18, 0x89	; 137
    35ea:	33 e0       	ldi	r19, 0x03	; 3
    35ec:	ae 01       	movw	r20, r28
    35ee:	49 5f       	subi	r20, 0xF9	; 249
    35f0:	5f 4f       	sbci	r21, 0xFF	; 255
    35f2:	b9 01       	movw	r22, r18
    35f4:	0e 94 cf 04 	call	0x99e	; 0x99e <OSEventNameSet>
#endif
#endif

    OSTmr_InitTask();
    35f8:	0e 94 07 1b 	call	0x360e	; 0x360e <OSTmr_InitTask>
}
    35fc:	27 96       	adiw	r28, 0x07	; 7
    35fe:	0f b6       	in	r0, 0x3f	; 63
    3600:	f8 94       	cli
    3602:	de bf       	out	0x3e, r29	; 62
    3604:	0f be       	out	0x3f, r0	; 63
    3606:	cd bf       	out	0x3d, r28	; 61
    3608:	cf 91       	pop	r28
    360a:	df 91       	pop	r29
    360c:	08 95       	ret

0000360e <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
    360e:	8f 92       	push	r8
    3610:	9f 92       	push	r9
    3612:	af 92       	push	r10
    3614:	bf 92       	push	r11
    3616:	cf 92       	push	r12
    3618:	df 92       	push	r13
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	0f 92       	push	r0
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
    362c:	0f 92       	push	r0
    362e:	0f 92       	push	r0
    3630:	ed b7       	in	r30, 0x3d	; 61
    3632:	fe b7       	in	r31, 0x3e	; 62
    3634:	31 96       	adiw	r30, 0x01	; 1
    3636:	2f ea       	ldi	r18, 0xAF	; 175
    3638:	3c e1       	ldi	r19, 0x1C	; 28
    363a:	49 e4       	ldi	r20, 0x49	; 73
    363c:	58 e0       	ldi	r21, 0x08	; 8
    363e:	ab e9       	ldi	r26, 0x9B	; 155
    3640:	b7 e0       	ldi	r27, 0x07	; 7
    3642:	83 e0       	ldi	r24, 0x03	; 3
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	91 83       	std	Z+1, r25	; 0x01
    3648:	80 83       	st	Z, r24
    364a:	c9 01       	movw	r24, r18
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	24 e0       	ldi	r18, 0x04	; 4
    3652:	0d ef       	ldi	r16, 0xFD	; 253
    3654:	1f ef       	ldi	r17, 0xFF	; 255
    3656:	7d 01       	movw	r14, r26
    3658:	0f 2e       	mov	r0, r31
    365a:	ff ea       	ldi	r31, 0xAF	; 175
    365c:	af 2e       	mov	r10, r31
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	bf 2e       	mov	r11, r31
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	cf 2e       	mov	r12, r31
    3666:	f0 e0       	ldi	r31, 0x00	; 0
    3668:	df 2e       	mov	r13, r31
    366a:	f0 2d       	mov	r31, r0
    366c:	88 24       	eor	r8, r8
    366e:	99 24       	eor	r9, r9
    3670:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <OSTaskCreateExt>
    3674:	0f 90       	pop	r0
    3676:	0f 90       	pop	r0
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
    3678:	23 e9       	ldi	r18, 0x93	; 147
    367a:	33 e0       	ldi	r19, 0x03	; 3
    367c:	84 e0       	ldi	r24, 0x04	; 4
    367e:	b9 01       	movw	r22, r18
    3680:	9e 01       	movw	r18, r28
    3682:	2f 5f       	subi	r18, 0xFF	; 255
    3684:	3f 4f       	sbci	r19, 0xFF	; 255
    3686:	a9 01       	movw	r20, r18
    3688:	0e 94 03 12 	call	0x2406	; 0x2406 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
    368c:	0f 90       	pop	r0
    368e:	cf 91       	pop	r28
    3690:	df 91       	pop	r29
    3692:	1f 91       	pop	r17
    3694:	0f 91       	pop	r16
    3696:	ff 90       	pop	r15
    3698:	ef 90       	pop	r14
    369a:	df 90       	pop	r13
    369c:	cf 90       	pop	r12
    369e:	bf 90       	pop	r11
    36a0:	af 90       	pop	r10
    36a2:	9f 90       	pop	r9
    36a4:	8f 90       	pop	r8
    36a6:	08 95       	ret

000036a8 <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	29 97       	sbiw	r28, 0x09	; 9
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	98 87       	std	Y+8, r25	; 0x08
    36be:	8f 83       	std	Y+7, r24	; 0x07
    36c0:	69 87       	std	Y+9, r22	; 0x09
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
    36c2:	ef 81       	ldd	r30, Y+7	; 0x07
    36c4:	f8 85       	ldd	r31, Y+8	; 0x08
    36c6:	83 e0       	ldi	r24, 0x03	; 3
    36c8:	86 a3       	std	Z+38, r24	; 0x26
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
    36ca:	89 85       	ldd	r24, Y+9	; 0x09
    36cc:	81 30       	cpi	r24, 0x01	; 1
    36ce:	c9 f4       	brne	.+50     	; 0x3702 <OSTmr_Link+0x5a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    36d0:	ef 81       	ldd	r30, Y+7	; 0x07
    36d2:	f8 85       	ldd	r31, Y+8	; 0x08
    36d4:	21 89       	ldd	r18, Z+17	; 0x11
    36d6:	32 89       	ldd	r19, Z+18	; 0x12
    36d8:	43 89       	ldd	r20, Z+19	; 0x13
    36da:	54 89       	ldd	r21, Z+20	; 0x14
    36dc:	80 91 4f 08 	lds	r24, 0x084F
    36e0:	90 91 50 08 	lds	r25, 0x0850
    36e4:	a0 91 51 08 	lds	r26, 0x0851
    36e8:	b0 91 52 08 	lds	r27, 0x0852
    36ec:	82 0f       	add	r24, r18
    36ee:	93 1f       	adc	r25, r19
    36f0:	a4 1f       	adc	r26, r20
    36f2:	b5 1f       	adc	r27, r21
    36f4:	ef 81       	ldd	r30, Y+7	; 0x07
    36f6:	f8 85       	ldd	r31, Y+8	; 0x08
    36f8:	81 87       	std	Z+9, r24	; 0x09
    36fa:	92 87       	std	Z+10, r25	; 0x0a
    36fc:	a3 87       	std	Z+11, r26	; 0x0b
    36fe:	b4 87       	std	Z+12, r27	; 0x0c
    3700:	3b c0       	rjmp	.+118    	; 0x3778 <OSTmr_Link+0xd0>
    } else {
        if (ptmr->OSTmrDly == 0) {
    3702:	ef 81       	ldd	r30, Y+7	; 0x07
    3704:	f8 85       	ldd	r31, Y+8	; 0x08
    3706:	85 85       	ldd	r24, Z+13	; 0x0d
    3708:	96 85       	ldd	r25, Z+14	; 0x0e
    370a:	a7 85       	ldd	r26, Z+15	; 0x0f
    370c:	b0 89       	ldd	r27, Z+16	; 0x10
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	a1 05       	cpc	r26, r1
    3712:	b1 05       	cpc	r27, r1
    3714:	c9 f4       	brne	.+50     	; 0x3748 <OSTmr_Link+0xa0>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    3716:	ef 81       	ldd	r30, Y+7	; 0x07
    3718:	f8 85       	ldd	r31, Y+8	; 0x08
    371a:	21 89       	ldd	r18, Z+17	; 0x11
    371c:	32 89       	ldd	r19, Z+18	; 0x12
    371e:	43 89       	ldd	r20, Z+19	; 0x13
    3720:	54 89       	ldd	r21, Z+20	; 0x14
    3722:	80 91 4f 08 	lds	r24, 0x084F
    3726:	90 91 50 08 	lds	r25, 0x0850
    372a:	a0 91 51 08 	lds	r26, 0x0851
    372e:	b0 91 52 08 	lds	r27, 0x0852
    3732:	82 0f       	add	r24, r18
    3734:	93 1f       	adc	r25, r19
    3736:	a4 1f       	adc	r26, r20
    3738:	b5 1f       	adc	r27, r21
    373a:	ef 81       	ldd	r30, Y+7	; 0x07
    373c:	f8 85       	ldd	r31, Y+8	; 0x08
    373e:	81 87       	std	Z+9, r24	; 0x09
    3740:	92 87       	std	Z+10, r25	; 0x0a
    3742:	a3 87       	std	Z+11, r26	; 0x0b
    3744:	b4 87       	std	Z+12, r27	; 0x0c
    3746:	18 c0       	rjmp	.+48     	; 0x3778 <OSTmr_Link+0xd0>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
    3748:	ef 81       	ldd	r30, Y+7	; 0x07
    374a:	f8 85       	ldd	r31, Y+8	; 0x08
    374c:	25 85       	ldd	r18, Z+13	; 0x0d
    374e:	36 85       	ldd	r19, Z+14	; 0x0e
    3750:	47 85       	ldd	r20, Z+15	; 0x0f
    3752:	50 89       	ldd	r21, Z+16	; 0x10
    3754:	80 91 4f 08 	lds	r24, 0x084F
    3758:	90 91 50 08 	lds	r25, 0x0850
    375c:	a0 91 51 08 	lds	r26, 0x0851
    3760:	b0 91 52 08 	lds	r27, 0x0852
    3764:	82 0f       	add	r24, r18
    3766:	93 1f       	adc	r25, r19
    3768:	a4 1f       	adc	r26, r20
    376a:	b5 1f       	adc	r27, r21
    376c:	ef 81       	ldd	r30, Y+7	; 0x07
    376e:	f8 85       	ldd	r31, Y+8	; 0x08
    3770:	81 87       	std	Z+9, r24	; 0x09
    3772:	92 87       	std	Z+10, r25	; 0x0a
    3774:	a3 87       	std	Z+11, r26	; 0x0b
    3776:	b4 87       	std	Z+12, r27	; 0x0c
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    3778:	ef 81       	ldd	r30, Y+7	; 0x07
    377a:	f8 85       	ldd	r31, Y+8	; 0x08
    377c:	81 85       	ldd	r24, Z+9	; 0x09
    377e:	92 85       	ldd	r25, Z+10	; 0x0a
    3780:	a3 85       	ldd	r26, Z+11	; 0x0b
    3782:	b4 85       	ldd	r27, Z+12	; 0x0c
    3784:	87 70       	andi	r24, 0x07	; 7
    3786:	90 70       	andi	r25, 0x00	; 0
    3788:	9a 83       	std	Y+2, r25	; 0x02
    378a:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    378c:	89 81       	ldd	r24, Y+1	; 0x01
    378e:	9a 81       	ldd	r25, Y+2	; 0x02
    3790:	88 0f       	add	r24, r24
    3792:	99 1f       	adc	r25, r25
    3794:	88 0f       	add	r24, r24
    3796:	99 1f       	adc	r25, r25
    3798:	81 51       	subi	r24, 0x11	; 17
    379a:	9b 4f       	sbci	r25, 0xFB	; 251
    379c:	9c 83       	std	Y+4, r25	; 0x04
    379e:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
    37a0:	eb 81       	ldd	r30, Y+3	; 0x03
    37a2:	fc 81       	ldd	r31, Y+4	; 0x04
    37a4:	80 81       	ld	r24, Z
    37a6:	91 81       	ldd	r25, Z+1	; 0x01
    37a8:	00 97       	sbiw	r24, 0x00	; 0
    37aa:	89 f4       	brne	.+34     	; 0x37ce <OSTmr_Link+0x126>
        pspoke->OSTmrFirst   = ptmr;
    37ac:	eb 81       	ldd	r30, Y+3	; 0x03
    37ae:	fc 81       	ldd	r31, Y+4	; 0x04
    37b0:	8f 81       	ldd	r24, Y+7	; 0x07
    37b2:	98 85       	ldd	r25, Y+8	; 0x08
    37b4:	91 83       	std	Z+1, r25	; 0x01
    37b6:	80 83       	st	Z, r24
        ptmr->OSTmrNext      = (OS_TMR *)0;
    37b8:	ef 81       	ldd	r30, Y+7	; 0x07
    37ba:	f8 85       	ldd	r31, Y+8	; 0x08
    37bc:	16 82       	std	Z+6, r1	; 0x06
    37be:	15 82       	std	Z+5, r1	; 0x05
        pspoke->OSTmrEntries = 1;
    37c0:	eb 81       	ldd	r30, Y+3	; 0x03
    37c2:	fc 81       	ldd	r31, Y+4	; 0x04
    37c4:	81 e0       	ldi	r24, 0x01	; 1
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	93 83       	std	Z+3, r25	; 0x03
    37ca:	82 83       	std	Z+2, r24	; 0x02
    37cc:	21 c0       	rjmp	.+66     	; 0x3810 <OSTmr_Link+0x168>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
    37ce:	eb 81       	ldd	r30, Y+3	; 0x03
    37d0:	fc 81       	ldd	r31, Y+4	; 0x04
    37d2:	80 81       	ld	r24, Z
    37d4:	91 81       	ldd	r25, Z+1	; 0x01
    37d6:	9e 83       	std	Y+6, r25	; 0x06
    37d8:	8d 83       	std	Y+5, r24	; 0x05
        pspoke->OSTmrFirst   = ptmr;
    37da:	eb 81       	ldd	r30, Y+3	; 0x03
    37dc:	fc 81       	ldd	r31, Y+4	; 0x04
    37de:	8f 81       	ldd	r24, Y+7	; 0x07
    37e0:	98 85       	ldd	r25, Y+8	; 0x08
    37e2:	91 83       	std	Z+1, r25	; 0x01
    37e4:	80 83       	st	Z, r24
        ptmr->OSTmrNext      = (void *)ptmr1;
    37e6:	ef 81       	ldd	r30, Y+7	; 0x07
    37e8:	f8 85       	ldd	r31, Y+8	; 0x08
    37ea:	8d 81       	ldd	r24, Y+5	; 0x05
    37ec:	9e 81       	ldd	r25, Y+6	; 0x06
    37ee:	96 83       	std	Z+6, r25	; 0x06
    37f0:	85 83       	std	Z+5, r24	; 0x05
        ptmr1->OSTmrPrev     = (void *)ptmr;
    37f2:	ed 81       	ldd	r30, Y+5	; 0x05
    37f4:	fe 81       	ldd	r31, Y+6	; 0x06
    37f6:	8f 81       	ldd	r24, Y+7	; 0x07
    37f8:	98 85       	ldd	r25, Y+8	; 0x08
    37fa:	90 87       	std	Z+8, r25	; 0x08
    37fc:	87 83       	std	Z+7, r24	; 0x07
        pspoke->OSTmrEntries++;
    37fe:	eb 81       	ldd	r30, Y+3	; 0x03
    3800:	fc 81       	ldd	r31, Y+4	; 0x04
    3802:	82 81       	ldd	r24, Z+2	; 0x02
    3804:	93 81       	ldd	r25, Z+3	; 0x03
    3806:	01 96       	adiw	r24, 0x01	; 1
    3808:	eb 81       	ldd	r30, Y+3	; 0x03
    380a:	fc 81       	ldd	r31, Y+4	; 0x04
    380c:	93 83       	std	Z+3, r25	; 0x03
    380e:	82 83       	std	Z+2, r24	; 0x02
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
    3810:	ef 81       	ldd	r30, Y+7	; 0x07
    3812:	f8 85       	ldd	r31, Y+8	; 0x08
    3814:	10 86       	std	Z+8, r1	; 0x08
    3816:	17 82       	std	Z+7, r1	; 0x07
}
    3818:	29 96       	adiw	r28, 0x09	; 9
    381a:	0f b6       	in	r0, 0x3f	; 63
    381c:	f8 94       	cli
    381e:	de bf       	out	0x3e, r29	; 62
    3820:	0f be       	out	0x3f, r0	; 63
    3822:	cd bf       	out	0x3d, r28	; 61
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	2a 97       	sbiw	r28, 0x0a	; 10
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	9a 87       	std	Y+10, r25	; 0x0a
    3840:	89 87       	std	Y+9, r24	; 0x09
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    3842:	e9 85       	ldd	r30, Y+9	; 0x09
    3844:	fa 85       	ldd	r31, Y+10	; 0x0a
    3846:	81 85       	ldd	r24, Z+9	; 0x09
    3848:	92 85       	ldd	r25, Z+10	; 0x0a
    384a:	a3 85       	ldd	r26, Z+11	; 0x0b
    384c:	b4 85       	ldd	r27, Z+12	; 0x0c
    384e:	87 70       	andi	r24, 0x07	; 7
    3850:	90 70       	andi	r25, 0x00	; 0
    3852:	9a 83       	std	Y+2, r25	; 0x02
    3854:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    3856:	89 81       	ldd	r24, Y+1	; 0x01
    3858:	9a 81       	ldd	r25, Y+2	; 0x02
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	88 0f       	add	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	81 51       	subi	r24, 0x11	; 17
    3864:	9b 4f       	sbci	r25, 0xFB	; 251
    3866:	9c 83       	std	Y+4, r25	; 0x04
    3868:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
    386a:	eb 81       	ldd	r30, Y+3	; 0x03
    386c:	fc 81       	ldd	r31, Y+4	; 0x04
    386e:	20 81       	ld	r18, Z
    3870:	31 81       	ldd	r19, Z+1	; 0x01
    3872:	89 85       	ldd	r24, Y+9	; 0x09
    3874:	9a 85       	ldd	r25, Y+10	; 0x0a
    3876:	28 17       	cp	r18, r24
    3878:	39 07       	cpc	r19, r25
    387a:	a9 f4       	brne	.+42     	; 0x38a6 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
    387c:	e9 85       	ldd	r30, Y+9	; 0x09
    387e:	fa 85       	ldd	r31, Y+10	; 0x0a
    3880:	85 81       	ldd	r24, Z+5	; 0x05
    3882:	96 81       	ldd	r25, Z+6	; 0x06
    3884:	98 87       	std	Y+8, r25	; 0x08
    3886:	8f 83       	std	Y+7, r24	; 0x07
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
    3888:	eb 81       	ldd	r30, Y+3	; 0x03
    388a:	fc 81       	ldd	r31, Y+4	; 0x04
    388c:	8f 81       	ldd	r24, Y+7	; 0x07
    388e:	98 85       	ldd	r25, Y+8	; 0x08
    3890:	91 83       	std	Z+1, r25	; 0x01
    3892:	80 83       	st	Z, r24
        if (ptmr1 != (OS_TMR *)0) {
    3894:	8f 81       	ldd	r24, Y+7	; 0x07
    3896:	98 85       	ldd	r25, Y+8	; 0x08
    3898:	00 97       	sbiw	r24, 0x00	; 0
    389a:	09 f1       	breq	.+66     	; 0x38de <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
    389c:	ef 81       	ldd	r30, Y+7	; 0x07
    389e:	f8 85       	ldd	r31, Y+8	; 0x08
    38a0:	10 86       	std	Z+8, r1	; 0x08
    38a2:	17 82       	std	Z+7, r1	; 0x07
    38a4:	1c c0       	rjmp	.+56     	; 0x38de <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
    38a6:	e9 85       	ldd	r30, Y+9	; 0x09
    38a8:	fa 85       	ldd	r31, Y+10	; 0x0a
    38aa:	87 81       	ldd	r24, Z+7	; 0x07
    38ac:	90 85       	ldd	r25, Z+8	; 0x08
    38ae:	98 87       	std	Y+8, r25	; 0x08
    38b0:	8f 83       	std	Y+7, r24	; 0x07
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
    38b2:	e9 85       	ldd	r30, Y+9	; 0x09
    38b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    38b6:	85 81       	ldd	r24, Z+5	; 0x05
    38b8:	96 81       	ldd	r25, Z+6	; 0x06
    38ba:	9e 83       	std	Y+6, r25	; 0x06
    38bc:	8d 83       	std	Y+5, r24	; 0x05
        ptmr1->OSTmrNext = ptmr2;
    38be:	ef 81       	ldd	r30, Y+7	; 0x07
    38c0:	f8 85       	ldd	r31, Y+8	; 0x08
    38c2:	8d 81       	ldd	r24, Y+5	; 0x05
    38c4:	9e 81       	ldd	r25, Y+6	; 0x06
    38c6:	96 83       	std	Z+6, r25	; 0x06
    38c8:	85 83       	std	Z+5, r24	; 0x05
        if (ptmr2 != (OS_TMR *)0) {
    38ca:	8d 81       	ldd	r24, Y+5	; 0x05
    38cc:	9e 81       	ldd	r25, Y+6	; 0x06
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	31 f0       	breq	.+12     	; 0x38de <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
    38d2:	ed 81       	ldd	r30, Y+5	; 0x05
    38d4:	fe 81       	ldd	r31, Y+6	; 0x06
    38d6:	8f 81       	ldd	r24, Y+7	; 0x07
    38d8:	98 85       	ldd	r25, Y+8	; 0x08
    38da:	90 87       	std	Z+8, r25	; 0x08
    38dc:	87 83       	std	Z+7, r24	; 0x07
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    38de:	e9 85       	ldd	r30, Y+9	; 0x09
    38e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    38e2:	81 e0       	ldi	r24, 0x01	; 1
    38e4:	86 a3       	std	Z+38, r24	; 0x26
    ptmr->OSTmrNext  = (void *)0;
    38e6:	e9 85       	ldd	r30, Y+9	; 0x09
    38e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    38ea:	16 82       	std	Z+6, r1	; 0x06
    38ec:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev  = (void *)0;
    38ee:	e9 85       	ldd	r30, Y+9	; 0x09
    38f0:	fa 85       	ldd	r31, Y+10	; 0x0a
    38f2:	10 86       	std	Z+8, r1	; 0x08
    38f4:	17 82       	std	Z+7, r1	; 0x07
    pspoke->OSTmrEntries--;
    38f6:	eb 81       	ldd	r30, Y+3	; 0x03
    38f8:	fc 81       	ldd	r31, Y+4	; 0x04
    38fa:	82 81       	ldd	r24, Z+2	; 0x02
    38fc:	93 81       	ldd	r25, Z+3	; 0x03
    38fe:	01 97       	sbiw	r24, 0x01	; 1
    3900:	eb 81       	ldd	r30, Y+3	; 0x03
    3902:	fc 81       	ldd	r31, Y+4	; 0x04
    3904:	93 83       	std	Z+3, r25	; 0x03
    3906:	82 83       	std	Z+2, r24	; 0x02
}
    3908:	2a 96       	adiw	r28, 0x0a	; 10
    390a:	0f b6       	in	r0, 0x3f	; 63
    390c:	f8 94       	cli
    390e:	de bf       	out	0x3e, r29	; 62
    3910:	0f be       	out	0x3f, r0	; 63
    3912:	cd bf       	out	0x3d, r28	; 61
    3914:	cf 91       	pop	r28
    3916:	df 91       	pop	r29
    3918:	08 95       	ret

0000391a <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
    391a:	df 93       	push	r29
    391c:	cf 93       	push	r28
    391e:	0f 92       	push	r0
    3920:	cd b7       	in	r28, 0x3d	; 61
    3922:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
    3924:	80 91 57 08 	lds	r24, 0x0857
    3928:	90 91 58 08 	lds	r25, 0x0858
    392c:	60 e0       	ldi	r22, 0x00	; 0
    392e:	70 e0       	ldi	r23, 0x00	; 0
    3930:	9e 01       	movw	r18, r28
    3932:	2f 5f       	subi	r18, 0xFF	; 255
    3934:	3f 4f       	sbci	r19, 0xFF	; 255
    3936:	a9 01       	movw	r20, r18
    3938:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <OSSemPend>
    (void)err;
}
    393c:	0f 90       	pop	r0
    393e:	cf 91       	pop	r28
    3940:	df 91       	pop	r29
    3942:	08 95       	ret

00003944 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
    3944:	df 93       	push	r29
    3946:	cf 93       	push	r28
    3948:	cd b7       	in	r28, 0x3d	; 61
    394a:	de b7       	in	r29, 0x3e	; 62
    (void)OSSemPost(OSTmrSem);
    394c:	80 91 57 08 	lds	r24, 0x0857
    3950:	90 91 58 08 	lds	r25, 0x0858
    3954:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <OSSemPost>
}
    3958:	cf 91       	pop	r28
    395a:	df 91       	pop	r29
    395c:	08 95       	ret

0000395e <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
    395e:	df 93       	push	r29
    3960:	cf 93       	push	r28
    3962:	cd b7       	in	r28, 0x3d	; 61
    3964:	de b7       	in	r29, 0x3e	; 62
    3966:	2d 97       	sbiw	r28, 0x0d	; 13
    3968:	0f b6       	in	r0, 0x3f	; 63
    396a:	f8 94       	cli
    396c:	de bf       	out	0x3e, r29	; 62
    396e:	0f be       	out	0x3f, r0	; 63
    3970:	cd bf       	out	0x3d, r28	; 61
    3972:	9d 87       	std	Y+13, r25	; 0x0d
    3974:	8c 87       	std	Y+12, r24	; 0x0c
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
    3976:	80 91 10 05 	lds	r24, 0x0510
    397a:	90 91 11 05 	lds	r25, 0x0511
    397e:	9e 01       	movw	r18, r28
    3980:	25 5f       	subi	r18, 0xF5	; 245
    3982:	3f 4f       	sbci	r19, 0xFF	; 255
    3984:	60 e0       	ldi	r22, 0x00	; 0
    3986:	70 e0       	ldi	r23, 0x00	; 0
    3988:	a9 01       	movw	r20, r18
    398a:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <OSSemPend>
        OSTmr_Lock();
    398e:	0e 94 8d 1c 	call	0x391a	; 0x391a <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
    3992:	80 91 4f 08 	lds	r24, 0x084F
    3996:	90 91 50 08 	lds	r25, 0x0850
    399a:	a0 91 51 08 	lds	r26, 0x0851
    399e:	b0 91 52 08 	lds	r27, 0x0852
    39a2:	01 96       	adiw	r24, 0x01	; 1
    39a4:	a1 1d       	adc	r26, r1
    39a6:	b1 1d       	adc	r27, r1
    39a8:	80 93 4f 08 	sts	0x084F, r24
    39ac:	90 93 50 08 	sts	0x0850, r25
    39b0:	a0 93 51 08 	sts	0x0851, r26
    39b4:	b0 93 52 08 	sts	0x0852, r27
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
    39b8:	80 91 4f 08 	lds	r24, 0x084F
    39bc:	90 91 50 08 	lds	r25, 0x0850
    39c0:	a0 91 51 08 	lds	r26, 0x0851
    39c4:	b0 91 52 08 	lds	r27, 0x0852
    39c8:	87 70       	andi	r24, 0x07	; 7
    39ca:	90 70       	andi	r25, 0x00	; 0
    39cc:	9a 83       	std	Y+2, r25	; 0x02
    39ce:	89 83       	std	Y+1, r24	; 0x01
        pspoke = &OSTmrWheelTbl[spoke];
    39d0:	89 81       	ldd	r24, Y+1	; 0x01
    39d2:	9a 81       	ldd	r25, Y+2	; 0x02
    39d4:	88 0f       	add	r24, r24
    39d6:	99 1f       	adc	r25, r25
    39d8:	88 0f       	add	r24, r24
    39da:	99 1f       	adc	r25, r25
    39dc:	81 51       	subi	r24, 0x11	; 17
    39de:	9b 4f       	sbci	r25, 0xFB	; 251
    39e0:	9c 83       	std	Y+4, r25	; 0x04
    39e2:	8b 83       	std	Y+3, r24	; 0x03
        ptmr   = pspoke->OSTmrFirst;
    39e4:	eb 81       	ldd	r30, Y+3	; 0x03
    39e6:	fc 81       	ldd	r31, Y+4	; 0x04
    39e8:	80 81       	ld	r24, Z
    39ea:	91 81       	ldd	r25, Z+1	; 0x01
    39ec:	9a 87       	std	Y+10, r25	; 0x0a
    39ee:	89 87       	std	Y+9, r24	; 0x09
    39f0:	44 c0       	rjmp	.+136    	; 0x3a7a <OSTmr_Task+0x11c>
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
    39f2:	e9 85       	ldd	r30, Y+9	; 0x09
    39f4:	fa 85       	ldd	r31, Y+10	; 0x0a
    39f6:	85 81       	ldd	r24, Z+5	; 0x05
    39f8:	96 81       	ldd	r25, Z+6	; 0x06
    39fa:	98 87       	std	Y+8, r25	; 0x08
    39fc:	8f 83       	std	Y+7, r24	; 0x07
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
    39fe:	e9 85       	ldd	r30, Y+9	; 0x09
    3a00:	fa 85       	ldd	r31, Y+10	; 0x0a
    3a02:	21 85       	ldd	r18, Z+9	; 0x09
    3a04:	32 85       	ldd	r19, Z+10	; 0x0a
    3a06:	43 85       	ldd	r20, Z+11	; 0x0b
    3a08:	54 85       	ldd	r21, Z+12	; 0x0c
    3a0a:	80 91 4f 08 	lds	r24, 0x084F
    3a0e:	90 91 50 08 	lds	r25, 0x0850
    3a12:	a0 91 51 08 	lds	r26, 0x0851
    3a16:	b0 91 52 08 	lds	r27, 0x0852
    3a1a:	28 17       	cp	r18, r24
    3a1c:	39 07       	cpc	r19, r25
    3a1e:	4a 07       	cpc	r20, r26
    3a20:	5b 07       	cpc	r21, r27
    3a22:	39 f5       	brne	.+78     	; 0x3a72 <OSTmr_Task+0x114>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
    3a24:	e9 85       	ldd	r30, Y+9	; 0x09
    3a26:	fa 85       	ldd	r31, Y+10	; 0x0a
    3a28:	81 81       	ldd	r24, Z+1	; 0x01
    3a2a:	92 81       	ldd	r25, Z+2	; 0x02
    3a2c:	9e 83       	std	Y+6, r25	; 0x06
    3a2e:	8d 83       	std	Y+5, r24	; 0x05
                if (pfnct != (OS_TMR_CALLBACK)0) {
    3a30:	8d 81       	ldd	r24, Y+5	; 0x05
    3a32:	9e 81       	ldd	r25, Y+6	; 0x06
    3a34:	00 97       	sbiw	r24, 0x00	; 0
    3a36:	51 f0       	breq	.+20     	; 0x3a4c <OSTmr_Task+0xee>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
    3a38:	e9 85       	ldd	r30, Y+9	; 0x09
    3a3a:	fa 85       	ldd	r31, Y+10	; 0x0a
    3a3c:	23 81       	ldd	r18, Z+3	; 0x03
    3a3e:	34 81       	ldd	r19, Z+4	; 0x04
    3a40:	89 85       	ldd	r24, Y+9	; 0x09
    3a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a44:	ed 81       	ldd	r30, Y+5	; 0x05
    3a46:	fe 81       	ldd	r31, Y+6	; 0x06
    3a48:	b9 01       	movw	r22, r18
    3a4a:	19 95       	eicall
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
    3a4c:	89 85       	ldd	r24, Y+9	; 0x09
    3a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a50:	0e 94 15 1c 	call	0x382a	; 0x382a <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
    3a54:	e9 85       	ldd	r30, Y+9	; 0x09
    3a56:	fa 85       	ldd	r31, Y+10	; 0x0a
    3a58:	85 a1       	ldd	r24, Z+37	; 0x25
    3a5a:	82 30       	cpi	r24, 0x02	; 2
    3a5c:	31 f4       	brne	.+12     	; 0x3a6a <OSTmr_Task+0x10c>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
    3a5e:	89 85       	ldd	r24, Y+9	; 0x09
    3a60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a62:	61 e0       	ldi	r22, 0x01	; 1
    3a64:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <OSTmr_Link>
    3a68:	04 c0       	rjmp	.+8      	; 0x3a72 <OSTmr_Task+0x114>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
    3a6a:	e9 85       	ldd	r30, Y+9	; 0x09
    3a6c:	fa 85       	ldd	r31, Y+10	; 0x0a
    3a6e:	82 e0       	ldi	r24, 0x02	; 2
    3a70:	86 a3       	std	Z+38, r24	; 0x26
                }
            }
            ptmr = ptmr_next;
    3a72:	8f 81       	ldd	r24, Y+7	; 0x07
    3a74:	98 85       	ldd	r25, Y+8	; 0x08
    3a76:	9a 87       	std	Y+10, r25	; 0x0a
    3a78:	89 87       	std	Y+9, r24	; 0x09
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
    3a7a:	89 85       	ldd	r24, Y+9	; 0x09
    3a7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a7e:	00 97       	sbiw	r24, 0x00	; 0
    3a80:	09 f0       	breq	.+2      	; 0x3a84 <OSTmr_Task+0x126>
    3a82:	b7 cf       	rjmp	.-146    	; 0x39f2 <OSTmr_Task+0x94>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
    3a84:	0e 94 a2 1c 	call	0x3944	; 0x3944 <OSTmr_Unlock>
    3a88:	76 cf       	rjmp	.-276    	; 0x3976 <OSTmr_Task+0x18>
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3a8a:	df 93       	push	r29
    3a8c:	cf 93       	push	r28
    3a8e:	cd b7       	in	r28, 0x3d	; 61
    3a90:	de b7       	in	r29, 0x3e	; 62
    3a92:	29 97       	sbiw	r28, 0x09	; 9
    3a94:	0f b6       	in	r0, 0x3f	; 63
    3a96:	f8 94       	cli
    3a98:	de bf       	out	0x3e, r29	; 62
    3a9a:	0f be       	out	0x3f, r0	; 63
    3a9c:	cd bf       	out	0x3d, r28	; 61
    3a9e:	9c 83       	std	Y+4, r25	; 0x04
    3aa0:	8b 83       	std	Y+3, r24	; 0x03
    3aa2:	7e 83       	std	Y+6, r23	; 0x06
    3aa4:	6d 83       	std	Y+5, r22	; 0x05
    3aa6:	58 87       	std	Y+8, r21	; 0x08
    3aa8:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3aaa:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3aac:	80 91 4c 08 	lds	r24, 0x084C
    3ab0:	88 23       	and	r24, r24
    3ab2:	31 f0       	breq	.+12     	; 0x3ac0 <OSTmr_Task+0x162>
        *perr  = OS_ERR_NAME_GET_ISR;
    3ab4:	ef 81       	ldd	r30, Y+7	; 0x07
    3ab6:	f8 85       	ldd	r31, Y+8	; 0x08
    3ab8:	81 e1       	ldi	r24, 0x11	; 17
    3aba:	80 83       	st	Z, r24
        return (0);
    3abc:	19 86       	std	Y+9, r1	; 0x09
    3abe:	25 c0       	rjmp	.+74     	; 0x3b0a <OSTmr_Task+0x1ac>
    }
    switch (pevent->OSEventType) {
    3ac0:	eb 81       	ldd	r30, Y+3	; 0x03
    3ac2:	fc 81       	ldd	r31, Y+4	; 0x04
    3ac4:	80 81       	ld	r24, Z
    3ac6:	88 2f       	mov	r24, r24
    3ac8:	90 e0       	ldi	r25, 0x00	; 0
    3aca:	01 97       	sbiw	r24, 0x01	; 1
    3acc:	84 30       	cpi	r24, 0x04	; 4
    3ace:	91 05       	cpc	r25, r1
    3ad0:	b8 f4       	brcc	.+46     	; 0x3b00 <OSTmr_Task+0x1a2>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    3ad2:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    3ada:	9c 81       	ldd	r25, Y+4	; 0x04
    3adc:	9c 01       	movw	r18, r24
    3ade:	28 5f       	subi	r18, 0xF8	; 248
    3ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae2:	8d 81       	ldd	r24, Y+5	; 0x05
    3ae4:	9e 81       	ldd	r25, Y+6	; 0x06
    3ae6:	b9 01       	movw	r22, r18
    3ae8:	0e 94 1d 23 	call	0x463a	; 0x463a <OS_SchedNew+0x4e>
    3aec:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    3aee:	89 81       	ldd	r24, Y+1	; 0x01
    3af0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    3af4:	ef 81       	ldd	r30, Y+7	; 0x07
    3af6:	f8 85       	ldd	r31, Y+8	; 0x08
    3af8:	10 82       	st	Z, r1
    return (len);
    3afa:	8a 81       	ldd	r24, Y+2	; 0x02
    3afc:	89 87       	std	Y+9, r24	; 0x09
    3afe:	05 c0       	rjmp	.+10     	; 0x3b0a <OSTmr_Task+0x1ac>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3b00:	ef 81       	ldd	r30, Y+7	; 0x07
    3b02:	f8 85       	ldd	r31, Y+8	; 0x08
    3b04:	81 e0       	ldi	r24, 0x01	; 1
    3b06:	80 83       	st	Z, r24
             return (0);
    3b08:	19 86       	std	Y+9, r1	; 0x09
    3b0a:	89 85       	ldd	r24, Y+9	; 0x09
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
    3b0c:	29 96       	adiw	r28, 0x09	; 9
    3b0e:	0f b6       	in	r0, 0x3f	; 63
    3b10:	f8 94       	cli
    3b12:	de bf       	out	0x3e, r29	; 62
    3b14:	0f be       	out	0x3f, r0	; 63
    3b16:	cd bf       	out	0x3d, r28	; 61
    3b18:	cf 91       	pop	r28
    3b1a:	df 91       	pop	r29
    3b1c:	08 95       	ret
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3b1e:	df 93       	push	r29
    3b20:	cf 93       	push	r28
    3b22:	cd b7       	in	r28, 0x3d	; 61
    3b24:	de b7       	in	r29, 0x3e	; 62
    3b26:	28 97       	sbiw	r28, 0x08	; 8
    3b28:	0f b6       	in	r0, 0x3f	; 63
    3b2a:	f8 94       	cli
    3b2c:	de bf       	out	0x3e, r29	; 62
    3b2e:	0f be       	out	0x3f, r0	; 63
    3b30:	cd bf       	out	0x3d, r28	; 61
    3b32:	9c 83       	std	Y+4, r25	; 0x04
    3b34:	8b 83       	std	Y+3, r24	; 0x03
    3b36:	7e 83       	std	Y+6, r23	; 0x06
    3b38:	6d 83       	std	Y+5, r22	; 0x05
    3b3a:	58 87       	std	Y+8, r21	; 0x08
    3b3c:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3b3e:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3b40:	80 91 4c 08 	lds	r24, 0x084C
    3b44:	88 23       	and	r24, r24
    3b46:	29 f0       	breq	.+10     	; 0x3b52 <OSTmr_Task+0x1f4>
        *perr = OS_ERR_NAME_SET_ISR;
    3b48:	ef 81       	ldd	r30, Y+7	; 0x07
    3b4a:	f8 85       	ldd	r31, Y+8	; 0x08
    3b4c:	82 e1       	ldi	r24, 0x12	; 18
    3b4e:	80 83       	st	Z, r24
    3b50:	30 c0       	rjmp	.+96     	; 0x3bb2 <OSTmr_Task+0x254>
        return;
    }
    switch (pevent->OSEventType) {
    3b52:	eb 81       	ldd	r30, Y+3	; 0x03
    3b54:	fc 81       	ldd	r31, Y+4	; 0x04
    3b56:	80 81       	ld	r24, Z
    3b58:	88 2f       	mov	r24, r24
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	01 97       	sbiw	r24, 0x01	; 1
    3b5e:	84 30       	cpi	r24, 0x04	; 4
    3b60:	91 05       	cpc	r25, r1
    3b62:	60 f4       	brcc	.+24     	; 0x3b7c <OSTmr_Task+0x21e>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    3b64:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3b68:	89 83       	std	Y+1, r24	; 0x01
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    3b6a:	8d 81       	ldd	r24, Y+5	; 0x05
    3b6c:	9e 81       	ldd	r25, Y+6	; 0x06
    3b6e:	0e 94 4e 23 	call	0x469c	; 0x469c <OS_SchedNew+0xb0>
    3b72:	8a 83       	std	Y+2, r24	; 0x02
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    3b74:	8a 81       	ldd	r24, Y+2	; 0x02
    3b76:	80 31       	cpi	r24, 0x10	; 16
    3b78:	30 f4       	brcc	.+12     	; 0x3b86 <OSTmr_Task+0x228>
    3b7a:	0d c0       	rjmp	.+26     	; 0x3b96 <OSTmr_Task+0x238>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3b7c:	ef 81       	ldd	r30, Y+7	; 0x07
    3b7e:	f8 85       	ldd	r31, Y+8	; 0x08
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	80 83       	st	Z, r24
    3b84:	16 c0       	rjmp	.+44     	; 0x3bb2 <OSTmr_Task+0x254>
             return;
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
    3b86:	89 81       	ldd	r24, Y+1	; 0x01
    3b88:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3b8c:	ef 81       	ldd	r30, Y+7	; 0x07
    3b8e:	f8 85       	ldd	r31, Y+8	; 0x08
    3b90:	8b e0       	ldi	r24, 0x0B	; 11
    3b92:	80 83       	st	Z, r24
    3b94:	0e c0       	rjmp	.+28     	; 0x3bb2 <OSTmr_Task+0x254>
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    3b96:	8b 81       	ldd	r24, Y+3	; 0x03
    3b98:	9c 81       	ldd	r25, Y+4	; 0x04
    3b9a:	08 96       	adiw	r24, 0x08	; 8
    3b9c:	2d 81       	ldd	r18, Y+5	; 0x05
    3b9e:	3e 81       	ldd	r19, Y+6	; 0x06
    3ba0:	b9 01       	movw	r22, r18
    3ba2:	0e 94 1d 23 	call	0x463a	; 0x463a <OS_SchedNew+0x4e>
    OS_EXIT_CRITICAL();
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    3bac:	ef 81       	ldd	r30, Y+7	; 0x07
    3bae:	f8 85       	ldd	r31, Y+8	; 0x08
    3bb0:	10 82       	st	Z, r1
}
    3bb2:	28 96       	adiw	r28, 0x08	; 8
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    3bcc:	0e 94 e5 01 	call	0x3ca	; 0x3ca <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    3bd0:	0e 94 58 21 	call	0x42b0	; 0x42b0 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    3bd4:	0e 94 7f 21 	call	0x42fe	; 0x42fe <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    3bd8:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    3bdc:	0e 94 00 21 	call	0x4200	; 0x4200 <OS_InitEventList>

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    3be0:	0e 94 ac 21 	call	0x4358	; 0x4358 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
    3be4:	0e 94 32 32 	call	0x6464	; 0x6464 <OSTmr_Free+0xa4>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    3be8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    3bec:	0e 94 c6 03 	call	0x78c	; 0x78c <OSDebugInit>
#endif
}
    3bf0:	cf 91       	pop	r28
    3bf2:	df 91       	pop	r29
    3bf4:	08 95       	ret
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    3bf6:	df 93       	push	r29
    3bf8:	cf 93       	push	r28
    3bfa:	cd b7       	in	r28, 0x3d	; 61
    3bfc:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_TRUE) {
    3bfe:	80 91 12 05 	lds	r24, 0x0512
    3c02:	81 30       	cpi	r24, 0x01	; 1
    3c04:	49 f4       	brne	.+18     	; 0x3c18 <OSTmr_Task+0x2ba>
        if (OSIntNesting < 255u) {
    3c06:	80 91 4c 08 	lds	r24, 0x084C
    3c0a:	8f 3f       	cpi	r24, 0xFF	; 255
    3c0c:	29 f0       	breq	.+10     	; 0x3c18 <OSTmr_Task+0x2ba>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    3c0e:	80 91 4c 08 	lds	r24, 0x084C
    3c12:	8f 5f       	subi	r24, 0xFF	; 255
    3c14:	80 93 4c 08 	sts	0x084C, r24
        }
    }
}
    3c18:	cf 91       	pop	r28
    3c1a:	df 91       	pop	r29
    3c1c:	08 95       	ret
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    3c1e:	df 93       	push	r29
    3c20:	cf 93       	push	r28
    3c22:	0f 92       	push	r0
    3c24:	cd b7       	in	r28, 0x3d	; 61
    3c26:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3c28:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {
    3c2a:	80 91 12 05 	lds	r24, 0x0512
    3c2e:	81 30       	cpi	r24, 0x01	; 1
    3c30:	09 f0       	breq	.+2      	; 0x3c34 <OSTmr_Task+0x2d6>
    3c32:	53 c0       	rjmp	.+166    	; 0x3cda <OSTmr_Task+0x37c>
        OS_ENTER_CRITICAL();
    3c34:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3c38:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    3c3a:	80 91 4c 08 	lds	r24, 0x084C
    3c3e:	88 23       	and	r24, r24
    3c40:	29 f0       	breq	.+10     	; 0x3c4c <OSTmr_Task+0x2ee>
            OSIntNesting--;
    3c42:	80 91 4c 08 	lds	r24, 0x084C
    3c46:	81 50       	subi	r24, 0x01	; 1
    3c48:	80 93 4c 08 	sts	0x084C, r24
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    3c4c:	80 91 4c 08 	lds	r24, 0x084C
    3c50:	88 23       	and	r24, r24
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <OSTmr_Task+0x2f8>
    3c54:	3f c0       	rjmp	.+126    	; 0x3cd4 <OSTmr_Task+0x376>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    3c56:	80 91 0f 05 	lds	r24, 0x050F
    3c5a:	88 23       	and	r24, r24
    3c5c:	d9 f5       	brne	.+118    	; 0x3cd4 <OSTmr_Task+0x376>
                OS_SchedNew();
    3c5e:	0e 94 f6 22 	call	0x45ec	; 0x45ec <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    3c62:	90 91 19 05 	lds	r25, 0x0519
    3c66:	80 91 8a 07 	lds	r24, 0x078A
    3c6a:	98 17       	cp	r25, r24
    3c6c:	99 f1       	breq	.+102    	; 0x3cd4 <OSTmr_Task+0x376>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    3c6e:	80 91 19 05 	lds	r24, 0x0519
    3c72:	88 2f       	mov	r24, r24
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	88 0f       	add	r24, r24
    3c78:	99 1f       	adc	r25, r25
    3c7a:	fc 01       	movw	r30, r24
    3c7c:	e0 51       	subi	r30, 0x10	; 16
    3c7e:	f4 4f       	sbci	r31, 0xF4	; 244
    3c80:	80 81       	ld	r24, Z
    3c82:	91 81       	ldd	r25, Z+1	; 0x01
    3c84:	90 93 97 07 	sts	0x0797, r25
    3c88:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    3c8c:	e0 91 96 07 	lds	r30, 0x0796
    3c90:	f0 91 97 07 	lds	r31, 0x0797
    3c94:	85 8d       	ldd	r24, Z+29	; 0x1d
    3c96:	96 8d       	ldd	r25, Z+30	; 0x1e
    3c98:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3c9a:	b0 a1       	ldd	r27, Z+32	; 0x20
    3c9c:	01 96       	adiw	r24, 0x01	; 1
    3c9e:	a1 1d       	adc	r26, r1
    3ca0:	b1 1d       	adc	r27, r1
    3ca2:	85 8f       	std	Z+29, r24	; 0x1d
    3ca4:	96 8f       	std	Z+30, r25	; 0x1e
    3ca6:	a7 8f       	std	Z+31, r26	; 0x1f
    3ca8:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    3caa:	80 91 8d 07 	lds	r24, 0x078D
    3cae:	90 91 8e 07 	lds	r25, 0x078E
    3cb2:	a0 91 8f 07 	lds	r26, 0x078F
    3cb6:	b0 91 90 07 	lds	r27, 0x0790
    3cba:	01 96       	adiw	r24, 0x01	; 1
    3cbc:	a1 1d       	adc	r26, r1
    3cbe:	b1 1d       	adc	r27, r1
    3cc0:	80 93 8d 07 	sts	0x078D, r24
    3cc4:	90 93 8e 07 	sts	0x078E, r25
    3cc8:	a0 93 8f 07 	sts	0x078F, r26
    3ccc:	b0 93 90 07 	sts	0x0790, r27
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    3cd0:	0e 94 87 01 	call	0x30e	; 0x30e <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
    3cd4:	89 81       	ldd	r24, Y+1	; 0x01
    3cd6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
    3cda:	0f 90       	pop	r0
    3cdc:	cf 91       	pop	r28
    3cde:	df 91       	pop	r29
    3ce0:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    3ce2:	df 93       	push	r29
    3ce4:	cf 93       	push	r28
    3ce6:	0f 92       	push	r0
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3cec:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    3cee:	80 91 12 05 	lds	r24, 0x0512
    3cf2:	81 30       	cpi	r24, 0x01	; 1
    3cf4:	99 f4       	brne	.+38     	; 0x3d1c <OSTmr_Task+0x3be>
        OS_ENTER_CRITICAL();
    3cf6:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3cfa:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    3cfc:	80 91 4c 08 	lds	r24, 0x084C
    3d00:	88 23       	and	r24, r24
    3d02:	49 f4       	brne	.+18     	; 0x3d16 <OSTmr_Task+0x3b8>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    3d04:	80 91 0f 05 	lds	r24, 0x050F
    3d08:	8f 3f       	cpi	r24, 0xFF	; 255
    3d0a:	29 f0       	breq	.+10     	; 0x3d16 <OSTmr_Task+0x3b8>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    3d0c:	80 91 0f 05 	lds	r24, 0x050F
    3d10:	8f 5f       	subi	r24, 0xFF	; 255
    3d12:	80 93 0f 05 	sts	0x050F, r24
            }
        }
        OS_EXIT_CRITICAL();
    3d16:	89 81       	ldd	r24, Y+1	; 0x01
    3d18:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
    3d1c:	0f 90       	pop	r0
    3d1e:	cf 91       	pop	r28
    3d20:	df 91       	pop	r29
    3d22:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	0f 92       	push	r0
    3d2a:	cd b7       	in	r28, 0x3d	; 61
    3d2c:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3d2e:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    3d30:	80 91 12 05 	lds	r24, 0x0512
    3d34:	81 30       	cpi	r24, 0x01	; 1
    3d36:	29 f5       	brne	.+74     	; 0x3d82 <OSTmr_Task+0x424>
        OS_ENTER_CRITICAL();
    3d38:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3d3c:	89 83       	std	Y+1, r24	; 0x01
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    3d3e:	80 91 0f 05 	lds	r24, 0x050F
    3d42:	88 23       	and	r24, r24
    3d44:	d9 f0       	breq	.+54     	; 0x3d7c <OSTmr_Task+0x41e>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    3d46:	80 91 0f 05 	lds	r24, 0x050F
    3d4a:	81 50       	subi	r24, 0x01	; 1
    3d4c:	80 93 0f 05 	sts	0x050F, r24
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    3d50:	80 91 0f 05 	lds	r24, 0x050F
    3d54:	88 23       	and	r24, r24
    3d56:	71 f4       	brne	.+28     	; 0x3d74 <OSTmr_Task+0x416>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    3d58:	80 91 4c 08 	lds	r24, 0x084C
    3d5c:	88 23       	and	r24, r24
    3d5e:	31 f4       	brne	.+12     	; 0x3d6c <OSTmr_Task+0x40e>
                    OS_EXIT_CRITICAL();
    3d60:	89 81       	ldd	r24, Y+1	; 0x01
    3d62:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
    3d66:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    3d6a:	0b c0       	rjmp	.+22     	; 0x3d82 <OSTmr_Task+0x424>
                } else {
                    OS_EXIT_CRITICAL();
    3d6c:	89 81       	ldd	r24, Y+1	; 0x01
    3d6e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    3d72:	07 c0       	rjmp	.+14     	; 0x3d82 <OSTmr_Task+0x424>
                }
            } else {
                OS_EXIT_CRITICAL();
    3d74:	89 81       	ldd	r24, Y+1	; 0x01
    3d76:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    3d7a:	03 c0       	rjmp	.+6      	; 0x3d82 <OSTmr_Task+0x424>
            }
        } else {
            OS_EXIT_CRITICAL();
    3d7c:	89 81       	ldd	r24, Y+1	; 0x01
    3d7e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
    }
}
    3d82:	0f 90       	pop	r0
    3d84:	cf 91       	pop	r28
    3d86:	df 91       	pop	r29
    3d88:	08 95       	ret
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    3d8a:	df 93       	push	r29
    3d8c:	cf 93       	push	r28
    3d8e:	cd b7       	in	r28, 0x3d	; 61
    3d90:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_FALSE) {
    3d92:	80 91 12 05 	lds	r24, 0x0512
    3d96:	88 23       	and	r24, r24
    3d98:	f9 f4       	brne	.+62     	; 0x3dd8 <OSTmr_Task+0x47a>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    3d9a:	0e 94 f6 22 	call	0x45ec	; 0x45ec <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    3d9e:	80 91 19 05 	lds	r24, 0x0519
    3da2:	80 93 8a 07 	sts	0x078A, r24
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    3da6:	80 91 19 05 	lds	r24, 0x0519
    3daa:	88 2f       	mov	r24, r24
    3dac:	90 e0       	ldi	r25, 0x00	; 0
    3dae:	88 0f       	add	r24, r24
    3db0:	99 1f       	adc	r25, r25
    3db2:	fc 01       	movw	r30, r24
    3db4:	e0 51       	subi	r30, 0x10	; 16
    3db6:	f4 4f       	sbci	r31, 0xF4	; 244
    3db8:	80 81       	ld	r24, Z
    3dba:	91 81       	ldd	r25, Z+1	; 0x01
    3dbc:	90 93 97 07 	sts	0x0797, r25
    3dc0:	80 93 96 07 	sts	0x0796, r24
        OSTCBCur      = OSTCBHighRdy;
    3dc4:	80 91 96 07 	lds	r24, 0x0796
    3dc8:	90 91 97 07 	lds	r25, 0x0797
    3dcc:	90 93 4e 08 	sts	0x084E, r25
    3dd0:	80 93 4d 08 	sts	0x084D, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    3dd4:	0e 94 c8 00 	call	0x190	; 0x190 <OSStartHighRdy>
    }
}
    3dd8:	cf 91       	pop	r28
    3dda:	df 91       	pop	r29
    3ddc:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    3dde:	df 93       	push	r29
    3de0:	cf 93       	push	r28
    3de2:	00 d0       	rcall	.+0      	; 0x3de4 <OSTmr_Task+0x486>
    3de4:	cd b7       	in	r28, 0x3d	; 61
    3de6:	de b7       	in	r29, 0x3e	; 62
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    3de8:	19 82       	std	Y+1, r1	; 0x01
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    3dea:	0e 94 a7 03 	call	0x74e	; 0x74e <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    3dee:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3df2:	89 83       	std	Y+1, r24	; 0x01
    OSTime++;
    3df4:	80 91 53 08 	lds	r24, 0x0853
    3df8:	90 91 54 08 	lds	r25, 0x0854
    3dfc:	a0 91 55 08 	lds	r26, 0x0855
    3e00:	b0 91 56 08 	lds	r27, 0x0856
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	a1 1d       	adc	r26, r1
    3e08:	b1 1d       	adc	r27, r1
    3e0a:	80 93 53 08 	sts	0x0853, r24
    3e0e:	90 93 54 08 	sts	0x0854, r25
    3e12:	a0 93 55 08 	sts	0x0855, r26
    3e16:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
    3e1a:	89 81       	ldd	r24, Y+1	; 0x01
    3e1c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
    3e20:	80 91 12 05 	lds	r24, 0x0512
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	09 f0       	breq	.+2      	; 0x3e2a <OSTmr_Task+0x4cc>
    3e28:	6f c0       	rjmp	.+222    	; 0x3f08 <OSTmr_Task+0x5aa>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    3e2a:	80 91 8b 07 	lds	r24, 0x078B
    3e2e:	90 91 8c 07 	lds	r25, 0x078C
    3e32:	9b 83       	std	Y+3, r25	; 0x03
    3e34:	8a 83       	std	Y+2, r24	; 0x02
    3e36:	62 c0       	rjmp	.+196    	; 0x3efc <OSTmr_Task+0x59e>
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
            OS_ENTER_CRITICAL();
    3e38:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3e3c:	89 83       	std	Y+1, r24	; 0x01
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    3e3e:	ea 81       	ldd	r30, Y+2	; 0x02
    3e40:	fb 81       	ldd	r31, Y+3	; 0x03
    3e42:	84 89       	ldd	r24, Z+20	; 0x14
    3e44:	95 89       	ldd	r25, Z+21	; 0x15
    3e46:	00 97       	sbiw	r24, 0x00	; 0
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <OSTmr_Task+0x4ee>
    3e4a:	4f c0       	rjmp	.+158    	; 0x3eea <OSTmr_Task+0x58c>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    3e4c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e4e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e50:	84 89       	ldd	r24, Z+20	; 0x14
    3e52:	95 89       	ldd	r25, Z+21	; 0x15
    3e54:	01 97       	sbiw	r24, 0x01	; 1
    3e56:	ea 81       	ldd	r30, Y+2	; 0x02
    3e58:	fb 81       	ldd	r31, Y+3	; 0x03
    3e5a:	95 8b       	std	Z+21, r25	; 0x15
    3e5c:	84 8b       	std	Z+20, r24	; 0x14
    3e5e:	ea 81       	ldd	r30, Y+2	; 0x02
    3e60:	fb 81       	ldd	r31, Y+3	; 0x03
    3e62:	84 89       	ldd	r24, Z+20	; 0x14
    3e64:	95 89       	ldd	r25, Z+21	; 0x15
    3e66:	00 97       	sbiw	r24, 0x00	; 0
    3e68:	09 f0       	breq	.+2      	; 0x3e6c <OSTmr_Task+0x50e>
    3e6a:	3f c0       	rjmp	.+126    	; 0x3eea <OSTmr_Task+0x58c>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    3e6c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e6e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e70:	86 89       	ldd	r24, Z+22	; 0x16
    3e72:	88 2f       	mov	r24, r24
    3e74:	90 e0       	ldi	r25, 0x00	; 0
    3e76:	87 73       	andi	r24, 0x37	; 55
    3e78:	90 70       	andi	r25, 0x00	; 0
    3e7a:	00 97       	sbiw	r24, 0x00	; 0
    3e7c:	61 f0       	breq	.+24     	; 0x3e96 <OSTmr_Task+0x538>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    3e7e:	ea 81       	ldd	r30, Y+2	; 0x02
    3e80:	fb 81       	ldd	r31, Y+3	; 0x03
    3e82:	86 89       	ldd	r24, Z+22	; 0x16
    3e84:	88 7c       	andi	r24, 0xC8	; 200
    3e86:	ea 81       	ldd	r30, Y+2	; 0x02
    3e88:	fb 81       	ldd	r31, Y+3	; 0x03
    3e8a:	86 8b       	std	Z+22, r24	; 0x16
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    3e8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3e90:	81 e0       	ldi	r24, 0x01	; 1
    3e92:	87 8b       	std	Z+23, r24	; 0x17
    3e94:	03 c0       	rjmp	.+6      	; 0x3e9c <OSTmr_Task+0x53e>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    3e96:	ea 81       	ldd	r30, Y+2	; 0x02
    3e98:	fb 81       	ldd	r31, Y+3	; 0x03
    3e9a:	17 8a       	std	Z+23, r1	; 0x17
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    3e9c:	ea 81       	ldd	r30, Y+2	; 0x02
    3e9e:	fb 81       	ldd	r31, Y+3	; 0x03
    3ea0:	86 89       	ldd	r24, Z+22	; 0x16
    3ea2:	88 2f       	mov	r24, r24
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	88 70       	andi	r24, 0x08	; 8
    3ea8:	90 70       	andi	r25, 0x00	; 0
    3eaa:	00 97       	sbiw	r24, 0x00	; 0
    3eac:	f1 f4       	brne	.+60     	; 0x3eea <OSTmr_Task+0x58c>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    3eae:	ea 81       	ldd	r30, Y+2	; 0x02
    3eb0:	fb 81       	ldd	r31, Y+3	; 0x03
    3eb2:	94 8d       	ldd	r25, Z+28	; 0x1c
    3eb4:	80 91 98 07 	lds	r24, 0x0798
    3eb8:	89 2b       	or	r24, r25
    3eba:	80 93 98 07 	sts	0x0798, r24
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    3ebe:	ea 81       	ldd	r30, Y+2	; 0x02
    3ec0:	fb 81       	ldd	r31, Y+3	; 0x03
    3ec2:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ec4:	28 2f       	mov	r18, r24
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	ea 81       	ldd	r30, Y+2	; 0x02
    3eca:	fb 81       	ldd	r31, Y+3	; 0x03
    3ecc:	82 8d       	ldd	r24, Z+26	; 0x1a
    3ece:	88 2f       	mov	r24, r24
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	fc 01       	movw	r30, r24
    3ed4:	e7 56       	subi	r30, 0x67	; 103
    3ed6:	f8 4f       	sbci	r31, 0xF8	; 248
    3ed8:	90 81       	ld	r25, Z
    3eda:	ea 81       	ldd	r30, Y+2	; 0x02
    3edc:	fb 81       	ldd	r31, Y+3	; 0x03
    3ede:	83 8d       	ldd	r24, Z+27	; 0x1b
    3ee0:	89 2b       	or	r24, r25
    3ee2:	f9 01       	movw	r30, r18
    3ee4:	e7 56       	subi	r30, 0x67	; 103
    3ee6:	f8 4f       	sbci	r31, 0xF8	; 248
    3ee8:	80 83       	st	Z, r24
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    3eea:	ea 81       	ldd	r30, Y+2	; 0x02
    3eec:	fb 81       	ldd	r31, Y+3	; 0x03
    3eee:	86 85       	ldd	r24, Z+14	; 0x0e
    3ef0:	97 85       	ldd	r25, Z+15	; 0x0f
    3ef2:	9b 83       	std	Y+3, r25	; 0x03
    3ef4:	8a 83       	std	Y+2, r24	; 0x02
            OS_EXIT_CRITICAL();
    3ef6:	89 81       	ldd	r24, Y+1	; 0x01
    3ef8:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    3efc:	ea 81       	ldd	r30, Y+2	; 0x02
    3efe:	fb 81       	ldd	r31, Y+3	; 0x03
    3f00:	80 8d       	ldd	r24, Z+24	; 0x18
    3f02:	8a 30       	cpi	r24, 0x0A	; 10
    3f04:	09 f0       	breq	.+2      	; 0x3f08 <OSTmr_Task+0x5aa>
    3f06:	98 cf       	rjmp	.-208    	; 0x3e38 <OSTmr_Task+0x4da>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    3f08:	0f 90       	pop	r0
    3f0a:	0f 90       	pop	r0
    3f0c:	0f 90       	pop	r0
    3f0e:	cf 91       	pop	r28
    3f10:	df 91       	pop	r29
    3f12:	08 95       	ret
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    3f14:	df 93       	push	r29
    3f16:	cf 93       	push	r28
    3f18:	cd b7       	in	r28, 0x3d	; 61
    3f1a:	de b7       	in	r29, 0x3e	; 62
    return (OS_VERSION);
    3f1c:	8e e1       	ldi	r24, 0x1E	; 30
    3f1e:	91 e0       	ldi	r25, 0x01	; 1
}
    3f20:	cf 91       	pop	r28
    3f22:	df 91       	pop	r29
    3f24:	08 95       	ret
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    3f26:	df 93       	push	r29
    3f28:	cf 93       	push	r28
    3f2a:	cd b7       	in	r28, 0x3d	; 61
    3f2c:	de b7       	in	r29, 0x3e	; 62
    3f2e:	2b 97       	sbiw	r28, 0x0b	; 11
    3f30:	0f b6       	in	r0, 0x3f	; 63
    3f32:	f8 94       	cli
    3f34:	de bf       	out	0x3e, r29	; 62
    3f36:	0f be       	out	0x3f, r0	; 63
    3f38:	cd bf       	out	0x3d, r28	; 61
    3f3a:	9f 83       	std	Y+7, r25	; 0x07
    3f3c:	8e 83       	std	Y+6, r24	; 0x06
    3f3e:	79 87       	std	Y+9, r23	; 0x09
    3f40:	68 87       	std	Y+8, r22	; 0x08
    3f42:	4a 87       	std	Y+10, r20	; 0x0a
    3f44:	2b 87       	std	Y+11, r18	; 0x0b
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    3f46:	ee 81       	ldd	r30, Y+6	; 0x06
    3f48:	ff 81       	ldd	r31, Y+7	; 0x07
    3f4a:	85 81       	ldd	r24, Z+5	; 0x05
    3f4c:	88 2f       	mov	r24, r24
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	fc 01       	movw	r30, r24
    3f52:	e0 56       	subi	r30, 0x60	; 96
    3f54:	fc 4f       	sbci	r31, 0xFC	; 252
    3f56:	80 81       	ld	r24, Z
    3f58:	8b 83       	std	Y+3, r24	; 0x03
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    3f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5c:	28 2f       	mov	r18, r24
    3f5e:	30 e0       	ldi	r19, 0x00	; 0
    3f60:	8e 81       	ldd	r24, Y+6	; 0x06
    3f62:	9f 81       	ldd	r25, Y+7	; 0x07
    3f64:	82 0f       	add	r24, r18
    3f66:	93 1f       	adc	r25, r19
    3f68:	fc 01       	movw	r30, r24
    3f6a:	36 96       	adiw	r30, 0x06	; 6
    3f6c:	80 81       	ld	r24, Z
    3f6e:	88 2f       	mov	r24, r24
    3f70:	90 e0       	ldi	r25, 0x00	; 0
    3f72:	fc 01       	movw	r30, r24
    3f74:	e0 56       	subi	r30, 0x60	; 96
    3f76:	fc 4f       	sbci	r31, 0xFC	; 252
    3f78:	80 81       	ld	r24, Z
    3f7a:	8a 83       	std	Y+2, r24	; 0x02
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    3f7c:	8b 81       	ldd	r24, Y+3	; 0x03
    3f7e:	98 2f       	mov	r25, r24
    3f80:	99 0f       	add	r25, r25
    3f82:	99 0f       	add	r25, r25
    3f84:	99 0f       	add	r25, r25
    3f86:	8a 81       	ldd	r24, Y+2	; 0x02
    3f88:	89 0f       	add	r24, r25
    3f8a:	89 83       	std	Y+1, r24	; 0x01
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    3f8c:	89 81       	ldd	r24, Y+1	; 0x01
    3f8e:	88 2f       	mov	r24, r24
    3f90:	90 e0       	ldi	r25, 0x00	; 0
    3f92:	88 0f       	add	r24, r24
    3f94:	99 1f       	adc	r25, r25
    3f96:	fc 01       	movw	r30, r24
    3f98:	e0 51       	subi	r30, 0x10	; 16
    3f9a:	f4 4f       	sbci	r31, 0xF4	; 244
    3f9c:	80 81       	ld	r24, Z
    3f9e:	91 81       	ldd	r25, Z+1	; 0x01
    3fa0:	9d 83       	std	Y+5, r25	; 0x05
    3fa2:	8c 83       	std	Y+4, r24	; 0x04
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    3fa4:	ec 81       	ldd	r30, Y+4	; 0x04
    3fa6:	fd 81       	ldd	r31, Y+5	; 0x05
    3fa8:	15 8a       	std	Z+21, r1	; 0x15
    3faa:	14 8a       	std	Z+20, r1	; 0x14
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    3fac:	ec 81       	ldd	r30, Y+4	; 0x04
    3fae:	fd 81       	ldd	r31, Y+5	; 0x05
    3fb0:	86 89       	ldd	r24, Z+22	; 0x16
    3fb2:	98 2f       	mov	r25, r24
    3fb4:	8a 85       	ldd	r24, Y+10	; 0x0a
    3fb6:	80 95       	com	r24
    3fb8:	89 23       	and	r24, r25
    3fba:	ec 81       	ldd	r30, Y+4	; 0x04
    3fbc:	fd 81       	ldd	r31, Y+5	; 0x05
    3fbe:	86 8b       	std	Z+22, r24	; 0x16
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    3fc0:	ec 81       	ldd	r30, Y+4	; 0x04
    3fc2:	fd 81       	ldd	r31, Y+5	; 0x05
    3fc4:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fc6:	87 8b       	std	Z+23, r24	; 0x17
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    3fc8:	ec 81       	ldd	r30, Y+4	; 0x04
    3fca:	fd 81       	ldd	r31, Y+5	; 0x05
    3fcc:	86 89       	ldd	r24, Z+22	; 0x16
    3fce:	88 2f       	mov	r24, r24
    3fd0:	90 e0       	ldi	r25, 0x00	; 0
    3fd2:	88 70       	andi	r24, 0x08	; 8
    3fd4:	90 70       	andi	r25, 0x00	; 0
    3fd6:	00 97       	sbiw	r24, 0x00	; 0
    3fd8:	d1 f4       	brne	.+52     	; 0x400e <OSTmr_Task+0x6b0>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    3fda:	ec 81       	ldd	r30, Y+4	; 0x04
    3fdc:	fd 81       	ldd	r31, Y+5	; 0x05
    3fde:	94 8d       	ldd	r25, Z+28	; 0x1c
    3fe0:	80 91 98 07 	lds	r24, 0x0798
    3fe4:	89 2b       	or	r24, r25
    3fe6:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    3fea:	8b 81       	ldd	r24, Y+3	; 0x03
    3fec:	28 2f       	mov	r18, r24
    3fee:	30 e0       	ldi	r19, 0x00	; 0
    3ff0:	8b 81       	ldd	r24, Y+3	; 0x03
    3ff2:	88 2f       	mov	r24, r24
    3ff4:	90 e0       	ldi	r25, 0x00	; 0
    3ff6:	fc 01       	movw	r30, r24
    3ff8:	e7 56       	subi	r30, 0x67	; 103
    3ffa:	f8 4f       	sbci	r31, 0xF8	; 248
    3ffc:	90 81       	ld	r25, Z
    3ffe:	ec 81       	ldd	r30, Y+4	; 0x04
    4000:	fd 81       	ldd	r31, Y+5	; 0x05
    4002:	83 8d       	ldd	r24, Z+27	; 0x1b
    4004:	89 2b       	or	r24, r25
    4006:	f9 01       	movw	r30, r18
    4008:	e7 56       	subi	r30, 0x67	; 103
    400a:	f8 4f       	sbci	r31, 0xF8	; 248
    400c:	80 83       	st	Z, r24
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    400e:	8c 81       	ldd	r24, Y+4	; 0x04
    4010:	9d 81       	ldd	r25, Y+5	; 0x05
    4012:	2e 81       	ldd	r18, Y+6	; 0x06
    4014:	3f 81       	ldd	r19, Y+7	; 0x07
    4016:	b9 01       	movw	r22, r18
    4018:	0e 94 8d 20 	call	0x411a	; 0x411a <OSTmr_Task+0x7bc>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    }
#endif

    return (prio);
    401c:	89 81       	ldd	r24, Y+1	; 0x01
}
    401e:	2b 96       	adiw	r28, 0x0b	; 11
    4020:	0f b6       	in	r0, 0x3f	; 63
    4022:	f8 94       	cli
    4024:	de bf       	out	0x3e, r29	; 62
    4026:	0f be       	out	0x3f, r0	; 63
    4028:	cd bf       	out	0x3d, r28	; 61
    402a:	cf 91       	pop	r28
    402c:	df 91       	pop	r29
    402e:	08 95       	ret
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4030:	df 93       	push	r29
    4032:	cf 93       	push	r28
    4034:	00 d0       	rcall	.+0      	; 0x4036 <OSTmr_Task+0x6d8>
    4036:	cd b7       	in	r28, 0x3d	; 61
    4038:	de b7       	in	r29, 0x3e	; 62
    403a:	9b 83       	std	Y+3, r25	; 0x03
    403c:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    403e:	e0 91 4d 08 	lds	r30, 0x084D
    4042:	f0 91 4e 08 	lds	r31, 0x084E
    4046:	8a 81       	ldd	r24, Y+2	; 0x02
    4048:	9b 81       	ldd	r25, Y+3	; 0x03
    404a:	93 8b       	std	Z+19, r25	; 0x13
    404c:	82 8b       	std	Z+18, r24	; 0x12

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    404e:	e0 91 4d 08 	lds	r30, 0x084D
    4052:	f0 91 4e 08 	lds	r31, 0x084E
    4056:	82 8d       	ldd	r24, Z+26	; 0x1a
    4058:	48 2f       	mov	r20, r24
    405a:	50 e0       	ldi	r21, 0x00	; 0
    405c:	e0 91 4d 08 	lds	r30, 0x084D
    4060:	f0 91 4e 08 	lds	r31, 0x084E
    4064:	82 8d       	ldd	r24, Z+26	; 0x1a
    4066:	28 2f       	mov	r18, r24
    4068:	30 e0       	ldi	r19, 0x00	; 0
    406a:	8a 81       	ldd	r24, Y+2	; 0x02
    406c:	9b 81       	ldd	r25, Y+3	; 0x03
    406e:	82 0f       	add	r24, r18
    4070:	93 1f       	adc	r25, r19
    4072:	fc 01       	movw	r30, r24
    4074:	36 96       	adiw	r30, 0x06	; 6
    4076:	90 81       	ld	r25, Z
    4078:	e0 91 4d 08 	lds	r30, 0x084D
    407c:	f0 91 4e 08 	lds	r31, 0x084E
    4080:	83 8d       	ldd	r24, Z+27	; 0x1b
    4082:	29 2f       	mov	r18, r25
    4084:	28 2b       	or	r18, r24
    4086:	8a 81       	ldd	r24, Y+2	; 0x02
    4088:	9b 81       	ldd	r25, Y+3	; 0x03
    408a:	84 0f       	add	r24, r20
    408c:	95 1f       	adc	r25, r21
    408e:	fc 01       	movw	r30, r24
    4090:	36 96       	adiw	r30, 0x06	; 6
    4092:	20 83       	st	Z, r18
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    4094:	ea 81       	ldd	r30, Y+2	; 0x02
    4096:	fb 81       	ldd	r31, Y+3	; 0x03
    4098:	95 81       	ldd	r25, Z+5	; 0x05
    409a:	e0 91 4d 08 	lds	r30, 0x084D
    409e:	f0 91 4e 08 	lds	r31, 0x084E
    40a2:	84 8d       	ldd	r24, Z+28	; 0x1c
    40a4:	89 2b       	or	r24, r25
    40a6:	ea 81       	ldd	r30, Y+2	; 0x02
    40a8:	fb 81       	ldd	r31, Y+3	; 0x03
    40aa:	85 83       	std	Z+5, r24	; 0x05

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    40ac:	e0 91 4d 08 	lds	r30, 0x084D
    40b0:	f0 91 4e 08 	lds	r31, 0x084E
    40b4:	82 8d       	ldd	r24, Z+26	; 0x1a
    40b6:	89 83       	std	Y+1, r24	; 0x01
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    40b8:	89 81       	ldd	r24, Y+1	; 0x01
    40ba:	28 2f       	mov	r18, r24
    40bc:	30 e0       	ldi	r19, 0x00	; 0
    40be:	89 81       	ldd	r24, Y+1	; 0x01
    40c0:	88 2f       	mov	r24, r24
    40c2:	90 e0       	ldi	r25, 0x00	; 0
    40c4:	fc 01       	movw	r30, r24
    40c6:	e7 56       	subi	r30, 0x67	; 103
    40c8:	f8 4f       	sbci	r31, 0xF8	; 248
    40ca:	80 81       	ld	r24, Z
    40cc:	98 2f       	mov	r25, r24
    40ce:	e0 91 4d 08 	lds	r30, 0x084D
    40d2:	f0 91 4e 08 	lds	r31, 0x084E
    40d6:	83 8d       	ldd	r24, Z+27	; 0x1b
    40d8:	80 95       	com	r24
    40da:	89 23       	and	r24, r25
    40dc:	f9 01       	movw	r30, r18
    40de:	e7 56       	subi	r30, 0x67	; 103
    40e0:	f8 4f       	sbci	r31, 0xF8	; 248
    40e2:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0) {
    40e4:	89 81       	ldd	r24, Y+1	; 0x01
    40e6:	88 2f       	mov	r24, r24
    40e8:	90 e0       	ldi	r25, 0x00	; 0
    40ea:	fc 01       	movw	r30, r24
    40ec:	e7 56       	subi	r30, 0x67	; 103
    40ee:	f8 4f       	sbci	r31, 0xF8	; 248
    40f0:	80 81       	ld	r24, Z
    40f2:	88 23       	and	r24, r24
    40f4:	61 f4       	brne	.+24     	; 0x410e <OSTmr_Task+0x7b0>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    40f6:	e0 91 4d 08 	lds	r30, 0x084D
    40fa:	f0 91 4e 08 	lds	r31, 0x084E
    40fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    4100:	98 2f       	mov	r25, r24
    4102:	90 95       	com	r25
    4104:	80 91 98 07 	lds	r24, 0x0798
    4108:	89 23       	and	r24, r25
    410a:	80 93 98 07 	sts	0x0798, r24
    }
}
    410e:	0f 90       	pop	r0
    4110:	0f 90       	pop	r0
    4112:	0f 90       	pop	r0
    4114:	cf 91       	pop	r28
    4116:	df 91       	pop	r29
    4118:	08 95       	ret
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    411a:	df 93       	push	r29
    411c:	cf 93       	push	r28
    411e:	00 d0       	rcall	.+0      	; 0x4120 <OSTmr_Task+0x7c2>
    4120:	0f 92       	push	r0
    4122:	0f 92       	push	r0
    4124:	cd b7       	in	r28, 0x3d	; 61
    4126:	de b7       	in	r29, 0x3e	; 62
    4128:	9b 83       	std	Y+3, r25	; 0x03
    412a:	8a 83       	std	Y+2, r24	; 0x02
    412c:	7d 83       	std	Y+5, r23	; 0x05
    412e:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    4130:	ea 81       	ldd	r30, Y+2	; 0x02
    4132:	fb 81       	ldd	r31, Y+3	; 0x03
    4134:	82 8d       	ldd	r24, Z+26	; 0x1a
    4136:	89 83       	std	Y+1, r24	; 0x01
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	48 2f       	mov	r20, r24
    413c:	50 e0       	ldi	r21, 0x00	; 0
    413e:	89 81       	ldd	r24, Y+1	; 0x01
    4140:	28 2f       	mov	r18, r24
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	8c 81       	ldd	r24, Y+4	; 0x04
    4146:	9d 81       	ldd	r25, Y+5	; 0x05
    4148:	82 0f       	add	r24, r18
    414a:	93 1f       	adc	r25, r19
    414c:	fc 01       	movw	r30, r24
    414e:	36 96       	adiw	r30, 0x06	; 6
    4150:	80 81       	ld	r24, Z
    4152:	98 2f       	mov	r25, r24
    4154:	ea 81       	ldd	r30, Y+2	; 0x02
    4156:	fb 81       	ldd	r31, Y+3	; 0x03
    4158:	83 8d       	ldd	r24, Z+27	; 0x1b
    415a:	80 95       	com	r24
    415c:	89 23       	and	r24, r25
    415e:	28 2f       	mov	r18, r24
    4160:	8c 81       	ldd	r24, Y+4	; 0x04
    4162:	9d 81       	ldd	r25, Y+5	; 0x05
    4164:	84 0f       	add	r24, r20
    4166:	95 1f       	adc	r25, r21
    4168:	fc 01       	movw	r30, r24
    416a:	36 96       	adiw	r30, 0x06	; 6
    416c:	20 83       	st	Z, r18
    if (pevent->OSEventTbl[y] == 0) {
    416e:	89 81       	ldd	r24, Y+1	; 0x01
    4170:	28 2f       	mov	r18, r24
    4172:	30 e0       	ldi	r19, 0x00	; 0
    4174:	8c 81       	ldd	r24, Y+4	; 0x04
    4176:	9d 81       	ldd	r25, Y+5	; 0x05
    4178:	82 0f       	add	r24, r18
    417a:	93 1f       	adc	r25, r19
    417c:	fc 01       	movw	r30, r24
    417e:	36 96       	adiw	r30, 0x06	; 6
    4180:	80 81       	ld	r24, Z
    4182:	88 23       	and	r24, r24
    4184:	61 f4       	brne	.+24     	; 0x419e <OSTmr_Task+0x840>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    4186:	ec 81       	ldd	r30, Y+4	; 0x04
    4188:	fd 81       	ldd	r31, Y+5	; 0x05
    418a:	85 81       	ldd	r24, Z+5	; 0x05
    418c:	98 2f       	mov	r25, r24
    418e:	ea 81       	ldd	r30, Y+2	; 0x02
    4190:	fb 81       	ldd	r31, Y+3	; 0x03
    4192:	84 8d       	ldd	r24, Z+28	; 0x1c
    4194:	80 95       	com	r24
    4196:	89 23       	and	r24, r25
    4198:	ec 81       	ldd	r30, Y+4	; 0x04
    419a:	fd 81       	ldd	r31, Y+5	; 0x05
    419c:	85 83       	std	Z+5, r24	; 0x05
    }
}
    419e:	0f 90       	pop	r0
    41a0:	0f 90       	pop	r0
    41a2:	0f 90       	pop	r0
    41a4:	0f 90       	pop	r0
    41a6:	0f 90       	pop	r0
    41a8:	cf 91       	pop	r28
    41aa:	df 91       	pop	r29
    41ac:	08 95       	ret
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    41ae:	df 93       	push	r29
    41b0:	cf 93       	push	r28
    41b2:	00 d0       	rcall	.+0      	; 0x41b4 <OSTmr_Task+0x856>
    41b4:	0f 92       	push	r0
    41b6:	0f 92       	push	r0
    41b8:	cd b7       	in	r28, 0x3d	; 61
    41ba:	de b7       	in	r29, 0x3e	; 62
    41bc:	9d 83       	std	Y+5, r25	; 0x05
    41be:	8c 83       	std	Y+4, r24	; 0x04
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    41c0:	ec 81       	ldd	r30, Y+4	; 0x04
    41c2:	fd 81       	ldd	r31, Y+5	; 0x05
    41c4:	15 82       	std	Z+5, r1	; 0x05
    ptbl               = &pevent->OSEventTbl[0];
    41c6:	8c 81       	ldd	r24, Y+4	; 0x04
    41c8:	9d 81       	ldd	r25, Y+5	; 0x05
    41ca:	06 96       	adiw	r24, 0x06	; 6
    41cc:	9b 83       	std	Y+3, r25	; 0x03
    41ce:	8a 83       	std	Y+2, r24	; 0x02

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    41d0:	19 82       	std	Y+1, r1	; 0x01
    41d2:	0b c0       	rjmp	.+22     	; 0x41ea <OSTmr_Task+0x88c>
        *ptbl++ = 0;
    41d4:	ea 81       	ldd	r30, Y+2	; 0x02
    41d6:	fb 81       	ldd	r31, Y+3	; 0x03
    41d8:	10 82       	st	Z, r1
    41da:	8a 81       	ldd	r24, Y+2	; 0x02
    41dc:	9b 81       	ldd	r25, Y+3	; 0x03
    41de:	01 96       	adiw	r24, 0x01	; 1
    41e0:	9b 83       	std	Y+3, r25	; 0x03
    41e2:	8a 83       	std	Y+2, r24	; 0x02


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    41e4:	89 81       	ldd	r24, Y+1	; 0x01
    41e6:	8f 5f       	subi	r24, 0xFF	; 255
    41e8:	89 83       	std	Y+1, r24	; 0x01
    41ea:	89 81       	ldd	r24, Y+1	; 0x01
    41ec:	82 30       	cpi	r24, 0x02	; 2
    41ee:	90 f3       	brcs	.-28     	; 0x41d4 <OSTmr_Task+0x876>
        *ptbl++ = 0;
    }
}
    41f0:	0f 90       	pop	r0
    41f2:	0f 90       	pop	r0
    41f4:	0f 90       	pop	r0
    41f6:	0f 90       	pop	r0
    41f8:	0f 90       	pop	r0
    41fa:	cf 91       	pop	r28
    41fc:	df 91       	pop	r29
    41fe:	08 95       	ret

00004200 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    4200:	df 93       	push	r29
    4202:	cf 93       	push	r28
    4204:	00 d0       	rcall	.+0      	; 0x4206 <OS_InitEventList+0x6>
    4206:	00 d0       	rcall	.+0      	; 0x4208 <OS_InitEventList+0x8>
    4208:	cd b7       	in	r28, 0x3d	; 61
    420a:	de b7       	in	r29, 0x3e	; 62
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    420c:	88 e0       	ldi	r24, 0x08	; 8
    420e:	99 e0       	ldi	r25, 0x09	; 9
    4210:	60 ef       	ldi	r22, 0xF0	; 240
    4212:	70 e0       	ldi	r23, 0x00	; 0
    4214:	0e 94 50 22 	call	0x44a0	; 0x44a0 <OS_InitTCBList+0xae>
    pevent1 = &OSEventTbl[0];
    4218:	88 e0       	ldi	r24, 0x08	; 8
    421a:	99 e0       	ldi	r25, 0x09	; 9
    421c:	9c 83       	std	Y+4, r25	; 0x04
    421e:	8b 83       	std	Y+3, r24	; 0x03
    pevent2 = &OSEventTbl[1];
    4220:	80 e2       	ldi	r24, 0x20	; 32
    4222:	99 e0       	ldi	r25, 0x09	; 9
    4224:	9a 83       	std	Y+2, r25	; 0x02
    4226:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4228:	1e 82       	std	Y+6, r1	; 0x06
    422a:	1d 82       	std	Y+5, r1	; 0x05
    422c:	1f c0       	rjmp	.+62     	; 0x426c <OS_InitEventList+0x6c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    422e:	eb 81       	ldd	r30, Y+3	; 0x03
    4230:	fc 81       	ldd	r31, Y+4	; 0x04
    4232:	10 82       	st	Z, r1
        pevent1->OSEventPtr     = pevent2;
    4234:	eb 81       	ldd	r30, Y+3	; 0x03
    4236:	fc 81       	ldd	r31, Y+4	; 0x04
    4238:	89 81       	ldd	r24, Y+1	; 0x01
    423a:	9a 81       	ldd	r25, Y+2	; 0x02
    423c:	92 83       	std	Z+2, r25	; 0x02
    423e:	81 83       	std	Z+1, r24	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    4240:	eb 81       	ldd	r30, Y+3	; 0x03
    4242:	fc 81       	ldd	r31, Y+4	; 0x04
    4244:	8f e3       	ldi	r24, 0x3F	; 63
    4246:	80 87       	std	Z+8, r24	; 0x08
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    4248:	eb 81       	ldd	r30, Y+3	; 0x03
    424a:	fc 81       	ldd	r31, Y+4	; 0x04
    424c:	11 86       	std	Z+9, r1	; 0x09
#endif
        pevent1++;
    424e:	8b 81       	ldd	r24, Y+3	; 0x03
    4250:	9c 81       	ldd	r25, Y+4	; 0x04
    4252:	48 96       	adiw	r24, 0x18	; 24
    4254:	9c 83       	std	Y+4, r25	; 0x04
    4256:	8b 83       	std	Y+3, r24	; 0x03
        pevent2++;
    4258:	89 81       	ldd	r24, Y+1	; 0x01
    425a:	9a 81       	ldd	r25, Y+2	; 0x02
    425c:	48 96       	adiw	r24, 0x18	; 24
    425e:	9a 83       	std	Y+2, r25	; 0x02
    4260:	89 83       	std	Y+1, r24	; 0x01


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    4262:	8d 81       	ldd	r24, Y+5	; 0x05
    4264:	9e 81       	ldd	r25, Y+6	; 0x06
    4266:	01 96       	adiw	r24, 0x01	; 1
    4268:	9e 83       	std	Y+6, r25	; 0x06
    426a:	8d 83       	std	Y+5, r24	; 0x05
    426c:	8d 81       	ldd	r24, Y+5	; 0x05
    426e:	9e 81       	ldd	r25, Y+6	; 0x06
    4270:	89 30       	cpi	r24, 0x09	; 9
    4272:	91 05       	cpc	r25, r1
    4274:	e0 f2       	brcs	.-72     	; 0x422e <OS_InitEventList+0x2e>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    4276:	eb 81       	ldd	r30, Y+3	; 0x03
    4278:	fc 81       	ldd	r31, Y+4	; 0x04
    427a:	10 82       	st	Z, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    427c:	eb 81       	ldd	r30, Y+3	; 0x03
    427e:	fc 81       	ldd	r31, Y+4	; 0x04
    4280:	12 82       	std	Z+2, r1	; 0x02
    4282:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    4284:	eb 81       	ldd	r30, Y+3	; 0x03
    4286:	fc 81       	ldd	r31, Y+4	; 0x04
    4288:	8f e3       	ldi	r24, 0x3F	; 63
    428a:	80 87       	std	Z+8, r24	; 0x08
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    428c:	eb 81       	ldd	r30, Y+3	; 0x03
    428e:	fc 81       	ldd	r31, Y+4	; 0x04
    4290:	11 86       	std	Z+9, r1	; 0x09
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    4292:	88 e0       	ldi	r24, 0x08	; 8
    4294:	99 e0       	ldi	r25, 0x09	; 9
    4296:	90 93 4b 08 	sts	0x084B, r25
    429a:	80 93 4a 08 	sts	0x084A, r24
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    429e:	26 96       	adiw	r28, 0x06	; 6
    42a0:	0f b6       	in	r0, 0x3f	; 63
    42a2:	f8 94       	cli
    42a4:	de bf       	out	0x3e, r29	; 62
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	cd bf       	out	0x3d, r28	; 61
    42aa:	cf 91       	pop	r28
    42ac:	df 91       	pop	r29
    42ae:	08 95       	ret

000042b0 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    42b0:	df 93       	push	r29
    42b2:	cf 93       	push	r28
    42b4:	cd b7       	in	r28, 0x3d	; 61
    42b6:	de b7       	in	r29, 0x3e	; 62
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    42b8:	10 92 53 08 	sts	0x0853, r1
    42bc:	10 92 54 08 	sts	0x0854, r1
    42c0:	10 92 55 08 	sts	0x0855, r1
    42c4:	10 92 56 08 	sts	0x0856, r1
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    42c8:	10 92 4c 08 	sts	0x084C, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    42cc:	10 92 0f 05 	sts	0x050F, r1

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    42d0:	10 92 95 07 	sts	0x0795, r1

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    42d4:	10 92 12 05 	sts	0x0512, r1

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    42d8:	10 92 8d 07 	sts	0x078D, r1
    42dc:	10 92 8e 07 	sts	0x078E, r1
    42e0:	10 92 8f 07 	sts	0x078F, r1
    42e4:	10 92 90 07 	sts	0x0790, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    42e8:	10 92 13 05 	sts	0x0513, r1
    42ec:	10 92 14 05 	sts	0x0514, r1
    42f0:	10 92 15 05 	sts	0x0515, r1
    42f4:	10 92 16 05 	sts	0x0516, r1
#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
#endif
}
    42f8:	cf 91       	pop	r28
    42fa:	df 91       	pop	r29
    42fc:	08 95       	ret

000042fe <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    42fe:	df 93       	push	r29
    4300:	cf 93       	push	r28
    4302:	00 d0       	rcall	.+0      	; 0x4304 <OS_InitRdyList+0x6>
    4304:	cd b7       	in	r28, 0x3d	; 61
    4306:	de b7       	in	r29, 0x3e	; 62
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    4308:	10 92 98 07 	sts	0x0798, r1
    prdytbl       = &OSRdyTbl[0];
    430c:	89 e9       	ldi	r24, 0x99	; 153
    430e:	97 e0       	ldi	r25, 0x07	; 7
    4310:	9a 83       	std	Y+2, r25	; 0x02
    4312:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    4314:	1b 82       	std	Y+3, r1	; 0x03
    4316:	0b c0       	rjmp	.+22     	; 0x432e <OS_InitRdyList+0x30>
        *prdytbl++ = 0;
    4318:	e9 81       	ldd	r30, Y+1	; 0x01
    431a:	fa 81       	ldd	r31, Y+2	; 0x02
    431c:	10 82       	st	Z, r1
    431e:	89 81       	ldd	r24, Y+1	; 0x01
    4320:	9a 81       	ldd	r25, Y+2	; 0x02
    4322:	01 96       	adiw	r24, 0x01	; 1
    4324:	9a 83       	std	Y+2, r25	; 0x02
    4326:	89 83       	std	Y+1, r24	; 0x01
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    4328:	8b 81       	ldd	r24, Y+3	; 0x03
    432a:	8f 5f       	subi	r24, 0xFF	; 255
    432c:	8b 83       	std	Y+3, r24	; 0x03
    432e:	8b 81       	ldd	r24, Y+3	; 0x03
    4330:	82 30       	cpi	r24, 0x02	; 2
    4332:	90 f3       	brcs	.-28     	; 0x4318 <OS_InitRdyList+0x1a>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    4334:	10 92 8a 07 	sts	0x078A, r1
    OSPrioHighRdy = 0;
    4338:	10 92 19 05 	sts	0x0519, r1

    OSTCBHighRdy  = (OS_TCB *)0;
    433c:	10 92 97 07 	sts	0x0797, r1
    4340:	10 92 96 07 	sts	0x0796, r1
    OSTCBCur      = (OS_TCB *)0;
    4344:	10 92 4e 08 	sts	0x084E, r1
    4348:	10 92 4d 08 	sts	0x084D, r1
}
    434c:	0f 90       	pop	r0
    434e:	0f 90       	pop	r0
    4350:	0f 90       	pop	r0
    4352:	cf 91       	pop	r28
    4354:	df 91       	pop	r29
    4356:	08 95       	ret

00004358 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    4358:	8f 92       	push	r8
    435a:	9f 92       	push	r9
    435c:	af 92       	push	r10
    435e:	bf 92       	push	r11
    4360:	cf 92       	push	r12
    4362:	df 92       	push	r13
    4364:	ef 92       	push	r14
    4366:	ff 92       	push	r15
    4368:	0f 93       	push	r16
    436a:	1f 93       	push	r17
    436c:	df 93       	push	r29
    436e:	cf 93       	push	r28
    4370:	0f 92       	push	r0
    4372:	cd b7       	in	r28, 0x3d	; 61
    4374:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    4376:	0f 92       	push	r0
    4378:	0f 92       	push	r0
    437a:	ed b7       	in	r30, 0x3d	; 61
    437c:	fe b7       	in	r31, 0x3e	; 62
    437e:	31 96       	adiw	r30, 0x01	; 1
    4380:	2b e6       	ldi	r18, 0x6B	; 107
    4382:	33 e2       	ldi	r19, 0x23	; 35
    4384:	47 e0       	ldi	r20, 0x07	; 7
    4386:	59 e0       	ldi	r21, 0x09	; 9
    4388:	a9 e5       	ldi	r26, 0x59	; 89
    438a:	b8 e0       	ldi	r27, 0x08	; 8
    438c:	83 e0       	ldi	r24, 0x03	; 3
    438e:	90 e0       	ldi	r25, 0x00	; 0
    4390:	91 83       	std	Z+1, r25	; 0x01
    4392:	80 83       	st	Z, r24
    4394:	c9 01       	movw	r24, r18
    4396:	60 e0       	ldi	r22, 0x00	; 0
    4398:	70 e0       	ldi	r23, 0x00	; 0
    439a:	2a e0       	ldi	r18, 0x0A	; 10
    439c:	0f ef       	ldi	r16, 0xFF	; 255
    439e:	1f ef       	ldi	r17, 0xFF	; 255
    43a0:	7d 01       	movw	r14, r26
    43a2:	0f 2e       	mov	r0, r31
    43a4:	ff ea       	ldi	r31, 0xAF	; 175
    43a6:	af 2e       	mov	r10, r31
    43a8:	f0 e0       	ldi	r31, 0x00	; 0
    43aa:	bf 2e       	mov	r11, r31
    43ac:	f0 e0       	ldi	r31, 0x00	; 0
    43ae:	cf 2e       	mov	r12, r31
    43b0:	f0 e0       	ldi	r31, 0x00	; 0
    43b2:	df 2e       	mov	r13, r31
    43b4:	f0 2d       	mov	r31, r0
    43b6:	88 24       	eor	r8, r8
    43b8:	99 24       	eor	r9, r9
    43ba:	0e 94 c2 28 	call	0x5184	; 0x5184 <OS_SchedNew+0xb98>
    43be:	0f 90       	pop	r0
    43c0:	0f 90       	pop	r0
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    43c2:	20 ea       	ldi	r18, 0xA0	; 160
    43c4:	34 e0       	ldi	r19, 0x04	; 4
    43c6:	8a e0       	ldi	r24, 0x0A	; 10
    43c8:	b9 01       	movw	r22, r18
    43ca:	9e 01       	movw	r18, r28
    43cc:	2f 5f       	subi	r18, 0xFF	; 255
    43ce:	3f 4f       	sbci	r19, 0xFF	; 255
    43d0:	a9 01       	movw	r20, r18
    43d2:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <OS_SchedNew+0xdbc>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    43d6:	0f 90       	pop	r0
    43d8:	cf 91       	pop	r28
    43da:	df 91       	pop	r29
    43dc:	1f 91       	pop	r17
    43de:	0f 91       	pop	r16
    43e0:	ff 90       	pop	r15
    43e2:	ef 90       	pop	r14
    43e4:	df 90       	pop	r13
    43e6:	cf 90       	pop	r12
    43e8:	bf 90       	pop	r11
    43ea:	af 90       	pop	r10
    43ec:	9f 90       	pop	r9
    43ee:	8f 90       	pop	r8
    43f0:	08 95       	ret

000043f2 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    43f2:	df 93       	push	r29
    43f4:	cf 93       	push	r28
    43f6:	00 d0       	rcall	.+0      	; 0x43f8 <OS_InitTCBList+0x6>
    43f8:	0f 92       	push	r0
    43fa:	0f 92       	push	r0
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    4400:	88 ef       	ldi	r24, 0xF8	; 248
    4402:	99 e0       	ldi	r25, 0x09	; 9
    4404:	68 ef       	ldi	r22, 0xF8	; 248
    4406:	71 e0       	ldi	r23, 0x01	; 1
    4408:	0e 94 50 22 	call	0x44a0	; 0x44a0 <OS_InitTCBList+0xae>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    440c:	80 ef       	ldi	r24, 0xF0	; 240
    440e:	9b e0       	ldi	r25, 0x0B	; 11
    4410:	66 e1       	ldi	r22, 0x16	; 22
    4412:	70 e0       	ldi	r23, 0x00	; 0
    4414:	0e 94 50 22 	call	0x44a0	; 0x44a0 <OS_InitTCBList+0xae>
    ptcb1 = &OSTCBTbl[0];
    4418:	88 ef       	ldi	r24, 0xF8	; 248
    441a:	99 e0       	ldi	r25, 0x09	; 9
    441c:	9c 83       	std	Y+4, r25	; 0x04
    441e:	8b 83       	std	Y+3, r24	; 0x03
    ptcb2 = &OSTCBTbl[1];
    4420:	87 e3       	ldi	r24, 0x37	; 55
    4422:	9a e0       	ldi	r25, 0x0A	; 10
    4424:	9a 83       	std	Y+2, r25	; 0x02
    4426:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    4428:	1d 82       	std	Y+5, r1	; 0x05
    442a:	1a c0       	rjmp	.+52     	; 0x4460 <OS_InitTCBList+0x6e>
        ptcb1->OSTCBNext = ptcb2;
    442c:	eb 81       	ldd	r30, Y+3	; 0x03
    442e:	fc 81       	ldd	r31, Y+4	; 0x04
    4430:	89 81       	ldd	r24, Y+1	; 0x01
    4432:	9a 81       	ldd	r25, Y+2	; 0x02
    4434:	97 87       	std	Z+15, r25	; 0x0f
    4436:	86 87       	std	Z+14, r24	; 0x0e
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    4438:	eb 81       	ldd	r30, Y+3	; 0x03
    443a:	fc 81       	ldd	r31, Y+4	; 0x04
    443c:	8f e3       	ldi	r24, 0x3F	; 63
    443e:	87 a7       	std	Z+47, r24	; 0x2f
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4440:	eb 81       	ldd	r30, Y+3	; 0x03
    4442:	fc 81       	ldd	r31, Y+4	; 0x04
    4444:	10 aa       	std	Z+48, r1	; 0x30
#endif
        ptcb1++;
    4446:	8b 81       	ldd	r24, Y+3	; 0x03
    4448:	9c 81       	ldd	r25, Y+4	; 0x04
    444a:	cf 96       	adiw	r24, 0x3f	; 63
    444c:	9c 83       	std	Y+4, r25	; 0x04
    444e:	8b 83       	std	Y+3, r24	; 0x03
        ptcb2++;
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	9a 81       	ldd	r25, Y+2	; 0x02
    4454:	cf 96       	adiw	r24, 0x3f	; 63
    4456:	9a 83       	std	Y+2, r25	; 0x02
    4458:	89 83       	std	Y+1, r24	; 0x01

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    445a:	8d 81       	ldd	r24, Y+5	; 0x05
    445c:	8f 5f       	subi	r24, 0xFF	; 255
    445e:	8d 83       	std	Y+5, r24	; 0x05
    4460:	8d 81       	ldd	r24, Y+5	; 0x05
    4462:	87 30       	cpi	r24, 0x07	; 7
    4464:	18 f3       	brcs	.-58     	; 0x442c <OS_InitTCBList+0x3a>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    4466:	eb 81       	ldd	r30, Y+3	; 0x03
    4468:	fc 81       	ldd	r31, Y+4	; 0x04
    446a:	17 86       	std	Z+15, r1	; 0x0f
    446c:	16 86       	std	Z+14, r1	; 0x0e
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    446e:	eb 81       	ldd	r30, Y+3	; 0x03
    4470:	fc 81       	ldd	r31, Y+4	; 0x04
    4472:	8f e3       	ldi	r24, 0x3F	; 63
    4474:	87 a7       	std	Z+47, r24	; 0x2f
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    4476:	eb 81       	ldd	r30, Y+3	; 0x03
    4478:	fc 81       	ldd	r31, Y+4	; 0x04
    447a:	10 aa       	std	Z+48, r1	; 0x30
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    447c:	10 92 8c 07 	sts	0x078C, r1
    4480:	10 92 8b 07 	sts	0x078B, r1
    OSTCBFreeList           = &OSTCBTbl[0];
    4484:	88 ef       	ldi	r24, 0xF8	; 248
    4486:	99 e0       	ldi	r25, 0x09	; 9
    4488:	90 93 94 07 	sts	0x0794, r25
    448c:	80 93 93 07 	sts	0x0793, r24
}
    4490:	0f 90       	pop	r0
    4492:	0f 90       	pop	r0
    4494:	0f 90       	pop	r0
    4496:	0f 90       	pop	r0
    4498:	0f 90       	pop	r0
    449a:	cf 91       	pop	r28
    449c:	df 91       	pop	r29
    449e:	08 95       	ret
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    44a0:	df 93       	push	r29
    44a2:	cf 93       	push	r28
    44a4:	00 d0       	rcall	.+0      	; 0x44a6 <OS_InitTCBList+0xb4>
    44a6:	0f 92       	push	r0
    44a8:	cd b7       	in	r28, 0x3d	; 61
    44aa:	de b7       	in	r29, 0x3e	; 62
    44ac:	9a 83       	std	Y+2, r25	; 0x02
    44ae:	89 83       	std	Y+1, r24	; 0x01
    44b0:	7c 83       	std	Y+4, r23	; 0x04
    44b2:	6b 83       	std	Y+3, r22	; 0x03
    44b4:	0d c0       	rjmp	.+26     	; 0x44d0 <OS_InitTCBList+0xde>
    while (size > 0) {
        *pdest++ = (INT8U)0;
    44b6:	e9 81       	ldd	r30, Y+1	; 0x01
    44b8:	fa 81       	ldd	r31, Y+2	; 0x02
    44ba:	10 82       	st	Z, r1
    44bc:	89 81       	ldd	r24, Y+1	; 0x01
    44be:	9a 81       	ldd	r25, Y+2	; 0x02
    44c0:	01 96       	adiw	r24, 0x01	; 1
    44c2:	9a 83       	std	Y+2, r25	; 0x02
    44c4:	89 83       	std	Y+1, r24	; 0x01
        size--;
    44c6:	8b 81       	ldd	r24, Y+3	; 0x03
    44c8:	9c 81       	ldd	r25, Y+4	; 0x04
    44ca:	01 97       	sbiw	r24, 0x01	; 1
    44cc:	9c 83       	std	Y+4, r25	; 0x04
    44ce:	8b 83       	std	Y+3, r24	; 0x03
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    44d0:	8b 81       	ldd	r24, Y+3	; 0x03
    44d2:	9c 81       	ldd	r25, Y+4	; 0x04
    44d4:	00 97       	sbiw	r24, 0x00	; 0
    44d6:	79 f7       	brne	.-34     	; 0x44b6 <OS_InitTCBList+0xc4>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    44d8:	0f 90       	pop	r0
    44da:	0f 90       	pop	r0
    44dc:	0f 90       	pop	r0
    44de:	0f 90       	pop	r0
    44e0:	cf 91       	pop	r28
    44e2:	df 91       	pop	r29
    44e4:	08 95       	ret
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    44e6:	df 93       	push	r29
    44e8:	cf 93       	push	r28
    44ea:	00 d0       	rcall	.+0      	; 0x44ec <OS_InitTCBList+0xfa>
    44ec:	00 d0       	rcall	.+0      	; 0x44ee <OS_InitTCBList+0xfc>
    44ee:	cd b7       	in	r28, 0x3d	; 61
    44f0:	de b7       	in	r29, 0x3e	; 62
    44f2:	9a 83       	std	Y+2, r25	; 0x02
    44f4:	89 83       	std	Y+1, r24	; 0x01
    44f6:	7c 83       	std	Y+4, r23	; 0x04
    44f8:	6b 83       	std	Y+3, r22	; 0x03
    44fa:	5e 83       	std	Y+6, r21	; 0x06
    44fc:	4d 83       	std	Y+5, r20	; 0x05
    44fe:	15 c0       	rjmp	.+42     	; 0x452a <OS_InitTCBList+0x138>
    while (size > 0) {
        *pdest++ = *psrc++;
    4500:	eb 81       	ldd	r30, Y+3	; 0x03
    4502:	fc 81       	ldd	r31, Y+4	; 0x04
    4504:	80 81       	ld	r24, Z
    4506:	e9 81       	ldd	r30, Y+1	; 0x01
    4508:	fa 81       	ldd	r31, Y+2	; 0x02
    450a:	80 83       	st	Z, r24
    450c:	89 81       	ldd	r24, Y+1	; 0x01
    450e:	9a 81       	ldd	r25, Y+2	; 0x02
    4510:	01 96       	adiw	r24, 0x01	; 1
    4512:	9a 83       	std	Y+2, r25	; 0x02
    4514:	89 83       	std	Y+1, r24	; 0x01
    4516:	8b 81       	ldd	r24, Y+3	; 0x03
    4518:	9c 81       	ldd	r25, Y+4	; 0x04
    451a:	01 96       	adiw	r24, 0x01	; 1
    451c:	9c 83       	std	Y+4, r25	; 0x04
    451e:	8b 83       	std	Y+3, r24	; 0x03
        size--;
    4520:	8d 81       	ldd	r24, Y+5	; 0x05
    4522:	9e 81       	ldd	r25, Y+6	; 0x06
    4524:	01 97       	sbiw	r24, 0x01	; 1
    4526:	9e 83       	std	Y+6, r25	; 0x06
    4528:	8d 83       	std	Y+5, r24	; 0x05
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    452a:	8d 81       	ldd	r24, Y+5	; 0x05
    452c:	9e 81       	ldd	r25, Y+6	; 0x06
    452e:	00 97       	sbiw	r24, 0x00	; 0
    4530:	39 f7       	brne	.-50     	; 0x4500 <OS_InitTCBList+0x10e>
        *pdest++ = *psrc++;
        size--;
    }
}
    4532:	26 96       	adiw	r28, 0x06	; 6
    4534:	0f b6       	in	r0, 0x3f	; 63
    4536:	f8 94       	cli
    4538:	de bf       	out	0x3e, r29	; 62
    453a:	0f be       	out	0x3f, r0	; 63
    453c:	cd bf       	out	0x3d, r28	; 61
    453e:	cf 91       	pop	r28
    4540:	df 91       	pop	r29
    4542:	08 95       	ret
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    4544:	df 93       	push	r29
    4546:	cf 93       	push	r28
    4548:	0f 92       	push	r0
    454a:	cd b7       	in	r28, 0x3d	; 61
    454c:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    454e:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    4550:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4554:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    4556:	80 91 4c 08 	lds	r24, 0x084C
    455a:	88 23       	and	r24, r24
    455c:	09 f0       	breq	.+2      	; 0x4560 <OS_InitTCBList+0x16e>
    455e:	3f c0       	rjmp	.+126    	; 0x45de <OS_InitTCBList+0x1ec>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    4560:	80 91 0f 05 	lds	r24, 0x050F
    4564:	88 23       	and	r24, r24
    4566:	d9 f5       	brne	.+118    	; 0x45de <OS_InitTCBList+0x1ec>
            OS_SchedNew();
    4568:	0e 94 f6 22 	call	0x45ec	; 0x45ec <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    456c:	90 91 19 05 	lds	r25, 0x0519
    4570:	80 91 8a 07 	lds	r24, 0x078A
    4574:	98 17       	cp	r25, r24
    4576:	99 f1       	breq	.+102    	; 0x45de <OS_InitTCBList+0x1ec>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    4578:	80 91 19 05 	lds	r24, 0x0519
    457c:	88 2f       	mov	r24, r24
    457e:	90 e0       	ldi	r25, 0x00	; 0
    4580:	88 0f       	add	r24, r24
    4582:	99 1f       	adc	r25, r25
    4584:	fc 01       	movw	r30, r24
    4586:	e0 51       	subi	r30, 0x10	; 16
    4588:	f4 4f       	sbci	r31, 0xF4	; 244
    458a:	80 81       	ld	r24, Z
    458c:	91 81       	ldd	r25, Z+1	; 0x01
    458e:	90 93 97 07 	sts	0x0797, r25
    4592:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    4596:	e0 91 96 07 	lds	r30, 0x0796
    459a:	f0 91 97 07 	lds	r31, 0x0797
    459e:	85 8d       	ldd	r24, Z+29	; 0x1d
    45a0:	96 8d       	ldd	r25, Z+30	; 0x1e
    45a2:	a7 8d       	ldd	r26, Z+31	; 0x1f
    45a4:	b0 a1       	ldd	r27, Z+32	; 0x20
    45a6:	01 96       	adiw	r24, 0x01	; 1
    45a8:	a1 1d       	adc	r26, r1
    45aa:	b1 1d       	adc	r27, r1
    45ac:	85 8f       	std	Z+29, r24	; 0x1d
    45ae:	96 8f       	std	Z+30, r25	; 0x1e
    45b0:	a7 8f       	std	Z+31, r26	; 0x1f
    45b2:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    45b4:	80 91 8d 07 	lds	r24, 0x078D
    45b8:	90 91 8e 07 	lds	r25, 0x078E
    45bc:	a0 91 8f 07 	lds	r26, 0x078F
    45c0:	b0 91 90 07 	lds	r27, 0x0790
    45c4:	01 96       	adiw	r24, 0x01	; 1
    45c6:	a1 1d       	adc	r26, r1
    45c8:	b1 1d       	adc	r27, r1
    45ca:	80 93 8d 07 	sts	0x078D, r24
    45ce:	90 93 8e 07 	sts	0x078E, r25
    45d2:	a0 93 8f 07 	sts	0x078F, r26
    45d6:	b0 93 90 07 	sts	0x0790, r27
                OS_TASK_SW();                          /* Perform a context switch                     */
    45da:	0e 94 fd 00 	call	0x1fa	; 0x1fa <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
    45de:	89 81       	ldd	r24, Y+1	; 0x01
    45e0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    45e4:	0f 90       	pop	r0
    45e6:	cf 91       	pop	r28
    45e8:	df 91       	pop	r29
    45ea:	08 95       	ret

000045ec <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    45ec:	df 93       	push	r29
    45ee:	cf 93       	push	r28
    45f0:	0f 92       	push	r0
    45f2:	cd b7       	in	r28, 0x3d	; 61
    45f4:	de b7       	in	r29, 0x3e	; 62
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    45f6:	80 91 98 07 	lds	r24, 0x0798
    45fa:	88 2f       	mov	r24, r24
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	fc 01       	movw	r30, r24
    4600:	e0 56       	subi	r30, 0x60	; 96
    4602:	fc 4f       	sbci	r31, 0xFC	; 252
    4604:	80 81       	ld	r24, Z
    4606:	89 83       	std	Y+1, r24	; 0x01
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    4608:	89 81       	ldd	r24, Y+1	; 0x01
    460a:	28 2f       	mov	r18, r24
    460c:	22 0f       	add	r18, r18
    460e:	22 0f       	add	r18, r18
    4610:	22 0f       	add	r18, r18
    4612:	89 81       	ldd	r24, Y+1	; 0x01
    4614:	88 2f       	mov	r24, r24
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	fc 01       	movw	r30, r24
    461a:	e7 56       	subi	r30, 0x67	; 103
    461c:	f8 4f       	sbci	r31, 0xF8	; 248
    461e:	80 81       	ld	r24, Z
    4620:	88 2f       	mov	r24, r24
    4622:	90 e0       	ldi	r25, 0x00	; 0
    4624:	fc 01       	movw	r30, r24
    4626:	e0 56       	subi	r30, 0x60	; 96
    4628:	fc 4f       	sbci	r31, 0xFC	; 252
    462a:	80 81       	ld	r24, Z
    462c:	82 0f       	add	r24, r18
    462e:	80 93 19 05 	sts	0x0519, r24
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    4632:	0f 90       	pop	r0
    4634:	cf 91       	pop	r28
    4636:	df 91       	pop	r29
    4638:	08 95       	ret
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    463a:	df 93       	push	r29
    463c:	cf 93       	push	r28
    463e:	00 d0       	rcall	.+0      	; 0x4640 <OS_SchedNew+0x54>
    4640:	0f 92       	push	r0
    4642:	0f 92       	push	r0
    4644:	cd b7       	in	r28, 0x3d	; 61
    4646:	de b7       	in	r29, 0x3e	; 62
    4648:	9b 83       	std	Y+3, r25	; 0x03
    464a:	8a 83       	std	Y+2, r24	; 0x02
    464c:	7d 83       	std	Y+5, r23	; 0x05
    464e:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  len;


    len = 0;
    4650:	19 82       	std	Y+1, r1	; 0x01
    4652:	13 c0       	rjmp	.+38     	; 0x467a <OS_SchedNew+0x8e>
    while (*psrc != OS_ASCII_NUL) {
        *pdest++ = *psrc++;
    4654:	ec 81       	ldd	r30, Y+4	; 0x04
    4656:	fd 81       	ldd	r31, Y+5	; 0x05
    4658:	80 81       	ld	r24, Z
    465a:	ea 81       	ldd	r30, Y+2	; 0x02
    465c:	fb 81       	ldd	r31, Y+3	; 0x03
    465e:	80 83       	st	Z, r24
    4660:	8a 81       	ldd	r24, Y+2	; 0x02
    4662:	9b 81       	ldd	r25, Y+3	; 0x03
    4664:	01 96       	adiw	r24, 0x01	; 1
    4666:	9b 83       	std	Y+3, r25	; 0x03
    4668:	8a 83       	std	Y+2, r24	; 0x02
    466a:	8c 81       	ldd	r24, Y+4	; 0x04
    466c:	9d 81       	ldd	r25, Y+5	; 0x05
    466e:	01 96       	adiw	r24, 0x01	; 1
    4670:	9d 83       	std	Y+5, r25	; 0x05
    4672:	8c 83       	std	Y+4, r24	; 0x04
        len++;
    4674:	89 81       	ldd	r24, Y+1	; 0x01
    4676:	8f 5f       	subi	r24, 0xFF	; 255
    4678:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    467a:	ec 81       	ldd	r30, Y+4	; 0x04
    467c:	fd 81       	ldd	r31, Y+5	; 0x05
    467e:	80 81       	ld	r24, Z
    4680:	88 23       	and	r24, r24
    4682:	41 f7       	brne	.-48     	; 0x4654 <OS_SchedNew+0x68>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    4684:	ea 81       	ldd	r30, Y+2	; 0x02
    4686:	fb 81       	ldd	r31, Y+3	; 0x03
    4688:	10 82       	st	Z, r1
    return (len);
    468a:	89 81       	ldd	r24, Y+1	; 0x01
}
    468c:	0f 90       	pop	r0
    468e:	0f 90       	pop	r0
    4690:	0f 90       	pop	r0
    4692:	0f 90       	pop	r0
    4694:	0f 90       	pop	r0
    4696:	cf 91       	pop	r28
    4698:	df 91       	pop	r29
    469a:	08 95       	ret
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    469c:	df 93       	push	r29
    469e:	cf 93       	push	r28
    46a0:	00 d0       	rcall	.+0      	; 0x46a2 <OS_SchedNew+0xb6>
    46a2:	cd b7       	in	r28, 0x3d	; 61
    46a4:	de b7       	in	r29, 0x3e	; 62
    46a6:	9b 83       	std	Y+3, r25	; 0x03
    46a8:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  len;


    len = 0;
    46aa:	19 82       	std	Y+1, r1	; 0x01
    46ac:	08 c0       	rjmp	.+16     	; 0x46be <OS_SchedNew+0xd2>
    while (*psrc != OS_ASCII_NUL) {
        psrc++;
    46ae:	8a 81       	ldd	r24, Y+2	; 0x02
    46b0:	9b 81       	ldd	r25, Y+3	; 0x03
    46b2:	01 96       	adiw	r24, 0x01	; 1
    46b4:	9b 83       	std	Y+3, r25	; 0x03
    46b6:	8a 83       	std	Y+2, r24	; 0x02
        len++;
    46b8:	89 81       	ldd	r24, Y+1	; 0x01
    46ba:	8f 5f       	subi	r24, 0xFF	; 255
    46bc:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    46be:	ea 81       	ldd	r30, Y+2	; 0x02
    46c0:	fb 81       	ldd	r31, Y+3	; 0x03
    46c2:	80 81       	ld	r24, Z
    46c4:	88 23       	and	r24, r24
    46c6:	99 f7       	brne	.-26     	; 0x46ae <OS_SchedNew+0xc2>
        psrc++;
        len++;
    }
    return (len);
    46c8:	89 81       	ldd	r24, Y+1	; 0x01
}
    46ca:	0f 90       	pop	r0
    46cc:	0f 90       	pop	r0
    46ce:	0f 90       	pop	r0
    46d0:	cf 91       	pop	r28
    46d2:	df 91       	pop	r29
    46d4:	08 95       	ret
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    46d6:	df 93       	push	r29
    46d8:	cf 93       	push	r28
    46da:	00 d0       	rcall	.+0      	; 0x46dc <OS_SchedNew+0xf0>
    46dc:	cd b7       	in	r28, 0x3d	; 61
    46de:	de b7       	in	r29, 0x3e	; 62
    46e0:	9b 83       	std	Y+3, r25	; 0x03
    46e2:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    46e4:	19 82       	std	Y+1, r1	; 0x01



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    46e6:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    46ea:	89 83       	std	Y+1, r24	; 0x01
        OSIdleCtr++;
    46ec:	80 91 13 05 	lds	r24, 0x0513
    46f0:	90 91 14 05 	lds	r25, 0x0514
    46f4:	a0 91 15 05 	lds	r26, 0x0515
    46f8:	b0 91 16 05 	lds	r27, 0x0516
    46fc:	01 96       	adiw	r24, 0x01	; 1
    46fe:	a1 1d       	adc	r26, r1
    4700:	b1 1d       	adc	r27, r1
    4702:	80 93 13 05 	sts	0x0513, r24
    4706:	90 93 14 05 	sts	0x0514, r25
    470a:	a0 93 15 05 	sts	0x0515, r26
    470e:	b0 93 16 05 	sts	0x0516, r27
        OS_EXIT_CRITICAL();
    4712:	89 81       	ldd	r24, Y+1	; 0x01
    4714:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    4718:	0e 94 19 02 	call	0x432	; 0x432 <OSTaskIdleHook>
    471c:	e4 cf       	rjmp	.-56     	; 0x46e6 <OS_SchedNew+0xfa>
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    471e:	af 92       	push	r10
    4720:	bf 92       	push	r11
    4722:	cf 92       	push	r12
    4724:	df 92       	push	r13
    4726:	ef 92       	push	r14
    4728:	ff 92       	push	r15
    472a:	0f 93       	push	r16
    472c:	1f 93       	push	r17
    472e:	df 93       	push	r29
    4730:	cf 93       	push	r28
    4732:	cd b7       	in	r28, 0x3d	; 61
    4734:	de b7       	in	r29, 0x3e	; 62
    4736:	63 97       	sbiw	r28, 0x13	; 19
    4738:	0f b6       	in	r0, 0x3f	; 63
    473a:	f8 94       	cli
    473c:	de bf       	out	0x3e, r29	; 62
    473e:	0f be       	out	0x3f, r0	; 63
    4740:	cd bf       	out	0x3d, r28	; 61
    4742:	8c 83       	std	Y+4, r24	; 0x04
    4744:	7e 83       	std	Y+6, r23	; 0x06
    4746:	6d 83       	std	Y+5, r22	; 0x05
    4748:	58 87       	std	Y+8, r21	; 0x08
    474a:	4f 83       	std	Y+7, r20	; 0x07
    474c:	3a 87       	std	Y+10, r19	; 0x0a
    474e:	29 87       	std	Y+9, r18	; 0x09
    4750:	eb 86       	std	Y+11, r14	; 0x0b
    4752:	fc 86       	std	Y+12, r15	; 0x0c
    4754:	0d 87       	std	Y+13, r16	; 0x0d
    4756:	1e 87       	std	Y+14, r17	; 0x0e
    4758:	d8 8a       	std	Y+16, r13	; 0x10
    475a:	cf 86       	std	Y+15, r12	; 0x0f
    475c:	ba 8a       	std	Y+18, r11	; 0x12
    475e:	a9 8a       	std	Y+17, r10	; 0x11
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4760:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    4762:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4766:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    4768:	80 91 93 07 	lds	r24, 0x0793
    476c:	90 91 94 07 	lds	r25, 0x0794
    4770:	9b 83       	std	Y+3, r25	; 0x03
    4772:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb != (OS_TCB *)0) {
    4774:	8a 81       	ldd	r24, Y+2	; 0x02
    4776:	9b 81       	ldd	r25, Y+3	; 0x03
    4778:	00 97       	sbiw	r24, 0x00	; 0
    477a:	09 f4       	brne	.+2      	; 0x477e <OS_SchedNew+0x192>
    477c:	f1 c0       	rjmp	.+482    	; 0x4960 <OS_SchedNew+0x374>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    477e:	ea 81       	ldd	r30, Y+2	; 0x02
    4780:	fb 81       	ldd	r31, Y+3	; 0x03
    4782:	86 85       	ldd	r24, Z+14	; 0x0e
    4784:	97 85       	ldd	r25, Z+15	; 0x0f
    4786:	90 93 94 07 	sts	0x0794, r25
    478a:	80 93 93 07 	sts	0x0793, r24
        OS_EXIT_CRITICAL();
    478e:	89 81       	ldd	r24, Y+1	; 0x01
    4790:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    4794:	ea 81       	ldd	r30, Y+2	; 0x02
    4796:	fb 81       	ldd	r31, Y+3	; 0x03
    4798:	8d 81       	ldd	r24, Y+5	; 0x05
    479a:	9e 81       	ldd	r25, Y+6	; 0x06
    479c:	91 83       	std	Z+1, r25	; 0x01
    479e:	80 83       	st	Z, r24
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    47a0:	ea 81       	ldd	r30, Y+2	; 0x02
    47a2:	fb 81       	ldd	r31, Y+3	; 0x03
    47a4:	8c 81       	ldd	r24, Y+4	; 0x04
    47a6:	80 8f       	std	Z+24, r24	; 0x18
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    47a8:	ea 81       	ldd	r30, Y+2	; 0x02
    47aa:	fb 81       	ldd	r31, Y+3	; 0x03
    47ac:	16 8a       	std	Z+22, r1	; 0x16
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    47ae:	ea 81       	ldd	r30, Y+2	; 0x02
    47b0:	fb 81       	ldd	r31, Y+3	; 0x03
    47b2:	17 8a       	std	Z+23, r1	; 0x17
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    47b4:	ea 81       	ldd	r30, Y+2	; 0x02
    47b6:	fb 81       	ldd	r31, Y+3	; 0x03
    47b8:	15 8a       	std	Z+21, r1	; 0x15
    47ba:	14 8a       	std	Z+20, r1	; 0x14

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    47bc:	ea 81       	ldd	r30, Y+2	; 0x02
    47be:	fb 81       	ldd	r31, Y+3	; 0x03
    47c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    47c2:	98 89       	ldd	r25, Y+16	; 0x10
    47c4:	93 83       	std	Z+3, r25	; 0x03
    47c6:	82 83       	std	Z+2, r24	; 0x02
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    47c8:	ea 81       	ldd	r30, Y+2	; 0x02
    47ca:	fb 81       	ldd	r31, Y+3	; 0x03
    47cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    47ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    47d0:	ad 85       	ldd	r26, Y+13	; 0x0d
    47d2:	be 85       	ldd	r27, Y+14	; 0x0e
    47d4:	86 83       	std	Z+6, r24	; 0x06
    47d6:	97 83       	std	Z+7, r25	; 0x07
    47d8:	a0 87       	std	Z+8, r26	; 0x08
    47da:	b1 87       	std	Z+9, r27	; 0x09
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    47dc:	ea 81       	ldd	r30, Y+2	; 0x02
    47de:	fb 81       	ldd	r31, Y+3	; 0x03
    47e0:	8f 81       	ldd	r24, Y+7	; 0x07
    47e2:	98 85       	ldd	r25, Y+8	; 0x08
    47e4:	95 83       	std	Z+5, r25	; 0x05
    47e6:	84 83       	std	Z+4, r24	; 0x04
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    47e8:	ea 81       	ldd	r30, Y+2	; 0x02
    47ea:	fb 81       	ldd	r31, Y+3	; 0x03
    47ec:	89 89       	ldd	r24, Y+17	; 0x11
    47ee:	9a 89       	ldd	r25, Y+18	; 0x12
    47f0:	93 87       	std	Z+11, r25	; 0x0b
    47f2:	82 87       	std	Z+10, r24	; 0x0a
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    47f4:	ea 81       	ldd	r30, Y+2	; 0x02
    47f6:	fb 81       	ldd	r31, Y+3	; 0x03
    47f8:	89 85       	ldd	r24, Y+9	; 0x09
    47fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    47fc:	95 87       	std	Z+13, r25	; 0x0d
    47fe:	84 87       	std	Z+12, r24	; 0x0c
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    4800:	8c 81       	ldd	r24, Y+4	; 0x04
    4802:	86 95       	lsr	r24
    4804:	86 95       	lsr	r24
    4806:	86 95       	lsr	r24
    4808:	ea 81       	ldd	r30, Y+2	; 0x02
    480a:	fb 81       	ldd	r31, Y+3	; 0x03
    480c:	82 8f       	std	Z+26, r24	; 0x1a
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    480e:	8c 81       	ldd	r24, Y+4	; 0x04
    4810:	87 70       	andi	r24, 0x07	; 7
    4812:	ea 81       	ldd	r30, Y+2	; 0x02
    4814:	fb 81       	ldd	r31, Y+3	; 0x03
    4816:	81 8f       	std	Z+25, r24	; 0x19
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    4818:	ea 81       	ldd	r30, Y+2	; 0x02
    481a:	fb 81       	ldd	r31, Y+3	; 0x03
    481c:	82 8d       	ldd	r24, Z+26	; 0x1a
    481e:	28 2f       	mov	r18, r24
    4820:	30 e0       	ldi	r19, 0x00	; 0
    4822:	81 e0       	ldi	r24, 0x01	; 1
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	02 c0       	rjmp	.+4      	; 0x482c <OS_SchedNew+0x240>
    4828:	88 0f       	add	r24, r24
    482a:	99 1f       	adc	r25, r25
    482c:	2a 95       	dec	r18
    482e:	e2 f7       	brpl	.-8      	; 0x4828 <OS_SchedNew+0x23c>
    4830:	ea 81       	ldd	r30, Y+2	; 0x02
    4832:	fb 81       	ldd	r31, Y+3	; 0x03
    4834:	84 8f       	std	Z+28, r24	; 0x1c
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    4836:	ea 81       	ldd	r30, Y+2	; 0x02
    4838:	fb 81       	ldd	r31, Y+3	; 0x03
    483a:	81 8d       	ldd	r24, Z+25	; 0x19
    483c:	28 2f       	mov	r18, r24
    483e:	30 e0       	ldi	r19, 0x00	; 0
    4840:	81 e0       	ldi	r24, 0x01	; 1
    4842:	90 e0       	ldi	r25, 0x00	; 0
    4844:	02 c0       	rjmp	.+4      	; 0x484a <OS_SchedNew+0x25e>
    4846:	88 0f       	add	r24, r24
    4848:	99 1f       	adc	r25, r25
    484a:	2a 95       	dec	r18
    484c:	e2 f7       	brpl	.-8      	; 0x4846 <OS_SchedNew+0x25a>
    484e:	ea 81       	ldd	r30, Y+2	; 0x02
    4850:	fb 81       	ldd	r31, Y+3	; 0x03
    4852:	83 8f       	std	Z+27, r24	; 0x1b
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    4854:	ea 81       	ldd	r30, Y+2	; 0x02
    4856:	fb 81       	ldd	r31, Y+3	; 0x03
    4858:	13 8a       	std	Z+19, r1	; 0x13
    485a:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    485c:	ea 81       	ldd	r30, Y+2	; 0x02
    485e:	fb 81       	ldd	r31, Y+3	; 0x03
    4860:	15 8e       	std	Z+29, r1	; 0x1d
    4862:	16 8e       	std	Z+30, r1	; 0x1e
    4864:	17 8e       	std	Z+31, r1	; 0x1f
    4866:	10 a2       	std	Z+32, r1	; 0x20
        ptcb->OSTCBCyclesStart = 0L;
    4868:	ea 81       	ldd	r30, Y+2	; 0x02
    486a:	fb 81       	ldd	r31, Y+3	; 0x03
    486c:	15 a2       	std	Z+37, r1	; 0x25
    486e:	16 a2       	std	Z+38, r1	; 0x26
    4870:	17 a2       	std	Z+39, r1	; 0x27
    4872:	10 a6       	std	Z+40, r1	; 0x28
        ptcb->OSTCBCyclesTot   = 0L;
    4874:	ea 81       	ldd	r30, Y+2	; 0x02
    4876:	fb 81       	ldd	r31, Y+3	; 0x03
    4878:	11 a2       	std	Z+33, r1	; 0x21
    487a:	12 a2       	std	Z+34, r1	; 0x22
    487c:	13 a2       	std	Z+35, r1	; 0x23
    487e:	14 a2       	std	Z+36, r1	; 0x24
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    4880:	ea 81       	ldd	r30, Y+2	; 0x02
    4882:	fb 81       	ldd	r31, Y+3	; 0x03
    4884:	12 a6       	std	Z+42, r1	; 0x2a
    4886:	11 a6       	std	Z+41, r1	; 0x29
        ptcb->OSTCBStkUsed     = 0L;
    4888:	ea 81       	ldd	r30, Y+2	; 0x02
    488a:	fb 81       	ldd	r31, Y+3	; 0x03
    488c:	13 a6       	std	Z+43, r1	; 0x2b
    488e:	14 a6       	std	Z+44, r1	; 0x2c
    4890:	15 a6       	std	Z+45, r1	; 0x2d
    4892:	16 a6       	std	Z+46, r1	; 0x2e
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    4894:	ea 81       	ldd	r30, Y+2	; 0x02
    4896:	fb 81       	ldd	r31, Y+3	; 0x03
    4898:	8f e3       	ldi	r24, 0x3F	; 63
    489a:	87 a7       	std	Z+47, r24	; 0x2f
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    489c:	ea 81       	ldd	r30, Y+2	; 0x02
    489e:	fb 81       	ldd	r31, Y+3	; 0x03
    48a0:	10 aa       	std	Z+48, r1	; 0x30
#endif

        OSTCBInitHook(ptcb);
    48a2:	8a 81       	ldd	r24, Y+2	; 0x02
    48a4:	9b 81       	ldd	r25, Y+3	; 0x03
    48a6:	0e 94 96 03 	call	0x72c	; 0x72c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    48aa:	8a 81       	ldd	r24, Y+2	; 0x02
    48ac:	9b 81       	ldd	r25, Y+3	; 0x03
    48ae:	0e 94 f7 01 	call	0x3ee	; 0x3ee <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
    48b2:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    48b6:	89 83       	std	Y+1, r24	; 0x01
        OSTCBPrioTbl[prio] = ptcb;
    48b8:	8c 81       	ldd	r24, Y+4	; 0x04
    48ba:	88 2f       	mov	r24, r24
    48bc:	90 e0       	ldi	r25, 0x00	; 0
    48be:	88 0f       	add	r24, r24
    48c0:	99 1f       	adc	r25, r25
    48c2:	fc 01       	movw	r30, r24
    48c4:	e0 51       	subi	r30, 0x10	; 16
    48c6:	f4 4f       	sbci	r31, 0xF4	; 244
    48c8:	8a 81       	ldd	r24, Y+2	; 0x02
    48ca:	9b 81       	ldd	r25, Y+3	; 0x03
    48cc:	91 83       	std	Z+1, r25	; 0x01
    48ce:	80 83       	st	Z, r24
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    48d0:	80 91 8b 07 	lds	r24, 0x078B
    48d4:	90 91 8c 07 	lds	r25, 0x078C
    48d8:	ea 81       	ldd	r30, Y+2	; 0x02
    48da:	fb 81       	ldd	r31, Y+3	; 0x03
    48dc:	97 87       	std	Z+15, r25	; 0x0f
    48de:	86 87       	std	Z+14, r24	; 0x0e
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    48e0:	ea 81       	ldd	r30, Y+2	; 0x02
    48e2:	fb 81       	ldd	r31, Y+3	; 0x03
    48e4:	11 8a       	std	Z+17, r1	; 0x11
    48e6:	10 8a       	std	Z+16, r1	; 0x10
        if (OSTCBList != (OS_TCB *)0) {
    48e8:	80 91 8b 07 	lds	r24, 0x078B
    48ec:	90 91 8c 07 	lds	r25, 0x078C
    48f0:	00 97       	sbiw	r24, 0x00	; 0
    48f2:	41 f0       	breq	.+16     	; 0x4904 <OS_SchedNew+0x318>
            OSTCBList->OSTCBPrev = ptcb;
    48f4:	e0 91 8b 07 	lds	r30, 0x078B
    48f8:	f0 91 8c 07 	lds	r31, 0x078C
    48fc:	8a 81       	ldd	r24, Y+2	; 0x02
    48fe:	9b 81       	ldd	r25, Y+3	; 0x03
    4900:	91 8b       	std	Z+17, r25	; 0x11
    4902:	80 8b       	std	Z+16, r24	; 0x10
        }
        OSTCBList               = ptcb;
    4904:	8a 81       	ldd	r24, Y+2	; 0x02
    4906:	9b 81       	ldd	r25, Y+3	; 0x03
    4908:	90 93 8c 07 	sts	0x078C, r25
    490c:	80 93 8b 07 	sts	0x078B, r24
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    4910:	ea 81       	ldd	r30, Y+2	; 0x02
    4912:	fb 81       	ldd	r31, Y+3	; 0x03
    4914:	94 8d       	ldd	r25, Z+28	; 0x1c
    4916:	80 91 98 07 	lds	r24, 0x0798
    491a:	89 2b       	or	r24, r25
    491c:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4920:	ea 81       	ldd	r30, Y+2	; 0x02
    4922:	fb 81       	ldd	r31, Y+3	; 0x03
    4924:	82 8d       	ldd	r24, Z+26	; 0x1a
    4926:	28 2f       	mov	r18, r24
    4928:	30 e0       	ldi	r19, 0x00	; 0
    492a:	ea 81       	ldd	r30, Y+2	; 0x02
    492c:	fb 81       	ldd	r31, Y+3	; 0x03
    492e:	82 8d       	ldd	r24, Z+26	; 0x1a
    4930:	88 2f       	mov	r24, r24
    4932:	90 e0       	ldi	r25, 0x00	; 0
    4934:	fc 01       	movw	r30, r24
    4936:	e7 56       	subi	r30, 0x67	; 103
    4938:	f8 4f       	sbci	r31, 0xF8	; 248
    493a:	90 81       	ld	r25, Z
    493c:	ea 81       	ldd	r30, Y+2	; 0x02
    493e:	fb 81       	ldd	r31, Y+3	; 0x03
    4940:	83 8d       	ldd	r24, Z+27	; 0x1b
    4942:	89 2b       	or	r24, r25
    4944:	f9 01       	movw	r30, r18
    4946:	e7 56       	subi	r30, 0x67	; 103
    4948:	f8 4f       	sbci	r31, 0xF8	; 248
    494a:	80 83       	st	Z, r24
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    494c:	80 91 95 07 	lds	r24, 0x0795
    4950:	8f 5f       	subi	r24, 0xFF	; 255
    4952:	80 93 95 07 	sts	0x0795, r24
        OS_EXIT_CRITICAL();
    4956:	89 81       	ldd	r24, Y+1	; 0x01
    4958:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    495c:	1b 8a       	std	Y+19, r1	; 0x13
    495e:	05 c0       	rjmp	.+10     	; 0x496a <OS_SchedNew+0x37e>
    }
    OS_EXIT_CRITICAL();
    4960:	89 81       	ldd	r24, Y+1	; 0x01
    4962:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
    4966:	82 e4       	ldi	r24, 0x42	; 66
    4968:	8b 8b       	std	Y+19, r24	; 0x13
    496a:	8b 89       	ldd	r24, Y+19	; 0x13
}
    496c:	63 96       	adiw	r28, 0x13	; 19
    496e:	0f b6       	in	r0, 0x3f	; 63
    4970:	f8 94       	cli
    4972:	de bf       	out	0x3e, r29	; 62
    4974:	0f be       	out	0x3f, r0	; 63
    4976:	cd bf       	out	0x3d, r28	; 61
    4978:	cf 91       	pop	r28
    497a:	df 91       	pop	r29
    497c:	1f 91       	pop	r17
    497e:	0f 91       	pop	r16
    4980:	ff 90       	pop	r15
    4982:	ef 90       	pop	r14
    4984:	df 90       	pop	r13
    4986:	cf 90       	pop	r12
    4988:	bf 90       	pop	r11
    498a:	af 90       	pop	r10
    498c:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    498e:	df 93       	push	r29
    4990:	cf 93       	push	r28
    4992:	cd b7       	in	r28, 0x3d	; 61
    4994:	de b7       	in	r29, 0x3e	; 62
    4996:	27 97       	sbiw	r28, 0x07	; 7
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	f8 94       	cli
    499c:	de bf       	out	0x3e, r29	; 62
    499e:	0f be       	out	0x3f, r0	; 63
    49a0:	cd bf       	out	0x3d, r28	; 61
    49a2:	9d 83       	std	Y+5, r25	; 0x05
    49a4:	8c 83       	std	Y+4, r24	; 0x04
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    49a6:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    49a8:	ec 81       	ldd	r30, Y+4	; 0x04
    49aa:	fd 81       	ldd	r31, Y+5	; 0x05
    49ac:	80 81       	ld	r24, Z
    49ae:	83 30       	cpi	r24, 0x03	; 3
    49b0:	19 f0       	breq	.+6      	; 0x49b8 <OS_SchedNew+0x3cc>
        return (0);
    49b2:	1f 82       	std	Y+7, r1	; 0x07
    49b4:	1e 82       	std	Y+6, r1	; 0x06
    49b6:	1d c0       	rjmp	.+58     	; 0x49f2 <OS_SchedNew+0x406>
    }
    OS_ENTER_CRITICAL();
    49b8:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    49bc:	89 83       	std	Y+1, r24	; 0x01
    cnt = pevent->OSEventCnt;
    49be:	ec 81       	ldd	r30, Y+4	; 0x04
    49c0:	fd 81       	ldd	r31, Y+5	; 0x05
    49c2:	83 81       	ldd	r24, Z+3	; 0x03
    49c4:	94 81       	ldd	r25, Z+4	; 0x04
    49c6:	9b 83       	std	Y+3, r25	; 0x03
    49c8:	8a 83       	std	Y+2, r24	; 0x02
    if (cnt > 0) {                                    /* See if resource is available                  */
    49ca:	8a 81       	ldd	r24, Y+2	; 0x02
    49cc:	9b 81       	ldd	r25, Y+3	; 0x03
    49ce:	00 97       	sbiw	r24, 0x00	; 0
    49d0:	49 f0       	breq	.+18     	; 0x49e4 <OS_SchedNew+0x3f8>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    49d2:	ec 81       	ldd	r30, Y+4	; 0x04
    49d4:	fd 81       	ldd	r31, Y+5	; 0x05
    49d6:	83 81       	ldd	r24, Z+3	; 0x03
    49d8:	94 81       	ldd	r25, Z+4	; 0x04
    49da:	01 97       	sbiw	r24, 0x01	; 1
    49dc:	ec 81       	ldd	r30, Y+4	; 0x04
    49de:	fd 81       	ldd	r31, Y+5	; 0x05
    49e0:	94 83       	std	Z+4, r25	; 0x04
    49e2:	83 83       	std	Z+3, r24	; 0x03
    }
    OS_EXIT_CRITICAL();
    49e4:	89 81       	ldd	r24, Y+1	; 0x01
    49e6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (cnt);                                     /* Return semaphore count                        */
    49ea:	8a 81       	ldd	r24, Y+2	; 0x02
    49ec:	9b 81       	ldd	r25, Y+3	; 0x03
    49ee:	9f 83       	std	Y+7, r25	; 0x07
    49f0:	8e 83       	std	Y+6, r24	; 0x06
    49f2:	8e 81       	ldd	r24, Y+6	; 0x06
    49f4:	9f 81       	ldd	r25, Y+7	; 0x07
}
    49f6:	27 96       	adiw	r28, 0x07	; 7
    49f8:	0f b6       	in	r0, 0x3f	; 63
    49fa:	f8 94       	cli
    49fc:	de bf       	out	0x3e, r29	; 62
    49fe:	0f be       	out	0x3f, r0	; 63
    4a00:	cd bf       	out	0x3d, r28	; 61
    4a02:	cf 91       	pop	r28
    4a04:	df 91       	pop	r29
    4a06:	08 95       	ret
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    4a08:	df 93       	push	r29
    4a0a:	cf 93       	push	r28
    4a0c:	cd b7       	in	r28, 0x3d	; 61
    4a0e:	de b7       	in	r29, 0x3e	; 62
    4a10:	27 97       	sbiw	r28, 0x07	; 7
    4a12:	0f b6       	in	r0, 0x3f	; 63
    4a14:	f8 94       	cli
    4a16:	de bf       	out	0x3e, r29	; 62
    4a18:	0f be       	out	0x3f, r0	; 63
    4a1a:	cd bf       	out	0x3d, r28	; 61
    4a1c:	9d 83       	std	Y+5, r25	; 0x05
    4a1e:	8c 83       	std	Y+4, r24	; 0x04
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4a20:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4a22:	80 91 4c 08 	lds	r24, 0x084C
    4a26:	88 23       	and	r24, r24
    4a28:	19 f0       	breq	.+6      	; 0x4a30 <OS_SchedNew+0x444>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    4a2a:	1f 82       	std	Y+7, r1	; 0x07
    4a2c:	1e 82       	std	Y+6, r1	; 0x06
    4a2e:	3d c0       	rjmp	.+122    	; 0x4aaa <OS_SchedNew+0x4be>
    }
    OS_ENTER_CRITICAL();
    4a30:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4a34:	89 83       	std	Y+1, r24	; 0x01
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    4a36:	80 91 4a 08 	lds	r24, 0x084A
    4a3a:	90 91 4b 08 	lds	r25, 0x084B
    4a3e:	9b 83       	std	Y+3, r25	; 0x03
    4a40:	8a 83       	std	Y+2, r24	; 0x02
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    4a42:	80 91 4a 08 	lds	r24, 0x084A
    4a46:	90 91 4b 08 	lds	r25, 0x084B
    4a4a:	00 97       	sbiw	r24, 0x00	; 0
    4a4c:	51 f0       	breq	.+20     	; 0x4a62 <OS_SchedNew+0x476>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    4a4e:	e0 91 4a 08 	lds	r30, 0x084A
    4a52:	f0 91 4b 08 	lds	r31, 0x084B
    4a56:	81 81       	ldd	r24, Z+1	; 0x01
    4a58:	92 81       	ldd	r25, Z+2	; 0x02
    4a5a:	90 93 4b 08 	sts	0x084B, r25
    4a5e:	80 93 4a 08 	sts	0x084A, r24
    }
    OS_EXIT_CRITICAL();
    4a62:	89 81       	ldd	r24, Y+1	; 0x01
    4a64:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    4a68:	8a 81       	ldd	r24, Y+2	; 0x02
    4a6a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a6c:	00 97       	sbiw	r24, 0x00	; 0
    4a6e:	c9 f0       	breq	.+50     	; 0x4aa2 <OS_SchedNew+0x4b6>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    4a70:	ea 81       	ldd	r30, Y+2	; 0x02
    4a72:	fb 81       	ldd	r31, Y+3	; 0x03
    4a74:	83 e0       	ldi	r24, 0x03	; 3
    4a76:	80 83       	st	Z, r24
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    4a78:	ea 81       	ldd	r30, Y+2	; 0x02
    4a7a:	fb 81       	ldd	r31, Y+3	; 0x03
    4a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a80:	94 83       	std	Z+4, r25	; 0x04
    4a82:	83 83       	std	Z+3, r24	; 0x03
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    4a84:	ea 81       	ldd	r30, Y+2	; 0x02
    4a86:	fb 81       	ldd	r31, Y+3	; 0x03
    4a88:	12 82       	std	Z+2, r1	; 0x02
    4a8a:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    4a8c:	ea 81       	ldd	r30, Y+2	; 0x02
    4a8e:	fb 81       	ldd	r31, Y+3	; 0x03
    4a90:	8f e3       	ldi	r24, 0x3F	; 63
    4a92:	80 87       	std	Z+8, r24	; 0x08
        pevent->OSEventName[1] = OS_ASCII_NUL;
    4a94:	ea 81       	ldd	r30, Y+2	; 0x02
    4a96:	fb 81       	ldd	r31, Y+3	; 0x03
    4a98:	11 86       	std	Z+9, r1	; 0x09
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    4a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a9c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9e:	0e 94 d7 20 	call	0x41ae	; 0x41ae <OSTmr_Task+0x850>
    }
    return (pevent);
    4aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa4:	9b 81       	ldd	r25, Y+3	; 0x03
    4aa6:	9f 83       	std	Y+7, r25	; 0x07
    4aa8:	8e 83       	std	Y+6, r24	; 0x06
    4aaa:	8e 81       	ldd	r24, Y+6	; 0x06
    4aac:	9f 81       	ldd	r25, Y+7	; 0x07
}
    4aae:	27 96       	adiw	r28, 0x07	; 7
    4ab0:	0f b6       	in	r0, 0x3f	; 63
    4ab2:	f8 94       	cli
    4ab4:	de bf       	out	0x3e, r29	; 62
    4ab6:	0f be       	out	0x3f, r0	; 63
    4ab8:	cd bf       	out	0x3d, r28	; 61
    4aba:	cf 91       	pop	r28
    4abc:	df 91       	pop	r29
    4abe:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    4ac0:	df 93       	push	r29
    4ac2:	cf 93       	push	r28
    4ac4:	cd b7       	in	r28, 0x3d	; 61
    4ac6:	de b7       	in	r29, 0x3e	; 62
    4ac8:	2d 97       	sbiw	r28, 0x0d	; 13
    4aca:	0f b6       	in	r0, 0x3f	; 63
    4acc:	f8 94       	cli
    4ace:	de bf       	out	0x3e, r29	; 62
    4ad0:	0f be       	out	0x3f, r0	; 63
    4ad2:	cd bf       	out	0x3d, r28	; 61
    4ad4:	9e 83       	std	Y+6, r25	; 0x06
    4ad6:	8d 83       	std	Y+5, r24	; 0x05
    4ad8:	6f 83       	std	Y+7, r22	; 0x07
    4ada:	59 87       	std	Y+9, r21	; 0x09
    4adc:	48 87       	std	Y+8, r20	; 0x08
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4ade:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    4ae0:	ed 81       	ldd	r30, Y+5	; 0x05
    4ae2:	fe 81       	ldd	r31, Y+6	; 0x06
    4ae4:	80 81       	ld	r24, Z
    4ae6:	83 30       	cpi	r24, 0x03	; 3
    4ae8:	49 f0       	breq	.+18     	; 0x4afc <OS_SchedNew+0x510>
        *perr = OS_ERR_EVENT_TYPE;
    4aea:	e8 85       	ldd	r30, Y+8	; 0x08
    4aec:	f9 85       	ldd	r31, Y+9	; 0x09
    4aee:	81 e0       	ldi	r24, 0x01	; 1
    4af0:	80 83       	st	Z, r24
        return (pevent);
    4af2:	2d 81       	ldd	r18, Y+5	; 0x05
    4af4:	3e 81       	ldd	r19, Y+6	; 0x06
    4af6:	3d 87       	std	Y+13, r19	; 0x0d
    4af8:	2c 87       	std	Y+12, r18	; 0x0c
    4afa:	a2 c0       	rjmp	.+324    	; 0x4c40 <OS_SchedNew+0x654>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4afc:	80 91 4c 08 	lds	r24, 0x084C
    4b00:	88 23       	and	r24, r24
    4b02:	49 f0       	breq	.+18     	; 0x4b16 <OS_SchedNew+0x52a>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    4b04:	e8 85       	ldd	r30, Y+8	; 0x08
    4b06:	f9 85       	ldd	r31, Y+9	; 0x09
    4b08:	8f e0       	ldi	r24, 0x0F	; 15
    4b0a:	80 83       	st	Z, r24
        return (pevent);
    4b0c:	8d 81       	ldd	r24, Y+5	; 0x05
    4b0e:	9e 81       	ldd	r25, Y+6	; 0x06
    4b10:	9d 87       	std	Y+13, r25	; 0x0d
    4b12:	8c 87       	std	Y+12, r24	; 0x0c
    4b14:	95 c0       	rjmp	.+298    	; 0x4c40 <OS_SchedNew+0x654>
    }
    OS_ENTER_CRITICAL();
    4b16:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4b1a:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    4b1c:	ed 81       	ldd	r30, Y+5	; 0x05
    4b1e:	fe 81       	ldd	r31, Y+6	; 0x06
    4b20:	85 81       	ldd	r24, Z+5	; 0x05
    4b22:	88 23       	and	r24, r24
    4b24:	19 f0       	breq	.+6      	; 0x4b2c <OS_SchedNew+0x540>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    4b26:	81 e0       	ldi	r24, 0x01	; 1
    4b28:	8c 83       	std	Y+4, r24	; 0x04
    4b2a:	01 c0       	rjmp	.+2      	; 0x4b2e <OS_SchedNew+0x542>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    4b2c:	1c 82       	std	Y+4, r1	; 0x04
    }
    switch (opt) {
    4b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    4b30:	28 2f       	mov	r18, r24
    4b32:	30 e0       	ldi	r19, 0x00	; 0
    4b34:	3b 87       	std	Y+11, r19	; 0x0b
    4b36:	2a 87       	std	Y+10, r18	; 0x0a
    4b38:	8a 85       	ldd	r24, Y+10	; 0x0a
    4b3a:	9b 85       	ldd	r25, Y+11	; 0x0b
    4b3c:	00 97       	sbiw	r24, 0x00	; 0
    4b3e:	31 f0       	breq	.+12     	; 0x4b4c <OS_SchedNew+0x560>
    4b40:	2a 85       	ldd	r18, Y+10	; 0x0a
    4b42:	3b 85       	ldd	r19, Y+11	; 0x0b
    4b44:	21 30       	cpi	r18, 0x01	; 1
    4b46:	31 05       	cpc	r19, r1
    4b48:	e9 f1       	breq	.+122    	; 0x4bc4 <OS_SchedNew+0x5d8>
    4b4a:	6b c0       	rjmp	.+214    	; 0x4c22 <OS_SchedNew+0x636>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    4b4c:	8c 81       	ldd	r24, Y+4	; 0x04
    4b4e:	88 23       	and	r24, r24
    4b50:	29 f5       	brne	.+74     	; 0x4b9c <OS_SchedNew+0x5b0>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    4b52:	ed 81       	ldd	r30, Y+5	; 0x05
    4b54:	fe 81       	ldd	r31, Y+6	; 0x06
    4b56:	8f e3       	ldi	r24, 0x3F	; 63
    4b58:	80 87       	std	Z+8, r24	; 0x08
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    4b5a:	ed 81       	ldd	r30, Y+5	; 0x05
    4b5c:	fe 81       	ldd	r31, Y+6	; 0x06
    4b5e:	11 86       	std	Z+9, r1	; 0x09
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4b60:	ed 81       	ldd	r30, Y+5	; 0x05
    4b62:	fe 81       	ldd	r31, Y+6	; 0x06
    4b64:	10 82       	st	Z, r1
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    4b66:	80 91 4a 08 	lds	r24, 0x084A
    4b6a:	90 91 4b 08 	lds	r25, 0x084B
    4b6e:	ed 81       	ldd	r30, Y+5	; 0x05
    4b70:	fe 81       	ldd	r31, Y+6	; 0x06
    4b72:	92 83       	std	Z+2, r25	; 0x02
    4b74:	81 83       	std	Z+1, r24	; 0x01
                 pevent->OSEventCnt     = 0;
    4b76:	ed 81       	ldd	r30, Y+5	; 0x05
    4b78:	fe 81       	ldd	r31, Y+6	; 0x06
    4b7a:	14 82       	std	Z+4, r1	; 0x04
    4b7c:	13 82       	std	Z+3, r1	; 0x03
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    4b7e:	8d 81       	ldd	r24, Y+5	; 0x05
    4b80:	9e 81       	ldd	r25, Y+6	; 0x06
    4b82:	90 93 4b 08 	sts	0x084B, r25
    4b86:	80 93 4a 08 	sts	0x084A, r24
                 OS_EXIT_CRITICAL();
    4b8a:	89 81       	ldd	r24, Y+1	; 0x01
    4b8c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_NONE;
    4b90:	e8 85       	ldd	r30, Y+8	; 0x08
    4b92:	f9 85       	ldd	r31, Y+9	; 0x09
    4b94:	10 82       	st	Z, r1
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    4b96:	1b 82       	std	Y+3, r1	; 0x03
    4b98:	1a 82       	std	Y+2, r1	; 0x02
    4b9a:	4e c0       	rjmp	.+156    	; 0x4c38 <OS_SchedNew+0x64c>
             } else {
                 OS_EXIT_CRITICAL();
    4b9c:	89 81       	ldd	r24, Y+1	; 0x01
    4b9e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_TASK_WAITING;
    4ba2:	e8 85       	ldd	r30, Y+8	; 0x08
    4ba4:	f9 85       	ldd	r31, Y+9	; 0x09
    4ba6:	89 e4       	ldi	r24, 0x49	; 73
    4ba8:	80 83       	st	Z, r24
                 pevent_return          = pevent;
    4baa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bac:	9e 81       	ldd	r25, Y+6	; 0x06
    4bae:	9b 83       	std	Y+3, r25	; 0x03
    4bb0:	8a 83       	std	Y+2, r24	; 0x02
    4bb2:	42 c0       	rjmp	.+132    	; 0x4c38 <OS_SchedNew+0x64c>
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    4bb4:	8d 81       	ldd	r24, Y+5	; 0x05
    4bb6:	9e 81       	ldd	r25, Y+6	; 0x06
    4bb8:	60 e0       	ldi	r22, 0x00	; 0
    4bba:	70 e0       	ldi	r23, 0x00	; 0
    4bbc:	41 e0       	ldi	r20, 0x01	; 1
    4bbe:	20 e0       	ldi	r18, 0x00	; 0
    4bc0:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <OSTmr_Task+0x5c8>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    4bc4:	ed 81       	ldd	r30, Y+5	; 0x05
    4bc6:	fe 81       	ldd	r31, Y+6	; 0x06
    4bc8:	85 81       	ldd	r24, Z+5	; 0x05
    4bca:	88 23       	and	r24, r24
    4bcc:	99 f7       	brne	.-26     	; 0x4bb4 <OS_SchedNew+0x5c8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    4bce:	ed 81       	ldd	r30, Y+5	; 0x05
    4bd0:	fe 81       	ldd	r31, Y+6	; 0x06
    4bd2:	8f e3       	ldi	r24, 0x3F	; 63
    4bd4:	80 87       	std	Z+8, r24	; 0x08
             pevent->OSEventName[1] = OS_ASCII_NUL;
    4bd6:	ed 81       	ldd	r30, Y+5	; 0x05
    4bd8:	fe 81       	ldd	r31, Y+6	; 0x06
    4bda:	11 86       	std	Z+9, r1	; 0x09
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4bdc:	ed 81       	ldd	r30, Y+5	; 0x05
    4bde:	fe 81       	ldd	r31, Y+6	; 0x06
    4be0:	10 82       	st	Z, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    4be2:	80 91 4a 08 	lds	r24, 0x084A
    4be6:	90 91 4b 08 	lds	r25, 0x084B
    4bea:	ed 81       	ldd	r30, Y+5	; 0x05
    4bec:	fe 81       	ldd	r31, Y+6	; 0x06
    4bee:	92 83       	std	Z+2, r25	; 0x02
    4bf0:	81 83       	std	Z+1, r24	; 0x01
             pevent->OSEventCnt     = 0;
    4bf2:	ed 81       	ldd	r30, Y+5	; 0x05
    4bf4:	fe 81       	ldd	r31, Y+6	; 0x06
    4bf6:	14 82       	std	Z+4, r1	; 0x04
    4bf8:	13 82       	std	Z+3, r1	; 0x03
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    4bfa:	8d 81       	ldd	r24, Y+5	; 0x05
    4bfc:	9e 81       	ldd	r25, Y+6	; 0x06
    4bfe:	90 93 4b 08 	sts	0x084B, r25
    4c02:	80 93 4a 08 	sts	0x084A, r24
             OS_EXIT_CRITICAL();
    4c06:	89 81       	ldd	r24, Y+1	; 0x01
    4c08:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    4c0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4c0e:	81 30       	cpi	r24, 0x01	; 1
    4c10:	11 f4       	brne	.+4      	; 0x4c16 <OS_SchedNew+0x62a>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    4c12:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
             }
             *perr                  = OS_ERR_NONE;
    4c16:	e8 85       	ldd	r30, Y+8	; 0x08
    4c18:	f9 85       	ldd	r31, Y+9	; 0x09
    4c1a:	10 82       	st	Z, r1
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    4c1c:	1b 82       	std	Y+3, r1	; 0x03
    4c1e:	1a 82       	std	Y+2, r1	; 0x02
    4c20:	0b c0       	rjmp	.+22     	; 0x4c38 <OS_SchedNew+0x64c>
             break;

        default:
             OS_EXIT_CRITICAL();
    4c22:	89 81       	ldd	r24, Y+1	; 0x01
    4c24:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             *perr                  = OS_ERR_INVALID_OPT;
    4c28:	e8 85       	ldd	r30, Y+8	; 0x08
    4c2a:	f9 85       	ldd	r31, Y+9	; 0x09
    4c2c:	87 e0       	ldi	r24, 0x07	; 7
    4c2e:	80 83       	st	Z, r24
             pevent_return          = pevent;
    4c30:	8d 81       	ldd	r24, Y+5	; 0x05
    4c32:	9e 81       	ldd	r25, Y+6	; 0x06
    4c34:	9b 83       	std	Y+3, r25	; 0x03
    4c36:	8a 83       	std	Y+2, r24	; 0x02
             break;
    }
    return (pevent_return);
    4c38:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    4c3c:	9d 87       	std	Y+13, r25	; 0x0d
    4c3e:	8c 87       	std	Y+12, r24	; 0x0c
    4c40:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c42:	9d 85       	ldd	r25, Y+13	; 0x0d
}
    4c44:	2d 96       	adiw	r28, 0x0d	; 13
    4c46:	0f b6       	in	r0, 0x3f	; 63
    4c48:	f8 94       	cli
    4c4a:	de bf       	out	0x3e, r29	; 62
    4c4c:	0f be       	out	0x3f, r0	; 63
    4c4e:	cd bf       	out	0x3d, r28	; 61
    4c50:	cf 91       	pop	r28
    4c52:	df 91       	pop	r29
    4c54:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    4c56:	df 93       	push	r29
    4c58:	cf 93       	push	r28
    4c5a:	cd b7       	in	r28, 0x3d	; 61
    4c5c:	de b7       	in	r29, 0x3e	; 62
    4c5e:	29 97       	sbiw	r28, 0x09	; 9
    4c60:	0f b6       	in	r0, 0x3f	; 63
    4c62:	f8 94       	cli
    4c64:	de bf       	out	0x3e, r29	; 62
    4c66:	0f be       	out	0x3f, r0	; 63
    4c68:	cd bf       	out	0x3d, r28	; 61
    4c6a:	9b 83       	std	Y+3, r25	; 0x03
    4c6c:	8a 83       	std	Y+2, r24	; 0x02
    4c6e:	7d 83       	std	Y+5, r23	; 0x05
    4c70:	6c 83       	std	Y+4, r22	; 0x04
    4c72:	5f 83       	std	Y+7, r21	; 0x07
    4c74:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4c76:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    4c78:	ea 81       	ldd	r30, Y+2	; 0x02
    4c7a:	fb 81       	ldd	r31, Y+3	; 0x03
    4c7c:	80 81       	ld	r24, Z
    4c7e:	83 30       	cpi	r24, 0x03	; 3
    4c80:	29 f0       	breq	.+10     	; 0x4c8c <OS_SchedNew+0x6a0>
        *perr = OS_ERR_EVENT_TYPE;
    4c82:	ee 81       	ldd	r30, Y+6	; 0x06
    4c84:	ff 81       	ldd	r31, Y+7	; 0x07
    4c86:	81 e0       	ldi	r24, 0x01	; 1
    4c88:	80 83       	st	Z, r24
    4c8a:	8c c0       	rjmp	.+280    	; 0x4da4 <OS_SchedNew+0x7b8>
        return;
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    4c8c:	80 91 4c 08 	lds	r24, 0x084C
    4c90:	88 23       	and	r24, r24
    4c92:	29 f0       	breq	.+10     	; 0x4c9e <OS_SchedNew+0x6b2>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    4c94:	ee 81       	ldd	r30, Y+6	; 0x06
    4c96:	ff 81       	ldd	r31, Y+7	; 0x07
    4c98:	82 e0       	ldi	r24, 0x02	; 2
    4c9a:	80 83       	st	Z, r24
    4c9c:	83 c0       	rjmp	.+262    	; 0x4da4 <OS_SchedNew+0x7b8>
        return;
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    4c9e:	80 91 0f 05 	lds	r24, 0x050F
    4ca2:	88 23       	and	r24, r24
    4ca4:	29 f0       	breq	.+10     	; 0x4cb0 <OS_SchedNew+0x6c4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    4ca6:	ee 81       	ldd	r30, Y+6	; 0x06
    4ca8:	ff 81       	ldd	r31, Y+7	; 0x07
    4caa:	8d e0       	ldi	r24, 0x0D	; 13
    4cac:	80 83       	st	Z, r24
    4cae:	7a c0       	rjmp	.+244    	; 0x4da4 <OS_SchedNew+0x7b8>
        return;
    }
    OS_ENTER_CRITICAL();
    4cb0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4cb4:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    4cb6:	ea 81       	ldd	r30, Y+2	; 0x02
    4cb8:	fb 81       	ldd	r31, Y+3	; 0x03
    4cba:	83 81       	ldd	r24, Z+3	; 0x03
    4cbc:	94 81       	ldd	r25, Z+4	; 0x04
    4cbe:	00 97       	sbiw	r24, 0x00	; 0
    4cc0:	81 f0       	breq	.+32     	; 0x4ce2 <OS_SchedNew+0x6f6>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    4cc2:	ea 81       	ldd	r30, Y+2	; 0x02
    4cc4:	fb 81       	ldd	r31, Y+3	; 0x03
    4cc6:	83 81       	ldd	r24, Z+3	; 0x03
    4cc8:	94 81       	ldd	r25, Z+4	; 0x04
    4cca:	01 97       	sbiw	r24, 0x01	; 1
    4ccc:	ea 81       	ldd	r30, Y+2	; 0x02
    4cce:	fb 81       	ldd	r31, Y+3	; 0x03
    4cd0:	94 83       	std	Z+4, r25	; 0x04
    4cd2:	83 83       	std	Z+3, r24	; 0x03
        OS_EXIT_CRITICAL();
    4cd4:	89 81       	ldd	r24, Y+1	; 0x01
    4cd6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
    4cda:	ee 81       	ldd	r30, Y+6	; 0x06
    4cdc:	ff 81       	ldd	r31, Y+7	; 0x07
    4cde:	10 82       	st	Z, r1
    4ce0:	61 c0       	rjmp	.+194    	; 0x4da4 <OS_SchedNew+0x7b8>
        return;
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    4ce2:	a0 91 4d 08 	lds	r26, 0x084D
    4ce6:	b0 91 4e 08 	lds	r27, 0x084E
    4cea:	e0 91 4d 08 	lds	r30, 0x084D
    4cee:	f0 91 4e 08 	lds	r31, 0x084E
    4cf2:	86 89       	ldd	r24, Z+22	; 0x16
    4cf4:	81 60       	ori	r24, 0x01	; 1
    4cf6:	56 96       	adiw	r26, 0x16	; 22
    4cf8:	8c 93       	st	X, r24
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4cfa:	e0 91 4d 08 	lds	r30, 0x084D
    4cfe:	f0 91 4e 08 	lds	r31, 0x084E
    4d02:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    4d04:	e0 91 4d 08 	lds	r30, 0x084D
    4d08:	f0 91 4e 08 	lds	r31, 0x084E
    4d0c:	8c 81       	ldd	r24, Y+4	; 0x04
    4d0e:	9d 81       	ldd	r25, Y+5	; 0x05
    4d10:	95 8b       	std	Z+21, r25	; 0x15
    4d12:	84 8b       	std	Z+20, r24	; 0x14
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    4d14:	8a 81       	ldd	r24, Y+2	; 0x02
    4d16:	9b 81       	ldd	r25, Y+3	; 0x03
    4d18:	0e 94 18 20 	call	0x4030	; 0x4030 <OSTmr_Task+0x6d2>
    OS_EXIT_CRITICAL();
    4d1c:	89 81       	ldd	r24, Y+1	; 0x01
    4d1e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
    4d22:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    OS_ENTER_CRITICAL();
    4d26:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4d2a:	89 83       	std	Y+1, r24	; 0x01
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    4d2c:	e0 91 4d 08 	lds	r30, 0x084D
    4d30:	f0 91 4e 08 	lds	r31, 0x084E
    4d34:	87 89       	ldd	r24, Z+23	; 0x17
    4d36:	28 2f       	mov	r18, r24
    4d38:	30 e0       	ldi	r19, 0x00	; 0
    4d3a:	39 87       	std	Y+9, r19	; 0x09
    4d3c:	28 87       	std	Y+8, r18	; 0x08
    4d3e:	88 85       	ldd	r24, Y+8	; 0x08
    4d40:	99 85       	ldd	r25, Y+9	; 0x09
    4d42:	00 97       	sbiw	r24, 0x00	; 0
    4d44:	31 f0       	breq	.+12     	; 0x4d52 <OS_SchedNew+0x766>
    4d46:	28 85       	ldd	r18, Y+8	; 0x08
    4d48:	39 85       	ldd	r19, Y+9	; 0x09
    4d4a:	22 30       	cpi	r18, 0x02	; 2
    4d4c:	31 05       	cpc	r19, r1
    4d4e:	29 f0       	breq	.+10     	; 0x4d5a <OS_SchedNew+0x76e>
    4d50:	09 c0       	rjmp	.+18     	; 0x4d64 <OS_SchedNew+0x778>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    4d52:	ee 81       	ldd	r30, Y+6	; 0x06
    4d54:	ff 81       	ldd	r31, Y+7	; 0x07
    4d56:	10 82       	st	Z, r1
    4d58:	12 c0       	rjmp	.+36     	; 0x4d7e <OS_SchedNew+0x792>
             break;

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    4d5a:	ee 81       	ldd	r30, Y+6	; 0x06
    4d5c:	ff 81       	ldd	r31, Y+7	; 0x07
    4d5e:	8e e0       	ldi	r24, 0x0E	; 14
    4d60:	80 83       	st	Z, r24
    4d62:	0d c0       	rjmp	.+26     	; 0x4d7e <OS_SchedNew+0x792>
             break;

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    4d64:	80 91 4d 08 	lds	r24, 0x084D
    4d68:	90 91 4e 08 	lds	r25, 0x084E
    4d6c:	2a 81       	ldd	r18, Y+2	; 0x02
    4d6e:	3b 81       	ldd	r19, Y+3	; 0x03
    4d70:	b9 01       	movw	r22, r18
    4d72:	0e 94 8d 20 	call	0x411a	; 0x411a <OSTmr_Task+0x7bc>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    4d76:	ee 81       	ldd	r30, Y+6	; 0x06
    4d78:	ff 81       	ldd	r31, Y+7	; 0x07
    4d7a:	8a e0       	ldi	r24, 0x0A	; 10
    4d7c:	80 83       	st	Z, r24
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    4d7e:	e0 91 4d 08 	lds	r30, 0x084D
    4d82:	f0 91 4e 08 	lds	r31, 0x084E
    4d86:	16 8a       	std	Z+22, r1	; 0x16
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    4d88:	e0 91 4d 08 	lds	r30, 0x084D
    4d8c:	f0 91 4e 08 	lds	r31, 0x084E
    4d90:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    4d92:	e0 91 4d 08 	lds	r30, 0x084D
    4d96:	f0 91 4e 08 	lds	r31, 0x084E
    4d9a:	13 8a       	std	Z+19, r1	; 0x13
    4d9c:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
    4d9e:	89 81       	ldd	r24, Y+1	; 0x01
    4da0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    4da4:	29 96       	adiw	r28, 0x09	; 9
    4da6:	0f b6       	in	r0, 0x3f	; 63
    4da8:	f8 94       	cli
    4daa:	de bf       	out	0x3e, r29	; 62
    4dac:	0f be       	out	0x3f, r0	; 63
    4dae:	cd bf       	out	0x3d, r28	; 61
    4db0:	cf 91       	pop	r28
    4db2:	df 91       	pop	r29
    4db4:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    4db6:	df 93       	push	r29
    4db8:	cf 93       	push	r28
    4dba:	cd b7       	in	r28, 0x3d	; 61
    4dbc:	de b7       	in	r29, 0x3e	; 62
    4dbe:	28 97       	sbiw	r28, 0x08	; 8
    4dc0:	0f b6       	in	r0, 0x3f	; 63
    4dc2:	f8 94       	cli
    4dc4:	de bf       	out	0x3e, r29	; 62
    4dc6:	0f be       	out	0x3f, r0	; 63
    4dc8:	cd bf       	out	0x3d, r28	; 61
    4dca:	9c 83       	std	Y+4, r25	; 0x04
    4dcc:	8b 83       	std	Y+3, r24	; 0x03
    4dce:	6d 83       	std	Y+5, r22	; 0x05
    4dd0:	5f 83       	std	Y+7, r21	; 0x07
    4dd2:	4e 83       	std	Y+6, r20	; 0x06
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4dd4:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    4dd6:	eb 81       	ldd	r30, Y+3	; 0x03
    4dd8:	fc 81       	ldd	r31, Y+4	; 0x04
    4dda:	80 81       	ld	r24, Z
    4ddc:	83 30       	cpi	r24, 0x03	; 3
    4dde:	31 f0       	breq	.+12     	; 0x4dec <OS_SchedNew+0x800>
        *perr = OS_ERR_EVENT_TYPE;
    4de0:	ee 81       	ldd	r30, Y+6	; 0x06
    4de2:	ff 81       	ldd	r31, Y+7	; 0x07
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	80 83       	st	Z, r24
        return (0);
    4de8:	18 86       	std	Y+8, r1	; 0x08
    4dea:	3f c0       	rjmp	.+126    	; 0x4e6a <OS_SchedNew+0x87e>
    }
    OS_ENTER_CRITICAL();
    4dec:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4df0:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    4df2:	eb 81       	ldd	r30, Y+3	; 0x03
    4df4:	fc 81       	ldd	r31, Y+4	; 0x04
    4df6:	85 81       	ldd	r24, Z+5	; 0x05
    4df8:	88 23       	and	r24, r24
    4dfa:	81 f1       	breq	.+96     	; 0x4e5c <OS_SchedNew+0x870>
        nbr_tasks = 0;
    4dfc:	1a 82       	std	Y+2, r1	; 0x02
        switch (opt) {
    4dfe:	8d 81       	ldd	r24, Y+5	; 0x05
    4e00:	88 2f       	mov	r24, r24
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	81 30       	cpi	r24, 0x01	; 1
    4e06:	91 05       	cpc	r25, r1
    4e08:	61 f0       	breq	.+24     	; 0x4e22 <OS_SchedNew+0x836>
    4e0a:	11 c0       	rjmp	.+34     	; 0x4e2e <OS_SchedNew+0x842>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    4e0c:	8b 81       	ldd	r24, Y+3	; 0x03
    4e0e:	9c 81       	ldd	r25, Y+4	; 0x04
    4e10:	60 e0       	ldi	r22, 0x00	; 0
    4e12:	70 e0       	ldi	r23, 0x00	; 0
    4e14:	41 e0       	ldi	r20, 0x01	; 1
    4e16:	22 e0       	ldi	r18, 0x02	; 2
    4e18:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <OSTmr_Task+0x5c8>
                     nbr_tasks++;
    4e1c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e1e:	8f 5f       	subi	r24, 0xFF	; 255
    4e20:	8a 83       	std	Y+2, r24	; 0x02
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    4e22:	eb 81       	ldd	r30, Y+3	; 0x03
    4e24:	fc 81       	ldd	r31, Y+4	; 0x04
    4e26:	85 81       	ldd	r24, Z+5	; 0x05
    4e28:	88 23       	and	r24, r24
    4e2a:	81 f7       	brne	.-32     	; 0x4e0c <OS_SchedNew+0x820>
    4e2c:	0b c0       	rjmp	.+22     	; 0x4e44 <OS_SchedNew+0x858>
                 }
                 break;
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    4e2e:	8b 81       	ldd	r24, Y+3	; 0x03
    4e30:	9c 81       	ldd	r25, Y+4	; 0x04
    4e32:	60 e0       	ldi	r22, 0x00	; 0
    4e34:	70 e0       	ldi	r23, 0x00	; 0
    4e36:	41 e0       	ldi	r20, 0x01	; 1
    4e38:	22 e0       	ldi	r18, 0x02	; 2
    4e3a:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <OSTmr_Task+0x5c8>
                 nbr_tasks++;
    4e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e40:	8f 5f       	subi	r24, 0xFF	; 255
    4e42:	8a 83       	std	Y+2, r24	; 0x02
                 break;
        }
        OS_EXIT_CRITICAL();
    4e44:	89 81       	ldd	r24, Y+1	; 0x01
    4e46:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    4e4a:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
        *perr = OS_ERR_PEND_ABORT;
    4e4e:	ee 81       	ldd	r30, Y+6	; 0x06
    4e50:	ff 81       	ldd	r31, Y+7	; 0x07
    4e52:	8e e0       	ldi	r24, 0x0E	; 14
    4e54:	80 83       	st	Z, r24
        return (nbr_tasks);
    4e56:	8a 81       	ldd	r24, Y+2	; 0x02
    4e58:	88 87       	std	Y+8, r24	; 0x08
    4e5a:	07 c0       	rjmp	.+14     	; 0x4e6a <OS_SchedNew+0x87e>
    }
    OS_EXIT_CRITICAL();
    4e5c:	89 81       	ldd	r24, Y+1	; 0x01
    4e5e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    4e62:	ee 81       	ldd	r30, Y+6	; 0x06
    4e64:	ff 81       	ldd	r31, Y+7	; 0x07
    4e66:	10 82       	st	Z, r1
    return (0);                                       /* No tasks waiting on semaphore                 */
    4e68:	18 86       	std	Y+8, r1	; 0x08
    4e6a:	88 85       	ldd	r24, Y+8	; 0x08
}
    4e6c:	28 96       	adiw	r28, 0x08	; 8
    4e6e:	0f b6       	in	r0, 0x3f	; 63
    4e70:	f8 94       	cli
    4e72:	de bf       	out	0x3e, r29	; 62
    4e74:	0f be       	out	0x3f, r0	; 63
    4e76:	cd bf       	out	0x3d, r28	; 61
    4e78:	cf 91       	pop	r28
    4e7a:	df 91       	pop	r29
    4e7c:	08 95       	ret
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    4e7e:	df 93       	push	r29
    4e80:	cf 93       	push	r28
    4e82:	00 d0       	rcall	.+0      	; 0x4e84 <OS_SchedNew+0x898>
    4e84:	0f 92       	push	r0
    4e86:	cd b7       	in	r28, 0x3d	; 61
    4e88:	de b7       	in	r29, 0x3e	; 62
    4e8a:	9b 83       	std	Y+3, r25	; 0x03
    4e8c:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4e8e:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    4e90:	ea 81       	ldd	r30, Y+2	; 0x02
    4e92:	fb 81       	ldd	r31, Y+3	; 0x03
    4e94:	80 81       	ld	r24, Z
    4e96:	83 30       	cpi	r24, 0x03	; 3
    4e98:	19 f0       	breq	.+6      	; 0x4ea0 <OS_SchedNew+0x8b4>
        return (OS_ERR_EVENT_TYPE);
    4e9a:	21 e0       	ldi	r18, 0x01	; 1
    4e9c:	2c 83       	std	Y+4, r18	; 0x04
    4e9e:	32 c0       	rjmp	.+100    	; 0x4f04 <OS_SchedNew+0x918>
    }
    OS_ENTER_CRITICAL();
    4ea0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4ea4:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    4ea6:	ea 81       	ldd	r30, Y+2	; 0x02
    4ea8:	fb 81       	ldd	r31, Y+3	; 0x03
    4eaa:	85 81       	ldd	r24, Z+5	; 0x05
    4eac:	88 23       	and	r24, r24
    4eae:	79 f0       	breq	.+30     	; 0x4ece <OS_SchedNew+0x8e2>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    4eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb2:	9b 81       	ldd	r25, Y+3	; 0x03
    4eb4:	60 e0       	ldi	r22, 0x00	; 0
    4eb6:	70 e0       	ldi	r23, 0x00	; 0
    4eb8:	41 e0       	ldi	r20, 0x01	; 1
    4eba:	20 e0       	ldi	r18, 0x00	; 0
    4ebc:	0e 94 93 1f 	call	0x3f26	; 0x3f26 <OSTmr_Task+0x5c8>
        OS_EXIT_CRITICAL();
    4ec0:	89 81       	ldd	r24, Y+1	; 0x01
    4ec2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    4ec6:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
        return (OS_ERR_NONE);
    4eca:	1c 82       	std	Y+4, r1	; 0x04
    4ecc:	1b c0       	rjmp	.+54     	; 0x4f04 <OS_SchedNew+0x918>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    4ece:	ea 81       	ldd	r30, Y+2	; 0x02
    4ed0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ed2:	83 81       	ldd	r24, Z+3	; 0x03
    4ed4:	94 81       	ldd	r25, Z+4	; 0x04
    4ed6:	2f ef       	ldi	r18, 0xFF	; 255
    4ed8:	8f 3f       	cpi	r24, 0xFF	; 255
    4eda:	92 07       	cpc	r25, r18
    4edc:	71 f0       	breq	.+28     	; 0x4efa <OS_SchedNew+0x90e>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    4ede:	ea 81       	ldd	r30, Y+2	; 0x02
    4ee0:	fb 81       	ldd	r31, Y+3	; 0x03
    4ee2:	83 81       	ldd	r24, Z+3	; 0x03
    4ee4:	94 81       	ldd	r25, Z+4	; 0x04
    4ee6:	01 96       	adiw	r24, 0x01	; 1
    4ee8:	ea 81       	ldd	r30, Y+2	; 0x02
    4eea:	fb 81       	ldd	r31, Y+3	; 0x03
    4eec:	94 83       	std	Z+4, r25	; 0x04
    4eee:	83 83       	std	Z+3, r24	; 0x03
        OS_EXIT_CRITICAL();
    4ef0:	89 81       	ldd	r24, Y+1	; 0x01
    4ef2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    4ef6:	1c 82       	std	Y+4, r1	; 0x04
    4ef8:	05 c0       	rjmp	.+10     	; 0x4f04 <OS_SchedNew+0x918>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    4efa:	89 81       	ldd	r24, Y+1	; 0x01
    4efc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
    4f00:	82 e3       	ldi	r24, 0x32	; 50
    4f02:	8c 83       	std	Y+4, r24	; 0x04
    4f04:	8c 81       	ldd	r24, Y+4	; 0x04
}
    4f06:	0f 90       	pop	r0
    4f08:	0f 90       	pop	r0
    4f0a:	0f 90       	pop	r0
    4f0c:	0f 90       	pop	r0
    4f0e:	cf 91       	pop	r28
    4f10:	df 91       	pop	r29
    4f12:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    4f14:	df 93       	push	r29
    4f16:	cf 93       	push	r28
    4f18:	cd b7       	in	r28, 0x3d	; 61
    4f1a:	de b7       	in	r29, 0x3e	; 62
    4f1c:	2b 97       	sbiw	r28, 0x0b	; 11
    4f1e:	0f b6       	in	r0, 0x3f	; 63
    4f20:	f8 94       	cli
    4f22:	de bf       	out	0x3e, r29	; 62
    4f24:	0f be       	out	0x3f, r0	; 63
    4f26:	cd bf       	out	0x3d, r28	; 61
    4f28:	98 87       	std	Y+8, r25	; 0x08
    4f2a:	8f 83       	std	Y+7, r24	; 0x07
    4f2c:	7a 87       	std	Y+10, r23	; 0x0a
    4f2e:	69 87       	std	Y+9, r22	; 0x09
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4f30:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    4f32:	ef 81       	ldd	r30, Y+7	; 0x07
    4f34:	f8 85       	ldd	r31, Y+8	; 0x08
    4f36:	80 81       	ld	r24, Z
    4f38:	83 30       	cpi	r24, 0x03	; 3
    4f3a:	19 f0       	breq	.+6      	; 0x4f42 <OS_SchedNew+0x956>
        return (OS_ERR_EVENT_TYPE);
    4f3c:	81 e0       	ldi	r24, 0x01	; 1
    4f3e:	8b 87       	std	Y+11, r24	; 0x0b
    4f40:	37 c0       	rjmp	.+110    	; 0x4fb0 <OS_SchedNew+0x9c4>
    }
    OS_ENTER_CRITICAL();
    4f42:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4f46:	89 83       	std	Y+1, r24	; 0x01
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    4f48:	ef 81       	ldd	r30, Y+7	; 0x07
    4f4a:	f8 85       	ldd	r31, Y+8	; 0x08
    4f4c:	85 81       	ldd	r24, Z+5	; 0x05
    4f4e:	e9 85       	ldd	r30, Y+9	; 0x09
    4f50:	fa 85       	ldd	r31, Y+10	; 0x0a
    4f52:	84 83       	std	Z+4, r24	; 0x04
    psrc                   = &pevent->OSEventTbl[0];
    4f54:	8f 81       	ldd	r24, Y+7	; 0x07
    4f56:	98 85       	ldd	r25, Y+8	; 0x08
    4f58:	06 96       	adiw	r24, 0x06	; 6
    4f5a:	9e 83       	std	Y+6, r25	; 0x06
    4f5c:	8d 83       	std	Y+5, r24	; 0x05
    pdest                  = &p_sem_data->OSEventTbl[0];
    4f5e:	89 85       	ldd	r24, Y+9	; 0x09
    4f60:	9a 85       	ldd	r25, Y+10	; 0x0a
    4f62:	02 96       	adiw	r24, 0x02	; 2
    4f64:	9c 83       	std	Y+4, r25	; 0x04
    4f66:	8b 83       	std	Y+3, r24	; 0x03
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    4f68:	1a 82       	std	Y+2, r1	; 0x02
    4f6a:	13 c0       	rjmp	.+38     	; 0x4f92 <OS_SchedNew+0x9a6>
        *pdest++ = *psrc++;
    4f6c:	ed 81       	ldd	r30, Y+5	; 0x05
    4f6e:	fe 81       	ldd	r31, Y+6	; 0x06
    4f70:	80 81       	ld	r24, Z
    4f72:	eb 81       	ldd	r30, Y+3	; 0x03
    4f74:	fc 81       	ldd	r31, Y+4	; 0x04
    4f76:	80 83       	st	Z, r24
    4f78:	8b 81       	ldd	r24, Y+3	; 0x03
    4f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    4f7c:	01 96       	adiw	r24, 0x01	; 1
    4f7e:	9c 83       	std	Y+4, r25	; 0x04
    4f80:	8b 83       	std	Y+3, r24	; 0x03
    4f82:	8d 81       	ldd	r24, Y+5	; 0x05
    4f84:	9e 81       	ldd	r25, Y+6	; 0x06
    4f86:	01 96       	adiw	r24, 0x01	; 1
    4f88:	9e 83       	std	Y+6, r25	; 0x06
    4f8a:	8d 83       	std	Y+5, r24	; 0x05
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    4f8c:	8a 81       	ldd	r24, Y+2	; 0x02
    4f8e:	8f 5f       	subi	r24, 0xFF	; 255
    4f90:	8a 83       	std	Y+2, r24	; 0x02
    4f92:	8a 81       	ldd	r24, Y+2	; 0x02
    4f94:	82 30       	cpi	r24, 0x02	; 2
    4f96:	50 f3       	brcs	.-44     	; 0x4f6c <OS_SchedNew+0x980>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    4f98:	ef 81       	ldd	r30, Y+7	; 0x07
    4f9a:	f8 85       	ldd	r31, Y+8	; 0x08
    4f9c:	83 81       	ldd	r24, Z+3	; 0x03
    4f9e:	94 81       	ldd	r25, Z+4	; 0x04
    4fa0:	e9 85       	ldd	r30, Y+9	; 0x09
    4fa2:	fa 85       	ldd	r31, Y+10	; 0x0a
    4fa4:	91 83       	std	Z+1, r25	; 0x01
    4fa6:	80 83       	st	Z, r24
    OS_EXIT_CRITICAL();
    4fa8:	89 81       	ldd	r24, Y+1	; 0x01
    4faa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    4fae:	1b 86       	std	Y+11, r1	; 0x0b
    4fb0:	8b 85       	ldd	r24, Y+11	; 0x0b
}
    4fb2:	2b 96       	adiw	r28, 0x0b	; 11
    4fb4:	0f b6       	in	r0, 0x3f	; 63
    4fb6:	f8 94       	cli
    4fb8:	de bf       	out	0x3e, r29	; 62
    4fba:	0f be       	out	0x3f, r0	; 63
    4fbc:	cd bf       	out	0x3d, r28	; 61
    4fbe:	cf 91       	pop	r28
    4fc0:	df 91       	pop	r29
    4fc2:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    4fc4:	df 93       	push	r29
    4fc6:	cf 93       	push	r28
    4fc8:	cd b7       	in	r28, 0x3d	; 61
    4fca:	de b7       	in	r29, 0x3e	; 62
    4fcc:	27 97       	sbiw	r28, 0x07	; 7
    4fce:	0f b6       	in	r0, 0x3f	; 63
    4fd0:	f8 94       	cli
    4fd2:	de bf       	out	0x3e, r29	; 62
    4fd4:	0f be       	out	0x3f, r0	; 63
    4fd6:	cd bf       	out	0x3d, r28	; 61
    4fd8:	9b 83       	std	Y+3, r25	; 0x03
    4fda:	8a 83       	std	Y+2, r24	; 0x02
    4fdc:	7d 83       	std	Y+5, r23	; 0x05
    4fde:	6c 83       	std	Y+4, r22	; 0x04
    4fe0:	5f 83       	std	Y+7, r21	; 0x07
    4fe2:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4fe4:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    4fe6:	ea 81       	ldd	r30, Y+2	; 0x02
    4fe8:	fb 81       	ldd	r31, Y+3	; 0x03
    4fea:	80 81       	ld	r24, Z
    4fec:	83 30       	cpi	r24, 0x03	; 3
    4fee:	29 f0       	breq	.+10     	; 0x4ffa <OS_SchedNew+0xa0e>
        *perr = OS_ERR_EVENT_TYPE;
    4ff0:	ee 81       	ldd	r30, Y+6	; 0x06
    4ff2:	ff 81       	ldd	r31, Y+7	; 0x07
    4ff4:	81 e0       	ldi	r24, 0x01	; 1
    4ff6:	80 83       	st	Z, r24
    4ff8:	26 c0       	rjmp	.+76     	; 0x5046 <OS_SchedNew+0xa5a>
        return;
    }
    OS_ENTER_CRITICAL();
    4ffa:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4ffe:	89 83       	std	Y+1, r24	; 0x01
    *perr = OS_ERR_NONE;
    5000:	ee 81       	ldd	r30, Y+6	; 0x06
    5002:	ff 81       	ldd	r31, Y+7	; 0x07
    5004:	10 82       	st	Z, r1
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    5006:	ea 81       	ldd	r30, Y+2	; 0x02
    5008:	fb 81       	ldd	r31, Y+3	; 0x03
    500a:	83 81       	ldd	r24, Z+3	; 0x03
    500c:	94 81       	ldd	r25, Z+4	; 0x04
    500e:	00 97       	sbiw	r24, 0x00	; 0
    5010:	39 f0       	breq	.+14     	; 0x5020 <OS_SchedNew+0xa34>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    5012:	ea 81       	ldd	r30, Y+2	; 0x02
    5014:	fb 81       	ldd	r31, Y+3	; 0x03
    5016:	8c 81       	ldd	r24, Y+4	; 0x04
    5018:	9d 81       	ldd	r25, Y+5	; 0x05
    501a:	94 83       	std	Z+4, r25	; 0x04
    501c:	83 83       	std	Z+3, r24	; 0x03
    501e:	10 c0       	rjmp	.+32     	; 0x5040 <OS_SchedNew+0xa54>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    5020:	ea 81       	ldd	r30, Y+2	; 0x02
    5022:	fb 81       	ldd	r31, Y+3	; 0x03
    5024:	85 81       	ldd	r24, Z+5	; 0x05
    5026:	88 23       	and	r24, r24
    5028:	39 f4       	brne	.+14     	; 0x5038 <OS_SchedNew+0xa4c>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    502a:	ea 81       	ldd	r30, Y+2	; 0x02
    502c:	fb 81       	ldd	r31, Y+3	; 0x03
    502e:	8c 81       	ldd	r24, Y+4	; 0x04
    5030:	9d 81       	ldd	r25, Y+5	; 0x05
    5032:	94 83       	std	Z+4, r25	; 0x04
    5034:	83 83       	std	Z+3, r24	; 0x03
    5036:	04 c0       	rjmp	.+8      	; 0x5040 <OS_SchedNew+0xa54>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    5038:	ee 81       	ldd	r30, Y+6	; 0x06
    503a:	ff 81       	ldd	r31, Y+7	; 0x07
    503c:	89 e4       	ldi	r24, 0x49	; 73
    503e:	80 83       	st	Z, r24
        }
    }
    OS_EXIT_CRITICAL();
    5040:	89 81       	ldd	r24, Y+1	; 0x01
    5042:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    5046:	27 96       	adiw	r28, 0x07	; 7
    5048:	0f b6       	in	r0, 0x3f	; 63
    504a:	f8 94       	cli
    504c:	de bf       	out	0x3e, r29	; 62
    504e:	0f be       	out	0x3f, r0	; 63
    5050:	cd bf       	out	0x3d, r28	; 61
    5052:	cf 91       	pop	r28
    5054:	df 91       	pop	r29
    5056:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    5058:	af 92       	push	r10
    505a:	bf 92       	push	r11
    505c:	cf 92       	push	r12
    505e:	df 92       	push	r13
    5060:	ef 92       	push	r14
    5062:	ff 92       	push	r15
    5064:	0f 93       	push	r16
    5066:	1f 93       	push	r17
    5068:	df 93       	push	r29
    506a:	cf 93       	push	r28
    506c:	cd b7       	in	r28, 0x3d	; 61
    506e:	de b7       	in	r29, 0x3e	; 62
    5070:	2c 97       	sbiw	r28, 0x0c	; 12
    5072:	0f b6       	in	r0, 0x3f	; 63
    5074:	f8 94       	cli
    5076:	de bf       	out	0x3e, r29	; 62
    5078:	0f be       	out	0x3f, r0	; 63
    507a:	cd bf       	out	0x3d, r28	; 61
    507c:	9e 83       	std	Y+6, r25	; 0x06
    507e:	8d 83       	std	Y+5, r24	; 0x05
    5080:	78 87       	std	Y+8, r23	; 0x08
    5082:	6f 83       	std	Y+7, r22	; 0x07
    5084:	5a 87       	std	Y+10, r21	; 0x0a
    5086:	49 87       	std	Y+9, r20	; 0x09
    5088:	2b 87       	std	Y+11, r18	; 0x0b
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    508a:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    508c:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5090:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    5092:	80 91 4c 08 	lds	r24, 0x084C
    5096:	88 23       	and	r24, r24
    5098:	31 f0       	breq	.+12     	; 0x50a6 <OS_SchedNew+0xaba>
        OS_EXIT_CRITICAL();
    509a:	89 81       	ldd	r24, Y+1	; 0x01
    509c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    50a0:	8c e3       	ldi	r24, 0x3C	; 60
    50a2:	8c 87       	std	Y+12, r24	; 0x0c
    50a4:	5d c0       	rjmp	.+186    	; 0x5160 <OS_SchedNew+0xb74>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    50a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    50a8:	88 2f       	mov	r24, r24
    50aa:	90 e0       	ldi	r25, 0x00	; 0
    50ac:	88 0f       	add	r24, r24
    50ae:	99 1f       	adc	r25, r25
    50b0:	fc 01       	movw	r30, r24
    50b2:	e0 51       	subi	r30, 0x10	; 16
    50b4:	f4 4f       	sbci	r31, 0xF4	; 244
    50b6:	80 81       	ld	r24, Z
    50b8:	91 81       	ldd	r25, Z+1	; 0x01
    50ba:	00 97       	sbiw	r24, 0x00	; 0
    50bc:	09 f0       	breq	.+2      	; 0x50c0 <OS_SchedNew+0xad4>
    50be:	4b c0       	rjmp	.+150    	; 0x5156 <OS_SchedNew+0xb6a>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    50c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    50c2:	88 2f       	mov	r24, r24
    50c4:	90 e0       	ldi	r25, 0x00	; 0
    50c6:	88 0f       	add	r24, r24
    50c8:	99 1f       	adc	r25, r25
    50ca:	fc 01       	movw	r30, r24
    50cc:	e0 51       	subi	r30, 0x10	; 16
    50ce:	f4 4f       	sbci	r31, 0xF4	; 244
    50d0:	81 e0       	ldi	r24, 0x01	; 1
    50d2:	90 e0       	ldi	r25, 0x00	; 0
    50d4:	91 83       	std	Z+1, r25	; 0x01
    50d6:	80 83       	st	Z, r24
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    50d8:	89 81       	ldd	r24, Y+1	; 0x01
    50da:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    50de:	8d 81       	ldd	r24, Y+5	; 0x05
    50e0:	9e 81       	ldd	r25, Y+6	; 0x06
    50e2:	2f 81       	ldd	r18, Y+7	; 0x07
    50e4:	38 85       	ldd	r19, Y+8	; 0x08
    50e6:	49 85       	ldd	r20, Y+9	; 0x09
    50e8:	5a 85       	ldd	r21, Y+10	; 0x0a
    50ea:	b9 01       	movw	r22, r18
    50ec:	20 e0       	ldi	r18, 0x00	; 0
    50ee:	30 e0       	ldi	r19, 0x00	; 0
    50f0:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    50f4:	9c 83       	std	Y+4, r25	; 0x04
    50f6:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    50f8:	2b 81       	ldd	r18, Y+3	; 0x03
    50fa:	3c 81       	ldd	r19, Y+4	; 0x04
    50fc:	8b 85       	ldd	r24, Y+11	; 0x0b
    50fe:	b9 01       	movw	r22, r18
    5100:	40 e0       	ldi	r20, 0x00	; 0
    5102:	50 e0       	ldi	r21, 0x00	; 0
    5104:	20 e0       	ldi	r18, 0x00	; 0
    5106:	30 e0       	ldi	r19, 0x00	; 0
    5108:	ee 24       	eor	r14, r14
    510a:	ff 24       	eor	r15, r15
    510c:	87 01       	movw	r16, r14
    510e:	cc 24       	eor	r12, r12
    5110:	dd 24       	eor	r13, r13
    5112:	aa 24       	eor	r10, r10
    5114:	bb 24       	eor	r11, r11
    5116:	0e 94 8f 23 	call	0x471e	; 0x471e <OS_SchedNew+0x132>
    511a:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    511c:	8a 81       	ldd	r24, Y+2	; 0x02
    511e:	88 23       	and	r24, r24
    5120:	39 f4       	brne	.+14     	; 0x5130 <OS_SchedNew+0xb44>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    5122:	80 91 12 05 	lds	r24, 0x0512
    5126:	81 30       	cpi	r24, 0x01	; 1
    5128:	99 f4       	brne	.+38     	; 0x5150 <OS_SchedNew+0xb64>
                OS_Sched();
    512a:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    512e:	10 c0       	rjmp	.+32     	; 0x5150 <OS_SchedNew+0xb64>
            }
        } else {
            OS_ENTER_CRITICAL();
    5130:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5134:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    5136:	8b 85       	ldd	r24, Y+11	; 0x0b
    5138:	88 2f       	mov	r24, r24
    513a:	90 e0       	ldi	r25, 0x00	; 0
    513c:	88 0f       	add	r24, r24
    513e:	99 1f       	adc	r25, r25
    5140:	fc 01       	movw	r30, r24
    5142:	e0 51       	subi	r30, 0x10	; 16
    5144:	f4 4f       	sbci	r31, 0xF4	; 244
    5146:	11 82       	std	Z+1, r1	; 0x01
    5148:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    514a:	89 81       	ldd	r24, Y+1	; 0x01
    514c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
        return (err);
    5150:	8a 81       	ldd	r24, Y+2	; 0x02
    5152:	8c 87       	std	Y+12, r24	; 0x0c
    5154:	05 c0       	rjmp	.+10     	; 0x5160 <OS_SchedNew+0xb74>
    }
    OS_EXIT_CRITICAL();
    5156:	89 81       	ldd	r24, Y+1	; 0x01
    5158:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    515c:	88 e2       	ldi	r24, 0x28	; 40
    515e:	8c 87       	std	Y+12, r24	; 0x0c
    5160:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    5162:	2c 96       	adiw	r28, 0x0c	; 12
    5164:	0f b6       	in	r0, 0x3f	; 63
    5166:	f8 94       	cli
    5168:	de bf       	out	0x3e, r29	; 62
    516a:	0f be       	out	0x3f, r0	; 63
    516c:	cd bf       	out	0x3d, r28	; 61
    516e:	cf 91       	pop	r28
    5170:	df 91       	pop	r29
    5172:	1f 91       	pop	r17
    5174:	0f 91       	pop	r16
    5176:	ff 90       	pop	r15
    5178:	ef 90       	pop	r14
    517a:	df 90       	pop	r13
    517c:	cf 90       	pop	r12
    517e:	bf 90       	pop	r11
    5180:	af 90       	pop	r10
    5182:	08 95       	ret
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    5184:	8f 92       	push	r8
    5186:	9f 92       	push	r9
    5188:	af 92       	push	r10
    518a:	bf 92       	push	r11
    518c:	cf 92       	push	r12
    518e:	df 92       	push	r13
    5190:	ef 92       	push	r14
    5192:	ff 92       	push	r15
    5194:	0f 93       	push	r16
    5196:	1f 93       	push	r17
    5198:	df 93       	push	r29
    519a:	cf 93       	push	r28
    519c:	cd b7       	in	r28, 0x3d	; 61
    519e:	de b7       	in	r29, 0x3e	; 62
    51a0:	66 97       	sbiw	r28, 0x16	; 22
    51a2:	0f b6       	in	r0, 0x3f	; 63
    51a4:	f8 94       	cli
    51a6:	de bf       	out	0x3e, r29	; 62
    51a8:	0f be       	out	0x3f, r0	; 63
    51aa:	cd bf       	out	0x3d, r28	; 61
    51ac:	9e 83       	std	Y+6, r25	; 0x06
    51ae:	8d 83       	std	Y+5, r24	; 0x05
    51b0:	78 87       	std	Y+8, r23	; 0x08
    51b2:	6f 83       	std	Y+7, r22	; 0x07
    51b4:	5a 87       	std	Y+10, r21	; 0x0a
    51b6:	49 87       	std	Y+9, r20	; 0x09
    51b8:	2b 87       	std	Y+11, r18	; 0x0b
    51ba:	1d 87       	std	Y+13, r17	; 0x0d
    51bc:	0c 87       	std	Y+12, r16	; 0x0c
    51be:	ff 86       	std	Y+15, r15	; 0x0f
    51c0:	ee 86       	std	Y+14, r14	; 0x0e
    51c2:	a8 8a       	std	Y+16, r10	; 0x10
    51c4:	b9 8a       	std	Y+17, r11	; 0x11
    51c6:	ca 8a       	std	Y+18, r12	; 0x12
    51c8:	db 8a       	std	Y+19, r13	; 0x13
    51ca:	9d 8a       	std	Y+21, r9	; 0x15
    51cc:	8c 8a       	std	Y+20, r8	; 0x14
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    51ce:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    51d0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    51d4:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    51d6:	80 91 4c 08 	lds	r24, 0x084C
    51da:	88 23       	and	r24, r24
    51dc:	31 f0       	breq	.+12     	; 0x51ea <OS_SchedNew+0xbfe>
        OS_EXIT_CRITICAL();
    51de:	89 81       	ldd	r24, Y+1	; 0x01
    51e0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    51e4:	8c e3       	ldi	r24, 0x3C	; 60
    51e6:	8e 8b       	std	Y+22, r24	; 0x16
    51e8:	61 c0       	rjmp	.+194    	; 0x52ac <OS_SchedNew+0xcc0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    51ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    51ec:	88 2f       	mov	r24, r24
    51ee:	90 e0       	ldi	r25, 0x00	; 0
    51f0:	88 0f       	add	r24, r24
    51f2:	99 1f       	adc	r25, r25
    51f4:	fc 01       	movw	r30, r24
    51f6:	e0 51       	subi	r30, 0x10	; 16
    51f8:	f4 4f       	sbci	r31, 0xF4	; 244
    51fa:	80 81       	ld	r24, Z
    51fc:	91 81       	ldd	r25, Z+1	; 0x01
    51fe:	00 97       	sbiw	r24, 0x00	; 0
    5200:	09 f0       	breq	.+2      	; 0x5204 <OS_SchedNew+0xc18>
    5202:	4f c0       	rjmp	.+158    	; 0x52a2 <OS_SchedNew+0xcb6>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    5204:	8b 85       	ldd	r24, Y+11	; 0x0b
    5206:	88 2f       	mov	r24, r24
    5208:	90 e0       	ldi	r25, 0x00	; 0
    520a:	88 0f       	add	r24, r24
    520c:	99 1f       	adc	r25, r25
    520e:	fc 01       	movw	r30, r24
    5210:	e0 51       	subi	r30, 0x10	; 16
    5212:	f4 4f       	sbci	r31, 0xF4	; 244
    5214:	81 e0       	ldi	r24, 0x01	; 1
    5216:	90 e0       	ldi	r25, 0x00	; 0
    5218:	91 83       	std	Z+1, r25	; 0x01
    521a:	80 83       	st	Z, r24
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    521c:	89 81       	ldd	r24, Y+1	; 0x01
    521e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    5222:	8d 81       	ldd	r24, Y+5	; 0x05
    5224:	9e 81       	ldd	r25, Y+6	; 0x06
    5226:	2f 81       	ldd	r18, Y+7	; 0x07
    5228:	38 85       	ldd	r19, Y+8	; 0x08
    522a:	49 85       	ldd	r20, Y+9	; 0x09
    522c:	5a 85       	ldd	r21, Y+10	; 0x0a
    522e:	ee a1       	ldd	r30, Y+38	; 0x26
    5230:	ff a1       	ldd	r31, Y+39	; 0x27
    5232:	b9 01       	movw	r22, r18
    5234:	9f 01       	movw	r18, r30
    5236:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    523a:	9c 83       	std	Y+4, r25	; 0x04
    523c:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    523e:	2b 81       	ldd	r18, Y+3	; 0x03
    5240:	3c 81       	ldd	r19, Y+4	; 0x04
    5242:	4e 85       	ldd	r20, Y+14	; 0x0e
    5244:	5f 85       	ldd	r21, Y+15	; 0x0f
    5246:	ec 85       	ldd	r30, Y+12	; 0x0c
    5248:	fd 85       	ldd	r31, Y+13	; 0x0d
    524a:	e8 88       	ldd	r14, Y+16	; 0x10
    524c:	f9 88       	ldd	r15, Y+17	; 0x11
    524e:	0a 89       	ldd	r16, Y+18	; 0x12
    5250:	1b 89       	ldd	r17, Y+19	; 0x13
    5252:	ac 89       	ldd	r26, Y+20	; 0x14
    5254:	bd 89       	ldd	r27, Y+21	; 0x15
    5256:	ae a0       	ldd	r10, Y+38	; 0x26
    5258:	bf a0       	ldd	r11, Y+39	; 0x27
    525a:	8b 85       	ldd	r24, Y+11	; 0x0b
    525c:	b9 01       	movw	r22, r18
    525e:	9f 01       	movw	r18, r30
    5260:	6d 01       	movw	r12, r26
    5262:	0e 94 8f 23 	call	0x471e	; 0x471e <OS_SchedNew+0x132>
    5266:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    5268:	8a 81       	ldd	r24, Y+2	; 0x02
    526a:	88 23       	and	r24, r24
    526c:	39 f4       	brne	.+14     	; 0x527c <OS_SchedNew+0xc90>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    526e:	80 91 12 05 	lds	r24, 0x0512
    5272:	81 30       	cpi	r24, 0x01	; 1
    5274:	99 f4       	brne	.+38     	; 0x529c <OS_SchedNew+0xcb0>
                OS_Sched();
    5276:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    527a:	10 c0       	rjmp	.+32     	; 0x529c <OS_SchedNew+0xcb0>
            }
        } else {
            OS_ENTER_CRITICAL();
    527c:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5280:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    5282:	8b 85       	ldd	r24, Y+11	; 0x0b
    5284:	88 2f       	mov	r24, r24
    5286:	90 e0       	ldi	r25, 0x00	; 0
    5288:	88 0f       	add	r24, r24
    528a:	99 1f       	adc	r25, r25
    528c:	fc 01       	movw	r30, r24
    528e:	e0 51       	subi	r30, 0x10	; 16
    5290:	f4 4f       	sbci	r31, 0xF4	; 244
    5292:	11 82       	std	Z+1, r1	; 0x01
    5294:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    5296:	89 81       	ldd	r24, Y+1	; 0x01
    5298:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
        return (err);
    529c:	8a 81       	ldd	r24, Y+2	; 0x02
    529e:	8e 8b       	std	Y+22, r24	; 0x16
    52a0:	05 c0       	rjmp	.+10     	; 0x52ac <OS_SchedNew+0xcc0>
    }
    OS_EXIT_CRITICAL();
    52a2:	89 81       	ldd	r24, Y+1	; 0x01
    52a4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    52a8:	88 e2       	ldi	r24, 0x28	; 40
    52aa:	8e 8b       	std	Y+22, r24	; 0x16
    52ac:	8e 89       	ldd	r24, Y+22	; 0x16
}
    52ae:	66 96       	adiw	r28, 0x16	; 22
    52b0:	0f b6       	in	r0, 0x3f	; 63
    52b2:	f8 94       	cli
    52b4:	de bf       	out	0x3e, r29	; 62
    52b6:	0f be       	out	0x3f, r0	; 63
    52b8:	cd bf       	out	0x3d, r28	; 61
    52ba:	cf 91       	pop	r28
    52bc:	df 91       	pop	r29
    52be:	1f 91       	pop	r17
    52c0:	0f 91       	pop	r16
    52c2:	ff 90       	pop	r15
    52c4:	ef 90       	pop	r14
    52c6:	df 90       	pop	r13
    52c8:	cf 90       	pop	r12
    52ca:	bf 90       	pop	r11
    52cc:	af 90       	pop	r10
    52ce:	9f 90       	pop	r9
    52d0:	8f 90       	pop	r8
    52d2:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    52d4:	df 93       	push	r29
    52d6:	cf 93       	push	r28
    52d8:	cd b7       	in	r28, 0x3d	; 61
    52da:	de b7       	in	r29, 0x3e	; 62
    52dc:	2a 97       	sbiw	r28, 0x0a	; 10
    52de:	0f b6       	in	r0, 0x3f	; 63
    52e0:	f8 94       	cli
    52e2:	de bf       	out	0x3e, r29	; 62
    52e4:	0f be       	out	0x3f, r0	; 63
    52e6:	cd bf       	out	0x3d, r28	; 61
    52e8:	8d 83       	std	Y+5, r24	; 0x05
    52ea:	7f 83       	std	Y+7, r23	; 0x07
    52ec:	6e 83       	std	Y+6, r22	; 0x06
    52ee:	59 87       	std	Y+9, r21	; 0x09
    52f0:	48 87       	std	Y+8, r20	; 0x08
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    52f2:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    52f4:	80 91 4c 08 	lds	r24, 0x084C
    52f8:	88 23       	and	r24, r24
    52fa:	31 f0       	breq	.+12     	; 0x5308 <OS_SchedNew+0xd1c>
        *perr = OS_ERR_NAME_GET_ISR;
    52fc:	e8 85       	ldd	r30, Y+8	; 0x08
    52fe:	f9 85       	ldd	r31, Y+9	; 0x09
    5300:	81 e1       	ldi	r24, 0x11	; 17
    5302:	80 83       	st	Z, r24
        return (0);
    5304:	1a 86       	std	Y+10, r1	; 0x0a
    5306:	46 c0       	rjmp	.+140    	; 0x5394 <OS_SchedNew+0xda8>
    }
    OS_ENTER_CRITICAL();
    5308:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    530c:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    530e:	8d 81       	ldd	r24, Y+5	; 0x05
    5310:	8f 3f       	cpi	r24, 0xFF	; 255
    5312:	31 f4       	brne	.+12     	; 0x5320 <OS_SchedNew+0xd34>
        prio = OSTCBCur->OSTCBPrio;
    5314:	e0 91 4d 08 	lds	r30, 0x084D
    5318:	f0 91 4e 08 	lds	r31, 0x084E
    531c:	80 8d       	ldd	r24, Z+24	; 0x18
    531e:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    5320:	8d 81       	ldd	r24, Y+5	; 0x05
    5322:	88 2f       	mov	r24, r24
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	88 0f       	add	r24, r24
    5328:	99 1f       	adc	r25, r25
    532a:	fc 01       	movw	r30, r24
    532c:	e0 51       	subi	r30, 0x10	; 16
    532e:	f4 4f       	sbci	r31, 0xF4	; 244
    5330:	80 81       	ld	r24, Z
    5332:	91 81       	ldd	r25, Z+1	; 0x01
    5334:	9c 83       	std	Y+4, r25	; 0x04
    5336:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    5338:	8b 81       	ldd	r24, Y+3	; 0x03
    533a:	9c 81       	ldd	r25, Y+4	; 0x04
    533c:	00 97       	sbiw	r24, 0x00	; 0
    533e:	49 f4       	brne	.+18     	; 0x5352 <OS_SchedNew+0xd66>
        OS_EXIT_CRITICAL();                              /* No                                         */
    5340:	89 81       	ldd	r24, Y+1	; 0x01
    5342:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    5346:	e8 85       	ldd	r30, Y+8	; 0x08
    5348:	f9 85       	ldd	r31, Y+9	; 0x09
    534a:	83 e4       	ldi	r24, 0x43	; 67
    534c:	80 83       	st	Z, r24
        return (0);
    534e:	1a 86       	std	Y+10, r1	; 0x0a
    5350:	21 c0       	rjmp	.+66     	; 0x5394 <OS_SchedNew+0xda8>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    5352:	8b 81       	ldd	r24, Y+3	; 0x03
    5354:	9c 81       	ldd	r25, Y+4	; 0x04
    5356:	81 30       	cpi	r24, 0x01	; 1
    5358:	91 05       	cpc	r25, r1
    535a:	49 f4       	brne	.+18     	; 0x536e <OS_SchedNew+0xd82>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
    535c:	89 81       	ldd	r24, Y+1	; 0x01
    535e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    5362:	e8 85       	ldd	r30, Y+8	; 0x08
    5364:	f9 85       	ldd	r31, Y+9	; 0x09
    5366:	83 e4       	ldi	r24, 0x43	; 67
    5368:	80 83       	st	Z, r24
        return (0);
    536a:	1a 86       	std	Y+10, r1	; 0x0a
    536c:	13 c0       	rjmp	.+38     	; 0x5394 <OS_SchedNew+0xda8>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    536e:	8b 81       	ldd	r24, Y+3	; 0x03
    5370:	9c 81       	ldd	r25, Y+4	; 0x04
    5372:	9c 01       	movw	r18, r24
    5374:	21 5d       	subi	r18, 0xD1	; 209
    5376:	3f 4f       	sbci	r19, 0xFF	; 255
    5378:	8e 81       	ldd	r24, Y+6	; 0x06
    537a:	9f 81       	ldd	r25, Y+7	; 0x07
    537c:	b9 01       	movw	r22, r18
    537e:	0e 94 1d 23 	call	0x463a	; 0x463a <OS_SchedNew+0x4e>
    5382:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    5384:	89 81       	ldd	r24, Y+1	; 0x01
    5386:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    538a:	e8 85       	ldd	r30, Y+8	; 0x08
    538c:	f9 85       	ldd	r31, Y+9	; 0x09
    538e:	10 82       	st	Z, r1
    return (len);
    5390:	8a 81       	ldd	r24, Y+2	; 0x02
    5392:	8a 87       	std	Y+10, r24	; 0x0a
    5394:	8a 85       	ldd	r24, Y+10	; 0x0a
}
    5396:	2a 96       	adiw	r28, 0x0a	; 10
    5398:	0f b6       	in	r0, 0x3f	; 63
    539a:	f8 94       	cli
    539c:	de bf       	out	0x3e, r29	; 62
    539e:	0f be       	out	0x3f, r0	; 63
    53a0:	cd bf       	out	0x3d, r28	; 61
    53a2:	cf 91       	pop	r28
    53a4:	df 91       	pop	r29
    53a6:	08 95       	ret
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    53a8:	df 93       	push	r29
    53aa:	cf 93       	push	r28
    53ac:	cd b7       	in	r28, 0x3d	; 61
    53ae:	de b7       	in	r29, 0x3e	; 62
    53b0:	29 97       	sbiw	r28, 0x09	; 9
    53b2:	0f b6       	in	r0, 0x3f	; 63
    53b4:	f8 94       	cli
    53b6:	de bf       	out	0x3e, r29	; 62
    53b8:	0f be       	out	0x3f, r0	; 63
    53ba:	cd bf       	out	0x3d, r28	; 61
    53bc:	8d 83       	std	Y+5, r24	; 0x05
    53be:	7f 83       	std	Y+7, r23	; 0x07
    53c0:	6e 83       	std	Y+6, r22	; 0x06
    53c2:	59 87       	std	Y+9, r21	; 0x09
    53c4:	48 87       	std	Y+8, r20	; 0x08
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    53c6:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    53c8:	80 91 4c 08 	lds	r24, 0x084C
    53cc:	88 23       	and	r24, r24
    53ce:	29 f0       	breq	.+10     	; 0x53da <OS_SchedNew+0xdee>
        *perr = OS_ERR_NAME_SET_ISR;
    53d0:	e8 85       	ldd	r30, Y+8	; 0x08
    53d2:	f9 85       	ldd	r31, Y+9	; 0x09
    53d4:	82 e1       	ldi	r24, 0x12	; 18
    53d6:	80 83       	st	Z, r24
    53d8:	4f c0       	rjmp	.+158    	; 0x5478 <OS_SchedNew+0xe8c>
        return;
    }
    OS_ENTER_CRITICAL();
    53da:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    53de:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    53e0:	8d 81       	ldd	r24, Y+5	; 0x05
    53e2:	8f 3f       	cpi	r24, 0xFF	; 255
    53e4:	31 f4       	brne	.+12     	; 0x53f2 <OS_SchedNew+0xe06>
        prio = OSTCBCur->OSTCBPrio;
    53e6:	e0 91 4d 08 	lds	r30, 0x084D
    53ea:	f0 91 4e 08 	lds	r31, 0x084E
    53ee:	80 8d       	ldd	r24, Z+24	; 0x18
    53f0:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    53f2:	8d 81       	ldd	r24, Y+5	; 0x05
    53f4:	88 2f       	mov	r24, r24
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	88 0f       	add	r24, r24
    53fa:	99 1f       	adc	r25, r25
    53fc:	fc 01       	movw	r30, r24
    53fe:	e0 51       	subi	r30, 0x10	; 16
    5400:	f4 4f       	sbci	r31, 0xF4	; 244
    5402:	80 81       	ld	r24, Z
    5404:	91 81       	ldd	r25, Z+1	; 0x01
    5406:	9b 83       	std	Y+3, r25	; 0x03
    5408:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    540a:	8a 81       	ldd	r24, Y+2	; 0x02
    540c:	9b 81       	ldd	r25, Y+3	; 0x03
    540e:	00 97       	sbiw	r24, 0x00	; 0
    5410:	41 f4       	brne	.+16     	; 0x5422 <OS_SchedNew+0xe36>
        OS_EXIT_CRITICAL();                          /* No                                             */
    5412:	89 81       	ldd	r24, Y+1	; 0x01
    5414:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    5418:	e8 85       	ldd	r30, Y+8	; 0x08
    541a:	f9 85       	ldd	r31, Y+9	; 0x09
    541c:	83 e4       	ldi	r24, 0x43	; 67
    541e:	80 83       	st	Z, r24
    5420:	2b c0       	rjmp	.+86     	; 0x5478 <OS_SchedNew+0xe8c>
        return;
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    5422:	8a 81       	ldd	r24, Y+2	; 0x02
    5424:	9b 81       	ldd	r25, Y+3	; 0x03
    5426:	81 30       	cpi	r24, 0x01	; 1
    5428:	91 05       	cpc	r25, r1
    542a:	41 f4       	brne	.+16     	; 0x543c <OS_SchedNew+0xe50>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
    542c:	89 81       	ldd	r24, Y+1	; 0x01
    542e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    5432:	e8 85       	ldd	r30, Y+8	; 0x08
    5434:	f9 85       	ldd	r31, Y+9	; 0x09
    5436:	83 e4       	ldi	r24, 0x43	; 67
    5438:	80 83       	st	Z, r24
    543a:	1e c0       	rjmp	.+60     	; 0x5478 <OS_SchedNew+0xe8c>
        return;
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    543c:	8e 81       	ldd	r24, Y+6	; 0x06
    543e:	9f 81       	ldd	r25, Y+7	; 0x07
    5440:	0e 94 4e 23 	call	0x469c	; 0x469c <OS_SchedNew+0xb0>
    5444:	8c 83       	std	Y+4, r24	; 0x04
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    5446:	8c 81       	ldd	r24, Y+4	; 0x04
    5448:	80 31       	cpi	r24, 0x10	; 16
    544a:	40 f0       	brcs	.+16     	; 0x545c <OS_SchedNew+0xe70>
        OS_EXIT_CRITICAL();
    544c:	89 81       	ldd	r24, Y+1	; 0x01
    544e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    5452:	e8 85       	ldd	r30, Y+8	; 0x08
    5454:	f9 85       	ldd	r31, Y+9	; 0x09
    5456:	81 e4       	ldi	r24, 0x41	; 65
    5458:	80 83       	st	Z, r24
    545a:	0e c0       	rjmp	.+28     	; 0x5478 <OS_SchedNew+0xe8c>
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    545c:	8a 81       	ldd	r24, Y+2	; 0x02
    545e:	9b 81       	ldd	r25, Y+3	; 0x03
    5460:	8f 96       	adiw	r24, 0x2f	; 47
    5462:	2e 81       	ldd	r18, Y+6	; 0x06
    5464:	3f 81       	ldd	r19, Y+7	; 0x07
    5466:	b9 01       	movw	r22, r18
    5468:	0e 94 1d 23 	call	0x463a	; 0x463a <OS_SchedNew+0x4e>
    OS_EXIT_CRITICAL();
    546c:	89 81       	ldd	r24, Y+1	; 0x01
    546e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    5472:	e8 85       	ldd	r30, Y+8	; 0x08
    5474:	f9 85       	ldd	r31, Y+9	; 0x09
    5476:	10 82       	st	Z, r1
}
    5478:	29 96       	adiw	r28, 0x09	; 9
    547a:	0f b6       	in	r0, 0x3f	; 63
    547c:	f8 94       	cli
    547e:	de bf       	out	0x3e, r29	; 62
    5480:	0f be       	out	0x3f, r0	; 63
    5482:	cd bf       	out	0x3d, r28	; 61
    5484:	cf 91       	pop	r28
    5486:	df 91       	pop	r29
    5488:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    548a:	df 93       	push	r29
    548c:	cf 93       	push	r28
    548e:	00 d0       	rcall	.+0      	; 0x5490 <OS_SchedNew+0xea4>
    5490:	0f 92       	push	r0
    5492:	0f 92       	push	r0
    5494:	cd b7       	in	r28, 0x3d	; 61
    5496:	de b7       	in	r29, 0x3e	; 62
    5498:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    549a:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    549c:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    54a0:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];
    54a2:	8c 81       	ldd	r24, Y+4	; 0x04
    54a4:	88 2f       	mov	r24, r24
    54a6:	90 e0       	ldi	r25, 0x00	; 0
    54a8:	88 0f       	add	r24, r24
    54aa:	99 1f       	adc	r25, r25
    54ac:	fc 01       	movw	r30, r24
    54ae:	e0 51       	subi	r30, 0x10	; 16
    54b0:	f4 4f       	sbci	r31, 0xF4	; 244
    54b2:	80 81       	ld	r24, Z
    54b4:	91 81       	ldd	r25, Z+1	; 0x01
    54b6:	9b 83       	std	Y+3, r25	; 0x03
    54b8:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    54ba:	8a 81       	ldd	r24, Y+2	; 0x02
    54bc:	9b 81       	ldd	r25, Y+3	; 0x03
    54be:	00 97       	sbiw	r24, 0x00	; 0
    54c0:	31 f4       	brne	.+12     	; 0x54ce <OS_SchedNew+0xee2>
        OS_EXIT_CRITICAL();
    54c2:	89 81       	ldd	r24, Y+1	; 0x01
    54c4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
    54c8:	86 e4       	ldi	r24, 0x46	; 70
    54ca:	8d 83       	std	Y+5, r24	; 0x05
    54cc:	5d c0       	rjmp	.+186    	; 0x5588 <OS_SchedNew+0xf9c>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    54ce:	8a 81       	ldd	r24, Y+2	; 0x02
    54d0:	9b 81       	ldd	r25, Y+3	; 0x03
    54d2:	81 30       	cpi	r24, 0x01	; 1
    54d4:	91 05       	cpc	r25, r1
    54d6:	31 f4       	brne	.+12     	; 0x54e4 <OS_SchedNew+0xef8>
        OS_EXIT_CRITICAL();
    54d8:	89 81       	ldd	r24, Y+1	; 0x01
    54da:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    54de:	83 e4       	ldi	r24, 0x43	; 67
    54e0:	8d 83       	std	Y+5, r24	; 0x05
    54e2:	52 c0       	rjmp	.+164    	; 0x5588 <OS_SchedNew+0xf9c>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    54e4:	ea 81       	ldd	r30, Y+2	; 0x02
    54e6:	fb 81       	ldd	r31, Y+3	; 0x03
    54e8:	86 89       	ldd	r24, Z+22	; 0x16
    54ea:	88 2f       	mov	r24, r24
    54ec:	90 e0       	ldi	r25, 0x00	; 0
    54ee:	88 70       	andi	r24, 0x08	; 8
    54f0:	90 70       	andi	r25, 0x00	; 0
    54f2:	00 97       	sbiw	r24, 0x00	; 0
    54f4:	09 f4       	brne	.+2      	; 0x54f8 <OS_SchedNew+0xf0c>
    54f6:	43 c0       	rjmp	.+134    	; 0x557e <OS_SchedNew+0xf92>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    54f8:	ea 81       	ldd	r30, Y+2	; 0x02
    54fa:	fb 81       	ldd	r31, Y+3	; 0x03
    54fc:	86 89       	ldd	r24, Z+22	; 0x16
    54fe:	87 7f       	andi	r24, 0xF7	; 247
    5500:	ea 81       	ldd	r30, Y+2	; 0x02
    5502:	fb 81       	ldd	r31, Y+3	; 0x03
    5504:	86 8b       	std	Z+22, r24	; 0x16
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    5506:	ea 81       	ldd	r30, Y+2	; 0x02
    5508:	fb 81       	ldd	r31, Y+3	; 0x03
    550a:	86 89       	ldd	r24, Z+22	; 0x16
    550c:	88 23       	and	r24, r24
    550e:	91 f5       	brne	.+100    	; 0x5574 <OS_SchedNew+0xf88>
            if (ptcb->OSTCBDly == 0) {
    5510:	ea 81       	ldd	r30, Y+2	; 0x02
    5512:	fb 81       	ldd	r31, Y+3	; 0x03
    5514:	84 89       	ldd	r24, Z+20	; 0x14
    5516:	95 89       	ldd	r25, Z+21	; 0x15
    5518:	00 97       	sbiw	r24, 0x00	; 0
    551a:	41 f5       	brne	.+80     	; 0x556c <OS_SchedNew+0xf80>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    551c:	ea 81       	ldd	r30, Y+2	; 0x02
    551e:	fb 81       	ldd	r31, Y+3	; 0x03
    5520:	94 8d       	ldd	r25, Z+28	; 0x1c
    5522:	80 91 98 07 	lds	r24, 0x0798
    5526:	89 2b       	or	r24, r25
    5528:	80 93 98 07 	sts	0x0798, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    552c:	ea 81       	ldd	r30, Y+2	; 0x02
    552e:	fb 81       	ldd	r31, Y+3	; 0x03
    5530:	82 8d       	ldd	r24, Z+26	; 0x1a
    5532:	28 2f       	mov	r18, r24
    5534:	30 e0       	ldi	r19, 0x00	; 0
    5536:	ea 81       	ldd	r30, Y+2	; 0x02
    5538:	fb 81       	ldd	r31, Y+3	; 0x03
    553a:	82 8d       	ldd	r24, Z+26	; 0x1a
    553c:	88 2f       	mov	r24, r24
    553e:	90 e0       	ldi	r25, 0x00	; 0
    5540:	fc 01       	movw	r30, r24
    5542:	e7 56       	subi	r30, 0x67	; 103
    5544:	f8 4f       	sbci	r31, 0xF8	; 248
    5546:	90 81       	ld	r25, Z
    5548:	ea 81       	ldd	r30, Y+2	; 0x02
    554a:	fb 81       	ldd	r31, Y+3	; 0x03
    554c:	83 8d       	ldd	r24, Z+27	; 0x1b
    554e:	89 2b       	or	r24, r25
    5550:	f9 01       	movw	r30, r18
    5552:	e7 56       	subi	r30, 0x67	; 103
    5554:	f8 4f       	sbci	r31, 0xF8	; 248
    5556:	80 83       	st	Z, r24
                OS_EXIT_CRITICAL();
    5558:	89 81       	ldd	r24, Y+1	; 0x01
    555a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
    555e:	80 91 12 05 	lds	r24, 0x0512
    5562:	81 30       	cpi	r24, 0x01	; 1
    5564:	51 f4       	brne	.+20     	; 0x557a <OS_SchedNew+0xf8e>
                    OS_Sched();                               /* Find new highest priority task        */
    5566:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    556a:	07 c0       	rjmp	.+14     	; 0x557a <OS_SchedNew+0xf8e>
                }
            } else {
                OS_EXIT_CRITICAL();
    556c:	89 81       	ldd	r24, Y+1	; 0x01
    556e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    5572:	03 c0       	rjmp	.+6      	; 0x557a <OS_SchedNew+0xf8e>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
    5574:	89 81       	ldd	r24, Y+1	; 0x01
    5576:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
        return (OS_ERR_NONE);
    557a:	1d 82       	std	Y+5, r1	; 0x05
    557c:	05 c0       	rjmp	.+10     	; 0x5588 <OS_SchedNew+0xf9c>
    }
    OS_EXIT_CRITICAL();
    557e:	89 81       	ldd	r24, Y+1	; 0x01
    5580:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
    5584:	84 e4       	ldi	r24, 0x44	; 68
    5586:	8d 83       	std	Y+5, r24	; 0x05
    5588:	8d 81       	ldd	r24, Y+5	; 0x05
}
    558a:	0f 90       	pop	r0
    558c:	0f 90       	pop	r0
    558e:	0f 90       	pop	r0
    5590:	0f 90       	pop	r0
    5592:	0f 90       	pop	r0
    5594:	cf 91       	pop	r28
    5596:	df 91       	pop	r29
    5598:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    559a:	df 93       	push	r29
    559c:	cf 93       	push	r28
    559e:	cd b7       	in	r28, 0x3d	; 61
    55a0:	de b7       	in	r29, 0x3e	; 62
    55a2:	27 97       	sbiw	r28, 0x07	; 7
    55a4:	0f b6       	in	r0, 0x3f	; 63
    55a6:	f8 94       	cli
    55a8:	de bf       	out	0x3e, r29	; 62
    55aa:	0f be       	out	0x3f, r0	; 63
    55ac:	cd bf       	out	0x3d, r28	; 61
    55ae:	8e 83       	std	Y+6, r24	; 0x06
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    55b0:	19 82       	std	Y+1, r1	; 0x01
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    55b2:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    55b6:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    55b8:	8e 81       	ldd	r24, Y+6	; 0x06
    55ba:	8f 3f       	cpi	r24, 0xFF	; 255
    55bc:	49 f4       	brne	.+18     	; 0x55d0 <OS_SchedNew+0xfe4>
        prio = OSTCBCur->OSTCBPrio;
    55be:	e0 91 4d 08 	lds	r30, 0x084D
    55c2:	f0 91 4e 08 	lds	r31, 0x084E
    55c6:	80 8d       	ldd	r24, Z+24	; 0x18
    55c8:	8e 83       	std	Y+6, r24	; 0x06
        self = OS_TRUE;
    55ca:	81 e0       	ldi	r24, 0x01	; 1
    55cc:	8d 83       	std	Y+5, r24	; 0x05
    55ce:	0c c0       	rjmp	.+24     	; 0x55e8 <OS_SchedNew+0xffc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    55d0:	e0 91 4d 08 	lds	r30, 0x084D
    55d4:	f0 91 4e 08 	lds	r31, 0x084E
    55d8:	90 8d       	ldd	r25, Z+24	; 0x18
    55da:	8e 81       	ldd	r24, Y+6	; 0x06
    55dc:	98 17       	cp	r25, r24
    55de:	19 f4       	brne	.+6      	; 0x55e6 <OS_SchedNew+0xffa>
        self = OS_TRUE;
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	8d 83       	std	Y+5, r24	; 0x05
    55e4:	01 c0       	rjmp	.+2      	; 0x55e8 <OS_SchedNew+0xffc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    55e6:	1d 82       	std	Y+5, r1	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    55e8:	8e 81       	ldd	r24, Y+6	; 0x06
    55ea:	88 2f       	mov	r24, r24
    55ec:	90 e0       	ldi	r25, 0x00	; 0
    55ee:	88 0f       	add	r24, r24
    55f0:	99 1f       	adc	r25, r25
    55f2:	fc 01       	movw	r30, r24
    55f4:	e0 51       	subi	r30, 0x10	; 16
    55f6:	f4 4f       	sbci	r31, 0xF4	; 244
    55f8:	80 81       	ld	r24, Z
    55fa:	91 81       	ldd	r25, Z+1	; 0x01
    55fc:	9c 83       	std	Y+4, r25	; 0x04
    55fe:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    5600:	8b 81       	ldd	r24, Y+3	; 0x03
    5602:	9c 81       	ldd	r25, Y+4	; 0x04
    5604:	00 97       	sbiw	r24, 0x00	; 0
    5606:	31 f4       	brne	.+12     	; 0x5614 <OS_SchedNew+0x1028>
        OS_EXIT_CRITICAL();
    5608:	89 81       	ldd	r24, Y+1	; 0x01
    560a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
    560e:	88 e4       	ldi	r24, 0x48	; 72
    5610:	8f 83       	std	Y+7, r24	; 0x07
    5612:	46 c0       	rjmp	.+140    	; 0x56a0 <OS_SchedNew+0x10b4>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    5614:	8b 81       	ldd	r24, Y+3	; 0x03
    5616:	9c 81       	ldd	r25, Y+4	; 0x04
    5618:	81 30       	cpi	r24, 0x01	; 1
    561a:	91 05       	cpc	r25, r1
    561c:	31 f4       	brne	.+12     	; 0x562a <OS_SchedNew+0x103e>
        OS_EXIT_CRITICAL();
    561e:	89 81       	ldd	r24, Y+1	; 0x01
    5620:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    5624:	83 e4       	ldi	r24, 0x43	; 67
    5626:	8f 83       	std	Y+7, r24	; 0x07
    5628:	3b c0       	rjmp	.+118    	; 0x56a0 <OS_SchedNew+0x10b4>
    }
    y            = ptcb->OSTCBY;
    562a:	eb 81       	ldd	r30, Y+3	; 0x03
    562c:	fc 81       	ldd	r31, Y+4	; 0x04
    562e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5630:	8a 83       	std	Y+2, r24	; 0x02
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    5632:	8a 81       	ldd	r24, Y+2	; 0x02
    5634:	28 2f       	mov	r18, r24
    5636:	30 e0       	ldi	r19, 0x00	; 0
    5638:	8a 81       	ldd	r24, Y+2	; 0x02
    563a:	88 2f       	mov	r24, r24
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	fc 01       	movw	r30, r24
    5640:	e7 56       	subi	r30, 0x67	; 103
    5642:	f8 4f       	sbci	r31, 0xF8	; 248
    5644:	80 81       	ld	r24, Z
    5646:	98 2f       	mov	r25, r24
    5648:	eb 81       	ldd	r30, Y+3	; 0x03
    564a:	fc 81       	ldd	r31, Y+4	; 0x04
    564c:	83 8d       	ldd	r24, Z+27	; 0x1b
    564e:	80 95       	com	r24
    5650:	89 23       	and	r24, r25
    5652:	f9 01       	movw	r30, r18
    5654:	e7 56       	subi	r30, 0x67	; 103
    5656:	f8 4f       	sbci	r31, 0xF8	; 248
    5658:	80 83       	st	Z, r24
    if (OSRdyTbl[y] == 0) {
    565a:	8a 81       	ldd	r24, Y+2	; 0x02
    565c:	88 2f       	mov	r24, r24
    565e:	90 e0       	ldi	r25, 0x00	; 0
    5660:	fc 01       	movw	r30, r24
    5662:	e7 56       	subi	r30, 0x67	; 103
    5664:	f8 4f       	sbci	r31, 0xF8	; 248
    5666:	80 81       	ld	r24, Z
    5668:	88 23       	and	r24, r24
    566a:	51 f4       	brne	.+20     	; 0x5680 <OS_SchedNew+0x1094>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    566c:	eb 81       	ldd	r30, Y+3	; 0x03
    566e:	fc 81       	ldd	r31, Y+4	; 0x04
    5670:	84 8d       	ldd	r24, Z+28	; 0x1c
    5672:	98 2f       	mov	r25, r24
    5674:	90 95       	com	r25
    5676:	80 91 98 07 	lds	r24, 0x0798
    567a:	89 23       	and	r24, r25
    567c:	80 93 98 07 	sts	0x0798, r24
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    5680:	eb 81       	ldd	r30, Y+3	; 0x03
    5682:	fc 81       	ldd	r31, Y+4	; 0x04
    5684:	86 89       	ldd	r24, Z+22	; 0x16
    5686:	88 60       	ori	r24, 0x08	; 8
    5688:	eb 81       	ldd	r30, Y+3	; 0x03
    568a:	fc 81       	ldd	r31, Y+4	; 0x04
    568c:	86 8b       	std	Z+22, r24	; 0x16
    OS_EXIT_CRITICAL();
    568e:	89 81       	ldd	r24, Y+1	; 0x01
    5690:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    5694:	8d 81       	ldd	r24, Y+5	; 0x05
    5696:	81 30       	cpi	r24, 0x01	; 1
    5698:	11 f4       	brne	.+4      	; 0x569e <OS_SchedNew+0x10b2>
        OS_Sched();                                             /* Find new highest priority task      */
    569a:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    }
    return (OS_ERR_NONE);
    569e:	1f 82       	std	Y+7, r1	; 0x07
    56a0:	8f 81       	ldd	r24, Y+7	; 0x07
}
    56a2:	27 96       	adiw	r28, 0x07	; 7
    56a4:	0f b6       	in	r0, 0x3f	; 63
    56a6:	f8 94       	cli
    56a8:	de bf       	out	0x3e, r29	; 62
    56aa:	0f be       	out	0x3f, r0	; 63
    56ac:	cd bf       	out	0x3d, r28	; 61
    56ae:	cf 91       	pop	r28
    56b0:	df 91       	pop	r29
    56b2:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    56b4:	df 93       	push	r29
    56b6:	cf 93       	push	r28
    56b8:	cd b7       	in	r28, 0x3d	; 61
    56ba:	de b7       	in	r29, 0x3e	; 62
    56bc:	27 97       	sbiw	r28, 0x07	; 7
    56be:	0f b6       	in	r0, 0x3f	; 63
    56c0:	f8 94       	cli
    56c2:	de bf       	out	0x3e, r29	; 62
    56c4:	0f be       	out	0x3f, r0	; 63
    56c6:	cd bf       	out	0x3d, r28	; 61
    56c8:	8c 83       	std	Y+4, r24	; 0x04
    56ca:	7e 83       	std	Y+6, r23	; 0x06
    56cc:	6d 83       	std	Y+5, r22	; 0x05
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    56ce:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
    56d0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    56d4:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    56d6:	8c 81       	ldd	r24, Y+4	; 0x04
    56d8:	8f 3f       	cpi	r24, 0xFF	; 255
    56da:	31 f4       	brne	.+12     	; 0x56e8 <OS_SchedNew+0x10fc>
        prio = OSTCBCur->OSTCBPrio;
    56dc:	e0 91 4d 08 	lds	r30, 0x084D
    56e0:	f0 91 4e 08 	lds	r31, 0x084E
    56e4:	80 8d       	ldd	r24, Z+24	; 0x18
    56e6:	8c 83       	std	Y+4, r24	; 0x04
    }
    ptcb = OSTCBPrioTbl[prio];
    56e8:	8c 81       	ldd	r24, Y+4	; 0x04
    56ea:	88 2f       	mov	r24, r24
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	88 0f       	add	r24, r24
    56f0:	99 1f       	adc	r25, r25
    56f2:	fc 01       	movw	r30, r24
    56f4:	e0 51       	subi	r30, 0x10	; 16
    56f6:	f4 4f       	sbci	r31, 0xF4	; 244
    56f8:	80 81       	ld	r24, Z
    56fa:	91 81       	ldd	r25, Z+1	; 0x01
    56fc:	9b 83       	std	Y+3, r25	; 0x03
    56fe:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    5700:	8a 81       	ldd	r24, Y+2	; 0x02
    5702:	9b 81       	ldd	r25, Y+3	; 0x03
    5704:	00 97       	sbiw	r24, 0x00	; 0
    5706:	31 f4       	brne	.+12     	; 0x5714 <OS_SchedNew+0x1128>
        OS_EXIT_CRITICAL();
    5708:	89 81       	ldd	r24, Y+1	; 0x01
    570a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO);
    570e:	89 e2       	ldi	r24, 0x29	; 41
    5710:	8f 83       	std	Y+7, r24	; 0x07
    5712:	18 c0       	rjmp	.+48     	; 0x5744 <OS_SchedNew+0x1158>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    5714:	8a 81       	ldd	r24, Y+2	; 0x02
    5716:	9b 81       	ldd	r25, Y+3	; 0x03
    5718:	81 30       	cpi	r24, 0x01	; 1
    571a:	91 05       	cpc	r25, r1
    571c:	31 f4       	brne	.+12     	; 0x572a <OS_SchedNew+0x113e>
        OS_EXIT_CRITICAL();
    571e:	89 81       	ldd	r24, Y+1	; 0x01
    5720:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    5724:	83 e4       	ldi	r24, 0x43	; 67
    5726:	8f 83       	std	Y+7, r24	; 0x07
    5728:	0d c0       	rjmp	.+26     	; 0x5744 <OS_SchedNew+0x1158>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    572a:	8d 81       	ldd	r24, Y+5	; 0x05
    572c:	9e 81       	ldd	r25, Y+6	; 0x06
    572e:	2a 81       	ldd	r18, Y+2	; 0x02
    5730:	3b 81       	ldd	r19, Y+3	; 0x03
    5732:	b9 01       	movw	r22, r18
    5734:	4f e3       	ldi	r20, 0x3F	; 63
    5736:	50 e0       	ldi	r21, 0x00	; 0
    5738:	0e 94 73 22 	call	0x44e6	; 0x44e6 <OS_InitTCBList+0xf4>
    OS_EXIT_CRITICAL();
    573c:	89 81       	ldd	r24, Y+1	; 0x01
    573e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    5742:	1f 82       	std	Y+7, r1	; 0x07
    5744:	8f 81       	ldd	r24, Y+7	; 0x07
}
    5746:	27 96       	adiw	r28, 0x07	; 7
    5748:	0f b6       	in	r0, 0x3f	; 63
    574a:	f8 94       	cli
    574c:	de bf       	out	0x3e, r29	; 62
    574e:	0f be       	out	0x3f, r0	; 63
    5750:	cd bf       	out	0x3d, r28	; 61
    5752:	cf 91       	pop	r28
    5754:	df 91       	pop	r29
    5756:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    5758:	df 93       	push	r29
    575a:	cf 93       	push	r28
    575c:	00 d0       	rcall	.+0      	; 0x575e <OS_SchedNew+0x1172>
    575e:	0f 92       	push	r0
    5760:	cd b7       	in	r28, 0x3d	; 61
    5762:	de b7       	in	r29, 0x3e	; 62
    5764:	9c 83       	std	Y+4, r25	; 0x04
    5766:	8b 83       	std	Y+3, r24	; 0x03
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5768:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    576a:	80 91 4c 08 	lds	r24, 0x084C
    576e:	88 23       	and	r24, r24
    5770:	09 f0       	breq	.+2      	; 0x5774 <OS_SchedNew+0x1188>
    5772:	46 c0       	rjmp	.+140    	; 0x5800 <OS_SchedNew+0x1214>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    5774:	8b 81       	ldd	r24, Y+3	; 0x03
    5776:	9c 81       	ldd	r25, Y+4	; 0x04
    5778:	00 97       	sbiw	r24, 0x00	; 0
    577a:	09 f4       	brne	.+2      	; 0x577e <OS_SchedNew+0x1192>
    577c:	41 c0       	rjmp	.+130    	; 0x5800 <OS_SchedNew+0x1214>
        OS_ENTER_CRITICAL();
    577e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5782:	89 83       	std	Y+1, r24	; 0x01
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    5784:	e0 91 4d 08 	lds	r30, 0x084D
    5788:	f0 91 4e 08 	lds	r31, 0x084E
    578c:	82 8d       	ldd	r24, Z+26	; 0x1a
    578e:	8a 83       	std	Y+2, r24	; 0x02
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    5790:	8a 81       	ldd	r24, Y+2	; 0x02
    5792:	28 2f       	mov	r18, r24
    5794:	30 e0       	ldi	r19, 0x00	; 0
    5796:	8a 81       	ldd	r24, Y+2	; 0x02
    5798:	88 2f       	mov	r24, r24
    579a:	90 e0       	ldi	r25, 0x00	; 0
    579c:	fc 01       	movw	r30, r24
    579e:	e7 56       	subi	r30, 0x67	; 103
    57a0:	f8 4f       	sbci	r31, 0xF8	; 248
    57a2:	80 81       	ld	r24, Z
    57a4:	98 2f       	mov	r25, r24
    57a6:	e0 91 4d 08 	lds	r30, 0x084D
    57aa:	f0 91 4e 08 	lds	r31, 0x084E
    57ae:	83 8d       	ldd	r24, Z+27	; 0x1b
    57b0:	80 95       	com	r24
    57b2:	89 23       	and	r24, r25
    57b4:	f9 01       	movw	r30, r18
    57b6:	e7 56       	subi	r30, 0x67	; 103
    57b8:	f8 4f       	sbci	r31, 0xF8	; 248
    57ba:	80 83       	st	Z, r24
        if (OSRdyTbl[y] == 0) {
    57bc:	8a 81       	ldd	r24, Y+2	; 0x02
    57be:	88 2f       	mov	r24, r24
    57c0:	90 e0       	ldi	r25, 0x00	; 0
    57c2:	fc 01       	movw	r30, r24
    57c4:	e7 56       	subi	r30, 0x67	; 103
    57c6:	f8 4f       	sbci	r31, 0xF8	; 248
    57c8:	80 81       	ld	r24, Z
    57ca:	88 23       	and	r24, r24
    57cc:	61 f4       	brne	.+24     	; 0x57e6 <OS_SchedNew+0x11fa>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    57ce:	e0 91 4d 08 	lds	r30, 0x084D
    57d2:	f0 91 4e 08 	lds	r31, 0x084E
    57d6:	84 8d       	ldd	r24, Z+28	; 0x1c
    57d8:	98 2f       	mov	r25, r24
    57da:	90 95       	com	r25
    57dc:	80 91 98 07 	lds	r24, 0x0798
    57e0:	89 23       	and	r24, r25
    57e2:	80 93 98 07 	sts	0x0798, r24
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    57e6:	e0 91 4d 08 	lds	r30, 0x084D
    57ea:	f0 91 4e 08 	lds	r31, 0x084E
    57ee:	8b 81       	ldd	r24, Y+3	; 0x03
    57f0:	9c 81       	ldd	r25, Y+4	; 0x04
    57f2:	95 8b       	std	Z+21, r25	; 0x15
    57f4:	84 8b       	std	Z+20, r24	; 0x14
        OS_EXIT_CRITICAL();
    57f6:	89 81       	ldd	r24, Y+1	; 0x01
    57f8:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
    57fc:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    }
}
    5800:	0f 90       	pop	r0
    5802:	0f 90       	pop	r0
    5804:	0f 90       	pop	r0
    5806:	0f 90       	pop	r0
    5808:	cf 91       	pop	r28
    580a:	df 91       	pop	r29
    580c:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    580e:	ef 92       	push	r14
    5810:	ff 92       	push	r15
    5812:	0f 93       	push	r16
    5814:	1f 93       	push	r17
    5816:	df 93       	push	r29
    5818:	cf 93       	push	r28
    581a:	cd b7       	in	r28, 0x3d	; 61
    581c:	de b7       	in	r29, 0x3e	; 62
    581e:	2c 97       	sbiw	r28, 0x0c	; 12
    5820:	0f b6       	in	r0, 0x3f	; 63
    5822:	f8 94       	cli
    5824:	de bf       	out	0x3e, r29	; 62
    5826:	0f be       	out	0x3f, r0	; 63
    5828:	cd bf       	out	0x3d, r28	; 61
    582a:	8f 83       	std	Y+7, r24	; 0x07
    582c:	68 87       	std	Y+8, r22	; 0x08
    582e:	49 87       	std	Y+9, r20	; 0x09
    5830:	3b 87       	std	Y+11, r19	; 0x0b
    5832:	2a 87       	std	Y+10, r18	; 0x0a
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5834:	80 91 4c 08 	lds	r24, 0x084C
    5838:	88 23       	and	r24, r24
    583a:	19 f0       	breq	.+6      	; 0x5842 <OS_SchedNew+0x1256>
        return (OS_ERR_TIME_DLY_ISR);
    583c:	85 e5       	ldi	r24, 0x55	; 85
    583e:	8c 87       	std	Y+12, r24	; 0x0c
    5840:	86 c0       	rjmp	.+268    	; 0x594e <OS_SchedNew+0x1362>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    5842:	8f 81       	ldd	r24, Y+7	; 0x07
    5844:	88 2f       	mov	r24, r24
    5846:	90 e0       	ldi	r25, 0x00	; 0
    5848:	a0 e0       	ldi	r26, 0x00	; 0
    584a:	b0 e0       	ldi	r27, 0x00	; 0
    584c:	20 e1       	ldi	r18, 0x10	; 16
    584e:	3e e0       	ldi	r19, 0x0E	; 14
    5850:	40 e0       	ldi	r20, 0x00	; 0
    5852:	50 e0       	ldi	r21, 0x00	; 0
    5854:	bc 01       	movw	r22, r24
    5856:	cd 01       	movw	r24, r26
    5858:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    585c:	7b 01       	movw	r14, r22
    585e:	8c 01       	movw	r16, r24
    5860:	88 85       	ldd	r24, Y+8	; 0x08
    5862:	88 2f       	mov	r24, r24
    5864:	90 e0       	ldi	r25, 0x00	; 0
    5866:	a0 e0       	ldi	r26, 0x00	; 0
    5868:	b0 e0       	ldi	r27, 0x00	; 0
    586a:	2c e3       	ldi	r18, 0x3C	; 60
    586c:	30 e0       	ldi	r19, 0x00	; 0
    586e:	40 e0       	ldi	r20, 0x00	; 0
    5870:	50 e0       	ldi	r21, 0x00	; 0
    5872:	bc 01       	movw	r22, r24
    5874:	cd 01       	movw	r24, r26
    5876:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    587a:	dc 01       	movw	r26, r24
    587c:	cb 01       	movw	r24, r22
    587e:	a8 01       	movw	r20, r16
    5880:	97 01       	movw	r18, r14
    5882:	28 0f       	add	r18, r24
    5884:	39 1f       	adc	r19, r25
    5886:	4a 1f       	adc	r20, r26
    5888:	5b 1f       	adc	r21, r27
    588a:	89 85       	ldd	r24, Y+9	; 0x09
    588c:	88 2f       	mov	r24, r24
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	a0 e0       	ldi	r26, 0x00	; 0
    5892:	b0 e0       	ldi	r27, 0x00	; 0
    5894:	82 0f       	add	r24, r18
    5896:	93 1f       	adc	r25, r19
    5898:	a4 1f       	adc	r26, r20
    589a:	b5 1f       	adc	r27, r21
    589c:	24 e6       	ldi	r18, 0x64	; 100
    589e:	30 e0       	ldi	r19, 0x00	; 0
    58a0:	40 e0       	ldi	r20, 0x00	; 0
    58a2:	50 e0       	ldi	r21, 0x00	; 0
    58a4:	bc 01       	movw	r22, r24
    58a6:	cd 01       	movw	r24, r26
    58a8:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    58ac:	7b 01       	movw	r14, r22
    58ae:	8c 01       	movw	r16, r24
    58b0:	8a 85       	ldd	r24, Y+10	; 0x0a
    58b2:	9b 85       	ldd	r25, Y+11	; 0x0b
    58b4:	cc 01       	movw	r24, r24
    58b6:	a0 e0       	ldi	r26, 0x00	; 0
    58b8:	b0 e0       	ldi	r27, 0x00	; 0
    58ba:	24 e6       	ldi	r18, 0x64	; 100
    58bc:	30 e0       	ldi	r19, 0x00	; 0
    58be:	40 e0       	ldi	r20, 0x00	; 0
    58c0:	50 e0       	ldi	r21, 0x00	; 0
    58c2:	bc 01       	movw	r22, r24
    58c4:	cd 01       	movw	r24, r26
    58c6:	0e 94 f9 3d 	call	0x7bf2	; 0x7bf2 <__mulsi3>
    58ca:	dc 01       	movw	r26, r24
    58cc:	cb 01       	movw	r24, r22
    58ce:	8c 50       	subi	r24, 0x0C	; 12
    58d0:	9e 4f       	sbci	r25, 0xFE	; 254
    58d2:	af 4f       	sbci	r26, 0xFF	; 255
    58d4:	bf 4f       	sbci	r27, 0xFF	; 255
    58d6:	28 ee       	ldi	r18, 0xE8	; 232
    58d8:	33 e0       	ldi	r19, 0x03	; 3
    58da:	40 e0       	ldi	r20, 0x00	; 0
    58dc:	50 e0       	ldi	r21, 0x00	; 0
    58de:	bc 01       	movw	r22, r24
    58e0:	cd 01       	movw	r24, r26
    58e2:	0e 94 2b 3e 	call	0x7c56	; 0x7c56 <__udivmodsi4>
    58e6:	da 01       	movw	r26, r20
    58e8:	c9 01       	movw	r24, r18
    58ea:	8e 0d       	add	r24, r14
    58ec:	9f 1d       	adc	r25, r15
    58ee:	a0 1f       	adc	r26, r16
    58f0:	b1 1f       	adc	r27, r17
    58f2:	8b 83       	std	Y+3, r24	; 0x03
    58f4:	9c 83       	std	Y+4, r25	; 0x04
    58f6:	ad 83       	std	Y+5, r26	; 0x05
    58f8:	be 83       	std	Y+6, r27	; 0x06
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    58fa:	8b 81       	ldd	r24, Y+3	; 0x03
    58fc:	9c 81       	ldd	r25, Y+4	; 0x04
    58fe:	ad 81       	ldd	r26, Y+5	; 0x05
    5900:	be 81       	ldd	r27, Y+6	; 0x06
    5902:	cd 01       	movw	r24, r26
    5904:	aa 27       	eor	r26, r26
    5906:	bb 27       	eor	r27, r27
    5908:	9a 83       	std	Y+2, r25	; 0x02
    590a:	89 83       	std	Y+1, r24	; 0x01
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    590c:	8b 81       	ldd	r24, Y+3	; 0x03
    590e:	9c 81       	ldd	r25, Y+4	; 0x04
    5910:	ad 81       	ldd	r26, Y+5	; 0x05
    5912:	be 81       	ldd	r27, Y+6	; 0x06
    5914:	a0 70       	andi	r26, 0x00	; 0
    5916:	b0 70       	andi	r27, 0x00	; 0
    5918:	8b 83       	std	Y+3, r24	; 0x03
    591a:	9c 83       	std	Y+4, r25	; 0x04
    591c:	ad 83       	std	Y+5, r26	; 0x05
    591e:	be 83       	std	Y+6, r27	; 0x06
    OSTimeDly((INT16U)ticks);
    5920:	8b 81       	ldd	r24, Y+3	; 0x03
    5922:	9c 81       	ldd	r25, Y+4	; 0x04
    5924:	0e 94 ac 2b 	call	0x5758	; 0x5758 <OS_SchedNew+0x116c>
    5928:	0d c0       	rjmp	.+26     	; 0x5944 <OS_SchedNew+0x1358>
    while (loops > 0) {
        OSTimeDly((INT16U)32768u);
    592a:	80 e0       	ldi	r24, 0x00	; 0
    592c:	90 e8       	ldi	r25, 0x80	; 128
    592e:	0e 94 ac 2b 	call	0x5758	; 0x5758 <OS_SchedNew+0x116c>
        OSTimeDly((INT16U)32768u);
    5932:	80 e0       	ldi	r24, 0x00	; 0
    5934:	90 e8       	ldi	r25, 0x80	; 128
    5936:	0e 94 ac 2b 	call	0x5758	; 0x5758 <OS_SchedNew+0x116c>
        loops--;
    593a:	89 81       	ldd	r24, Y+1	; 0x01
    593c:	9a 81       	ldd	r25, Y+2	; 0x02
    593e:	01 97       	sbiw	r24, 0x01	; 1
    5940:	9a 83       	std	Y+2, r25	; 0x02
    5942:	89 83       	std	Y+1, r24	; 0x01
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    5944:	89 81       	ldd	r24, Y+1	; 0x01
    5946:	9a 81       	ldd	r25, Y+2	; 0x02
    5948:	00 97       	sbiw	r24, 0x00	; 0
    594a:	79 f7       	brne	.-34     	; 0x592a <OS_SchedNew+0x133e>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    594c:	1c 86       	std	Y+12, r1	; 0x0c
    594e:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    5950:	2c 96       	adiw	r28, 0x0c	; 12
    5952:	0f b6       	in	r0, 0x3f	; 63
    5954:	f8 94       	cli
    5956:	de bf       	out	0x3e, r29	; 62
    5958:	0f be       	out	0x3f, r0	; 63
    595a:	cd bf       	out	0x3d, r28	; 61
    595c:	cf 91       	pop	r28
    595e:	df 91       	pop	r29
    5960:	1f 91       	pop	r17
    5962:	0f 91       	pop	r16
    5964:	ff 90       	pop	r15
    5966:	ef 90       	pop	r14
    5968:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    596a:	df 93       	push	r29
    596c:	cf 93       	push	r28
    596e:	00 d0       	rcall	.+0      	; 0x5970 <OS_SchedNew+0x1384>
    5970:	0f 92       	push	r0
    5972:	0f 92       	push	r0
    5974:	cd b7       	in	r28, 0x3d	; 61
    5976:	de b7       	in	r29, 0x3e	; 62
    5978:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    597a:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (prio >= OS_LOWEST_PRIO) {
    597c:	8c 81       	ldd	r24, Y+4	; 0x04
    597e:	8a 30       	cpi	r24, 0x0A	; 10
    5980:	18 f0       	brcs	.+6      	; 0x5988 <OS_SchedNew+0x139c>
        return (OS_ERR_PRIO_INVALID);
    5982:	8a e2       	ldi	r24, 0x2A	; 42
    5984:	8d 83       	std	Y+5, r24	; 0x05
    5986:	7d c0       	rjmp	.+250    	; 0x5a82 <OS_SchedNew+0x1496>
    }
    OS_ENTER_CRITICAL();
    5988:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    598c:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    598e:	8c 81       	ldd	r24, Y+4	; 0x04
    5990:	88 2f       	mov	r24, r24
    5992:	90 e0       	ldi	r25, 0x00	; 0
    5994:	88 0f       	add	r24, r24
    5996:	99 1f       	adc	r25, r25
    5998:	fc 01       	movw	r30, r24
    599a:	e0 51       	subi	r30, 0x10	; 16
    599c:	f4 4f       	sbci	r31, 0xF4	; 244
    599e:	80 81       	ld	r24, Z
    59a0:	91 81       	ldd	r25, Z+1	; 0x01
    59a2:	9b 83       	std	Y+3, r25	; 0x03
    59a4:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {
    59a6:	8a 81       	ldd	r24, Y+2	; 0x02
    59a8:	9b 81       	ldd	r25, Y+3	; 0x03
    59aa:	00 97       	sbiw	r24, 0x00	; 0
    59ac:	31 f4       	brne	.+12     	; 0x59ba <OS_SchedNew+0x13ce>
        OS_EXIT_CRITICAL();
    59ae:	89 81       	ldd	r24, Y+1	; 0x01
    59b0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    59b4:	83 e4       	ldi	r24, 0x43	; 67
    59b6:	8d 83       	std	Y+5, r24	; 0x05
    59b8:	64 c0       	rjmp	.+200    	; 0x5a82 <OS_SchedNew+0x1496>
    }
    if (ptcb == OS_TCB_RESERVED) {
    59ba:	8a 81       	ldd	r24, Y+2	; 0x02
    59bc:	9b 81       	ldd	r25, Y+3	; 0x03
    59be:	81 30       	cpi	r24, 0x01	; 1
    59c0:	91 05       	cpc	r25, r1
    59c2:	31 f4       	brne	.+12     	; 0x59d0 <OS_SchedNew+0x13e4>
        OS_EXIT_CRITICAL();
    59c4:	89 81       	ldd	r24, Y+1	; 0x01
    59c6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    59ca:	83 e4       	ldi	r24, 0x43	; 67
    59cc:	8d 83       	std	Y+5, r24	; 0x05
    59ce:	59 c0       	rjmp	.+178    	; 0x5a82 <OS_SchedNew+0x1496>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    59d0:	ea 81       	ldd	r30, Y+2	; 0x02
    59d2:	fb 81       	ldd	r31, Y+3	; 0x03
    59d4:	84 89       	ldd	r24, Z+20	; 0x14
    59d6:	95 89       	ldd	r25, Z+21	; 0x15
    59d8:	00 97       	sbiw	r24, 0x00	; 0
    59da:	31 f4       	brne	.+12     	; 0x59e8 <OS_SchedNew+0x13fc>
        OS_EXIT_CRITICAL();
    59dc:	89 81       	ldd	r24, Y+1	; 0x01
    59de:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    59e2:	80 e5       	ldi	r24, 0x50	; 80
    59e4:	8d 83       	std	Y+5, r24	; 0x05
    59e6:	4d c0       	rjmp	.+154    	; 0x5a82 <OS_SchedNew+0x1496>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    59e8:	ea 81       	ldd	r30, Y+2	; 0x02
    59ea:	fb 81       	ldd	r31, Y+3	; 0x03
    59ec:	15 8a       	std	Z+21, r1	; 0x15
    59ee:	14 8a       	std	Z+20, r1	; 0x14
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    59f0:	ea 81       	ldd	r30, Y+2	; 0x02
    59f2:	fb 81       	ldd	r31, Y+3	; 0x03
    59f4:	86 89       	ldd	r24, Z+22	; 0x16
    59f6:	88 2f       	mov	r24, r24
    59f8:	90 e0       	ldi	r25, 0x00	; 0
    59fa:	87 73       	andi	r24, 0x37	; 55
    59fc:	90 70       	andi	r25, 0x00	; 0
    59fe:	00 97       	sbiw	r24, 0x00	; 0
    5a00:	61 f0       	breq	.+24     	; 0x5a1a <OS_SchedNew+0x142e>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    5a02:	ea 81       	ldd	r30, Y+2	; 0x02
    5a04:	fb 81       	ldd	r31, Y+3	; 0x03
    5a06:	86 89       	ldd	r24, Z+22	; 0x16
    5a08:	88 7c       	andi	r24, 0xC8	; 200
    5a0a:	ea 81       	ldd	r30, Y+2	; 0x02
    5a0c:	fb 81       	ldd	r31, Y+3	; 0x03
    5a0e:	86 8b       	std	Z+22, r24	; 0x16
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    5a10:	ea 81       	ldd	r30, Y+2	; 0x02
    5a12:	fb 81       	ldd	r31, Y+3	; 0x03
    5a14:	81 e0       	ldi	r24, 0x01	; 1
    5a16:	87 8b       	std	Z+23, r24	; 0x17
    5a18:	03 c0       	rjmp	.+6      	; 0x5a20 <OS_SchedNew+0x1434>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    5a1a:	ea 81       	ldd	r30, Y+2	; 0x02
    5a1c:	fb 81       	ldd	r31, Y+3	; 0x03
    5a1e:	17 8a       	std	Z+23, r1	; 0x17
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    5a20:	ea 81       	ldd	r30, Y+2	; 0x02
    5a22:	fb 81       	ldd	r31, Y+3	; 0x03
    5a24:	86 89       	ldd	r24, Z+22	; 0x16
    5a26:	88 2f       	mov	r24, r24
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	88 70       	andi	r24, 0x08	; 8
    5a2c:	90 70       	andi	r25, 0x00	; 0
    5a2e:	00 97       	sbiw	r24, 0x00	; 0
    5a30:	21 f5       	brne	.+72     	; 0x5a7a <OS_SchedNew+0x148e>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    5a32:	ea 81       	ldd	r30, Y+2	; 0x02
    5a34:	fb 81       	ldd	r31, Y+3	; 0x03
    5a36:	94 8d       	ldd	r25, Z+28	; 0x1c
    5a38:	80 91 98 07 	lds	r24, 0x0798
    5a3c:	89 2b       	or	r24, r25
    5a3e:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5a42:	ea 81       	ldd	r30, Y+2	; 0x02
    5a44:	fb 81       	ldd	r31, Y+3	; 0x03
    5a46:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a48:	28 2f       	mov	r18, r24
    5a4a:	30 e0       	ldi	r19, 0x00	; 0
    5a4c:	ea 81       	ldd	r30, Y+2	; 0x02
    5a4e:	fb 81       	ldd	r31, Y+3	; 0x03
    5a50:	82 8d       	ldd	r24, Z+26	; 0x1a
    5a52:	88 2f       	mov	r24, r24
    5a54:	90 e0       	ldi	r25, 0x00	; 0
    5a56:	fc 01       	movw	r30, r24
    5a58:	e7 56       	subi	r30, 0x67	; 103
    5a5a:	f8 4f       	sbci	r31, 0xF8	; 248
    5a5c:	90 81       	ld	r25, Z
    5a5e:	ea 81       	ldd	r30, Y+2	; 0x02
    5a60:	fb 81       	ldd	r31, Y+3	; 0x03
    5a62:	83 8d       	ldd	r24, Z+27	; 0x1b
    5a64:	89 2b       	or	r24, r25
    5a66:	f9 01       	movw	r30, r18
    5a68:	e7 56       	subi	r30, 0x67	; 103
    5a6a:	f8 4f       	sbci	r31, 0xF8	; 248
    5a6c:	80 83       	st	Z, r24
        OS_EXIT_CRITICAL();
    5a6e:	89 81       	ldd	r24, Y+1	; 0x01
    5a70:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                            /* See if this is new highest priority  */
    5a74:	0e 94 a2 22 	call	0x4544	; 0x4544 <OS_InitTCBList+0x152>
    5a78:	03 c0       	rjmp	.+6      	; 0x5a80 <OS_SchedNew+0x1494>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    5a7a:	89 81       	ldd	r24, Y+1	; 0x01
    5a7c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
    return (OS_ERR_NONE);
    5a80:	1d 82       	std	Y+5, r1	; 0x05
    5a82:	8d 81       	ldd	r24, Y+5	; 0x05
}
    5a84:	0f 90       	pop	r0
    5a86:	0f 90       	pop	r0
    5a88:	0f 90       	pop	r0
    5a8a:	0f 90       	pop	r0
    5a8c:	0f 90       	pop	r0
    5a8e:	cf 91       	pop	r28
    5a90:	df 91       	pop	r29
    5a92:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    5a94:	df 93       	push	r29
    5a96:	cf 93       	push	r28
    5a98:	00 d0       	rcall	.+0      	; 0x5a9a <OS_SchedNew+0x14ae>
    5a9a:	0f 92       	push	r0
    5a9c:	0f 92       	push	r0
    5a9e:	cd b7       	in	r28, 0x3d	; 61
    5aa0:	de b7       	in	r29, 0x3e	; 62
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5aa2:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    5aa4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5aa8:	89 83       	std	Y+1, r24	; 0x01
    ticks = OSTime;
    5aaa:	80 91 53 08 	lds	r24, 0x0853
    5aae:	90 91 54 08 	lds	r25, 0x0854
    5ab2:	a0 91 55 08 	lds	r26, 0x0855
    5ab6:	b0 91 56 08 	lds	r27, 0x0856
    5aba:	8a 83       	std	Y+2, r24	; 0x02
    5abc:	9b 83       	std	Y+3, r25	; 0x03
    5abe:	ac 83       	std	Y+4, r26	; 0x04
    5ac0:	bd 83       	std	Y+5, r27	; 0x05
    OS_EXIT_CRITICAL();
    5ac2:	89 81       	ldd	r24, Y+1	; 0x01
    5ac4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (ticks);
    5ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    5aca:	9b 81       	ldd	r25, Y+3	; 0x03
    5acc:	ac 81       	ldd	r26, Y+4	; 0x04
    5ace:	bd 81       	ldd	r27, Y+5	; 0x05
}
    5ad0:	bc 01       	movw	r22, r24
    5ad2:	cd 01       	movw	r24, r26
    5ad4:	0f 90       	pop	r0
    5ad6:	0f 90       	pop	r0
    5ad8:	0f 90       	pop	r0
    5ada:	0f 90       	pop	r0
    5adc:	0f 90       	pop	r0
    5ade:	cf 91       	pop	r28
    5ae0:	df 91       	pop	r29
    5ae2:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    5ae4:	df 93       	push	r29
    5ae6:	cf 93       	push	r28
    5ae8:	00 d0       	rcall	.+0      	; 0x5aea <OS_SchedNew+0x14fe>
    5aea:	0f 92       	push	r0
    5aec:	0f 92       	push	r0
    5aee:	cd b7       	in	r28, 0x3d	; 61
    5af0:	de b7       	in	r29, 0x3e	; 62
    5af2:	6a 83       	std	Y+2, r22	; 0x02
    5af4:	7b 83       	std	Y+3, r23	; 0x03
    5af6:	8c 83       	std	Y+4, r24	; 0x04
    5af8:	9d 83       	std	Y+5, r25	; 0x05
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5afa:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    5afc:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5b00:	89 83       	std	Y+1, r24	; 0x01
    OSTime = ticks;
    5b02:	8a 81       	ldd	r24, Y+2	; 0x02
    5b04:	9b 81       	ldd	r25, Y+3	; 0x03
    5b06:	ac 81       	ldd	r26, Y+4	; 0x04
    5b08:	bd 81       	ldd	r27, Y+5	; 0x05
    5b0a:	80 93 53 08 	sts	0x0853, r24
    5b0e:	90 93 54 08 	sts	0x0854, r25
    5b12:	a0 93 55 08 	sts	0x0855, r26
    5b16:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
    5b1a:	89 81       	ldd	r24, Y+1	; 0x01
    5b1c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    5b20:	0f 90       	pop	r0
    5b22:	0f 90       	pop	r0
    5b24:	0f 90       	pop	r0
    5b26:	0f 90       	pop	r0
    5b28:	0f 90       	pop	r0
    5b2a:	cf 91       	pop	r28
    5b2c:	df 91       	pop	r29
    5b2e:	08 95       	ret
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
    5b30:	8f 92       	push	r8
    5b32:	9f 92       	push	r9
    5b34:	af 92       	push	r10
    5b36:	bf 92       	push	r11
    5b38:	cf 92       	push	r12
    5b3a:	df 92       	push	r13
    5b3c:	ef 92       	push	r14
    5b3e:	ff 92       	push	r15
    5b40:	0f 93       	push	r16
    5b42:	df 93       	push	r29
    5b44:	cf 93       	push	r28
    5b46:	cd b7       	in	r28, 0x3d	; 61
    5b48:	de b7       	in	r29, 0x3e	; 62
    5b4a:	66 97       	sbiw	r28, 0x16	; 22
    5b4c:	0f b6       	in	r0, 0x3f	; 63
    5b4e:	f8 94       	cli
    5b50:	de bf       	out	0x3e, r29	; 62
    5b52:	0f be       	out	0x3f, r0	; 63
    5b54:	cd bf       	out	0x3d, r28	; 61
    5b56:	6c 83       	std	Y+4, r22	; 0x04
    5b58:	7d 83       	std	Y+5, r23	; 0x05
    5b5a:	8e 83       	std	Y+6, r24	; 0x06
    5b5c:	9f 83       	std	Y+7, r25	; 0x07
    5b5e:	28 87       	std	Y+8, r18	; 0x08
    5b60:	39 87       	std	Y+9, r19	; 0x09
    5b62:	4a 87       	std	Y+10, r20	; 0x0a
    5b64:	5b 87       	std	Y+11, r21	; 0x0b
    5b66:	0c 87       	std	Y+12, r16	; 0x0c
    5b68:	fe 86       	std	Y+14, r15	; 0x0e
    5b6a:	ed 86       	std	Y+13, r14	; 0x0d
    5b6c:	d8 8a       	std	Y+16, r13	; 0x10
    5b6e:	cf 86       	std	Y+15, r12	; 0x0f
    5b70:	ba 8a       	std	Y+18, r11	; 0x12
    5b72:	a9 8a       	std	Y+17, r10	; 0x11
    5b74:	9c 8a       	std	Y+20, r9	; 0x14
    5b76:	8b 8a       	std	Y+19, r8	; 0x13
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    5b78:	80 91 4c 08 	lds	r24, 0x084C
    5b7c:	88 23       	and	r24, r24
    5b7e:	39 f0       	breq	.+14     	; 0x5b8e <OS_SchedNew+0x15a2>
        *perr  = OS_ERR_TMR_ISR;
    5b80:	eb 89       	ldd	r30, Y+19	; 0x13
    5b82:	fc 89       	ldd	r31, Y+20	; 0x14
    5b84:	8b e8       	ldi	r24, 0x8B	; 139
    5b86:	80 83       	st	Z, r24
        return ((OS_TMR *)0);
    5b88:	1e 8a       	std	Y+22, r1	; 0x16
    5b8a:	1d 8a       	std	Y+21, r1	; 0x15
    5b8c:	6b c0       	rjmp	.+214    	; 0x5c64 <OS_SchedNew+0x1678>
    }
    OSTmr_Lock();
    5b8e:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
    5b92:	0e 94 9c 31 	call	0x6338	; 0x6338 <OSTmr_Alloc>
    5b96:	9b 83       	std	Y+3, r25	; 0x03
    5b98:	8a 83       	std	Y+2, r24	; 0x02
    if (ptmr == (OS_TMR *)0) {
    5b9a:	8a 81       	ldd	r24, Y+2	; 0x02
    5b9c:	9b 81       	ldd	r25, Y+3	; 0x03
    5b9e:	00 97       	sbiw	r24, 0x00	; 0
    5ba0:	49 f4       	brne	.+18     	; 0x5bb4 <OS_SchedNew+0x15c8>
        OSTmr_Unlock();
    5ba2:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
    5ba6:	eb 89       	ldd	r30, Y+19	; 0x13
    5ba8:	fc 89       	ldd	r31, Y+20	; 0x14
    5baa:	86 e8       	ldi	r24, 0x86	; 134
    5bac:	80 83       	st	Z, r24
        return ((OS_TMR *)0);
    5bae:	1e 8a       	std	Y+22, r1	; 0x16
    5bb0:	1d 8a       	std	Y+21, r1	; 0x15
    5bb2:	58 c0       	rjmp	.+176    	; 0x5c64 <OS_SchedNew+0x1678>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
    5bb4:	ea 81       	ldd	r30, Y+2	; 0x02
    5bb6:	fb 81       	ldd	r31, Y+3	; 0x03
    5bb8:	81 e0       	ldi	r24, 0x01	; 1
    5bba:	86 a3       	std	Z+38, r24	; 0x26
    ptmr->OSTmrDly         = dly;
    5bbc:	ea 81       	ldd	r30, Y+2	; 0x02
    5bbe:	fb 81       	ldd	r31, Y+3	; 0x03
    5bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    5bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    5bc4:	ae 81       	ldd	r26, Y+6	; 0x06
    5bc6:	bf 81       	ldd	r27, Y+7	; 0x07
    5bc8:	85 87       	std	Z+13, r24	; 0x0d
    5bca:	96 87       	std	Z+14, r25	; 0x0e
    5bcc:	a7 87       	std	Z+15, r26	; 0x0f
    5bce:	b0 8b       	std	Z+16, r27	; 0x10
    ptmr->OSTmrPeriod      = period;
    5bd0:	ea 81       	ldd	r30, Y+2	; 0x02
    5bd2:	fb 81       	ldd	r31, Y+3	; 0x03
    5bd4:	88 85       	ldd	r24, Y+8	; 0x08
    5bd6:	99 85       	ldd	r25, Y+9	; 0x09
    5bd8:	aa 85       	ldd	r26, Y+10	; 0x0a
    5bda:	bb 85       	ldd	r27, Y+11	; 0x0b
    5bdc:	81 8b       	std	Z+17, r24	; 0x11
    5bde:	92 8b       	std	Z+18, r25	; 0x12
    5be0:	a3 8b       	std	Z+19, r26	; 0x13
    5be2:	b4 8b       	std	Z+20, r27	; 0x14
    ptmr->OSTmrOpt         = opt;
    5be4:	ea 81       	ldd	r30, Y+2	; 0x02
    5be6:	fb 81       	ldd	r31, Y+3	; 0x03
    5be8:	8c 85       	ldd	r24, Y+12	; 0x0c
    5bea:	85 a3       	std	Z+37, r24	; 0x25
    ptmr->OSTmrCallback    = callback;
    5bec:	ea 81       	ldd	r30, Y+2	; 0x02
    5bee:	fb 81       	ldd	r31, Y+3	; 0x03
    5bf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    5bf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    5bf4:	92 83       	std	Z+2, r25	; 0x02
    5bf6:	81 83       	std	Z+1, r24	; 0x01
    ptmr->OSTmrCallbackArg = callback_arg;
    5bf8:	ea 81       	ldd	r30, Y+2	; 0x02
    5bfa:	fb 81       	ldd	r31, Y+3	; 0x03
    5bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    5bfe:	98 89       	ldd	r25, Y+16	; 0x10
    5c00:	94 83       	std	Z+4, r25	; 0x04
    5c02:	83 83       	std	Z+3, r24	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
    5c04:	89 89       	ldd	r24, Y+17	; 0x11
    5c06:	9a 89       	ldd	r25, Y+18	; 0x12
    5c08:	00 97       	sbiw	r24, 0x00	; 0
    5c0a:	19 f1       	breq	.+70     	; 0x5c52 <OS_SchedNew+0x1666>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
    5c0c:	89 89       	ldd	r24, Y+17	; 0x11
    5c0e:	9a 89       	ldd	r25, Y+18	; 0x12
    5c10:	0e 94 4e 23 	call	0x469c	; 0x469c <OS_SchedNew+0xb0>
    5c14:	89 83       	std	Y+1, r24	; 0x01
        if (len < OS_TMR_CFG_NAME_SIZE) {
    5c16:	89 81       	ldd	r24, Y+1	; 0x01
    5c18:	80 31       	cpi	r24, 0x10	; 16
    5c1a:	48 f4       	brcc	.+18     	; 0x5c2e <OS_SchedNew+0x1642>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
    5c1c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c1e:	9b 81       	ldd	r25, Y+3	; 0x03
    5c20:	45 96       	adiw	r24, 0x15	; 21
    5c22:	29 89       	ldd	r18, Y+17	; 0x11
    5c24:	3a 89       	ldd	r19, Y+18	; 0x12
    5c26:	b9 01       	movw	r22, r18
    5c28:	0e 94 1d 23 	call	0x463a	; 0x463a <OS_SchedNew+0x4e>
    5c2c:	12 c0       	rjmp	.+36     	; 0x5c52 <OS_SchedNew+0x1666>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
    5c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    5c30:	fb 81       	ldd	r31, Y+3	; 0x03
    5c32:	83 e2       	ldi	r24, 0x23	; 35
    5c34:	85 8b       	std	Z+21, r24	; 0x15
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
    5c36:	ea 81       	ldd	r30, Y+2	; 0x02
    5c38:	fb 81       	ldd	r31, Y+3	; 0x03
    5c3a:	16 8a       	std	Z+22, r1	; 0x16
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
    5c3c:	eb 89       	ldd	r30, Y+19	; 0x13
    5c3e:	fc 89       	ldd	r31, Y+20	; 0x14
    5c40:	8c e8       	ldi	r24, 0x8C	; 140
    5c42:	80 83       	st	Z, r24
            OSTmr_Unlock();
    5c44:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
            return (ptmr);
    5c48:	8a 81       	ldd	r24, Y+2	; 0x02
    5c4a:	9b 81       	ldd	r25, Y+3	; 0x03
    5c4c:	9e 8b       	std	Y+22, r25	; 0x16
    5c4e:	8d 8b       	std	Y+21, r24	; 0x15
    5c50:	09 c0       	rjmp	.+18     	; 0x5c64 <OS_SchedNew+0x1678>
        }
    }
#endif
    OSTmr_Unlock();
    5c52:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
    5c56:	eb 89       	ldd	r30, Y+19	; 0x13
    5c58:	fc 89       	ldd	r31, Y+20	; 0x14
    5c5a:	10 82       	st	Z, r1
    return (ptmr);
    5c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5c5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5c60:	9e 8b       	std	Y+22, r25	; 0x16
    5c62:	8d 8b       	std	Y+21, r24	; 0x15
    5c64:	8d 89       	ldd	r24, Y+21	; 0x15
    5c66:	9e 89       	ldd	r25, Y+22	; 0x16
}
    5c68:	66 96       	adiw	r28, 0x16	; 22
    5c6a:	0f b6       	in	r0, 0x3f	; 63
    5c6c:	f8 94       	cli
    5c6e:	de bf       	out	0x3e, r29	; 62
    5c70:	0f be       	out	0x3f, r0	; 63
    5c72:	cd bf       	out	0x3d, r28	; 61
    5c74:	cf 91       	pop	r28
    5c76:	df 91       	pop	r29
    5c78:	0f 91       	pop	r16
    5c7a:	ff 90       	pop	r15
    5c7c:	ef 90       	pop	r14
    5c7e:	df 90       	pop	r13
    5c80:	cf 90       	pop	r12
    5c82:	bf 90       	pop	r11
    5c84:	af 90       	pop	r10
    5c86:	9f 90       	pop	r9
    5c88:	8f 90       	pop	r8
    5c8a:	08 95       	ret
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
    5c8c:	df 93       	push	r29
    5c8e:	cf 93       	push	r28
    5c90:	cd b7       	in	r28, 0x3d	; 61
    5c92:	de b7       	in	r29, 0x3e	; 62
    5c94:	27 97       	sbiw	r28, 0x07	; 7
    5c96:	0f b6       	in	r0, 0x3f	; 63
    5c98:	f8 94       	cli
    5c9a:	de bf       	out	0x3e, r29	; 62
    5c9c:	0f be       	out	0x3f, r0	; 63
    5c9e:	cd bf       	out	0x3d, r28	; 61
    5ca0:	9a 83       	std	Y+2, r25	; 0x02
    5ca2:	89 83       	std	Y+1, r24	; 0x01
    5ca4:	7c 83       	std	Y+4, r23	; 0x04
    5ca6:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    5ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    5caa:	fa 81       	ldd	r31, Y+2	; 0x02
    5cac:	80 81       	ld	r24, Z
    5cae:	84 36       	cpi	r24, 0x64	; 100
    5cb0:	31 f0       	breq	.+12     	; 0x5cbe <OS_SchedNew+0x16d2>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    5cb2:	eb 81       	ldd	r30, Y+3	; 0x03
    5cb4:	fc 81       	ldd	r31, Y+4	; 0x04
    5cb6:	89 e8       	ldi	r24, 0x89	; 137
    5cb8:	80 83       	st	Z, r24
        return (OS_FALSE);
    5cba:	1f 82       	std	Y+7, r1	; 0x07
    5cbc:	52 c0       	rjmp	.+164    	; 0x5d62 <OS_SchedNew+0x1776>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    5cbe:	80 91 4c 08 	lds	r24, 0x084C
    5cc2:	88 23       	and	r24, r24
    5cc4:	31 f0       	breq	.+12     	; 0x5cd2 <OS_SchedNew+0x16e6>
        *perr  = OS_ERR_TMR_ISR;
    5cc6:	eb 81       	ldd	r30, Y+3	; 0x03
    5cc8:	fc 81       	ldd	r31, Y+4	; 0x04
    5cca:	8b e8       	ldi	r24, 0x8B	; 139
    5ccc:	80 83       	st	Z, r24
        return (OS_FALSE);
    5cce:	1f 82       	std	Y+7, r1	; 0x07
    5cd0:	48 c0       	rjmp	.+144    	; 0x5d62 <OS_SchedNew+0x1776>
    }
    OSTmr_Lock();
    5cd2:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    5cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    5cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    5cda:	86 a1       	ldd	r24, Z+38	; 0x26
    5cdc:	28 2f       	mov	r18, r24
    5cde:	30 e0       	ldi	r19, 0x00	; 0
    5ce0:	3e 83       	std	Y+6, r19	; 0x06
    5ce2:	2d 83       	std	Y+5, r18	; 0x05
    5ce4:	8d 81       	ldd	r24, Y+5	; 0x05
    5ce6:	9e 81       	ldd	r25, Y+6	; 0x06
    5ce8:	83 30       	cpi	r24, 0x03	; 3
    5cea:	91 05       	cpc	r25, r1
    5cec:	54 f4       	brge	.+20     	; 0x5d02 <OS_SchedNew+0x1716>
    5cee:	2d 81       	ldd	r18, Y+5	; 0x05
    5cf0:	3e 81       	ldd	r19, Y+6	; 0x06
    5cf2:	21 30       	cpi	r18, 0x01	; 1
    5cf4:	31 05       	cpc	r19, r1
    5cf6:	d4 f4       	brge	.+52     	; 0x5d2c <OS_SchedNew+0x1740>
    5cf8:	8d 81       	ldd	r24, Y+5	; 0x05
    5cfa:	9e 81       	ldd	r25, Y+6	; 0x06
    5cfc:	00 97       	sbiw	r24, 0x00	; 0
    5cfe:	11 f1       	breq	.+68     	; 0x5d44 <OS_SchedNew+0x1758>
    5d00:	29 c0       	rjmp	.+82     	; 0x5d54 <OS_SchedNew+0x1768>
    5d02:	2d 81       	ldd	r18, Y+5	; 0x05
    5d04:	3e 81       	ldd	r19, Y+6	; 0x06
    5d06:	23 30       	cpi	r18, 0x03	; 3
    5d08:	31 05       	cpc	r19, r1
    5d0a:	21 f5       	brne	.+72     	; 0x5d54 <OS_SchedNew+0x1768>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
    5d0c:	89 81       	ldd	r24, Y+1	; 0x01
    5d0e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d10:	0e 94 e6 33 	call	0x67cc	; 0x67cc <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    5d14:	89 81       	ldd	r24, Y+1	; 0x01
    5d16:	9a 81       	ldd	r25, Y+2	; 0x02
    5d18:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <OSTmr_Free>
             OSTmr_Unlock();
    5d1c:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    5d20:	eb 81       	ldd	r30, Y+3	; 0x03
    5d22:	fc 81       	ldd	r31, Y+4	; 0x04
    5d24:	10 82       	st	Z, r1
             return (OS_TRUE);
    5d26:	31 e0       	ldi	r19, 0x01	; 1
    5d28:	3f 83       	std	Y+7, r19	; 0x07
    5d2a:	1b c0       	rjmp	.+54     	; 0x5d62 <OS_SchedNew+0x1776>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    5d2c:	89 81       	ldd	r24, Y+1	; 0x01
    5d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    5d30:	0e 94 e0 31 	call	0x63c0	; 0x63c0 <OSTmr_Free>
             OSTmr_Unlock();
    5d34:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    5d38:	eb 81       	ldd	r30, Y+3	; 0x03
    5d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    5d3c:	10 82       	st	Z, r1
             return (OS_TRUE);
    5d3e:	81 e0       	ldi	r24, 0x01	; 1
    5d40:	8f 83       	std	Y+7, r24	; 0x07
    5d42:	0f c0       	rjmp	.+30     	; 0x5d62 <OS_SchedNew+0x1776>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
    5d44:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    5d48:	eb 81       	ldd	r30, Y+3	; 0x03
    5d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    5d4c:	87 e8       	ldi	r24, 0x87	; 135
    5d4e:	80 83       	st	Z, r24
             return (OS_FALSE);
    5d50:	1f 82       	std	Y+7, r1	; 0x07
    5d52:	07 c0       	rjmp	.+14     	; 0x5d62 <OS_SchedNew+0x1776>

        default:
             OSTmr_Unlock();
    5d54:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    5d58:	eb 81       	ldd	r30, Y+3	; 0x03
    5d5a:	fc 81       	ldd	r31, Y+4	; 0x04
    5d5c:	8d e8       	ldi	r24, 0x8D	; 141
    5d5e:	80 83       	st	Z, r24
             return (OS_FALSE);
    5d60:	1f 82       	std	Y+7, r1	; 0x07
    5d62:	8f 81       	ldd	r24, Y+7	; 0x07
    }
}
    5d64:	27 96       	adiw	r28, 0x07	; 7
    5d66:	0f b6       	in	r0, 0x3f	; 63
    5d68:	f8 94       	cli
    5d6a:	de bf       	out	0x3e, r29	; 62
    5d6c:	0f be       	out	0x3f, r0	; 63
    5d6e:	cd bf       	out	0x3d, r28	; 61
    5d70:	cf 91       	pop	r28
    5d72:	df 91       	pop	r29
    5d74:	08 95       	ret

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
    5d76:	df 93       	push	r29
    5d78:	cf 93       	push	r28
    5d7a:	cd b7       	in	r28, 0x3d	; 61
    5d7c:	de b7       	in	r29, 0x3e	; 62
    5d7e:	2a 97       	sbiw	r28, 0x0a	; 10
    5d80:	0f b6       	in	r0, 0x3f	; 63
    5d82:	f8 94       	cli
    5d84:	de bf       	out	0x3e, r29	; 62
    5d86:	0f be       	out	0x3f, r0	; 63
    5d88:	cd bf       	out	0x3d, r28	; 61
    5d8a:	9b 83       	std	Y+3, r25	; 0x03
    5d8c:	8a 83       	std	Y+2, r24	; 0x02
    5d8e:	7d 83       	std	Y+5, r23	; 0x05
    5d90:	6c 83       	std	Y+4, r22	; 0x04
    5d92:	5f 83       	std	Y+7, r21	; 0x07
    5d94:	4e 83       	std	Y+6, r20	; 0x06
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    5d96:	ea 81       	ldd	r30, Y+2	; 0x02
    5d98:	fb 81       	ldd	r31, Y+3	; 0x03
    5d9a:	80 81       	ld	r24, Z
    5d9c:	84 36       	cpi	r24, 0x64	; 100
    5d9e:	31 f0       	breq	.+12     	; 0x5dac <OS_SchedNew+0x17c0>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    5da0:	ee 81       	ldd	r30, Y+6	; 0x06
    5da2:	ff 81       	ldd	r31, Y+7	; 0x07
    5da4:	89 e8       	ldi	r24, 0x89	; 137
    5da6:	80 83       	st	Z, r24
        return (0);
    5da8:	1a 86       	std	Y+10, r1	; 0x0a
    5daa:	42 c0       	rjmp	.+132    	; 0x5e30 <OS_SchedNew+0x1844>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    5dac:	80 91 4c 08 	lds	r24, 0x084C
    5db0:	88 23       	and	r24, r24
    5db2:	31 f0       	breq	.+12     	; 0x5dc0 <OS_SchedNew+0x17d4>
        *perr = OS_ERR_NAME_GET_ISR;
    5db4:	ee 81       	ldd	r30, Y+6	; 0x06
    5db6:	ff 81       	ldd	r31, Y+7	; 0x07
    5db8:	81 e1       	ldi	r24, 0x11	; 17
    5dba:	80 83       	st	Z, r24
        return (0);
    5dbc:	1a 86       	std	Y+10, r1	; 0x0a
    5dbe:	38 c0       	rjmp	.+112    	; 0x5e30 <OS_SchedNew+0x1844>
    }
    OSTmr_Lock();
    5dc0:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    5dc4:	ea 81       	ldd	r30, Y+2	; 0x02
    5dc6:	fb 81       	ldd	r31, Y+3	; 0x03
    5dc8:	86 a1       	ldd	r24, Z+38	; 0x26
    5dca:	28 2f       	mov	r18, r24
    5dcc:	30 e0       	ldi	r19, 0x00	; 0
    5dce:	39 87       	std	Y+9, r19	; 0x09
    5dd0:	28 87       	std	Y+8, r18	; 0x08
    5dd2:	88 85       	ldd	r24, Y+8	; 0x08
    5dd4:	99 85       	ldd	r25, Y+9	; 0x09
    5dd6:	00 97       	sbiw	r24, 0x00	; 0
    5dd8:	e1 f0       	breq	.+56     	; 0x5e12 <OS_SchedNew+0x1826>
    5dda:	28 85       	ldd	r18, Y+8	; 0x08
    5ddc:	39 85       	ldd	r19, Y+9	; 0x09
    5dde:	33 23       	and	r19, r19
    5de0:	04 f1       	brlt	.+64     	; 0x5e22 <OS_SchedNew+0x1836>
    5de2:	88 85       	ldd	r24, Y+8	; 0x08
    5de4:	99 85       	ldd	r25, Y+9	; 0x09
    5de6:	84 30       	cpi	r24, 0x04	; 4
    5de8:	91 05       	cpc	r25, r1
    5dea:	dc f4       	brge	.+54     	; 0x5e22 <OS_SchedNew+0x1836>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
    5dec:	8a 81       	ldd	r24, Y+2	; 0x02
    5dee:	9b 81       	ldd	r25, Y+3	; 0x03
    5df0:	9c 01       	movw	r18, r24
    5df2:	2b 5e       	subi	r18, 0xEB	; 235
    5df4:	3f 4f       	sbci	r19, 0xFF	; 255
    5df6:	8c 81       	ldd	r24, Y+4	; 0x04
    5df8:	9d 81       	ldd	r25, Y+5	; 0x05
    5dfa:	b9 01       	movw	r22, r18
    5dfc:	0e 94 1d 23 	call	0x463a	; 0x463a <OS_SchedNew+0x4e>
    5e00:	89 83       	std	Y+1, r24	; 0x01
             OSTmr_Unlock();
    5e02:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    5e06:	ee 81       	ldd	r30, Y+6	; 0x06
    5e08:	ff 81       	ldd	r31, Y+7	; 0x07
    5e0a:	10 82       	st	Z, r1
             return (len);
    5e0c:	99 81       	ldd	r25, Y+1	; 0x01
    5e0e:	9a 87       	std	Y+10, r25	; 0x0a
    5e10:	0f c0       	rjmp	.+30     	; 0x5e30 <OS_SchedNew+0x1844>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
    5e12:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    5e16:	ee 81       	ldd	r30, Y+6	; 0x06
    5e18:	ff 81       	ldd	r31, Y+7	; 0x07
    5e1a:	87 e8       	ldi	r24, 0x87	; 135
    5e1c:	80 83       	st	Z, r24
             return (0);
    5e1e:	1a 86       	std	Y+10, r1	; 0x0a
    5e20:	07 c0       	rjmp	.+14     	; 0x5e30 <OS_SchedNew+0x1844>

        default:
             OSTmr_Unlock();
    5e22:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    5e26:	ee 81       	ldd	r30, Y+6	; 0x06
    5e28:	ff 81       	ldd	r31, Y+7	; 0x07
    5e2a:	8d e8       	ldi	r24, 0x8D	; 141
    5e2c:	80 83       	st	Z, r24
             return (0);
    5e2e:	1a 86       	std	Y+10, r1	; 0x0a
    5e30:	8a 85       	ldd	r24, Y+10	; 0x0a
    }
}
    5e32:	2a 96       	adiw	r28, 0x0a	; 10
    5e34:	0f b6       	in	r0, 0x3f	; 63
    5e36:	f8 94       	cli
    5e38:	de bf       	out	0x3e, r29	; 62
    5e3a:	0f be       	out	0x3f, r0	; 63
    5e3c:	cd bf       	out	0x3d, r28	; 61
    5e3e:	cf 91       	pop	r28
    5e40:	df 91       	pop	r29
    5e42:	08 95       	ret
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
    5e44:	ef 92       	push	r14
    5e46:	ff 92       	push	r15
    5e48:	0f 93       	push	r16
    5e4a:	1f 93       	push	r17
    5e4c:	df 93       	push	r29
    5e4e:	cf 93       	push	r28
    5e50:	cd b7       	in	r28, 0x3d	; 61
    5e52:	de b7       	in	r29, 0x3e	; 62
    5e54:	2e 97       	sbiw	r28, 0x0e	; 14
    5e56:	0f b6       	in	r0, 0x3f	; 63
    5e58:	f8 94       	cli
    5e5a:	de bf       	out	0x3e, r29	; 62
    5e5c:	0f be       	out	0x3f, r0	; 63
    5e5e:	cd bf       	out	0x3d, r28	; 61
    5e60:	9e 83       	std	Y+6, r25	; 0x06
    5e62:	8d 83       	std	Y+5, r24	; 0x05
    5e64:	78 87       	std	Y+8, r23	; 0x08
    5e66:	6f 83       	std	Y+7, r22	; 0x07
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    5e68:	ed 81       	ldd	r30, Y+5	; 0x05
    5e6a:	fe 81       	ldd	r31, Y+6	; 0x06
    5e6c:	80 81       	ld	r24, Z
    5e6e:	84 36       	cpi	r24, 0x64	; 100
    5e70:	49 f0       	breq	.+18     	; 0x5e84 <OS_SchedNew+0x1898>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    5e72:	ef 81       	ldd	r30, Y+7	; 0x07
    5e74:	f8 85       	ldd	r31, Y+8	; 0x08
    5e76:	89 e8       	ldi	r24, 0x89	; 137
    5e78:	80 83       	st	Z, r24
        return (0);
    5e7a:	1b 86       	std	Y+11, r1	; 0x0b
    5e7c:	1c 86       	std	Y+12, r1	; 0x0c
    5e7e:	1d 86       	std	Y+13, r1	; 0x0d
    5e80:	1e 86       	std	Y+14, r1	; 0x0e
    5e82:	bf c0       	rjmp	.+382    	; 0x6002 <OS_SchedNew+0x1a16>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    5e84:	80 91 4c 08 	lds	r24, 0x084C
    5e88:	88 23       	and	r24, r24
    5e8a:	49 f0       	breq	.+18     	; 0x5e9e <OS_SchedNew+0x18b2>
        *perr = OS_ERR_TMR_ISR;
    5e8c:	ef 81       	ldd	r30, Y+7	; 0x07
    5e8e:	f8 85       	ldd	r31, Y+8	; 0x08
    5e90:	8b e8       	ldi	r24, 0x8B	; 139
    5e92:	80 83       	st	Z, r24
        return (0);
    5e94:	1b 86       	std	Y+11, r1	; 0x0b
    5e96:	1c 86       	std	Y+12, r1	; 0x0c
    5e98:	1d 86       	std	Y+13, r1	; 0x0d
    5e9a:	1e 86       	std	Y+14, r1	; 0x0e
    5e9c:	b2 c0       	rjmp	.+356    	; 0x6002 <OS_SchedNew+0x1a16>
    }
    OSTmr_Lock();
    5e9e:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    5ea2:	ed 81       	ldd	r30, Y+5	; 0x05
    5ea4:	fe 81       	ldd	r31, Y+6	; 0x06
    5ea6:	86 a1       	ldd	r24, Z+38	; 0x26
    5ea8:	e8 2e       	mov	r14, r24
    5eaa:	ff 24       	eor	r15, r15
    5eac:	fa 86       	std	Y+10, r15	; 0x0a
    5eae:	e9 86       	std	Y+9, r14	; 0x09
    5eb0:	09 85       	ldd	r16, Y+9	; 0x09
    5eb2:	1a 85       	ldd	r17, Y+10	; 0x0a
    5eb4:	01 30       	cpi	r16, 0x01	; 1
    5eb6:	11 05       	cpc	r17, r1
    5eb8:	09 f4       	brne	.+2      	; 0x5ebc <OS_SchedNew+0x18d0>
    5eba:	3f c0       	rjmp	.+126    	; 0x5f3a <OS_SchedNew+0x194e>
    5ebc:	29 85       	ldd	r18, Y+9	; 0x09
    5ebe:	3a 85       	ldd	r19, Y+10	; 0x0a
    5ec0:	22 30       	cpi	r18, 0x02	; 2
    5ec2:	31 05       	cpc	r19, r1
    5ec4:	34 f4       	brge	.+12     	; 0x5ed2 <OS_SchedNew+0x18e6>
    5ec6:	89 85       	ldd	r24, Y+9	; 0x09
    5ec8:	9a 85       	ldd	r25, Y+10	; 0x0a
    5eca:	00 97       	sbiw	r24, 0x00	; 0
    5ecc:	09 f4       	brne	.+2      	; 0x5ed0 <OS_SchedNew+0x18e4>
    5ece:	84 c0       	rjmp	.+264    	; 0x5fd8 <OS_SchedNew+0x19ec>
    5ed0:	8e c0       	rjmp	.+284    	; 0x5fee <OS_SchedNew+0x1a02>
    5ed2:	a9 85       	ldd	r26, Y+9	; 0x09
    5ed4:	ba 85       	ldd	r27, Y+10	; 0x0a
    5ed6:	a2 30       	cpi	r26, 0x02	; 2
    5ed8:	b1 05       	cpc	r27, r1
    5eda:	09 f4       	brne	.+2      	; 0x5ede <OS_SchedNew+0x18f2>
    5edc:	73 c0       	rjmp	.+230    	; 0x5fc4 <OS_SchedNew+0x19d8>
    5ede:	09 85       	ldd	r16, Y+9	; 0x09
    5ee0:	1a 85       	ldd	r17, Y+10	; 0x0a
    5ee2:	03 30       	cpi	r16, 0x03	; 3
    5ee4:	11 05       	cpc	r17, r1
    5ee6:	09 f0       	breq	.+2      	; 0x5eea <OS_SchedNew+0x18fe>
    5ee8:	82 c0       	rjmp	.+260    	; 0x5fee <OS_SchedNew+0x1a02>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
    5eea:	ed 81       	ldd	r30, Y+5	; 0x05
    5eec:	fe 81       	ldd	r31, Y+6	; 0x06
    5eee:	21 85       	ldd	r18, Z+9	; 0x09
    5ef0:	32 85       	ldd	r19, Z+10	; 0x0a
    5ef2:	43 85       	ldd	r20, Z+11	; 0x0b
    5ef4:	54 85       	ldd	r21, Z+12	; 0x0c
    5ef6:	80 91 4f 08 	lds	r24, 0x084F
    5efa:	90 91 50 08 	lds	r25, 0x0850
    5efe:	a0 91 51 08 	lds	r26, 0x0851
    5f02:	b0 91 52 08 	lds	r27, 0x0852
    5f06:	79 01       	movw	r14, r18
    5f08:	8a 01       	movw	r16, r20
    5f0a:	e8 1a       	sub	r14, r24
    5f0c:	f9 0a       	sbc	r15, r25
    5f0e:	0a 0b       	sbc	r16, r26
    5f10:	1b 0b       	sbc	r17, r27
    5f12:	d8 01       	movw	r26, r16
    5f14:	c7 01       	movw	r24, r14
    5f16:	89 83       	std	Y+1, r24	; 0x01
    5f18:	9a 83       	std	Y+2, r25	; 0x02
    5f1a:	ab 83       	std	Y+3, r26	; 0x03
    5f1c:	bc 83       	std	Y+4, r27	; 0x04
             OSTmr_Unlock();
    5f1e:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
    5f22:	ef 81       	ldd	r30, Y+7	; 0x07
    5f24:	f8 85       	ldd	r31, Y+8	; 0x08
    5f26:	10 82       	st	Z, r1
             return (remain);
    5f28:	09 81       	ldd	r16, Y+1	; 0x01
    5f2a:	1a 81       	ldd	r17, Y+2	; 0x02
    5f2c:	2b 81       	ldd	r18, Y+3	; 0x03
    5f2e:	3c 81       	ldd	r19, Y+4	; 0x04
    5f30:	0b 87       	std	Y+11, r16	; 0x0b
    5f32:	1c 87       	std	Y+12, r17	; 0x0c
    5f34:	2d 87       	std	Y+13, r18	; 0x0d
    5f36:	3e 87       	std	Y+14, r19	; 0x0e
    5f38:	64 c0       	rjmp	.+200    	; 0x6002 <OS_SchedNew+0x1a16>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
    5f3a:	ed 81       	ldd	r30, Y+5	; 0x05
    5f3c:	fe 81       	ldd	r31, Y+6	; 0x06
    5f3e:	85 a1       	ldd	r24, Z+37	; 0x25
    5f40:	88 2f       	mov	r24, r24
    5f42:	90 e0       	ldi	r25, 0x00	; 0
    5f44:	82 30       	cpi	r24, 0x02	; 2
    5f46:	91 05       	cpc	r25, r1
    5f48:	29 f5       	brne	.+74     	; 0x5f94 <OS_SchedNew+0x19a8>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
    5f4a:	ed 81       	ldd	r30, Y+5	; 0x05
    5f4c:	fe 81       	ldd	r31, Y+6	; 0x06
    5f4e:	85 85       	ldd	r24, Z+13	; 0x0d
    5f50:	96 85       	ldd	r25, Z+14	; 0x0e
    5f52:	a7 85       	ldd	r26, Z+15	; 0x0f
    5f54:	b0 89       	ldd	r27, Z+16	; 0x10
    5f56:	00 97       	sbiw	r24, 0x00	; 0
    5f58:	a1 05       	cpc	r26, r1
    5f5a:	b1 05       	cpc	r27, r1
    5f5c:	59 f4       	brne	.+22     	; 0x5f74 <OS_SchedNew+0x1988>
                          remain = ptmr->OSTmrPeriod;
    5f5e:	ed 81       	ldd	r30, Y+5	; 0x05
    5f60:	fe 81       	ldd	r31, Y+6	; 0x06
    5f62:	81 89       	ldd	r24, Z+17	; 0x11
    5f64:	92 89       	ldd	r25, Z+18	; 0x12
    5f66:	a3 89       	ldd	r26, Z+19	; 0x13
    5f68:	b4 89       	ldd	r27, Z+20	; 0x14
    5f6a:	89 83       	std	Y+1, r24	; 0x01
    5f6c:	9a 83       	std	Y+2, r25	; 0x02
    5f6e:	ab 83       	std	Y+3, r26	; 0x03
    5f70:	bc 83       	std	Y+4, r27	; 0x04
    5f72:	0a c0       	rjmp	.+20     	; 0x5f88 <OS_SchedNew+0x199c>
                      } else {
                          remain = ptmr->OSTmrDly;
    5f74:	ed 81       	ldd	r30, Y+5	; 0x05
    5f76:	fe 81       	ldd	r31, Y+6	; 0x06
    5f78:	85 85       	ldd	r24, Z+13	; 0x0d
    5f7a:	96 85       	ldd	r25, Z+14	; 0x0e
    5f7c:	a7 85       	ldd	r26, Z+15	; 0x0f
    5f7e:	b0 89       	ldd	r27, Z+16	; 0x10
    5f80:	89 83       	std	Y+1, r24	; 0x01
    5f82:	9a 83       	std	Y+2, r25	; 0x02
    5f84:	ab 83       	std	Y+3, r26	; 0x03
    5f86:	bc 83       	std	Y+4, r27	; 0x04
                      }
                      OSTmr_Unlock();
    5f88:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    5f8c:	ef 81       	ldd	r30, Y+7	; 0x07
    5f8e:	f8 85       	ldd	r31, Y+8	; 0x08
    5f90:	10 82       	st	Z, r1
    5f92:	0f c0       	rjmp	.+30     	; 0x5fb2 <OS_SchedNew+0x19c6>
                      break;

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
    5f94:	ed 81       	ldd	r30, Y+5	; 0x05
    5f96:	fe 81       	ldd	r31, Y+6	; 0x06
    5f98:	85 85       	ldd	r24, Z+13	; 0x0d
    5f9a:	96 85       	ldd	r25, Z+14	; 0x0e
    5f9c:	a7 85       	ldd	r26, Z+15	; 0x0f
    5f9e:	b0 89       	ldd	r27, Z+16	; 0x10
    5fa0:	89 83       	std	Y+1, r24	; 0x01
    5fa2:	9a 83       	std	Y+2, r25	; 0x02
    5fa4:	ab 83       	std	Y+3, r26	; 0x03
    5fa6:	bc 83       	std	Y+4, r27	; 0x04
                      OSTmr_Unlock();
    5fa8:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    5fac:	ef 81       	ldd	r30, Y+7	; 0x07
    5fae:	f8 85       	ldd	r31, Y+8	; 0x08
    5fb0:	10 82       	st	Z, r1
                      break;
             }
             return (remain);
    5fb2:	89 81       	ldd	r24, Y+1	; 0x01
    5fb4:	9a 81       	ldd	r25, Y+2	; 0x02
    5fb6:	ab 81       	ldd	r26, Y+3	; 0x03
    5fb8:	bc 81       	ldd	r27, Y+4	; 0x04
    5fba:	8b 87       	std	Y+11, r24	; 0x0b
    5fbc:	9c 87       	std	Y+12, r25	; 0x0c
    5fbe:	ad 87       	std	Y+13, r26	; 0x0d
    5fc0:	be 87       	std	Y+14, r27	; 0x0e
    5fc2:	1f c0       	rjmp	.+62     	; 0x6002 <OS_SchedNew+0x1a16>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
    5fc4:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    5fc8:	ef 81       	ldd	r30, Y+7	; 0x07
    5fca:	f8 85       	ldd	r31, Y+8	; 0x08
    5fcc:	10 82       	st	Z, r1
             return (0);
    5fce:	1b 86       	std	Y+11, r1	; 0x0b
    5fd0:	1c 86       	std	Y+12, r1	; 0x0c
    5fd2:	1d 86       	std	Y+13, r1	; 0x0d
    5fd4:	1e 86       	std	Y+14, r1	; 0x0e
    5fd6:	15 c0       	rjmp	.+42     	; 0x6002 <OS_SchedNew+0x1a16>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
    5fd8:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    5fdc:	ef 81       	ldd	r30, Y+7	; 0x07
    5fde:	f8 85       	ldd	r31, Y+8	; 0x08
    5fe0:	87 e8       	ldi	r24, 0x87	; 135
    5fe2:	80 83       	st	Z, r24
             return (0);
    5fe4:	1b 86       	std	Y+11, r1	; 0x0b
    5fe6:	1c 86       	std	Y+12, r1	; 0x0c
    5fe8:	1d 86       	std	Y+13, r1	; 0x0d
    5fea:	1e 86       	std	Y+14, r1	; 0x0e
    5fec:	0a c0       	rjmp	.+20     	; 0x6002 <OS_SchedNew+0x1a16>

        default:
             OSTmr_Unlock();
    5fee:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    5ff2:	ef 81       	ldd	r30, Y+7	; 0x07
    5ff4:	f8 85       	ldd	r31, Y+8	; 0x08
    5ff6:	8d e8       	ldi	r24, 0x8D	; 141
    5ff8:	80 83       	st	Z, r24
             return (0);
    5ffa:	1b 86       	std	Y+11, r1	; 0x0b
    5ffc:	1c 86       	std	Y+12, r1	; 0x0c
    5ffe:	1d 86       	std	Y+13, r1	; 0x0d
    6000:	1e 86       	std	Y+14, r1	; 0x0e
    6002:	8b 85       	ldd	r24, Y+11	; 0x0b
    6004:	9c 85       	ldd	r25, Y+12	; 0x0c
    6006:	ad 85       	ldd	r26, Y+13	; 0x0d
    6008:	be 85       	ldd	r27, Y+14	; 0x0e
    }
}
    600a:	bc 01       	movw	r22, r24
    600c:	cd 01       	movw	r24, r26
    600e:	2e 96       	adiw	r28, 0x0e	; 14
    6010:	0f b6       	in	r0, 0x3f	; 63
    6012:	f8 94       	cli
    6014:	de bf       	out	0x3e, r29	; 62
    6016:	0f be       	out	0x3f, r0	; 63
    6018:	cd bf       	out	0x3d, r28	; 61
    601a:	cf 91       	pop	r28
    601c:	df 91       	pop	r29
    601e:	1f 91       	pop	r17
    6020:	0f 91       	pop	r16
    6022:	ff 90       	pop	r15
    6024:	ef 90       	pop	r14
    6026:	08 95       	ret
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
    6028:	df 93       	push	r29
    602a:	cf 93       	push	r28
    602c:	00 d0       	rcall	.+0      	; 0x602e <OS_SchedNew+0x1a42>
    602e:	00 d0       	rcall	.+0      	; 0x6030 <OS_SchedNew+0x1a44>
    6030:	cd b7       	in	r28, 0x3d	; 61
    6032:	de b7       	in	r29, 0x3e	; 62
    6034:	9b 83       	std	Y+3, r25	; 0x03
    6036:	8a 83       	std	Y+2, r24	; 0x02
    6038:	7d 83       	std	Y+5, r23	; 0x05
    603a:	6c 83       	std	Y+4, r22	; 0x04
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    603c:	ea 81       	ldd	r30, Y+2	; 0x02
    603e:	fb 81       	ldd	r31, Y+3	; 0x03
    6040:	80 81       	ld	r24, Z
    6042:	84 36       	cpi	r24, 0x64	; 100
    6044:	31 f0       	breq	.+12     	; 0x6052 <OS_SchedNew+0x1a66>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    6046:	ec 81       	ldd	r30, Y+4	; 0x04
    6048:	fd 81       	ldd	r31, Y+5	; 0x05
    604a:	89 e8       	ldi	r24, 0x89	; 137
    604c:	80 83       	st	Z, r24
        return (0);
    604e:	1e 82       	std	Y+6, r1	; 0x06
    6050:	23 c0       	rjmp	.+70     	; 0x6098 <OS_SchedNew+0x1aac>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    6052:	80 91 4c 08 	lds	r24, 0x084C
    6056:	88 23       	and	r24, r24
    6058:	31 f0       	breq	.+12     	; 0x6066 <OS_SchedNew+0x1a7a>
        *perr = OS_ERR_TMR_ISR;
    605a:	ec 81       	ldd	r30, Y+4	; 0x04
    605c:	fd 81       	ldd	r31, Y+5	; 0x05
    605e:	8b e8       	ldi	r24, 0x8B	; 139
    6060:	80 83       	st	Z, r24
        return (0);
    6062:	1e 82       	std	Y+6, r1	; 0x06
    6064:	19 c0       	rjmp	.+50     	; 0x6098 <OS_SchedNew+0x1aac>
    }
    OSTmr_Lock();
    6066:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
    state = ptmr->OSTmrState;
    606a:	ea 81       	ldd	r30, Y+2	; 0x02
    606c:	fb 81       	ldd	r31, Y+3	; 0x03
    606e:	86 a1       	ldd	r24, Z+38	; 0x26
    6070:	89 83       	std	Y+1, r24	; 0x01
    switch (state) {
    6072:	89 81       	ldd	r24, Y+1	; 0x01
    6074:	88 2f       	mov	r24, r24
    6076:	90 e0       	ldi	r25, 0x00	; 0
    6078:	00 96       	adiw	r24, 0x00	; 0
    607a:	84 30       	cpi	r24, 0x04	; 4
    607c:	91 05       	cpc	r25, r1
    607e:	20 f4       	brcc	.+8      	; 0x6088 <OS_SchedNew+0x1a9c>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
    6080:	ec 81       	ldd	r30, Y+4	; 0x04
    6082:	fd 81       	ldd	r31, Y+5	; 0x05
    6084:	10 82       	st	Z, r1
    6086:	04 c0       	rjmp	.+8      	; 0x6090 <OS_SchedNew+0x1aa4>
             break;
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
    6088:	ec 81       	ldd	r30, Y+4	; 0x04
    608a:	fd 81       	ldd	r31, Y+5	; 0x05
    608c:	8d e8       	ldi	r24, 0x8D	; 141
    608e:	80 83       	st	Z, r24
             break;
    }
    OSTmr_Unlock();
    6090:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
    return (state);
    6094:	89 81       	ldd	r24, Y+1	; 0x01
    6096:	8e 83       	std	Y+6, r24	; 0x06
    6098:	8e 81       	ldd	r24, Y+6	; 0x06
}
    609a:	26 96       	adiw	r28, 0x06	; 6
    609c:	0f b6       	in	r0, 0x3f	; 63
    609e:	f8 94       	cli
    60a0:	de bf       	out	0x3e, r29	; 62
    60a2:	0f be       	out	0x3f, r0	; 63
    60a4:	cd bf       	out	0x3d, r28	; 61
    60a6:	cf 91       	pop	r28
    60a8:	df 91       	pop	r29
    60aa:	08 95       	ret
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
    60ac:	df 93       	push	r29
    60ae:	cf 93       	push	r28
    60b0:	cd b7       	in	r28, 0x3d	; 61
    60b2:	de b7       	in	r29, 0x3e	; 62
    60b4:	27 97       	sbiw	r28, 0x07	; 7
    60b6:	0f b6       	in	r0, 0x3f	; 63
    60b8:	f8 94       	cli
    60ba:	de bf       	out	0x3e, r29	; 62
    60bc:	0f be       	out	0x3f, r0	; 63
    60be:	cd bf       	out	0x3d, r28	; 61
    60c0:	9a 83       	std	Y+2, r25	; 0x02
    60c2:	89 83       	std	Y+1, r24	; 0x01
    60c4:	7c 83       	std	Y+4, r23	; 0x04
    60c6:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    60c8:	e9 81       	ldd	r30, Y+1	; 0x01
    60ca:	fa 81       	ldd	r31, Y+2	; 0x02
    60cc:	80 81       	ld	r24, Z
    60ce:	84 36       	cpi	r24, 0x64	; 100
    60d0:	31 f0       	breq	.+12     	; 0x60de <OS_SchedNew+0x1af2>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    60d2:	eb 81       	ldd	r30, Y+3	; 0x03
    60d4:	fc 81       	ldd	r31, Y+4	; 0x04
    60d6:	89 e8       	ldi	r24, 0x89	; 137
    60d8:	80 83       	st	Z, r24
        return (OS_FALSE);
    60da:	1f 82       	std	Y+7, r1	; 0x07
    60dc:	54 c0       	rjmp	.+168    	; 0x6186 <OS_SchedNew+0x1b9a>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    60de:	80 91 4c 08 	lds	r24, 0x084C
    60e2:	88 23       	and	r24, r24
    60e4:	31 f0       	breq	.+12     	; 0x60f2 <OS_SchedNew+0x1b06>
        *perr  = OS_ERR_TMR_ISR;
    60e6:	eb 81       	ldd	r30, Y+3	; 0x03
    60e8:	fc 81       	ldd	r31, Y+4	; 0x04
    60ea:	8b e8       	ldi	r24, 0x8B	; 139
    60ec:	80 83       	st	Z, r24
        return (OS_FALSE);
    60ee:	1f 82       	std	Y+7, r1	; 0x07
    60f0:	4a c0       	rjmp	.+148    	; 0x6186 <OS_SchedNew+0x1b9a>
    }
    OSTmr_Lock();
    60f2:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    60f6:	e9 81       	ldd	r30, Y+1	; 0x01
    60f8:	fa 81       	ldd	r31, Y+2	; 0x02
    60fa:	86 a1       	ldd	r24, Z+38	; 0x26
    60fc:	28 2f       	mov	r18, r24
    60fe:	30 e0       	ldi	r19, 0x00	; 0
    6100:	3e 83       	std	Y+6, r19	; 0x06
    6102:	2d 83       	std	Y+5, r18	; 0x05
    6104:	8d 81       	ldd	r24, Y+5	; 0x05
    6106:	9e 81       	ldd	r25, Y+6	; 0x06
    6108:	83 30       	cpi	r24, 0x03	; 3
    610a:	91 05       	cpc	r25, r1
    610c:	54 f4       	brge	.+20     	; 0x6122 <OS_SchedNew+0x1b36>
    610e:	2d 81       	ldd	r18, Y+5	; 0x05
    6110:	3e 81       	ldd	r19, Y+6	; 0x06
    6112:	21 30       	cpi	r18, 0x01	; 1
    6114:	31 05       	cpc	r19, r1
    6116:	dc f4       	brge	.+54     	; 0x614e <OS_SchedNew+0x1b62>
    6118:	8d 81       	ldd	r24, Y+5	; 0x05
    611a:	9e 81       	ldd	r25, Y+6	; 0x06
    611c:	00 97       	sbiw	r24, 0x00	; 0
    611e:	21 f1       	breq	.+72     	; 0x6168 <OS_SchedNew+0x1b7c>
    6120:	2b c0       	rjmp	.+86     	; 0x6178 <OS_SchedNew+0x1b8c>
    6122:	2d 81       	ldd	r18, Y+5	; 0x05
    6124:	3e 81       	ldd	r19, Y+6	; 0x06
    6126:	23 30       	cpi	r18, 0x03	; 3
    6128:	31 05       	cpc	r19, r1
    612a:	31 f5       	brne	.+76     	; 0x6178 <OS_SchedNew+0x1b8c>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
    612c:	89 81       	ldd	r24, Y+1	; 0x01
    612e:	9a 81       	ldd	r25, Y+2	; 0x02
    6130:	0e 94 e6 33 	call	0x67cc	; 0x67cc <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    6134:	89 81       	ldd	r24, Y+1	; 0x01
    6136:	9a 81       	ldd	r25, Y+2	; 0x02
    6138:	60 e0       	ldi	r22, 0x00	; 0
    613a:	0e 94 25 33 	call	0x664a	; 0x664a <OSTmr_Link>
             OSTmr_Unlock();
    613e:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    6142:	eb 81       	ldd	r30, Y+3	; 0x03
    6144:	fc 81       	ldd	r31, Y+4	; 0x04
    6146:	10 82       	st	Z, r1
             return (OS_TRUE);
    6148:	31 e0       	ldi	r19, 0x01	; 1
    614a:	3f 83       	std	Y+7, r19	; 0x07
    614c:	1c c0       	rjmp	.+56     	; 0x6186 <OS_SchedNew+0x1b9a>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    614e:	89 81       	ldd	r24, Y+1	; 0x01
    6150:	9a 81       	ldd	r25, Y+2	; 0x02
    6152:	60 e0       	ldi	r22, 0x00	; 0
    6154:	0e 94 25 33 	call	0x664a	; 0x664a <OSTmr_Link>
             OSTmr_Unlock();
    6158:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    615c:	eb 81       	ldd	r30, Y+3	; 0x03
    615e:	fc 81       	ldd	r31, Y+4	; 0x04
    6160:	10 82       	st	Z, r1
             return (OS_TRUE);
    6162:	81 e0       	ldi	r24, 0x01	; 1
    6164:	8f 83       	std	Y+7, r24	; 0x07
    6166:	0f c0       	rjmp	.+30     	; 0x6186 <OS_SchedNew+0x1b9a>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
    6168:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    616c:	eb 81       	ldd	r30, Y+3	; 0x03
    616e:	fc 81       	ldd	r31, Y+4	; 0x04
    6170:	87 e8       	ldi	r24, 0x87	; 135
    6172:	80 83       	st	Z, r24
             return (OS_FALSE);
    6174:	1f 82       	std	Y+7, r1	; 0x07
    6176:	07 c0       	rjmp	.+14     	; 0x6186 <OS_SchedNew+0x1b9a>

        default:
             OSTmr_Unlock();
    6178:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    617c:	eb 81       	ldd	r30, Y+3	; 0x03
    617e:	fc 81       	ldd	r31, Y+4	; 0x04
    6180:	8d e8       	ldi	r24, 0x8D	; 141
    6182:	80 83       	st	Z, r24
             return (OS_FALSE);
    6184:	1f 82       	std	Y+7, r1	; 0x07
    6186:	8f 81       	ldd	r24, Y+7	; 0x07
    }
}
    6188:	27 96       	adiw	r28, 0x07	; 7
    618a:	0f b6       	in	r0, 0x3f	; 63
    618c:	f8 94       	cli
    618e:	de bf       	out	0x3e, r29	; 62
    6190:	0f be       	out	0x3f, r0	; 63
    6192:	cd bf       	out	0x3d, r28	; 61
    6194:	cf 91       	pop	r28
    6196:	df 91       	pop	r29
    6198:	08 95       	ret
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
    619a:	df 93       	push	r29
    619c:	cf 93       	push	r28
    619e:	cd b7       	in	r28, 0x3d	; 61
    61a0:	de b7       	in	r29, 0x3e	; 62
    61a2:	2e 97       	sbiw	r28, 0x0e	; 14
    61a4:	0f b6       	in	r0, 0x3f	; 63
    61a6:	f8 94       	cli
    61a8:	de bf       	out	0x3e, r29	; 62
    61aa:	0f be       	out	0x3f, r0	; 63
    61ac:	cd bf       	out	0x3d, r28	; 61
    61ae:	9c 83       	std	Y+4, r25	; 0x04
    61b0:	8b 83       	std	Y+3, r24	; 0x03
    61b2:	6d 83       	std	Y+5, r22	; 0x05
    61b4:	5f 83       	std	Y+7, r21	; 0x07
    61b6:	4e 83       	std	Y+6, r20	; 0x06
    61b8:	39 87       	std	Y+9, r19	; 0x09
    61ba:	28 87       	std	Y+8, r18	; 0x08
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
    61bc:	eb 81       	ldd	r30, Y+3	; 0x03
    61be:	fc 81       	ldd	r31, Y+4	; 0x04
    61c0:	80 81       	ld	r24, Z
    61c2:	84 36       	cpi	r24, 0x64	; 100
    61c4:	31 f0       	breq	.+12     	; 0x61d2 <OS_SchedNew+0x1be6>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    61c6:	e8 85       	ldd	r30, Y+8	; 0x08
    61c8:	f9 85       	ldd	r31, Y+9	; 0x09
    61ca:	89 e8       	ldi	r24, 0x89	; 137
    61cc:	80 83       	st	Z, r24
        return (OS_FALSE);
    61ce:	1e 86       	std	Y+14, r1	; 0x0e
    61d0:	98 c0       	rjmp	.+304    	; 0x6302 <OS_SchedNew+0x1d16>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
    61d2:	80 91 4c 08 	lds	r24, 0x084C
    61d6:	88 23       	and	r24, r24
    61d8:	31 f0       	breq	.+12     	; 0x61e6 <OS_SchedNew+0x1bfa>
        *perr  = OS_ERR_TMR_ISR;
    61da:	e8 85       	ldd	r30, Y+8	; 0x08
    61dc:	f9 85       	ldd	r31, Y+9	; 0x09
    61de:	8b e8       	ldi	r24, 0x8B	; 139
    61e0:	80 83       	st	Z, r24
        return (OS_FALSE);
    61e2:	1e 86       	std	Y+14, r1	; 0x0e
    61e4:	8e c0       	rjmp	.+284    	; 0x6302 <OS_SchedNew+0x1d16>
    }
    OSTmr_Lock();
    61e6:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    61ea:	eb 81       	ldd	r30, Y+3	; 0x03
    61ec:	fc 81       	ldd	r31, Y+4	; 0x04
    61ee:	86 a1       	ldd	r24, Z+38	; 0x26
    61f0:	28 2f       	mov	r18, r24
    61f2:	30 e0       	ldi	r19, 0x00	; 0
    61f4:	3d 87       	std	Y+13, r19	; 0x0d
    61f6:	2c 87       	std	Y+12, r18	; 0x0c
    61f8:	8c 85       	ldd	r24, Y+12	; 0x0c
    61fa:	9d 85       	ldd	r25, Y+13	; 0x0d
    61fc:	83 30       	cpi	r24, 0x03	; 3
    61fe:	91 05       	cpc	r25, r1
    6200:	64 f4       	brge	.+24     	; 0x621a <OS_SchedNew+0x1c2e>
    6202:	2c 85       	ldd	r18, Y+12	; 0x0c
    6204:	3d 85       	ldd	r19, Y+13	; 0x0d
    6206:	21 30       	cpi	r18, 0x01	; 1
    6208:	31 05       	cpc	r19, r1
    620a:	0c f0       	brlt	.+2      	; 0x620e <OS_SchedNew+0x1c22>
    620c:	62 c0       	rjmp	.+196    	; 0x62d2 <OS_SchedNew+0x1ce6>
    620e:	8c 85       	ldd	r24, Y+12	; 0x0c
    6210:	9d 85       	ldd	r25, Y+13	; 0x0d
    6212:	00 97       	sbiw	r24, 0x00	; 0
    6214:	09 f4       	brne	.+2      	; 0x6218 <OS_SchedNew+0x1c2c>
    6216:	66 c0       	rjmp	.+204    	; 0x62e4 <OS_SchedNew+0x1cf8>
    6218:	6d c0       	rjmp	.+218    	; 0x62f4 <OS_SchedNew+0x1d08>
    621a:	2c 85       	ldd	r18, Y+12	; 0x0c
    621c:	3d 85       	ldd	r19, Y+13	; 0x0d
    621e:	23 30       	cpi	r18, 0x03	; 3
    6220:	31 05       	cpc	r19, r1
    6222:	09 f0       	breq	.+2      	; 0x6226 <OS_SchedNew+0x1c3a>
    6224:	67 c0       	rjmp	.+206    	; 0x62f4 <OS_SchedNew+0x1d08>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
    6226:	8b 81       	ldd	r24, Y+3	; 0x03
    6228:	9c 81       	ldd	r25, Y+4	; 0x04
    622a:	0e 94 e6 33 	call	0x67cc	; 0x67cc <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
    622e:	e8 85       	ldd	r30, Y+8	; 0x08
    6230:	f9 85       	ldd	r31, Y+9	; 0x09
    6232:	10 82       	st	Z, r1
             switch (opt) {
    6234:	8d 81       	ldd	r24, Y+5	; 0x05
    6236:	28 2f       	mov	r18, r24
    6238:	30 e0       	ldi	r19, 0x00	; 0
    623a:	3b 87       	std	Y+11, r19	; 0x0b
    623c:	2a 87       	std	Y+10, r18	; 0x0a
    623e:	8a 85       	ldd	r24, Y+10	; 0x0a
    6240:	9b 85       	ldd	r25, Y+11	; 0x0b
    6242:	83 30       	cpi	r24, 0x03	; 3
    6244:	91 05       	cpc	r25, r1
    6246:	51 f0       	breq	.+20     	; 0x625c <OS_SchedNew+0x1c70>
    6248:	2a 85       	ldd	r18, Y+10	; 0x0a
    624a:	3b 85       	ldd	r19, Y+11	; 0x0b
    624c:	24 30       	cpi	r18, 0x04	; 4
    624e:	31 05       	cpc	r19, r1
    6250:	f9 f0       	breq	.+62     	; 0x6290 <OS_SchedNew+0x1ca4>
    6252:	8a 85       	ldd	r24, Y+10	; 0x0a
    6254:	9b 85       	ldd	r25, Y+11	; 0x0b
    6256:	00 97       	sbiw	r24, 0x00	; 0
    6258:	b9 f1       	breq	.+110    	; 0x62c8 <OS_SchedNew+0x1cdc>
    625a:	32 c0       	rjmp	.+100    	; 0x62c0 <OS_SchedNew+0x1cd4>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    625c:	eb 81       	ldd	r30, Y+3	; 0x03
    625e:	fc 81       	ldd	r31, Y+4	; 0x04
    6260:	81 81       	ldd	r24, Z+1	; 0x01
    6262:	92 81       	ldd	r25, Z+2	; 0x02
    6264:	9a 83       	std	Y+2, r25	; 0x02
    6266:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    6268:	89 81       	ldd	r24, Y+1	; 0x01
    626a:	9a 81       	ldd	r25, Y+2	; 0x02
    626c:	00 97       	sbiw	r24, 0x00	; 0
    626e:	59 f0       	breq	.+22     	; 0x6286 <OS_SchedNew+0x1c9a>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
    6270:	eb 81       	ldd	r30, Y+3	; 0x03
    6272:	fc 81       	ldd	r31, Y+4	; 0x04
    6274:	23 81       	ldd	r18, Z+3	; 0x03
    6276:	34 81       	ldd	r19, Z+4	; 0x04
    6278:	8b 81       	ldd	r24, Y+3	; 0x03
    627a:	9c 81       	ldd	r25, Y+4	; 0x04
    627c:	e9 81       	ldd	r30, Y+1	; 0x01
    627e:	fa 81       	ldd	r31, Y+2	; 0x02
    6280:	b9 01       	movw	r22, r18
    6282:	19 95       	eicall
    6284:	21 c0       	rjmp	.+66     	; 0x62c8 <OS_SchedNew+0x1cdc>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    6286:	e8 85       	ldd	r30, Y+8	; 0x08
    6288:	f9 85       	ldd	r31, Y+9	; 0x09
    628a:	8f e8       	ldi	r24, 0x8F	; 143
    628c:	80 83       	st	Z, r24
    628e:	1c c0       	rjmp	.+56     	; 0x62c8 <OS_SchedNew+0x1cdc>
                      }
                      break;

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    6290:	eb 81       	ldd	r30, Y+3	; 0x03
    6292:	fc 81       	ldd	r31, Y+4	; 0x04
    6294:	81 81       	ldd	r24, Z+1	; 0x01
    6296:	92 81       	ldd	r25, Z+2	; 0x02
    6298:	9a 83       	std	Y+2, r25	; 0x02
    629a:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    629c:	89 81       	ldd	r24, Y+1	; 0x01
    629e:	9a 81       	ldd	r25, Y+2	; 0x02
    62a0:	00 97       	sbiw	r24, 0x00	; 0
    62a2:	49 f0       	breq	.+18     	; 0x62b6 <OS_SchedNew+0x1cca>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
    62a4:	8b 81       	ldd	r24, Y+3	; 0x03
    62a6:	9c 81       	ldd	r25, Y+4	; 0x04
    62a8:	2e 81       	ldd	r18, Y+6	; 0x06
    62aa:	3f 81       	ldd	r19, Y+7	; 0x07
    62ac:	e9 81       	ldd	r30, Y+1	; 0x01
    62ae:	fa 81       	ldd	r31, Y+2	; 0x02
    62b0:	b9 01       	movw	r22, r18
    62b2:	19 95       	eicall
    62b4:	09 c0       	rjmp	.+18     	; 0x62c8 <OS_SchedNew+0x1cdc>
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    62b6:	e8 85       	ldd	r30, Y+8	; 0x08
    62b8:	f9 85       	ldd	r31, Y+9	; 0x09
    62ba:	8f e8       	ldi	r24, 0x8F	; 143
    62bc:	80 83       	st	Z, r24
    62be:	04 c0       	rjmp	.+8      	; 0x62c8 <OS_SchedNew+0x1cdc>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
    62c0:	e8 85       	ldd	r30, Y+8	; 0x08
    62c2:	f9 85       	ldd	r31, Y+9	; 0x09
    62c4:	84 e8       	ldi	r24, 0x84	; 132
    62c6:	80 83       	st	Z, r24
                     break;
             }
             OSTmr_Unlock();
    62c8:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             return (OS_TRUE);
    62cc:	91 e0       	ldi	r25, 0x01	; 1
    62ce:	9e 87       	std	Y+14, r25	; 0x0e
    62d0:	18 c0       	rjmp	.+48     	; 0x6302 <OS_SchedNew+0x1d16>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
    62d2:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
    62d6:	e8 85       	ldd	r30, Y+8	; 0x08
    62d8:	f9 85       	ldd	r31, Y+9	; 0x09
    62da:	8e e8       	ldi	r24, 0x8E	; 142
    62dc:	80 83       	st	Z, r24
             return (OS_TRUE);
    62de:	21 e0       	ldi	r18, 0x01	; 1
    62e0:	2e 87       	std	Y+14, r18	; 0x0e
    62e2:	0f c0       	rjmp	.+30     	; 0x6302 <OS_SchedNew+0x1d16>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
    62e4:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    62e8:	e8 85       	ldd	r30, Y+8	; 0x08
    62ea:	f9 85       	ldd	r31, Y+9	; 0x09
    62ec:	87 e8       	ldi	r24, 0x87	; 135
    62ee:	80 83       	st	Z, r24
             return (OS_FALSE);
    62f0:	1e 86       	std	Y+14, r1	; 0x0e
    62f2:	07 c0       	rjmp	.+14     	; 0x6302 <OS_SchedNew+0x1d16>

        default:
             OSTmr_Unlock();
    62f4:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    62f8:	e8 85       	ldd	r30, Y+8	; 0x08
    62fa:	f9 85       	ldd	r31, Y+9	; 0x09
    62fc:	8d e8       	ldi	r24, 0x8D	; 141
    62fe:	80 83       	st	Z, r24
             return (OS_FALSE);
    6300:	1e 86       	std	Y+14, r1	; 0x0e
    6302:	8e 85       	ldd	r24, Y+14	; 0x0e
    }
}
    6304:	2e 96       	adiw	r28, 0x0e	; 14
    6306:	0f b6       	in	r0, 0x3f	; 63
    6308:	f8 94       	cli
    630a:	de bf       	out	0x3e, r29	; 62
    630c:	0f be       	out	0x3f, r0	; 63
    630e:	cd bf       	out	0x3d, r28	; 61
    6310:	cf 91       	pop	r28
    6312:	df 91       	pop	r29
    6314:	08 95       	ret
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
    6316:	df 93       	push	r29
    6318:	cf 93       	push	r28
    631a:	0f 92       	push	r0
    631c:	cd b7       	in	r28, 0x3d	; 61
    631e:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
    6320:	80 91 10 05 	lds	r24, 0x0510
    6324:	90 91 11 05 	lds	r25, 0x0511
    6328:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <OS_SchedNew+0x892>
    632c:	89 83       	std	Y+1, r24	; 0x01
    return (err);
    632e:	89 81       	ldd	r24, Y+1	; 0x01
}
    6330:	0f 90       	pop	r0
    6332:	cf 91       	pop	r28
    6334:	df 91       	pop	r29
    6336:	08 95       	ret

00006338 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
    6338:	df 93       	push	r29
    633a:	cf 93       	push	r28
    633c:	00 d0       	rcall	.+0      	; 0x633e <OSTmr_Alloc+0x6>
    633e:	0f 92       	push	r0
    6340:	cd b7       	in	r28, 0x3d	; 61
    6342:	de b7       	in	r29, 0x3e	; 62
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
    6344:	80 91 ed 04 	lds	r24, 0x04ED
    6348:	90 91 ee 04 	lds	r25, 0x04EE
    634c:	00 97       	sbiw	r24, 0x00	; 0
    634e:	19 f4       	brne	.+6      	; 0x6356 <OSTmr_Alloc+0x1e>
        return ((OS_TMR *)0);
    6350:	1c 82       	std	Y+4, r1	; 0x04
    6352:	1b 82       	std	Y+3, r1	; 0x03
    6354:	2c c0       	rjmp	.+88     	; 0x63ae <OSTmr_Alloc+0x76>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    6356:	80 91 ed 04 	lds	r24, 0x04ED
    635a:	90 91 ee 04 	lds	r25, 0x04EE
    635e:	9a 83       	std	Y+2, r25	; 0x02
    6360:	89 83       	std	Y+1, r24	; 0x01
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    6362:	e9 81       	ldd	r30, Y+1	; 0x01
    6364:	fa 81       	ldd	r31, Y+2	; 0x02
    6366:	85 81       	ldd	r24, Z+5	; 0x05
    6368:	96 81       	ldd	r25, Z+6	; 0x06
    636a:	90 93 ee 04 	sts	0x04EE, r25
    636e:	80 93 ed 04 	sts	0x04ED, r24
    ptmr->OSTmrNext = (OS_TCB *)0;
    6372:	e9 81       	ldd	r30, Y+1	; 0x01
    6374:	fa 81       	ldd	r31, Y+2	; 0x02
    6376:	16 82       	std	Z+6, r1	; 0x06
    6378:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev = (OS_TCB *)0;
    637a:	e9 81       	ldd	r30, Y+1	; 0x01
    637c:	fa 81       	ldd	r31, Y+2	; 0x02
    637e:	10 86       	std	Z+8, r1	; 0x08
    6380:	17 82       	std	Z+7, r1	; 0x07
    OSTmrUsed++;
    6382:	80 91 17 05 	lds	r24, 0x0517
    6386:	90 91 18 05 	lds	r25, 0x0518
    638a:	01 96       	adiw	r24, 0x01	; 1
    638c:	90 93 18 05 	sts	0x0518, r25
    6390:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree--;
    6394:	80 91 91 07 	lds	r24, 0x0791
    6398:	90 91 92 07 	lds	r25, 0x0792
    639c:	01 97       	sbiw	r24, 0x01	; 1
    639e:	90 93 92 07 	sts	0x0792, r25
    63a2:	80 93 91 07 	sts	0x0791, r24
    return (ptmr);
    63a6:	89 81       	ldd	r24, Y+1	; 0x01
    63a8:	9a 81       	ldd	r25, Y+2	; 0x02
    63aa:	9c 83       	std	Y+4, r25	; 0x04
    63ac:	8b 83       	std	Y+3, r24	; 0x03
    63ae:	8b 81       	ldd	r24, Y+3	; 0x03
    63b0:	9c 81       	ldd	r25, Y+4	; 0x04
}
    63b2:	0f 90       	pop	r0
    63b4:	0f 90       	pop	r0
    63b6:	0f 90       	pop	r0
    63b8:	0f 90       	pop	r0
    63ba:	cf 91       	pop	r28
    63bc:	df 91       	pop	r29
    63be:	08 95       	ret

000063c0 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    63c0:	df 93       	push	r29
    63c2:	cf 93       	push	r28
    63c4:	0f 92       	push	r0
    63c6:	0f 92       	push	r0
    63c8:	cd b7       	in	r28, 0x3d	; 61
    63ca:	de b7       	in	r29, 0x3e	; 62
    63cc:	9a 83       	std	Y+2, r25	; 0x02
    63ce:	89 83       	std	Y+1, r24	; 0x01
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
    63d0:	e9 81       	ldd	r30, Y+1	; 0x01
    63d2:	fa 81       	ldd	r31, Y+2	; 0x02
    63d4:	16 a2       	std	Z+38, r1	; 0x26
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
    63d6:	e9 81       	ldd	r30, Y+1	; 0x01
    63d8:	fa 81       	ldd	r31, Y+2	; 0x02
    63da:	15 a2       	std	Z+37, r1	; 0x25
    ptmr->OSTmrPeriod      = 0;
    63dc:	e9 81       	ldd	r30, Y+1	; 0x01
    63de:	fa 81       	ldd	r31, Y+2	; 0x02
    63e0:	11 8a       	std	Z+17, r1	; 0x11
    63e2:	12 8a       	std	Z+18, r1	; 0x12
    63e4:	13 8a       	std	Z+19, r1	; 0x13
    63e6:	14 8a       	std	Z+20, r1	; 0x14
    ptmr->OSTmrMatch       = 0;
    63e8:	e9 81       	ldd	r30, Y+1	; 0x01
    63ea:	fa 81       	ldd	r31, Y+2	; 0x02
    63ec:	11 86       	std	Z+9, r1	; 0x09
    63ee:	12 86       	std	Z+10, r1	; 0x0a
    63f0:	13 86       	std	Z+11, r1	; 0x0b
    63f2:	14 86       	std	Z+12, r1	; 0x0c
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    63f4:	e9 81       	ldd	r30, Y+1	; 0x01
    63f6:	fa 81       	ldd	r31, Y+2	; 0x02
    63f8:	12 82       	std	Z+2, r1	; 0x02
    63fa:	11 82       	std	Z+1, r1	; 0x01
    ptmr->OSTmrCallbackArg = (void *)0;
    63fc:	e9 81       	ldd	r30, Y+1	; 0x01
    63fe:	fa 81       	ldd	r31, Y+2	; 0x02
    6400:	14 82       	std	Z+4, r1	; 0x04
    6402:	13 82       	std	Z+3, r1	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    6404:	e9 81       	ldd	r30, Y+1	; 0x01
    6406:	fa 81       	ldd	r31, Y+2	; 0x02
    6408:	8f e3       	ldi	r24, 0x3F	; 63
    640a:	85 8b       	std	Z+21, r24	; 0x15
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
    640c:	e9 81       	ldd	r30, Y+1	; 0x01
    640e:	fa 81       	ldd	r31, Y+2	; 0x02
    6410:	16 8a       	std	Z+22, r1	; 0x16
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    6412:	e9 81       	ldd	r30, Y+1	; 0x01
    6414:	fa 81       	ldd	r31, Y+2	; 0x02
    6416:	10 86       	std	Z+8, r1	; 0x08
    6418:	17 82       	std	Z+7, r1	; 0x07
    ptmr->OSTmrNext        = OSTmrFreeList;
    641a:	80 91 ed 04 	lds	r24, 0x04ED
    641e:	90 91 ee 04 	lds	r25, 0x04EE
    6422:	e9 81       	ldd	r30, Y+1	; 0x01
    6424:	fa 81       	ldd	r31, Y+2	; 0x02
    6426:	96 83       	std	Z+6, r25	; 0x06
    6428:	85 83       	std	Z+5, r24	; 0x05
    OSTmrFreeList          = ptmr;
    642a:	89 81       	ldd	r24, Y+1	; 0x01
    642c:	9a 81       	ldd	r25, Y+2	; 0x02
    642e:	90 93 ee 04 	sts	0x04EE, r25
    6432:	80 93 ed 04 	sts	0x04ED, r24

    OSTmrUsed--;                                       /* Update timer object statistics                              */
    6436:	80 91 17 05 	lds	r24, 0x0517
    643a:	90 91 18 05 	lds	r25, 0x0518
    643e:	01 97       	sbiw	r24, 0x01	; 1
    6440:	90 93 18 05 	sts	0x0518, r25
    6444:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree++;
    6448:	80 91 91 07 	lds	r24, 0x0791
    644c:	90 91 92 07 	lds	r25, 0x0792
    6450:	01 96       	adiw	r24, 0x01	; 1
    6452:	90 93 92 07 	sts	0x0792, r25
    6456:	80 93 91 07 	sts	0x0791, r24
}
    645a:	0f 90       	pop	r0
    645c:	0f 90       	pop	r0
    645e:	cf 91       	pop	r28
    6460:	df 91       	pop	r29
    6462:	08 95       	ret
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
    6464:	df 93       	push	r29
    6466:	cf 93       	push	r28
    6468:	cd b7       	in	r28, 0x3d	; 61
    646a:	de b7       	in	r29, 0x3e	; 62
    646c:	27 97       	sbiw	r28, 0x07	; 7
    646e:	0f b6       	in	r0, 0x3f	; 63
    6470:	f8 94       	cli
    6472:	de bf       	out	0x3e, r29	; 62
    6474:	0f be       	out	0x3f, r0	; 63
    6476:	cd bf       	out	0x3d, r28	; 61
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    6478:	8a e1       	ldi	r24, 0x1A	; 26
    647a:	95 e0       	ldi	r25, 0x05	; 5
    647c:	60 e7       	ldi	r22, 0x70	; 112
    647e:	72 e0       	ldi	r23, 0x02	; 2
    6480:	0e 94 50 22 	call	0x44a0	; 0x44a0 <OS_InitTCBList+0xae>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
    6484:	8f ee       	ldi	r24, 0xEF	; 239
    6486:	94 e0       	ldi	r25, 0x04	; 4
    6488:	60 e2       	ldi	r22, 0x20	; 32
    648a:	70 e0       	ldi	r23, 0x00	; 0
    648c:	0e 94 50 22 	call	0x44a0	; 0x44a0 <OS_InitTCBList+0xae>

    ptmr1 = &OSTmrTbl[0];
    6490:	8a e1       	ldi	r24, 0x1A	; 26
    6492:	95 e0       	ldi	r25, 0x05	; 5
    6494:	9c 83       	std	Y+4, r25	; 0x04
    6496:	8b 83       	std	Y+3, r24	; 0x03
    ptmr2 = &OSTmrTbl[1];
    6498:	81 e4       	ldi	r24, 0x41	; 65
    649a:	95 e0       	ldi	r25, 0x05	; 5
    649c:	9a 83       	std	Y+2, r25	; 0x02
    649e:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    64a0:	1e 82       	std	Y+6, r1	; 0x06
    64a2:	1d 82       	std	Y+5, r1	; 0x05
    64a4:	23 c0       	rjmp	.+70     	; 0x64ec <OSTmr_Free+0x12c>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
    64a6:	eb 81       	ldd	r30, Y+3	; 0x03
    64a8:	fc 81       	ldd	r31, Y+4	; 0x04
    64aa:	84 e6       	ldi	r24, 0x64	; 100
    64ac:	80 83       	st	Z, r24
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
    64ae:	eb 81       	ldd	r30, Y+3	; 0x03
    64b0:	fc 81       	ldd	r31, Y+4	; 0x04
    64b2:	16 a2       	std	Z+38, r1	; 0x26
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
    64b4:	eb 81       	ldd	r30, Y+3	; 0x03
    64b6:	fc 81       	ldd	r31, Y+4	; 0x04
    64b8:	89 81       	ldd	r24, Y+1	; 0x01
    64ba:	9a 81       	ldd	r25, Y+2	; 0x02
    64bc:	96 83       	std	Z+6, r25	; 0x06
    64be:	85 83       	std	Z+5, r24	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
    64c0:	eb 81       	ldd	r30, Y+3	; 0x03
    64c2:	fc 81       	ldd	r31, Y+4	; 0x04
    64c4:	8f e3       	ldi	r24, 0x3F	; 63
    64c6:	85 8b       	std	Z+21, r24	; 0x15
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    64c8:	eb 81       	ldd	r30, Y+3	; 0x03
    64ca:	fc 81       	ldd	r31, Y+4	; 0x04
    64cc:	16 8a       	std	Z+22, r1	; 0x16
#endif
        ptmr1++;
    64ce:	8b 81       	ldd	r24, Y+3	; 0x03
    64d0:	9c 81       	ldd	r25, Y+4	; 0x04
    64d2:	87 96       	adiw	r24, 0x27	; 39
    64d4:	9c 83       	std	Y+4, r25	; 0x04
    64d6:	8b 83       	std	Y+3, r24	; 0x03
        ptmr2++;
    64d8:	89 81       	ldd	r24, Y+1	; 0x01
    64da:	9a 81       	ldd	r25, Y+2	; 0x02
    64dc:	87 96       	adiw	r24, 0x27	; 39
    64de:	9a 83       	std	Y+2, r25	; 0x02
    64e0:	89 83       	std	Y+1, r24	; 0x01
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    64e2:	8d 81       	ldd	r24, Y+5	; 0x05
    64e4:	9e 81       	ldd	r25, Y+6	; 0x06
    64e6:	01 96       	adiw	r24, 0x01	; 1
    64e8:	9e 83       	std	Y+6, r25	; 0x06
    64ea:	8d 83       	std	Y+5, r24	; 0x05
    64ec:	8d 81       	ldd	r24, Y+5	; 0x05
    64ee:	9e 81       	ldd	r25, Y+6	; 0x06
    64f0:	8f 30       	cpi	r24, 0x0F	; 15
    64f2:	91 05       	cpc	r25, r1
    64f4:	c0 f2       	brcs	.-80     	; 0x64a6 <OSTmr_Free+0xe6>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    64f6:	eb 81       	ldd	r30, Y+3	; 0x03
    64f8:	fc 81       	ldd	r31, Y+4	; 0x04
    64fa:	84 e6       	ldi	r24, 0x64	; 100
    64fc:	80 83       	st	Z, r24
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    64fe:	eb 81       	ldd	r30, Y+3	; 0x03
    6500:	fc 81       	ldd	r31, Y+4	; 0x04
    6502:	16 a2       	std	Z+38, r1	; 0x26
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
    6504:	eb 81       	ldd	r30, Y+3	; 0x03
    6506:	fc 81       	ldd	r31, Y+4	; 0x04
    6508:	16 82       	std	Z+6, r1	; 0x06
    650a:	15 82       	std	Z+5, r1	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
    650c:	eb 81       	ldd	r30, Y+3	; 0x03
    650e:	fc 81       	ldd	r31, Y+4	; 0x04
    6510:	8f e3       	ldi	r24, 0x3F	; 63
    6512:	85 8b       	std	Z+21, r24	; 0x15
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    6514:	eb 81       	ldd	r30, Y+3	; 0x03
    6516:	fc 81       	ldd	r31, Y+4	; 0x04
    6518:	16 8a       	std	Z+22, r1	; 0x16
#endif
    OSTmrTime           = 0;
    651a:	10 92 4f 08 	sts	0x084F, r1
    651e:	10 92 50 08 	sts	0x0850, r1
    6522:	10 92 51 08 	sts	0x0851, r1
    6526:	10 92 52 08 	sts	0x0852, r1
    OSTmrUsed           = 0;
    652a:	10 92 18 05 	sts	0x0518, r1
    652e:	10 92 17 05 	sts	0x0517, r1
    OSTmrFree           = OS_TMR_CFG_MAX;
    6532:	80 e1       	ldi	r24, 0x10	; 16
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	90 93 92 07 	sts	0x0792, r25
    653a:	80 93 91 07 	sts	0x0791, r24
    OSTmrFreeList       = &OSTmrTbl[0];
    653e:	8a e1       	ldi	r24, 0x1A	; 26
    6540:	95 e0       	ldi	r25, 0x05	; 5
    6542:	90 93 ee 04 	sts	0x04EE, r25
    6546:	80 93 ed 04 	sts	0x04ED, r24
    OSTmrSem            = OSSemCreate(1);
    654a:	81 e0       	ldi	r24, 0x01	; 1
    654c:	90 e0       	ldi	r25, 0x00	; 0
    654e:	0e 94 04 25 	call	0x4a08	; 0x4a08 <OS_SchedNew+0x41c>
    6552:	90 93 58 08 	sts	0x0858, r25
    6556:	80 93 57 08 	sts	0x0857, r24
    OSTmrSemSignal      = OSSemCreate(0);
    655a:	80 e0       	ldi	r24, 0x00	; 0
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	0e 94 04 25 	call	0x4a08	; 0x4a08 <OS_SchedNew+0x41c>
    6562:	90 93 11 05 	sts	0x0511, r25
    6566:	80 93 10 05 	sts	0x0510, r24

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
    656a:	80 91 57 08 	lds	r24, 0x0857
    656e:	90 91 58 08 	lds	r25, 0x0858
    6572:	2e ea       	ldi	r18, 0xAE	; 174
    6574:	34 e0       	ldi	r19, 0x04	; 4
    6576:	ae 01       	movw	r20, r28
    6578:	49 5f       	subi	r20, 0xF9	; 249
    657a:	5f 4f       	sbci	r21, 0xFF	; 255
    657c:	b9 01       	movw	r22, r18
    657e:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <OSTmr_Task+0x1c0>

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
    6582:	80 91 10 05 	lds	r24, 0x0510
    6586:	90 91 11 05 	lds	r25, 0x0511
    658a:	29 eb       	ldi	r18, 0xB9	; 185
    658c:	34 e0       	ldi	r19, 0x04	; 4
    658e:	ae 01       	movw	r20, r28
    6590:	49 5f       	subi	r20, 0xF9	; 249
    6592:	5f 4f       	sbci	r21, 0xFF	; 255
    6594:	b9 01       	movw	r22, r18
    6596:	0e 94 8f 1d 	call	0x3b1e	; 0x3b1e <OSTmr_Task+0x1c0>
#endif
#endif

    OSTmr_InitTask();
    659a:	0e 94 d8 32 	call	0x65b0	; 0x65b0 <OSTmr_InitTask>
}
    659e:	27 96       	adiw	r28, 0x07	; 7
    65a0:	0f b6       	in	r0, 0x3f	; 63
    65a2:	f8 94       	cli
    65a4:	de bf       	out	0x3e, r29	; 62
    65a6:	0f be       	out	0x3f, r0	; 63
    65a8:	cd bf       	out	0x3d, r28	; 61
    65aa:	cf 91       	pop	r28
    65ac:	df 91       	pop	r29
    65ae:	08 95       	ret

000065b0 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
    65b0:	8f 92       	push	r8
    65b2:	9f 92       	push	r9
    65b4:	af 92       	push	r10
    65b6:	bf 92       	push	r11
    65b8:	cf 92       	push	r12
    65ba:	df 92       	push	r13
    65bc:	ef 92       	push	r14
    65be:	ff 92       	push	r15
    65c0:	0f 93       	push	r16
    65c2:	1f 93       	push	r17
    65c4:	df 93       	push	r29
    65c6:	cf 93       	push	r28
    65c8:	0f 92       	push	r0
    65ca:	cd b7       	in	r28, 0x3d	; 61
    65cc:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
    65ce:	0f 92       	push	r0
    65d0:	0f 92       	push	r0
    65d2:	ed b7       	in	r30, 0x3d	; 61
    65d4:	fe b7       	in	r31, 0x3e	; 62
    65d6:	31 96       	adiw	r30, 0x01	; 1
    65d8:	20 e8       	ldi	r18, 0x80	; 128
    65da:	34 e3       	ldi	r19, 0x34	; 52
    65dc:	49 e4       	ldi	r20, 0x49	; 73
    65de:	58 e0       	ldi	r21, 0x08	; 8
    65e0:	ab e9       	ldi	r26, 0x9B	; 155
    65e2:	b7 e0       	ldi	r27, 0x07	; 7
    65e4:	83 e0       	ldi	r24, 0x03	; 3
    65e6:	90 e0       	ldi	r25, 0x00	; 0
    65e8:	91 83       	std	Z+1, r25	; 0x01
    65ea:	80 83       	st	Z, r24
    65ec:	c9 01       	movw	r24, r18
    65ee:	60 e0       	ldi	r22, 0x00	; 0
    65f0:	70 e0       	ldi	r23, 0x00	; 0
    65f2:	24 e0       	ldi	r18, 0x04	; 4
    65f4:	0d ef       	ldi	r16, 0xFD	; 253
    65f6:	1f ef       	ldi	r17, 0xFF	; 255
    65f8:	7d 01       	movw	r14, r26
    65fa:	0f 2e       	mov	r0, r31
    65fc:	ff ea       	ldi	r31, 0xAF	; 175
    65fe:	af 2e       	mov	r10, r31
    6600:	f0 e0       	ldi	r31, 0x00	; 0
    6602:	bf 2e       	mov	r11, r31
    6604:	f0 e0       	ldi	r31, 0x00	; 0
    6606:	cf 2e       	mov	r12, r31
    6608:	f0 e0       	ldi	r31, 0x00	; 0
    660a:	df 2e       	mov	r13, r31
    660c:	f0 2d       	mov	r31, r0
    660e:	88 24       	eor	r8, r8
    6610:	99 24       	eor	r9, r9
    6612:	0e 94 c2 28 	call	0x5184	; 0x5184 <OS_SchedNew+0xb98>
    6616:	0f 90       	pop	r0
    6618:	0f 90       	pop	r0
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
    661a:	23 ec       	ldi	r18, 0xC3	; 195
    661c:	34 e0       	ldi	r19, 0x04	; 4
    661e:	84 e0       	ldi	r24, 0x04	; 4
    6620:	b9 01       	movw	r22, r18
    6622:	9e 01       	movw	r18, r28
    6624:	2f 5f       	subi	r18, 0xFF	; 255
    6626:	3f 4f       	sbci	r19, 0xFF	; 255
    6628:	a9 01       	movw	r20, r18
    662a:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <OS_SchedNew+0xdbc>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
    662e:	0f 90       	pop	r0
    6630:	cf 91       	pop	r28
    6632:	df 91       	pop	r29
    6634:	1f 91       	pop	r17
    6636:	0f 91       	pop	r16
    6638:	ff 90       	pop	r15
    663a:	ef 90       	pop	r14
    663c:	df 90       	pop	r13
    663e:	cf 90       	pop	r12
    6640:	bf 90       	pop	r11
    6642:	af 90       	pop	r10
    6644:	9f 90       	pop	r9
    6646:	8f 90       	pop	r8
    6648:	08 95       	ret

0000664a <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
    664a:	df 93       	push	r29
    664c:	cf 93       	push	r28
    664e:	cd b7       	in	r28, 0x3d	; 61
    6650:	de b7       	in	r29, 0x3e	; 62
    6652:	29 97       	sbiw	r28, 0x09	; 9
    6654:	0f b6       	in	r0, 0x3f	; 63
    6656:	f8 94       	cli
    6658:	de bf       	out	0x3e, r29	; 62
    665a:	0f be       	out	0x3f, r0	; 63
    665c:	cd bf       	out	0x3d, r28	; 61
    665e:	98 87       	std	Y+8, r25	; 0x08
    6660:	8f 83       	std	Y+7, r24	; 0x07
    6662:	69 87       	std	Y+9, r22	; 0x09
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
    6664:	ef 81       	ldd	r30, Y+7	; 0x07
    6666:	f8 85       	ldd	r31, Y+8	; 0x08
    6668:	83 e0       	ldi	r24, 0x03	; 3
    666a:	86 a3       	std	Z+38, r24	; 0x26
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
    666c:	89 85       	ldd	r24, Y+9	; 0x09
    666e:	81 30       	cpi	r24, 0x01	; 1
    6670:	c9 f4       	brne	.+50     	; 0x66a4 <OSTmr_Link+0x5a>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    6672:	ef 81       	ldd	r30, Y+7	; 0x07
    6674:	f8 85       	ldd	r31, Y+8	; 0x08
    6676:	21 89       	ldd	r18, Z+17	; 0x11
    6678:	32 89       	ldd	r19, Z+18	; 0x12
    667a:	43 89       	ldd	r20, Z+19	; 0x13
    667c:	54 89       	ldd	r21, Z+20	; 0x14
    667e:	80 91 4f 08 	lds	r24, 0x084F
    6682:	90 91 50 08 	lds	r25, 0x0850
    6686:	a0 91 51 08 	lds	r26, 0x0851
    668a:	b0 91 52 08 	lds	r27, 0x0852
    668e:	82 0f       	add	r24, r18
    6690:	93 1f       	adc	r25, r19
    6692:	a4 1f       	adc	r26, r20
    6694:	b5 1f       	adc	r27, r21
    6696:	ef 81       	ldd	r30, Y+7	; 0x07
    6698:	f8 85       	ldd	r31, Y+8	; 0x08
    669a:	81 87       	std	Z+9, r24	; 0x09
    669c:	92 87       	std	Z+10, r25	; 0x0a
    669e:	a3 87       	std	Z+11, r26	; 0x0b
    66a0:	b4 87       	std	Z+12, r27	; 0x0c
    66a2:	3b c0       	rjmp	.+118    	; 0x671a <OSTmr_Link+0xd0>
    } else {
        if (ptmr->OSTmrDly == 0) {
    66a4:	ef 81       	ldd	r30, Y+7	; 0x07
    66a6:	f8 85       	ldd	r31, Y+8	; 0x08
    66a8:	85 85       	ldd	r24, Z+13	; 0x0d
    66aa:	96 85       	ldd	r25, Z+14	; 0x0e
    66ac:	a7 85       	ldd	r26, Z+15	; 0x0f
    66ae:	b0 89       	ldd	r27, Z+16	; 0x10
    66b0:	00 97       	sbiw	r24, 0x00	; 0
    66b2:	a1 05       	cpc	r26, r1
    66b4:	b1 05       	cpc	r27, r1
    66b6:	c9 f4       	brne	.+50     	; 0x66ea <OSTmr_Link+0xa0>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    66b8:	ef 81       	ldd	r30, Y+7	; 0x07
    66ba:	f8 85       	ldd	r31, Y+8	; 0x08
    66bc:	21 89       	ldd	r18, Z+17	; 0x11
    66be:	32 89       	ldd	r19, Z+18	; 0x12
    66c0:	43 89       	ldd	r20, Z+19	; 0x13
    66c2:	54 89       	ldd	r21, Z+20	; 0x14
    66c4:	80 91 4f 08 	lds	r24, 0x084F
    66c8:	90 91 50 08 	lds	r25, 0x0850
    66cc:	a0 91 51 08 	lds	r26, 0x0851
    66d0:	b0 91 52 08 	lds	r27, 0x0852
    66d4:	82 0f       	add	r24, r18
    66d6:	93 1f       	adc	r25, r19
    66d8:	a4 1f       	adc	r26, r20
    66da:	b5 1f       	adc	r27, r21
    66dc:	ef 81       	ldd	r30, Y+7	; 0x07
    66de:	f8 85       	ldd	r31, Y+8	; 0x08
    66e0:	81 87       	std	Z+9, r24	; 0x09
    66e2:	92 87       	std	Z+10, r25	; 0x0a
    66e4:	a3 87       	std	Z+11, r26	; 0x0b
    66e6:	b4 87       	std	Z+12, r27	; 0x0c
    66e8:	18 c0       	rjmp	.+48     	; 0x671a <OSTmr_Link+0xd0>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
    66ea:	ef 81       	ldd	r30, Y+7	; 0x07
    66ec:	f8 85       	ldd	r31, Y+8	; 0x08
    66ee:	25 85       	ldd	r18, Z+13	; 0x0d
    66f0:	36 85       	ldd	r19, Z+14	; 0x0e
    66f2:	47 85       	ldd	r20, Z+15	; 0x0f
    66f4:	50 89       	ldd	r21, Z+16	; 0x10
    66f6:	80 91 4f 08 	lds	r24, 0x084F
    66fa:	90 91 50 08 	lds	r25, 0x0850
    66fe:	a0 91 51 08 	lds	r26, 0x0851
    6702:	b0 91 52 08 	lds	r27, 0x0852
    6706:	82 0f       	add	r24, r18
    6708:	93 1f       	adc	r25, r19
    670a:	a4 1f       	adc	r26, r20
    670c:	b5 1f       	adc	r27, r21
    670e:	ef 81       	ldd	r30, Y+7	; 0x07
    6710:	f8 85       	ldd	r31, Y+8	; 0x08
    6712:	81 87       	std	Z+9, r24	; 0x09
    6714:	92 87       	std	Z+10, r25	; 0x0a
    6716:	a3 87       	std	Z+11, r26	; 0x0b
    6718:	b4 87       	std	Z+12, r27	; 0x0c
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    671a:	ef 81       	ldd	r30, Y+7	; 0x07
    671c:	f8 85       	ldd	r31, Y+8	; 0x08
    671e:	81 85       	ldd	r24, Z+9	; 0x09
    6720:	92 85       	ldd	r25, Z+10	; 0x0a
    6722:	a3 85       	ldd	r26, Z+11	; 0x0b
    6724:	b4 85       	ldd	r27, Z+12	; 0x0c
    6726:	87 70       	andi	r24, 0x07	; 7
    6728:	90 70       	andi	r25, 0x00	; 0
    672a:	9a 83       	std	Y+2, r25	; 0x02
    672c:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    672e:	89 81       	ldd	r24, Y+1	; 0x01
    6730:	9a 81       	ldd	r25, Y+2	; 0x02
    6732:	88 0f       	add	r24, r24
    6734:	99 1f       	adc	r25, r25
    6736:	88 0f       	add	r24, r24
    6738:	99 1f       	adc	r25, r25
    673a:	81 51       	subi	r24, 0x11	; 17
    673c:	9b 4f       	sbci	r25, 0xFB	; 251
    673e:	9c 83       	std	Y+4, r25	; 0x04
    6740:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
    6742:	eb 81       	ldd	r30, Y+3	; 0x03
    6744:	fc 81       	ldd	r31, Y+4	; 0x04
    6746:	80 81       	ld	r24, Z
    6748:	91 81       	ldd	r25, Z+1	; 0x01
    674a:	00 97       	sbiw	r24, 0x00	; 0
    674c:	89 f4       	brne	.+34     	; 0x6770 <OSTmr_Link+0x126>
        pspoke->OSTmrFirst   = ptmr;
    674e:	eb 81       	ldd	r30, Y+3	; 0x03
    6750:	fc 81       	ldd	r31, Y+4	; 0x04
    6752:	8f 81       	ldd	r24, Y+7	; 0x07
    6754:	98 85       	ldd	r25, Y+8	; 0x08
    6756:	91 83       	std	Z+1, r25	; 0x01
    6758:	80 83       	st	Z, r24
        ptmr->OSTmrNext      = (OS_TMR *)0;
    675a:	ef 81       	ldd	r30, Y+7	; 0x07
    675c:	f8 85       	ldd	r31, Y+8	; 0x08
    675e:	16 82       	std	Z+6, r1	; 0x06
    6760:	15 82       	std	Z+5, r1	; 0x05
        pspoke->OSTmrEntries = 1;
    6762:	eb 81       	ldd	r30, Y+3	; 0x03
    6764:	fc 81       	ldd	r31, Y+4	; 0x04
    6766:	81 e0       	ldi	r24, 0x01	; 1
    6768:	90 e0       	ldi	r25, 0x00	; 0
    676a:	93 83       	std	Z+3, r25	; 0x03
    676c:	82 83       	std	Z+2, r24	; 0x02
    676e:	21 c0       	rjmp	.+66     	; 0x67b2 <OSTmr_Link+0x168>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
    6770:	eb 81       	ldd	r30, Y+3	; 0x03
    6772:	fc 81       	ldd	r31, Y+4	; 0x04
    6774:	80 81       	ld	r24, Z
    6776:	91 81       	ldd	r25, Z+1	; 0x01
    6778:	9e 83       	std	Y+6, r25	; 0x06
    677a:	8d 83       	std	Y+5, r24	; 0x05
        pspoke->OSTmrFirst   = ptmr;
    677c:	eb 81       	ldd	r30, Y+3	; 0x03
    677e:	fc 81       	ldd	r31, Y+4	; 0x04
    6780:	8f 81       	ldd	r24, Y+7	; 0x07
    6782:	98 85       	ldd	r25, Y+8	; 0x08
    6784:	91 83       	std	Z+1, r25	; 0x01
    6786:	80 83       	st	Z, r24
        ptmr->OSTmrNext      = (void *)ptmr1;
    6788:	ef 81       	ldd	r30, Y+7	; 0x07
    678a:	f8 85       	ldd	r31, Y+8	; 0x08
    678c:	8d 81       	ldd	r24, Y+5	; 0x05
    678e:	9e 81       	ldd	r25, Y+6	; 0x06
    6790:	96 83       	std	Z+6, r25	; 0x06
    6792:	85 83       	std	Z+5, r24	; 0x05
        ptmr1->OSTmrPrev     = (void *)ptmr;
    6794:	ed 81       	ldd	r30, Y+5	; 0x05
    6796:	fe 81       	ldd	r31, Y+6	; 0x06
    6798:	8f 81       	ldd	r24, Y+7	; 0x07
    679a:	98 85       	ldd	r25, Y+8	; 0x08
    679c:	90 87       	std	Z+8, r25	; 0x08
    679e:	87 83       	std	Z+7, r24	; 0x07
        pspoke->OSTmrEntries++;
    67a0:	eb 81       	ldd	r30, Y+3	; 0x03
    67a2:	fc 81       	ldd	r31, Y+4	; 0x04
    67a4:	82 81       	ldd	r24, Z+2	; 0x02
    67a6:	93 81       	ldd	r25, Z+3	; 0x03
    67a8:	01 96       	adiw	r24, 0x01	; 1
    67aa:	eb 81       	ldd	r30, Y+3	; 0x03
    67ac:	fc 81       	ldd	r31, Y+4	; 0x04
    67ae:	93 83       	std	Z+3, r25	; 0x03
    67b0:	82 83       	std	Z+2, r24	; 0x02
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
    67b2:	ef 81       	ldd	r30, Y+7	; 0x07
    67b4:	f8 85       	ldd	r31, Y+8	; 0x08
    67b6:	10 86       	std	Z+8, r1	; 0x08
    67b8:	17 82       	std	Z+7, r1	; 0x07
}
    67ba:	29 96       	adiw	r28, 0x09	; 9
    67bc:	0f b6       	in	r0, 0x3f	; 63
    67be:	f8 94       	cli
    67c0:	de bf       	out	0x3e, r29	; 62
    67c2:	0f be       	out	0x3f, r0	; 63
    67c4:	cd bf       	out	0x3d, r28	; 61
    67c6:	cf 91       	pop	r28
    67c8:	df 91       	pop	r29
    67ca:	08 95       	ret

000067cc <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
    67cc:	df 93       	push	r29
    67ce:	cf 93       	push	r28
    67d0:	cd b7       	in	r28, 0x3d	; 61
    67d2:	de b7       	in	r29, 0x3e	; 62
    67d4:	2a 97       	sbiw	r28, 0x0a	; 10
    67d6:	0f b6       	in	r0, 0x3f	; 63
    67d8:	f8 94       	cli
    67da:	de bf       	out	0x3e, r29	; 62
    67dc:	0f be       	out	0x3f, r0	; 63
    67de:	cd bf       	out	0x3d, r28	; 61
    67e0:	9a 87       	std	Y+10, r25	; 0x0a
    67e2:	89 87       	std	Y+9, r24	; 0x09
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    67e4:	e9 85       	ldd	r30, Y+9	; 0x09
    67e6:	fa 85       	ldd	r31, Y+10	; 0x0a
    67e8:	81 85       	ldd	r24, Z+9	; 0x09
    67ea:	92 85       	ldd	r25, Z+10	; 0x0a
    67ec:	a3 85       	ldd	r26, Z+11	; 0x0b
    67ee:	b4 85       	ldd	r27, Z+12	; 0x0c
    67f0:	87 70       	andi	r24, 0x07	; 7
    67f2:	90 70       	andi	r25, 0x00	; 0
    67f4:	9a 83       	std	Y+2, r25	; 0x02
    67f6:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    67f8:	89 81       	ldd	r24, Y+1	; 0x01
    67fa:	9a 81       	ldd	r25, Y+2	; 0x02
    67fc:	88 0f       	add	r24, r24
    67fe:	99 1f       	adc	r25, r25
    6800:	88 0f       	add	r24, r24
    6802:	99 1f       	adc	r25, r25
    6804:	81 51       	subi	r24, 0x11	; 17
    6806:	9b 4f       	sbci	r25, 0xFB	; 251
    6808:	9c 83       	std	Y+4, r25	; 0x04
    680a:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
    680c:	eb 81       	ldd	r30, Y+3	; 0x03
    680e:	fc 81       	ldd	r31, Y+4	; 0x04
    6810:	20 81       	ld	r18, Z
    6812:	31 81       	ldd	r19, Z+1	; 0x01
    6814:	89 85       	ldd	r24, Y+9	; 0x09
    6816:	9a 85       	ldd	r25, Y+10	; 0x0a
    6818:	28 17       	cp	r18, r24
    681a:	39 07       	cpc	r19, r25
    681c:	a9 f4       	brne	.+42     	; 0x6848 <OSTmr_Unlink+0x7c>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
    681e:	e9 85       	ldd	r30, Y+9	; 0x09
    6820:	fa 85       	ldd	r31, Y+10	; 0x0a
    6822:	85 81       	ldd	r24, Z+5	; 0x05
    6824:	96 81       	ldd	r25, Z+6	; 0x06
    6826:	98 87       	std	Y+8, r25	; 0x08
    6828:	8f 83       	std	Y+7, r24	; 0x07
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
    682a:	eb 81       	ldd	r30, Y+3	; 0x03
    682c:	fc 81       	ldd	r31, Y+4	; 0x04
    682e:	8f 81       	ldd	r24, Y+7	; 0x07
    6830:	98 85       	ldd	r25, Y+8	; 0x08
    6832:	91 83       	std	Z+1, r25	; 0x01
    6834:	80 83       	st	Z, r24
        if (ptmr1 != (OS_TMR *)0) {
    6836:	8f 81       	ldd	r24, Y+7	; 0x07
    6838:	98 85       	ldd	r25, Y+8	; 0x08
    683a:	00 97       	sbiw	r24, 0x00	; 0
    683c:	09 f1       	breq	.+66     	; 0x6880 <OSTmr_Unlink+0xb4>
            ptmr1->OSTmrPrev = (void *)0;
    683e:	ef 81       	ldd	r30, Y+7	; 0x07
    6840:	f8 85       	ldd	r31, Y+8	; 0x08
    6842:	10 86       	std	Z+8, r1	; 0x08
    6844:	17 82       	std	Z+7, r1	; 0x07
    6846:	1c c0       	rjmp	.+56     	; 0x6880 <OSTmr_Unlink+0xb4>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
    6848:	e9 85       	ldd	r30, Y+9	; 0x09
    684a:	fa 85       	ldd	r31, Y+10	; 0x0a
    684c:	87 81       	ldd	r24, Z+7	; 0x07
    684e:	90 85       	ldd	r25, Z+8	; 0x08
    6850:	98 87       	std	Y+8, r25	; 0x08
    6852:	8f 83       	std	Y+7, r24	; 0x07
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
    6854:	e9 85       	ldd	r30, Y+9	; 0x09
    6856:	fa 85       	ldd	r31, Y+10	; 0x0a
    6858:	85 81       	ldd	r24, Z+5	; 0x05
    685a:	96 81       	ldd	r25, Z+6	; 0x06
    685c:	9e 83       	std	Y+6, r25	; 0x06
    685e:	8d 83       	std	Y+5, r24	; 0x05
        ptmr1->OSTmrNext = ptmr2;
    6860:	ef 81       	ldd	r30, Y+7	; 0x07
    6862:	f8 85       	ldd	r31, Y+8	; 0x08
    6864:	8d 81       	ldd	r24, Y+5	; 0x05
    6866:	9e 81       	ldd	r25, Y+6	; 0x06
    6868:	96 83       	std	Z+6, r25	; 0x06
    686a:	85 83       	std	Z+5, r24	; 0x05
        if (ptmr2 != (OS_TMR *)0) {
    686c:	8d 81       	ldd	r24, Y+5	; 0x05
    686e:	9e 81       	ldd	r25, Y+6	; 0x06
    6870:	00 97       	sbiw	r24, 0x00	; 0
    6872:	31 f0       	breq	.+12     	; 0x6880 <OSTmr_Unlink+0xb4>
            ptmr2->OSTmrPrev = (void *)ptmr1;
    6874:	ed 81       	ldd	r30, Y+5	; 0x05
    6876:	fe 81       	ldd	r31, Y+6	; 0x06
    6878:	8f 81       	ldd	r24, Y+7	; 0x07
    687a:	98 85       	ldd	r25, Y+8	; 0x08
    687c:	90 87       	std	Z+8, r25	; 0x08
    687e:	87 83       	std	Z+7, r24	; 0x07
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    6880:	e9 85       	ldd	r30, Y+9	; 0x09
    6882:	fa 85       	ldd	r31, Y+10	; 0x0a
    6884:	81 e0       	ldi	r24, 0x01	; 1
    6886:	86 a3       	std	Z+38, r24	; 0x26
    ptmr->OSTmrNext  = (void *)0;
    6888:	e9 85       	ldd	r30, Y+9	; 0x09
    688a:	fa 85       	ldd	r31, Y+10	; 0x0a
    688c:	16 82       	std	Z+6, r1	; 0x06
    688e:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev  = (void *)0;
    6890:	e9 85       	ldd	r30, Y+9	; 0x09
    6892:	fa 85       	ldd	r31, Y+10	; 0x0a
    6894:	10 86       	std	Z+8, r1	; 0x08
    6896:	17 82       	std	Z+7, r1	; 0x07
    pspoke->OSTmrEntries--;
    6898:	eb 81       	ldd	r30, Y+3	; 0x03
    689a:	fc 81       	ldd	r31, Y+4	; 0x04
    689c:	82 81       	ldd	r24, Z+2	; 0x02
    689e:	93 81       	ldd	r25, Z+3	; 0x03
    68a0:	01 97       	sbiw	r24, 0x01	; 1
    68a2:	eb 81       	ldd	r30, Y+3	; 0x03
    68a4:	fc 81       	ldd	r31, Y+4	; 0x04
    68a6:	93 83       	std	Z+3, r25	; 0x03
    68a8:	82 83       	std	Z+2, r24	; 0x02
}
    68aa:	2a 96       	adiw	r28, 0x0a	; 10
    68ac:	0f b6       	in	r0, 0x3f	; 63
    68ae:	f8 94       	cli
    68b0:	de bf       	out	0x3e, r29	; 62
    68b2:	0f be       	out	0x3f, r0	; 63
    68b4:	cd bf       	out	0x3d, r28	; 61
    68b6:	cf 91       	pop	r28
    68b8:	df 91       	pop	r29
    68ba:	08 95       	ret

000068bc <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
    68bc:	df 93       	push	r29
    68be:	cf 93       	push	r28
    68c0:	0f 92       	push	r0
    68c2:	cd b7       	in	r28, 0x3d	; 61
    68c4:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
    68c6:	80 91 57 08 	lds	r24, 0x0857
    68ca:	90 91 58 08 	lds	r25, 0x0858
    68ce:	60 e0       	ldi	r22, 0x00	; 0
    68d0:	70 e0       	ldi	r23, 0x00	; 0
    68d2:	9e 01       	movw	r18, r28
    68d4:	2f 5f       	subi	r18, 0xFF	; 255
    68d6:	3f 4f       	sbci	r19, 0xFF	; 255
    68d8:	a9 01       	movw	r20, r18
    68da:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <OS_SchedNew+0x66a>
    (void)err;
}
    68de:	0f 90       	pop	r0
    68e0:	cf 91       	pop	r28
    68e2:	df 91       	pop	r29
    68e4:	08 95       	ret

000068e6 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
    68e6:	df 93       	push	r29
    68e8:	cf 93       	push	r28
    68ea:	cd b7       	in	r28, 0x3d	; 61
    68ec:	de b7       	in	r29, 0x3e	; 62
    (void)OSSemPost(OSTmrSem);
    68ee:	80 91 57 08 	lds	r24, 0x0857
    68f2:	90 91 58 08 	lds	r25, 0x0858
    68f6:	0e 94 3f 27 	call	0x4e7e	; 0x4e7e <OS_SchedNew+0x892>
}
    68fa:	cf 91       	pop	r28
    68fc:	df 91       	pop	r29
    68fe:	08 95       	ret

00006900 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
    6900:	df 93       	push	r29
    6902:	cf 93       	push	r28
    6904:	cd b7       	in	r28, 0x3d	; 61
    6906:	de b7       	in	r29, 0x3e	; 62
    6908:	2d 97       	sbiw	r28, 0x0d	; 13
    690a:	0f b6       	in	r0, 0x3f	; 63
    690c:	f8 94       	cli
    690e:	de bf       	out	0x3e, r29	; 62
    6910:	0f be       	out	0x3f, r0	; 63
    6912:	cd bf       	out	0x3d, r28	; 61
    6914:	9d 87       	std	Y+13, r25	; 0x0d
    6916:	8c 87       	std	Y+12, r24	; 0x0c
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
    6918:	80 91 10 05 	lds	r24, 0x0510
    691c:	90 91 11 05 	lds	r25, 0x0511
    6920:	9e 01       	movw	r18, r28
    6922:	25 5f       	subi	r18, 0xF5	; 245
    6924:	3f 4f       	sbci	r19, 0xFF	; 255
    6926:	60 e0       	ldi	r22, 0x00	; 0
    6928:	70 e0       	ldi	r23, 0x00	; 0
    692a:	a9 01       	movw	r20, r18
    692c:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <OS_SchedNew+0x66a>
        OSTmr_Lock();
    6930:	0e 94 5e 34 	call	0x68bc	; 0x68bc <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
    6934:	80 91 4f 08 	lds	r24, 0x084F
    6938:	90 91 50 08 	lds	r25, 0x0850
    693c:	a0 91 51 08 	lds	r26, 0x0851
    6940:	b0 91 52 08 	lds	r27, 0x0852
    6944:	01 96       	adiw	r24, 0x01	; 1
    6946:	a1 1d       	adc	r26, r1
    6948:	b1 1d       	adc	r27, r1
    694a:	80 93 4f 08 	sts	0x084F, r24
    694e:	90 93 50 08 	sts	0x0850, r25
    6952:	a0 93 51 08 	sts	0x0851, r26
    6956:	b0 93 52 08 	sts	0x0852, r27
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
    695a:	80 91 4f 08 	lds	r24, 0x084F
    695e:	90 91 50 08 	lds	r25, 0x0850
    6962:	a0 91 51 08 	lds	r26, 0x0851
    6966:	b0 91 52 08 	lds	r27, 0x0852
    696a:	87 70       	andi	r24, 0x07	; 7
    696c:	90 70       	andi	r25, 0x00	; 0
    696e:	9a 83       	std	Y+2, r25	; 0x02
    6970:	89 83       	std	Y+1, r24	; 0x01
        pspoke = &OSTmrWheelTbl[spoke];
    6972:	89 81       	ldd	r24, Y+1	; 0x01
    6974:	9a 81       	ldd	r25, Y+2	; 0x02
    6976:	88 0f       	add	r24, r24
    6978:	99 1f       	adc	r25, r25
    697a:	88 0f       	add	r24, r24
    697c:	99 1f       	adc	r25, r25
    697e:	81 51       	subi	r24, 0x11	; 17
    6980:	9b 4f       	sbci	r25, 0xFB	; 251
    6982:	9c 83       	std	Y+4, r25	; 0x04
    6984:	8b 83       	std	Y+3, r24	; 0x03
        ptmr   = pspoke->OSTmrFirst;
    6986:	eb 81       	ldd	r30, Y+3	; 0x03
    6988:	fc 81       	ldd	r31, Y+4	; 0x04
    698a:	80 81       	ld	r24, Z
    698c:	91 81       	ldd	r25, Z+1	; 0x01
    698e:	9a 87       	std	Y+10, r25	; 0x0a
    6990:	89 87       	std	Y+9, r24	; 0x09
    6992:	44 c0       	rjmp	.+136    	; 0x6a1c <OSTmr_Task+0x11c>
        while (ptmr != (OS_TMR *)0) {
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
    6994:	e9 85       	ldd	r30, Y+9	; 0x09
    6996:	fa 85       	ldd	r31, Y+10	; 0x0a
    6998:	85 81       	ldd	r24, Z+5	; 0x05
    699a:	96 81       	ldd	r25, Z+6	; 0x06
    699c:	98 87       	std	Y+8, r25	; 0x08
    699e:	8f 83       	std	Y+7, r24	; 0x07
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
    69a0:	e9 85       	ldd	r30, Y+9	; 0x09
    69a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    69a4:	21 85       	ldd	r18, Z+9	; 0x09
    69a6:	32 85       	ldd	r19, Z+10	; 0x0a
    69a8:	43 85       	ldd	r20, Z+11	; 0x0b
    69aa:	54 85       	ldd	r21, Z+12	; 0x0c
    69ac:	80 91 4f 08 	lds	r24, 0x084F
    69b0:	90 91 50 08 	lds	r25, 0x0850
    69b4:	a0 91 51 08 	lds	r26, 0x0851
    69b8:	b0 91 52 08 	lds	r27, 0x0852
    69bc:	28 17       	cp	r18, r24
    69be:	39 07       	cpc	r19, r25
    69c0:	4a 07       	cpc	r20, r26
    69c2:	5b 07       	cpc	r21, r27
    69c4:	39 f5       	brne	.+78     	; 0x6a14 <OSTmr_Task+0x114>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
    69c6:	e9 85       	ldd	r30, Y+9	; 0x09
    69c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    69ca:	81 81       	ldd	r24, Z+1	; 0x01
    69cc:	92 81       	ldd	r25, Z+2	; 0x02
    69ce:	9e 83       	std	Y+6, r25	; 0x06
    69d0:	8d 83       	std	Y+5, r24	; 0x05
                if (pfnct != (OS_TMR_CALLBACK)0) {
    69d2:	8d 81       	ldd	r24, Y+5	; 0x05
    69d4:	9e 81       	ldd	r25, Y+6	; 0x06
    69d6:	00 97       	sbiw	r24, 0x00	; 0
    69d8:	51 f0       	breq	.+20     	; 0x69ee <OSTmr_Task+0xee>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
    69da:	e9 85       	ldd	r30, Y+9	; 0x09
    69dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    69de:	23 81       	ldd	r18, Z+3	; 0x03
    69e0:	34 81       	ldd	r19, Z+4	; 0x04
    69e2:	89 85       	ldd	r24, Y+9	; 0x09
    69e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    69e6:	ed 81       	ldd	r30, Y+5	; 0x05
    69e8:	fe 81       	ldd	r31, Y+6	; 0x06
    69ea:	b9 01       	movw	r22, r18
    69ec:	19 95       	eicall
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
    69ee:	89 85       	ldd	r24, Y+9	; 0x09
    69f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    69f2:	0e 94 e6 33 	call	0x67cc	; 0x67cc <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
    69f6:	e9 85       	ldd	r30, Y+9	; 0x09
    69f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    69fa:	85 a1       	ldd	r24, Z+37	; 0x25
    69fc:	82 30       	cpi	r24, 0x02	; 2
    69fe:	31 f4       	brne	.+12     	; 0x6a0c <OSTmr_Task+0x10c>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
    6a00:	89 85       	ldd	r24, Y+9	; 0x09
    6a02:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a04:	61 e0       	ldi	r22, 0x01	; 1
    6a06:	0e 94 25 33 	call	0x664a	; 0x664a <OSTmr_Link>
    6a0a:	04 c0       	rjmp	.+8      	; 0x6a14 <OSTmr_Task+0x114>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
    6a0c:	e9 85       	ldd	r30, Y+9	; 0x09
    6a0e:	fa 85       	ldd	r31, Y+10	; 0x0a
    6a10:	82 e0       	ldi	r24, 0x02	; 2
    6a12:	86 a3       	std	Z+38, r24	; 0x26
                }
            }
            ptmr = ptmr_next;
    6a14:	8f 81       	ldd	r24, Y+7	; 0x07
    6a16:	98 85       	ldd	r25, Y+8	; 0x08
    6a18:	9a 87       	std	Y+10, r25	; 0x0a
    6a1a:	89 87       	std	Y+9, r24	; 0x09
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
    6a1c:	89 85       	ldd	r24, Y+9	; 0x09
    6a1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6a20:	00 97       	sbiw	r24, 0x00	; 0
    6a22:	09 f0       	breq	.+2      	; 0x6a26 <OSTmr_Task+0x126>
    6a24:	b7 cf       	rjmp	.-146    	; 0x6994 <OSTmr_Task+0x94>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
    6a26:	0e 94 73 34 	call	0x68e6	; 0x68e6 <OSTmr_Unlock>
    6a2a:	76 cf       	rjmp	.-276    	; 0x6918 <OSTmr_Task+0x18>

00006a2c <init_lego_interface>:
 * Timer 1, 4 and 5 are used to control the H-Bridges for Motor-control.
 * PORTF is used to interface to LEGO sensors.
 * PORTB pin 5, 6 and 7, PORTH pin 3, 4 and 5, PORTL pin 3 & 4 are all used to control the H-Bridges.
 *********************************************************************************************************
 */
void init_lego_interface(void) {
    6a2c:	df 93       	push	r29
    6a2e:	cf 93       	push	r28
    6a30:	cd b7       	in	r28, 0x3d	; 61
    6a32:	de b7       	in	r29, 0x3e	; 62
	// Setup ADC
	// ref=AVCC
	ADMUX |= _BV(REFS0);
    6a34:	ac e7       	ldi	r26, 0x7C	; 124
    6a36:	b0 e0       	ldi	r27, 0x00	; 0
    6a38:	ec e7       	ldi	r30, 0x7C	; 124
    6a3a:	f0 e0       	ldi	r31, 0x00	; 0
    6a3c:	80 81       	ld	r24, Z
    6a3e:	80 64       	ori	r24, 0x40	; 64
    6a40:	8c 93       	st	X, r24
	// Enable ADC
	ADCSRA |= _BV(ADEN);
    6a42:	aa e7       	ldi	r26, 0x7A	; 122
    6a44:	b0 e0       	ldi	r27, 0x00	; 0
    6a46:	ea e7       	ldi	r30, 0x7A	; 122
    6a48:	f0 e0       	ldi	r31, 0x00	; 0
    6a4a:	80 81       	ld	r24, Z
    6a4c:	80 68       	ori	r24, 0x80	; 128
    6a4e:	8c 93       	st	X, r24
	// Enable ADC interrupt
	ADCSRA |= _BV(ADIE);
    6a50:	aa e7       	ldi	r26, 0x7A	; 122
    6a52:	b0 e0       	ldi	r27, 0x00	; 0
    6a54:	ea e7       	ldi	r30, 0x7A	; 122
    6a56:	f0 e0       	ldi	r31, 0x00	; 0
    6a58:	80 81       	ld	r24, Z
    6a5a:	88 60       	ori	r24, 0x08	; 8
    6a5c:	8c 93       	st	X, r24
	// Prescaler = 1/64 => 156250hZ
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1);
    6a5e:	aa e7       	ldi	r26, 0x7A	; 122
    6a60:	b0 e0       	ldi	r27, 0x00	; 0
    6a62:	ea e7       	ldi	r30, 0x7A	; 122
    6a64:	f0 e0       	ldi	r31, 0x00	; 0
    6a66:	80 81       	ld	r24, Z
    6a68:	86 60       	ori	r24, 0x06	; 6
    6a6a:	8c 93       	st	X, r24
	// Disable digital pin inputs on PORTF
	DIDR0 = 0xFF;
    6a6c:	ee e7       	ldi	r30, 0x7E	; 126
    6a6e:	f0 e0       	ldi	r31, 0x00	; 0
    6a70:	8f ef       	ldi	r24, 0xFF	; 255
    6a72:	80 83       	st	Z, r24

	// Timer 3 setup to TOP = 100mS
	// Mode 4: CTC => TOP = OCR3A
	TCCR3B |= _BV(WGM32);
    6a74:	a1 e9       	ldi	r26, 0x91	; 145
    6a76:	b0 e0       	ldi	r27, 0x00	; 0
    6a78:	e1 e9       	ldi	r30, 0x91	; 145
    6a7a:	f0 e0       	ldi	r31, 0x00	; 0
    6a7c:	80 81       	ld	r24, Z
    6a7e:	88 60       	ori	r24, 0x08	; 8
    6a80:	8c 93       	st	X, r24
	// TOP = OCR3A = 15624 => 100 ms @ CLKio = 10Mhz and prescaler = 1/8
	OCR3A = 15624;
    6a82:	e8 e9       	ldi	r30, 0x98	; 152
    6a84:	f0 e0       	ldi	r31, 0x00	; 0
    6a86:	88 e0       	ldi	r24, 0x08	; 8
    6a88:	9d e3       	ldi	r25, 0x3D	; 61
    6a8a:	91 83       	std	Z+1, r25	; 0x01
    6a8c:	80 83       	st	Z, r24
	// Enable OCR3A match interrupt. int every 100ms
	TIMSK3 |= _BV(OCIE3A);
    6a8e:	a1 e7       	ldi	r26, 0x71	; 113
    6a90:	b0 e0       	ldi	r27, 0x00	; 0
    6a92:	e1 e7       	ldi	r30, 0x71	; 113
    6a94:	f0 e0       	ldi	r31, 0x00	; 0
    6a96:	80 81       	ld	r24, Z
    6a98:	82 60       	ori	r24, 0x02	; 2
    6a9a:	8c 93       	st	X, r24
	// reset timer reg
	TCNT3 = 0;
    6a9c:	e4 e9       	ldi	r30, 0x94	; 148
    6a9e:	f0 e0       	ldi	r31, 0x00	; 0
    6aa0:	11 82       	std	Z+1, r1	; 0x01
    6aa2:	10 82       	st	Z, r1
	// Prescaler = 1/64 => 100mS @ CLKio = 10Mhz and start timer 3
	TCCR3B |= _BV(CS31) | _BV(CS30);
    6aa4:	a1 e9       	ldi	r26, 0x91	; 145
    6aa6:	b0 e0       	ldi	r27, 0x00	; 0
    6aa8:	e1 e9       	ldi	r30, 0x91	; 145
    6aaa:	f0 e0       	ldi	r31, 0x00	; 0
    6aac:	80 81       	ld	r24, Z
    6aae:	83 60       	ori	r24, 0x03	; 3
    6ab0:	8c 93       	st	X, r24

	// PWM setup for motor control
	// Timer 1 setup to fast PWM for controlling H-Bridge 1/Motor 0 and half of H-Bridge 2/Motor 1
	// setup to output OC1A/PB5, OC1B/PB6 and OC1C/PB7 pins to output
	DDRB |= _BV(DDB5) | _BV(DDB6) | _BV(DDB7);
    6ab2:	a4 e2       	ldi	r26, 0x24	; 36
    6ab4:	b0 e0       	ldi	r27, 0x00	; 0
    6ab6:	e4 e2       	ldi	r30, 0x24	; 36
    6ab8:	f0 e0       	ldi	r31, 0x00	; 0
    6aba:	80 81       	ld	r24, Z
    6abc:	80 6e       	ori	r24, 0xE0	; 224
    6abe:	8c 93       	st	X, r24
	// PB5 = PB6 = PB7 to 0 to be prepared for brake condition
	PORTB &= ~(_BV(PB5) | _BV(PB6) | _BV(PB7));
    6ac0:	a5 e2       	ldi	r26, 0x25	; 37
    6ac2:	b0 e0       	ldi	r27, 0x00	; 0
    6ac4:	e5 e2       	ldi	r30, 0x25	; 37
    6ac6:	f0 e0       	ldi	r31, 0x00	; 0
    6ac8:	80 81       	ld	r24, Z
    6aca:	8f 71       	andi	r24, 0x1F	; 31
    6acc:	8c 93       	st	X, r24
	// Mode 5: Fast PWM 8-bit, TOP = 0xFF
	TCCR1A |= _BV(WGM10);
    6ace:	a0 e8       	ldi	r26, 0x80	; 128
    6ad0:	b0 e0       	ldi	r27, 0x00	; 0
    6ad2:	e0 e8       	ldi	r30, 0x80	; 128
    6ad4:	f0 e0       	ldi	r31, 0x00	; 0
    6ad6:	80 81       	ld	r24, Z
    6ad8:	81 60       	ori	r24, 0x01	; 1
    6ada:	8c 93       	st	X, r24
	TCCR1B |= _BV(WGM12);
    6adc:	a1 e8       	ldi	r26, 0x81	; 129
    6ade:	b0 e0       	ldi	r27, 0x00	; 0
    6ae0:	e1 e8       	ldi	r30, 0x81	; 129
    6ae2:	f0 e0       	ldi	r31, 0x00	; 0
    6ae4:	80 81       	ld	r24, Z
    6ae6:	88 60       	ori	r24, 0x08	; 8
    6ae8:	8c 93       	st	X, r24
	// Compare output mode: Set OC1A on BOTTOM and clear OC1A, OC1B, OC1C on compare match
	TCCR1A |= _BV(COM1A1) | _BV(COM1B1) | _BV(COM1C1);
    6aea:	a0 e8       	ldi	r26, 0x80	; 128
    6aec:	b0 e0       	ldi	r27, 0x00	; 0
    6aee:	e0 e8       	ldi	r30, 0x80	; 128
    6af0:	f0 e0       	ldi	r31, 0x00	; 0
    6af2:	80 81       	ld	r24, Z
    6af4:	88 6a       	ori	r24, 0xA8	; 168
    6af6:	8c 93       	st	X, r24
	// set H-Bridge inputs to tri-state output => Motor free run
	OCR1A = OCR1B = OCR1C = 0xff;
    6af8:	28 e8       	ldi	r18, 0x88	; 136
    6afa:	30 e0       	ldi	r19, 0x00	; 0
    6afc:	aa e8       	ldi	r26, 0x8A	; 138
    6afe:	b0 e0       	ldi	r27, 0x00	; 0
    6b00:	ec e8       	ldi	r30, 0x8C	; 140
    6b02:	f0 e0       	ldi	r31, 0x00	; 0
    6b04:	8f ef       	ldi	r24, 0xFF	; 255
    6b06:	90 e0       	ldi	r25, 0x00	; 0
    6b08:	91 83       	std	Z+1, r25	; 0x01
    6b0a:	80 83       	st	Z, r24
    6b0c:	80 81       	ld	r24, Z
    6b0e:	91 81       	ldd	r25, Z+1	; 0x01
    6b10:	11 96       	adiw	r26, 0x01	; 1
    6b12:	9c 93       	st	X, r25
    6b14:	8e 93       	st	-X, r24
    6b16:	8d 91       	ld	r24, X+
    6b18:	9c 91       	ld	r25, X
    6b1a:	f9 01       	movw	r30, r18
    6b1c:	91 83       	std	Z+1, r25	; 0x01
    6b1e:	80 83       	st	Z, r24
	// Prescaler 1/1 and start timer => PWM Freq = 39,216 khz @ CLKio = 10Mhz
	TCCR1B |= _BV(CS10);
    6b20:	a1 e8       	ldi	r26, 0x81	; 129
    6b22:	b0 e0       	ldi	r27, 0x00	; 0
    6b24:	e1 e8       	ldi	r30, 0x81	; 129
    6b26:	f0 e0       	ldi	r31, 0x00	; 0
    6b28:	80 81       	ld	r24, Z
    6b2a:	81 60       	ori	r24, 0x01	; 1
    6b2c:	8c 93       	st	X, r24

	// Timer 4 setup to fast PWM for controlling half of H-Bridge 2/Motor 1 and H-Bridge 3/Motor 2
	// setup to output OC4A/PH3, OC4B/PH4 and OC4C/PH5 pins to output
	DDRH |= _BV(DDH3) | _BV(DDH4) | _BV(DDH5);
    6b2e:	a1 e0       	ldi	r26, 0x01	; 1
    6b30:	b1 e0       	ldi	r27, 0x01	; 1
    6b32:	e1 e0       	ldi	r30, 0x01	; 1
    6b34:	f1 e0       	ldi	r31, 0x01	; 1
    6b36:	80 81       	ld	r24, Z
    6b38:	88 63       	ori	r24, 0x38	; 56
    6b3a:	8c 93       	st	X, r24
	// PH3, PH4 and PH5 to 0 to be prepared for brake condition
	PORTH &= ~(_BV(PH3) | _BV(PH4) | _BV(PH5));
    6b3c:	a2 e0       	ldi	r26, 0x02	; 2
    6b3e:	b1 e0       	ldi	r27, 0x01	; 1
    6b40:	e2 e0       	ldi	r30, 0x02	; 2
    6b42:	f1 e0       	ldi	r31, 0x01	; 1
    6b44:	80 81       	ld	r24, Z
    6b46:	87 7c       	andi	r24, 0xC7	; 199
    6b48:	8c 93       	st	X, r24
	// Mode 5: Fast PWM 8-bit, TOP = 0xFF
	TCCR4A |= _BV(WGM40);
    6b4a:	a0 ea       	ldi	r26, 0xA0	; 160
    6b4c:	b0 e0       	ldi	r27, 0x00	; 0
    6b4e:	e0 ea       	ldi	r30, 0xA0	; 160
    6b50:	f0 e0       	ldi	r31, 0x00	; 0
    6b52:	80 81       	ld	r24, Z
    6b54:	81 60       	ori	r24, 0x01	; 1
    6b56:	8c 93       	st	X, r24
	TCCR4B |= _BV(WGM42);
    6b58:	a1 ea       	ldi	r26, 0xA1	; 161
    6b5a:	b0 e0       	ldi	r27, 0x00	; 0
    6b5c:	e1 ea       	ldi	r30, 0xA1	; 161
    6b5e:	f0 e0       	ldi	r31, 0x00	; 0
    6b60:	80 81       	ld	r24, Z
    6b62:	88 60       	ori	r24, 0x08	; 8
    6b64:	8c 93       	st	X, r24
	// Compare output mode: Set OCx on BOTTOM and clear OC1C, OC4A, O41B,  on compare match
	TCCR4A |= _BV(COM4A1) | _BV(COM4B1) | _BV(COM4C1);
    6b66:	a0 ea       	ldi	r26, 0xA0	; 160
    6b68:	b0 e0       	ldi	r27, 0x00	; 0
    6b6a:	e0 ea       	ldi	r30, 0xA0	; 160
    6b6c:	f0 e0       	ldi	r31, 0x00	; 0
    6b6e:	80 81       	ld	r24, Z
    6b70:	88 6a       	ori	r24, 0xA8	; 168
    6b72:	8c 93       	st	X, r24
	// set H-Bridge inputs to tri-state output => Motor free run
	OCR4A = OCR4B = OCR4C = 0xff;
    6b74:	28 ea       	ldi	r18, 0xA8	; 168
    6b76:	30 e0       	ldi	r19, 0x00	; 0
    6b78:	aa ea       	ldi	r26, 0xAA	; 170
    6b7a:	b0 e0       	ldi	r27, 0x00	; 0
    6b7c:	ec ea       	ldi	r30, 0xAC	; 172
    6b7e:	f0 e0       	ldi	r31, 0x00	; 0
    6b80:	8f ef       	ldi	r24, 0xFF	; 255
    6b82:	90 e0       	ldi	r25, 0x00	; 0
    6b84:	91 83       	std	Z+1, r25	; 0x01
    6b86:	80 83       	st	Z, r24
    6b88:	80 81       	ld	r24, Z
    6b8a:	91 81       	ldd	r25, Z+1	; 0x01
    6b8c:	11 96       	adiw	r26, 0x01	; 1
    6b8e:	9c 93       	st	X, r25
    6b90:	8e 93       	st	-X, r24
    6b92:	8d 91       	ld	r24, X+
    6b94:	9c 91       	ld	r25, X
    6b96:	f9 01       	movw	r30, r18
    6b98:	91 83       	std	Z+1, r25	; 0x01
    6b9a:	80 83       	st	Z, r24
	// Prescaler 1/1 and start timer => PWM Freq = 39,216 khz @ CLKio = 10Mhz
	TCCR4B |= _BV(CS40);
    6b9c:	a1 ea       	ldi	r26, 0xA1	; 161
    6b9e:	b0 e0       	ldi	r27, 0x00	; 0
    6ba0:	e1 ea       	ldi	r30, 0xA1	; 161
    6ba2:	f0 e0       	ldi	r31, 0x00	; 0
    6ba4:	80 81       	ld	r24, Z
    6ba6:	81 60       	ori	r24, 0x01	; 1
    6ba8:	8c 93       	st	X, r24

	// Timer 5 setup to fast PWM for controlling H-Bridge 4/Motor 3
	// setup to output OC5A/PL3 and OC5B/PL4 pins to output
	DDRL |= _BV(DDL3) | _BV(DDL4);
    6baa:	aa e0       	ldi	r26, 0x0A	; 10
    6bac:	b1 e0       	ldi	r27, 0x01	; 1
    6bae:	ea e0       	ldi	r30, 0x0A	; 10
    6bb0:	f1 e0       	ldi	r31, 0x01	; 1
    6bb2:	80 81       	ld	r24, Z
    6bb4:	88 61       	ori	r24, 0x18	; 24
    6bb6:	8c 93       	st	X, r24
	// PL3 and PL4 to 0 to be prepared for brake condition
	PORTL &= ~(_BV(PL3) | _BV(PL4));
    6bb8:	ab e0       	ldi	r26, 0x0B	; 11
    6bba:	b1 e0       	ldi	r27, 0x01	; 1
    6bbc:	eb e0       	ldi	r30, 0x0B	; 11
    6bbe:	f1 e0       	ldi	r31, 0x01	; 1
    6bc0:	80 81       	ld	r24, Z
    6bc2:	87 7e       	andi	r24, 0xE7	; 231
    6bc4:	8c 93       	st	X, r24
	// Mode 5: Fast PWM 8-bit, TOP = 0xFF
	TCCR5A |= _BV(WGM50);
    6bc6:	a0 e2       	ldi	r26, 0x20	; 32
    6bc8:	b1 e0       	ldi	r27, 0x01	; 1
    6bca:	e0 e2       	ldi	r30, 0x20	; 32
    6bcc:	f1 e0       	ldi	r31, 0x01	; 1
    6bce:	80 81       	ld	r24, Z
    6bd0:	81 60       	ori	r24, 0x01	; 1
    6bd2:	8c 93       	st	X, r24
	TCCR5B |= _BV(WGM52);
    6bd4:	a1 e2       	ldi	r26, 0x21	; 33
    6bd6:	b1 e0       	ldi	r27, 0x01	; 1
    6bd8:	e1 e2       	ldi	r30, 0x21	; 33
    6bda:	f1 e0       	ldi	r31, 0x01	; 1
    6bdc:	80 81       	ld	r24, Z
    6bde:	88 60       	ori	r24, 0x08	; 8
    6be0:	8c 93       	st	X, r24
	// Compare output mode: Set OCx on BOTTOM and clear OC5A, OC5B on compare match
	TCCR5A |= _BV(COM5A1) | _BV(COM5B1);
    6be2:	a0 e2       	ldi	r26, 0x20	; 32
    6be4:	b1 e0       	ldi	r27, 0x01	; 1
    6be6:	e0 e2       	ldi	r30, 0x20	; 32
    6be8:	f1 e0       	ldi	r31, 0x01	; 1
    6bea:	80 81       	ld	r24, Z
    6bec:	80 6a       	ori	r24, 0xA0	; 160
    6bee:	8c 93       	st	X, r24
	// set H-Bridge inputs to tri-state output => Motor free run
	OCR5A = OCR5B = 0xff;
    6bf0:	a8 e2       	ldi	r26, 0x28	; 40
    6bf2:	b1 e0       	ldi	r27, 0x01	; 1
    6bf4:	ea e2       	ldi	r30, 0x2A	; 42
    6bf6:	f1 e0       	ldi	r31, 0x01	; 1
    6bf8:	8f ef       	ldi	r24, 0xFF	; 255
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	91 83       	std	Z+1, r25	; 0x01
    6bfe:	80 83       	st	Z, r24
    6c00:	80 81       	ld	r24, Z
    6c02:	91 81       	ldd	r25, Z+1	; 0x01
    6c04:	11 96       	adiw	r26, 0x01	; 1
    6c06:	9c 93       	st	X, r25
    6c08:	8e 93       	st	-X, r24
	// Prescaler 1/1 and start timer => PWM Freq = 39,216 khz @ CLKio = 10Mhz
	TCCR5B |= _BV(CS50);
    6c0a:	a1 e2       	ldi	r26, 0x21	; 33
    6c0c:	b1 e0       	ldi	r27, 0x01	; 1
    6c0e:	e1 e2       	ldi	r30, 0x21	; 33
    6c10:	f1 e0       	ldi	r31, 0x01	; 1
    6c12:	80 81       	ld	r24, Z
    6c14:	81 60       	ori	r24, 0x01	; 1
    6c16:	8c 93       	st	X, r24
}
    6c18:	cf 91       	pop	r28
    6c1a:	df 91       	pop	r29
    6c1c:	08 95       	ret

00006c1e <touch_sensor>:
 *	Read the actual value from the touch sensor connected to the specified sensor input.
 *	\param sensor_no specifies the sensor input on the interface board [0..7].
 *	\return the 10-bit value read on the sensor, or -1 if sensor_no out of range [0..7].
 *********************************************************************************************************
 */
INT16S touch_sensor(INT8U sensor_no) {
    6c1e:	df 93       	push	r29
    6c20:	cf 93       	push	r28
    6c22:	00 d0       	rcall	.+0      	; 0x6c24 <touch_sensor+0x6>
    6c24:	cd b7       	in	r28, 0x3d	; 61
    6c26:	de b7       	in	r29, 0x3e	; 62
    6c28:	89 83       	std	Y+1, r24	; 0x01
	if (sensor_no < 8) {
    6c2a:	89 81       	ldd	r24, Y+1	; 0x01
    6c2c:	88 30       	cpi	r24, 0x08	; 8
    6c2e:	68 f4       	brcc	.+26     	; 0x6c4a <touch_sensor+0x2c>
		return sensor_result[sensor_no];
    6c30:	89 81       	ldd	r24, Y+1	; 0x01
    6c32:	88 2f       	mov	r24, r24
    6c34:	90 e0       	ldi	r25, 0x00	; 0
    6c36:	88 0f       	add	r24, r24
    6c38:	99 1f       	adc	r25, r25
    6c3a:	fc 01       	movw	r30, r24
    6c3c:	e5 52       	subi	r30, 0x25	; 37
    6c3e:	fb 4f       	sbci	r31, 0xFB	; 251
    6c40:	80 81       	ld	r24, Z
    6c42:	91 81       	ldd	r25, Z+1	; 0x01
    6c44:	9b 83       	std	Y+3, r25	; 0x03
    6c46:	8a 83       	std	Y+2, r24	; 0x02
    6c48:	04 c0       	rjmp	.+8      	; 0x6c52 <touch_sensor+0x34>
	} else {
		return -1;
    6c4a:	8f ef       	ldi	r24, 0xFF	; 255
    6c4c:	9f ef       	ldi	r25, 0xFF	; 255
    6c4e:	9b 83       	std	Y+3, r25	; 0x03
    6c50:	8a 83       	std	Y+2, r24	; 0x02
    6c52:	8a 81       	ldd	r24, Y+2	; 0x02
    6c54:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    6c56:	0f 90       	pop	r0
    6c58:	0f 90       	pop	r0
    6c5a:	0f 90       	pop	r0
    6c5c:	cf 91       	pop	r28
    6c5e:	df 91       	pop	r29
    6c60:	08 95       	ret

00006c62 <rotation_sensor>:
 *	Read the actual value from the rotation sensor connected to the specified sensor input.
 *	\param sensor_no specifies the sensor input on the interface board [0..7].
 *	\return the 10-bit value read on the sensor, or -1 if sensor_no out of range [0..7].
 *********************************************************************************************************
 */
INT16S rotation_sensor(INT8U sensor_no) {
    6c62:	df 93       	push	r29
    6c64:	cf 93       	push	r28
    6c66:	00 d0       	rcall	.+0      	; 0x6c68 <rotation_sensor+0x6>
    6c68:	cd b7       	in	r28, 0x3d	; 61
    6c6a:	de b7       	in	r29, 0x3e	; 62
    6c6c:	89 83       	std	Y+1, r24	; 0x01
	if (sensor_no < 8) {
    6c6e:	89 81       	ldd	r24, Y+1	; 0x01
    6c70:	88 30       	cpi	r24, 0x08	; 8
    6c72:	68 f4       	brcc	.+26     	; 0x6c8e <rotation_sensor+0x2c>
		return sensor_result[sensor_no];
    6c74:	89 81       	ldd	r24, Y+1	; 0x01
    6c76:	88 2f       	mov	r24, r24
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	88 0f       	add	r24, r24
    6c7c:	99 1f       	adc	r25, r25
    6c7e:	fc 01       	movw	r30, r24
    6c80:	e5 52       	subi	r30, 0x25	; 37
    6c82:	fb 4f       	sbci	r31, 0xFB	; 251
    6c84:	80 81       	ld	r24, Z
    6c86:	91 81       	ldd	r25, Z+1	; 0x01
    6c88:	9b 83       	std	Y+3, r25	; 0x03
    6c8a:	8a 83       	std	Y+2, r24	; 0x02
    6c8c:	04 c0       	rjmp	.+8      	; 0x6c96 <rotation_sensor+0x34>
	} else {
		return -1;
    6c8e:	8f ef       	ldi	r24, 0xFF	; 255
    6c90:	9f ef       	ldi	r25, 0xFF	; 255
    6c92:	9b 83       	std	Y+3, r25	; 0x03
    6c94:	8a 83       	std	Y+2, r24	; 0x02
    6c96:	8a 81       	ldd	r24, Y+2	; 0x02
    6c98:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    6c9a:	0f 90       	pop	r0
    6c9c:	0f 90       	pop	r0
    6c9e:	0f 90       	pop	r0
    6ca0:	cf 91       	pop	r28
    6ca2:	df 91       	pop	r29
    6ca4:	08 95       	ret

00006ca6 <light_sensor>:
 *	Read the actual value from the light sensor connected to the specified sensor input.
 *	\param sensor_no specifies the sensor input on the interface board [0..7].
 *	\return the 10-bit value read on the sensor, or -1 if sensor_no out of range [0..7].
 *********************************************************************************************************
 */
INT16S light_sensor(INT8U sensor_no) {
    6ca6:	df 93       	push	r29
    6ca8:	cf 93       	push	r28
    6caa:	00 d0       	rcall	.+0      	; 0x6cac <light_sensor+0x6>
    6cac:	cd b7       	in	r28, 0x3d	; 61
    6cae:	de b7       	in	r29, 0x3e	; 62
    6cb0:	89 83       	std	Y+1, r24	; 0x01
	if (sensor_no < 8) {
    6cb2:	89 81       	ldd	r24, Y+1	; 0x01
    6cb4:	88 30       	cpi	r24, 0x08	; 8
    6cb6:	68 f4       	brcc	.+26     	; 0x6cd2 <light_sensor+0x2c>
		return sensor_result[sensor_no];
    6cb8:	89 81       	ldd	r24, Y+1	; 0x01
    6cba:	88 2f       	mov	r24, r24
    6cbc:	90 e0       	ldi	r25, 0x00	; 0
    6cbe:	88 0f       	add	r24, r24
    6cc0:	99 1f       	adc	r25, r25
    6cc2:	fc 01       	movw	r30, r24
    6cc4:	e5 52       	subi	r30, 0x25	; 37
    6cc6:	fb 4f       	sbci	r31, 0xFB	; 251
    6cc8:	80 81       	ld	r24, Z
    6cca:	91 81       	ldd	r25, Z+1	; 0x01
    6ccc:	9b 83       	std	Y+3, r25	; 0x03
    6cce:	8a 83       	std	Y+2, r24	; 0x02
    6cd0:	04 c0       	rjmp	.+8      	; 0x6cda <light_sensor+0x34>
	} else {
		return -1;
    6cd2:	8f ef       	ldi	r24, 0xFF	; 255
    6cd4:	9f ef       	ldi	r25, 0xFF	; 255
    6cd6:	9b 83       	std	Y+3, r25	; 0x03
    6cd8:	8a 83       	std	Y+2, r24	; 0x02
    6cda:	8a 81       	ldd	r24, Y+2	; 0x02
    6cdc:	9b 81       	ldd	r25, Y+3	; 0x03
	}
}
    6cde:	0f 90       	pop	r0
    6ce0:	0f 90       	pop	r0
    6ce2:	0f 90       	pop	r0
    6ce4:	cf 91       	pop	r28
    6ce6:	df 91       	pop	r29
    6ce8:	08 95       	ret

00006cea <motor_speed>:
 *   0 will release the motor/free run. If the motor is braked the brake will automatically be released
 *   when this function is called.
 *	\see brake_motor
 *********************************************************************************************************
 */
void motor_speed(INT8U motor_no, INT8S speed) {
    6cea:	df 93       	push	r29
    6cec:	cf 93       	push	r28
    6cee:	cd b7       	in	r28, 0x3d	; 61
    6cf0:	de b7       	in	r29, 0x3e	; 62
    6cf2:	28 97       	sbiw	r28, 0x08	; 8
    6cf4:	0f b6       	in	r0, 0x3f	; 63
    6cf6:	f8 94       	cli
    6cf8:	de bf       	out	0x3e, r29	; 62
    6cfa:	0f be       	out	0x3f, r0	; 63
    6cfc:	cd bf       	out	0x3d, r28	; 61
    6cfe:	8b 83       	std	Y+3, r24	; 0x03
    6d00:	6c 83       	std	Y+4, r22	; 0x04
	if ((speed >= -100) && (speed <= 100)) {
    6d02:	8c 81       	ldd	r24, Y+4	; 0x04
    6d04:	8c 39       	cpi	r24, 0x9C	; 156
    6d06:	0c f4       	brge	.+2      	; 0x6d0a <motor_speed+0x20>
    6d08:	9c c1       	rjmp	.+824    	; 0x7042 <motor_speed+0x358>
    6d0a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d0c:	85 36       	cpi	r24, 0x65	; 101
    6d0e:	0c f0       	brlt	.+2      	; 0x6d12 <motor_speed+0x28>
    6d10:	98 c1       	rjmp	.+816    	; 0x7042 <motor_speed+0x358>
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
		OS_CPU_SR cpu_sr = 0;
    6d12:	1a 82       	std	Y+2, r1	; 0x02
#endif

		OS_ENTER_CRITICAL();
    6d14:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    6d18:	8a 83       	std	Y+2, r24	; 0x02

		INT8U ocrx_value = 255- (abs(speed) * 255 / 100);
    6d1a:	8c 81       	ldd	r24, Y+4	; 0x04
    6d1c:	99 27       	eor	r25, r25
    6d1e:	87 fd       	sbrc	r24, 7
    6d20:	90 95       	com	r25
    6d22:	98 87       	std	Y+8, r25	; 0x08
    6d24:	8f 83       	std	Y+7, r24	; 0x07
    6d26:	2f 81       	ldd	r18, Y+7	; 0x07
    6d28:	38 85       	ldd	r19, Y+8	; 0x08
    6d2a:	33 23       	and	r19, r19
    6d2c:	3c f4       	brge	.+14     	; 0x6d3c <motor_speed+0x52>
    6d2e:	8f 81       	ldd	r24, Y+7	; 0x07
    6d30:	98 85       	ldd	r25, Y+8	; 0x08
    6d32:	90 95       	com	r25
    6d34:	81 95       	neg	r24
    6d36:	9f 4f       	sbci	r25, 0xFF	; 255
    6d38:	98 87       	std	Y+8, r25	; 0x08
    6d3a:	8f 83       	std	Y+7, r24	; 0x07
    6d3c:	8f 81       	ldd	r24, Y+7	; 0x07
    6d3e:	98 85       	ldd	r25, Y+8	; 0x08
    6d40:	9c 01       	movw	r18, r24
    6d42:	22 0f       	add	r18, r18
    6d44:	33 1f       	adc	r19, r19
    6d46:	c9 01       	movw	r24, r18
    6d48:	96 95       	lsr	r25
    6d4a:	98 2f       	mov	r25, r24
    6d4c:	88 27       	eor	r24, r24
    6d4e:	97 95       	ror	r25
    6d50:	87 95       	ror	r24
    6d52:	82 1b       	sub	r24, r18
    6d54:	93 0b       	sbc	r25, r19
    6d56:	2f 81       	ldd	r18, Y+7	; 0x07
    6d58:	38 85       	ldd	r19, Y+8	; 0x08
    6d5a:	82 0f       	add	r24, r18
    6d5c:	93 1f       	adc	r25, r19
    6d5e:	24 e6       	ldi	r18, 0x64	; 100
    6d60:	30 e0       	ldi	r19, 0x00	; 0
    6d62:	b9 01       	movw	r22, r18
    6d64:	0e 94 18 3e 	call	0x7c30	; 0x7c30 <__divmodhi4>
    6d68:	cb 01       	movw	r24, r22
    6d6a:	80 95       	com	r24
    6d6c:	89 83       	std	Y+1, r24	; 0x01

		if (motor_braked[motor_no]) {
    6d6e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d70:	88 2f       	mov	r24, r24
    6d72:	90 e0       	ldi	r25, 0x00	; 0
    6d74:	fc 01       	movw	r30, r24
    6d76:	ed 52       	subi	r30, 0x2D	; 45
    6d78:	fb 4f       	sbci	r31, 0xFB	; 251
    6d7a:	80 81       	ld	r24, Z
    6d7c:	88 23       	and	r24, r24
    6d7e:	39 f0       	breq	.+14     	; 0x6d8e <motor_speed+0xa4>
			motor_braked[motor_no] = 0;
    6d80:	8b 81       	ldd	r24, Y+3	; 0x03
    6d82:	88 2f       	mov	r24, r24
    6d84:	90 e0       	ldi	r25, 0x00	; 0
    6d86:	fc 01       	movw	r30, r24
    6d88:	ed 52       	subi	r30, 0x2D	; 45
    6d8a:	fb 4f       	sbci	r31, 0xFB	; 251
    6d8c:	10 82       	st	Z, r1
		}

		switch (motor_no) {
    6d8e:	8b 81       	ldd	r24, Y+3	; 0x03
    6d90:	28 2f       	mov	r18, r24
    6d92:	30 e0       	ldi	r19, 0x00	; 0
    6d94:	3e 83       	std	Y+6, r19	; 0x06
    6d96:	2d 83       	std	Y+5, r18	; 0x05
    6d98:	8d 81       	ldd	r24, Y+5	; 0x05
    6d9a:	9e 81       	ldd	r25, Y+6	; 0x06
    6d9c:	81 30       	cpi	r24, 0x01	; 1
    6d9e:	91 05       	cpc	r25, r1
    6da0:	09 f4       	brne	.+2      	; 0x6da4 <motor_speed+0xba>
    6da2:	5f c0       	rjmp	.+190    	; 0x6e62 <motor_speed+0x178>
    6da4:	2d 81       	ldd	r18, Y+5	; 0x05
    6da6:	3e 81       	ldd	r19, Y+6	; 0x06
    6da8:	22 30       	cpi	r18, 0x02	; 2
    6daa:	31 05       	cpc	r19, r1
    6dac:	2c f4       	brge	.+10     	; 0x6db8 <motor_speed+0xce>
    6dae:	8d 81       	ldd	r24, Y+5	; 0x05
    6db0:	9e 81       	ldd	r25, Y+6	; 0x06
    6db2:	00 97       	sbiw	r24, 0x00	; 0
    6db4:	71 f0       	breq	.+28     	; 0x6dd2 <motor_speed+0xe8>
    6db6:	42 c1       	rjmp	.+644    	; 0x703c <motor_speed+0x352>
    6db8:	2d 81       	ldd	r18, Y+5	; 0x05
    6dba:	3e 81       	ldd	r19, Y+6	; 0x06
    6dbc:	22 30       	cpi	r18, 0x02	; 2
    6dbe:	31 05       	cpc	r19, r1
    6dc0:	09 f4       	brne	.+2      	; 0x6dc4 <motor_speed+0xda>
    6dc2:	ac c0       	rjmp	.+344    	; 0x6f1c <motor_speed+0x232>
    6dc4:	8d 81       	ldd	r24, Y+5	; 0x05
    6dc6:	9e 81       	ldd	r25, Y+6	; 0x06
    6dc8:	83 30       	cpi	r24, 0x03	; 3
    6dca:	91 05       	cpc	r25, r1
    6dcc:	09 f4       	brne	.+2      	; 0x6dd0 <motor_speed+0xe6>
    6dce:	ee c0       	rjmp	.+476    	; 0x6fac <motor_speed+0x2c2>
    6dd0:	35 c1       	rjmp	.+618    	; 0x703c <motor_speed+0x352>
		case 0:
			if (speed > 0) {
    6dd2:	8c 81       	ldd	r24, Y+4	; 0x04
    6dd4:	18 16       	cp	r1, r24
    6dd6:	ac f4       	brge	.+42     	; 0x6e02 <motor_speed+0x118>
				// CW
				// New value in OCR1A register
				OCR1A = ocrx_value;
    6dd8:	e8 e8       	ldi	r30, 0x88	; 136
    6dda:	f0 e0       	ldi	r31, 0x00	; 0
    6ddc:	89 81       	ldd	r24, Y+1	; 0x01
    6dde:	88 2f       	mov	r24, r24
    6de0:	90 e0       	ldi	r25, 0x00	; 0
    6de2:	91 83       	std	Z+1, r25	; 0x01
    6de4:	80 83       	st	Z, r24
				// Set OC1B high by setting OCR1B to TOP
				OCR1B = 0xFF;
    6de6:	ea e8       	ldi	r30, 0x8A	; 138
    6de8:	f0 e0       	ldi	r31, 0x00	; 0
    6dea:	8f ef       	ldi	r24, 0xFF	; 255
    6dec:	90 e0       	ldi	r25, 0x00	; 0
    6dee:	91 83       	std	Z+1, r25	; 0x01
    6df0:	80 83       	st	Z, r24
				//TCCR1A &= ~_BV(COM1B1);
				// set OC1A & OC1B to Clear on compare
				TCCR1A |= _BV(COM1A1) | _BV(COM1B1);
    6df2:	a0 e8       	ldi	r26, 0x80	; 128
    6df4:	b0 e0       	ldi	r27, 0x00	; 0
    6df6:	e0 e8       	ldi	r30, 0x80	; 128
    6df8:	f0 e0       	ldi	r31, 0x00	; 0
    6dfa:	80 81       	ld	r24, Z
    6dfc:	80 6a       	ori	r24, 0xA0	; 160
    6dfe:	8c 93       	st	X, r24
    6e00:	2c c0       	rjmp	.+88     	; 0x6e5a <motor_speed+0x170>
			} else if (speed == 0) {
    6e02:	8c 81       	ldd	r24, Y+4	; 0x04
    6e04:	88 23       	and	r24, r24
    6e06:	a9 f4       	brne	.+42     	; 0x6e32 <motor_speed+0x148>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR1A = OCR1B = 0xFF;
    6e08:	a8 e8       	ldi	r26, 0x88	; 136
    6e0a:	b0 e0       	ldi	r27, 0x00	; 0
    6e0c:	ea e8       	ldi	r30, 0x8A	; 138
    6e0e:	f0 e0       	ldi	r31, 0x00	; 0
    6e10:	8f ef       	ldi	r24, 0xFF	; 255
    6e12:	90 e0       	ldi	r25, 0x00	; 0
    6e14:	91 83       	std	Z+1, r25	; 0x01
    6e16:	80 83       	st	Z, r24
    6e18:	80 81       	ld	r24, Z
    6e1a:	91 81       	ldd	r25, Z+1	; 0x01
    6e1c:	11 96       	adiw	r26, 0x01	; 1
    6e1e:	9c 93       	st	X, r25
    6e20:	8e 93       	st	-X, r24
				// Compare output mode: Set OC1A on BOTTOM and clear OC1A, OC1B on compare match
				TCCR1A |= _BV(COM1A1) | _BV(COM1B1);
    6e22:	a0 e8       	ldi	r26, 0x80	; 128
    6e24:	b0 e0       	ldi	r27, 0x00	; 0
    6e26:	e0 e8       	ldi	r30, 0x80	; 128
    6e28:	f0 e0       	ldi	r31, 0x00	; 0
    6e2a:	80 81       	ld	r24, Z
    6e2c:	80 6a       	ori	r24, 0xA0	; 160
    6e2e:	8c 93       	st	X, r24
    6e30:	14 c0       	rjmp	.+40     	; 0x6e5a <motor_speed+0x170>
			} else {
				// CCW
				// New value in OCR1B register
				OCR1B = ocrx_value;
    6e32:	ea e8       	ldi	r30, 0x8A	; 138
    6e34:	f0 e0       	ldi	r31, 0x00	; 0
    6e36:	89 81       	ldd	r24, Y+1	; 0x01
    6e38:	88 2f       	mov	r24, r24
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	91 83       	std	Z+1, r25	; 0x01
    6e3e:	80 83       	st	Z, r24
				// Set OC1A high by setting OCR1A to TOP
				OCR1A = 0xFF;
    6e40:	e8 e8       	ldi	r30, 0x88	; 136
    6e42:	f0 e0       	ldi	r31, 0x00	; 0
    6e44:	8f ef       	ldi	r24, 0xFF	; 255
    6e46:	90 e0       	ldi	r25, 0x00	; 0
    6e48:	91 83       	std	Z+1, r25	; 0x01
    6e4a:	80 83       	st	Z, r24
				//TCCR1A &= ~_BV(COM1A1);
				// set OC1A & OC1B to Clear on compare
				TCCR1A |= _BV(COM1A1) | _BV(COM1B1);			}
    6e4c:	a0 e8       	ldi	r26, 0x80	; 128
    6e4e:	b0 e0       	ldi	r27, 0x00	; 0
    6e50:	e0 e8       	ldi	r30, 0x80	; 128
    6e52:	f0 e0       	ldi	r31, 0x00	; 0
    6e54:	80 81       	ld	r24, Z
    6e56:	80 6a       	ori	r24, 0xA0	; 160
    6e58:	8c 93       	st	X, r24
			OS_EXIT_CRITICAL();
    6e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e5c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    6e60:	f0 c0       	rjmp	.+480    	; 0x7042 <motor_speed+0x358>
			break;

		case 1:
			if (speed > 0) {
    6e62:	8c 81       	ldd	r24, Y+4	; 0x04
    6e64:	18 16       	cp	r1, r24
    6e66:	e4 f4       	brge	.+56     	; 0x6ea0 <motor_speed+0x1b6>
				// CW
				// New value in OCR1C register
				OCR1C = ocrx_value;
    6e68:	ec e8       	ldi	r30, 0x8C	; 140
    6e6a:	f0 e0       	ldi	r31, 0x00	; 0
    6e6c:	89 81       	ldd	r24, Y+1	; 0x01
    6e6e:	88 2f       	mov	r24, r24
    6e70:	90 e0       	ldi	r25, 0x00	; 0
    6e72:	91 83       	std	Z+1, r25	; 0x01
    6e74:	80 83       	st	Z, r24
				// Set OC4A high by setting OCR4A to TOP
				OCR4A = 0xFF;
    6e76:	e8 ea       	ldi	r30, 0xA8	; 168
    6e78:	f0 e0       	ldi	r31, 0x00	; 0
    6e7a:	8f ef       	ldi	r24, 0xFF	; 255
    6e7c:	90 e0       	ldi	r25, 0x00	; 0
    6e7e:	91 83       	std	Z+1, r25	; 0x01
    6e80:	80 83       	st	Z, r24
				// set OC1C & OC4A to Clear on compare
				TCCR1A |= _BV(COM1C1);
    6e82:	a0 e8       	ldi	r26, 0x80	; 128
    6e84:	b0 e0       	ldi	r27, 0x00	; 0
    6e86:	e0 e8       	ldi	r30, 0x80	; 128
    6e88:	f0 e0       	ldi	r31, 0x00	; 0
    6e8a:	80 81       	ld	r24, Z
    6e8c:	88 60       	ori	r24, 0x08	; 8
    6e8e:	8c 93       	st	X, r24
				TCCR4A |= _BV(COM4A1);
    6e90:	a0 ea       	ldi	r26, 0xA0	; 160
    6e92:	b0 e0       	ldi	r27, 0x00	; 0
    6e94:	e0 ea       	ldi	r30, 0xA0	; 160
    6e96:	f0 e0       	ldi	r31, 0x00	; 0
    6e98:	80 81       	ld	r24, Z
    6e9a:	80 68       	ori	r24, 0x80	; 128
    6e9c:	8c 93       	st	X, r24
    6e9e:	3a c0       	rjmp	.+116    	; 0x6f14 <motor_speed+0x22a>
			} else if (speed == 0) {
    6ea0:	8c 81       	ldd	r24, Y+4	; 0x04
    6ea2:	88 23       	and	r24, r24
    6ea4:	e1 f4       	brne	.+56     	; 0x6ede <motor_speed+0x1f4>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR1C = OCR4A = 0xFF;
    6ea6:	ac e8       	ldi	r26, 0x8C	; 140
    6ea8:	b0 e0       	ldi	r27, 0x00	; 0
    6eaa:	e8 ea       	ldi	r30, 0xA8	; 168
    6eac:	f0 e0       	ldi	r31, 0x00	; 0
    6eae:	8f ef       	ldi	r24, 0xFF	; 255
    6eb0:	90 e0       	ldi	r25, 0x00	; 0
    6eb2:	91 83       	std	Z+1, r25	; 0x01
    6eb4:	80 83       	st	Z, r24
    6eb6:	80 81       	ld	r24, Z
    6eb8:	91 81       	ldd	r25, Z+1	; 0x01
    6eba:	11 96       	adiw	r26, 0x01	; 1
    6ebc:	9c 93       	st	X, r25
    6ebe:	8e 93       	st	-X, r24
				// Compare output mode: Set OC1C on BOTTOM and clear OC1C, OC4A on compare match
				TCCR1A |= _BV(COM1C1);
    6ec0:	a0 e8       	ldi	r26, 0x80	; 128
    6ec2:	b0 e0       	ldi	r27, 0x00	; 0
    6ec4:	e0 e8       	ldi	r30, 0x80	; 128
    6ec6:	f0 e0       	ldi	r31, 0x00	; 0
    6ec8:	80 81       	ld	r24, Z
    6eca:	88 60       	ori	r24, 0x08	; 8
    6ecc:	8c 93       	st	X, r24
				TCCR4A |= _BV(COM4A1);
    6ece:	a0 ea       	ldi	r26, 0xA0	; 160
    6ed0:	b0 e0       	ldi	r27, 0x00	; 0
    6ed2:	e0 ea       	ldi	r30, 0xA0	; 160
    6ed4:	f0 e0       	ldi	r31, 0x00	; 0
    6ed6:	80 81       	ld	r24, Z
    6ed8:	80 68       	ori	r24, 0x80	; 128
    6eda:	8c 93       	st	X, r24
    6edc:	1b c0       	rjmp	.+54     	; 0x6f14 <motor_speed+0x22a>
			} else {
				// CCW
				// New value in OCR4A register
				OCR4A = ocrx_value;
    6ede:	e8 ea       	ldi	r30, 0xA8	; 168
    6ee0:	f0 e0       	ldi	r31, 0x00	; 0
    6ee2:	89 81       	ldd	r24, Y+1	; 0x01
    6ee4:	88 2f       	mov	r24, r24
    6ee6:	90 e0       	ldi	r25, 0x00	; 0
    6ee8:	91 83       	std	Z+1, r25	; 0x01
    6eea:	80 83       	st	Z, r24
				// Set OC1C high by setting OCR1C to TOP
				OCR1C = 0xFF;
    6eec:	ec e8       	ldi	r30, 0x8C	; 140
    6eee:	f0 e0       	ldi	r31, 0x00	; 0
    6ef0:	8f ef       	ldi	r24, 0xFF	; 255
    6ef2:	90 e0       	ldi	r25, 0x00	; 0
    6ef4:	91 83       	std	Z+1, r25	; 0x01
    6ef6:	80 83       	st	Z, r24
				// set OC1C & OC4A to Clear on compare
				TCCR1A |= _BV(COM1C1);
    6ef8:	a0 e8       	ldi	r26, 0x80	; 128
    6efa:	b0 e0       	ldi	r27, 0x00	; 0
    6efc:	e0 e8       	ldi	r30, 0x80	; 128
    6efe:	f0 e0       	ldi	r31, 0x00	; 0
    6f00:	80 81       	ld	r24, Z
    6f02:	88 60       	ori	r24, 0x08	; 8
    6f04:	8c 93       	st	X, r24
				TCCR4A |= _BV(COM4A1);
    6f06:	a0 ea       	ldi	r26, 0xA0	; 160
    6f08:	b0 e0       	ldi	r27, 0x00	; 0
    6f0a:	e0 ea       	ldi	r30, 0xA0	; 160
    6f0c:	f0 e0       	ldi	r31, 0x00	; 0
    6f0e:	80 81       	ld	r24, Z
    6f10:	80 68       	ori	r24, 0x80	; 128
    6f12:	8c 93       	st	X, r24
			}
			OS_EXIT_CRITICAL();
    6f14:	8a 81       	ldd	r24, Y+2	; 0x02
    6f16:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    6f1a:	93 c0       	rjmp	.+294    	; 0x7042 <motor_speed+0x358>
			break;

		case 2:
			if (speed > 0) {
    6f1c:	8c 81       	ldd	r24, Y+4	; 0x04
    6f1e:	18 16       	cp	r1, r24
    6f20:	ac f4       	brge	.+42     	; 0x6f4c <motor_speed+0x262>
				// CW
				// New value in OCR4B register
				OCR4B = ocrx_value;
    6f22:	ea ea       	ldi	r30, 0xAA	; 170
    6f24:	f0 e0       	ldi	r31, 0x00	; 0
    6f26:	89 81       	ldd	r24, Y+1	; 0x01
    6f28:	88 2f       	mov	r24, r24
    6f2a:	90 e0       	ldi	r25, 0x00	; 0
    6f2c:	91 83       	std	Z+1, r25	; 0x01
    6f2e:	80 83       	st	Z, r24
				// Set OC4C high by setting OCR4C to TOP
				OCR4C = 0xFF;
    6f30:	ec ea       	ldi	r30, 0xAC	; 172
    6f32:	f0 e0       	ldi	r31, 0x00	; 0
    6f34:	8f ef       	ldi	r24, 0xFF	; 255
    6f36:	90 e0       	ldi	r25, 0x00	; 0
    6f38:	91 83       	std	Z+1, r25	; 0x01
    6f3a:	80 83       	st	Z, r24
				// set OC4B & OC4C to Clear on compare
				TCCR4A |= _BV(COM4B1) | _BV(COM4C1);
    6f3c:	a0 ea       	ldi	r26, 0xA0	; 160
    6f3e:	b0 e0       	ldi	r27, 0x00	; 0
    6f40:	e0 ea       	ldi	r30, 0xA0	; 160
    6f42:	f0 e0       	ldi	r31, 0x00	; 0
    6f44:	80 81       	ld	r24, Z
    6f46:	88 62       	ori	r24, 0x28	; 40
    6f48:	8c 93       	st	X, r24
    6f4a:	2c c0       	rjmp	.+88     	; 0x6fa4 <motor_speed+0x2ba>
			} else if (speed == 0) {
    6f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    6f4e:	88 23       	and	r24, r24
    6f50:	a9 f4       	brne	.+42     	; 0x6f7c <motor_speed+0x292>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR4B = OCR4C = 0xFF;
    6f52:	aa ea       	ldi	r26, 0xAA	; 170
    6f54:	b0 e0       	ldi	r27, 0x00	; 0
    6f56:	ec ea       	ldi	r30, 0xAC	; 172
    6f58:	f0 e0       	ldi	r31, 0x00	; 0
    6f5a:	8f ef       	ldi	r24, 0xFF	; 255
    6f5c:	90 e0       	ldi	r25, 0x00	; 0
    6f5e:	91 83       	std	Z+1, r25	; 0x01
    6f60:	80 83       	st	Z, r24
    6f62:	80 81       	ld	r24, Z
    6f64:	91 81       	ldd	r25, Z+1	; 0x01
    6f66:	11 96       	adiw	r26, 0x01	; 1
    6f68:	9c 93       	st	X, r25
    6f6a:	8e 93       	st	-X, r24
				// Compare output mode: Set OC4B, OC4C on BOTTOM and clear OC4B, OC4C on compare match
				TCCR4A |= _BV(COM4B1) | _BV(COM4C1);
    6f6c:	a0 ea       	ldi	r26, 0xA0	; 160
    6f6e:	b0 e0       	ldi	r27, 0x00	; 0
    6f70:	e0 ea       	ldi	r30, 0xA0	; 160
    6f72:	f0 e0       	ldi	r31, 0x00	; 0
    6f74:	80 81       	ld	r24, Z
    6f76:	88 62       	ori	r24, 0x28	; 40
    6f78:	8c 93       	st	X, r24
    6f7a:	14 c0       	rjmp	.+40     	; 0x6fa4 <motor_speed+0x2ba>
			} else {
				// CCW
				// New value in OCR4C register
				OCR4C = ocrx_value;
    6f7c:	ec ea       	ldi	r30, 0xAC	; 172
    6f7e:	f0 e0       	ldi	r31, 0x00	; 0
    6f80:	89 81       	ldd	r24, Y+1	; 0x01
    6f82:	88 2f       	mov	r24, r24
    6f84:	90 e0       	ldi	r25, 0x00	; 0
    6f86:	91 83       	std	Z+1, r25	; 0x01
    6f88:	80 83       	st	Z, r24
				// Set OC4B high by setting OCR4B to TOP
				OCR4B = 0xFF;
    6f8a:	ea ea       	ldi	r30, 0xAA	; 170
    6f8c:	f0 e0       	ldi	r31, 0x00	; 0
    6f8e:	8f ef       	ldi	r24, 0xFF	; 255
    6f90:	90 e0       	ldi	r25, 0x00	; 0
    6f92:	91 83       	std	Z+1, r25	; 0x01
    6f94:	80 83       	st	Z, r24
				// set OC4B & OC4C to Clear on compare
				TCCR4A |= _BV(COM4B1) | _BV(COM4C1);
    6f96:	a0 ea       	ldi	r26, 0xA0	; 160
    6f98:	b0 e0       	ldi	r27, 0x00	; 0
    6f9a:	e0 ea       	ldi	r30, 0xA0	; 160
    6f9c:	f0 e0       	ldi	r31, 0x00	; 0
    6f9e:	80 81       	ld	r24, Z
    6fa0:	88 62       	ori	r24, 0x28	; 40
    6fa2:	8c 93       	st	X, r24
			}
			OS_EXIT_CRITICAL();
    6fa4:	8a 81       	ldd	r24, Y+2	; 0x02
    6fa6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    6faa:	4b c0       	rjmp	.+150    	; 0x7042 <motor_speed+0x358>
			break;

		case 3:
			if (speed > 0) {
    6fac:	8c 81       	ldd	r24, Y+4	; 0x04
    6fae:	18 16       	cp	r1, r24
    6fb0:	ac f4       	brge	.+42     	; 0x6fdc <motor_speed+0x2f2>
				// CW
				// New value in OCR5A register
				OCR5A = ocrx_value;
    6fb2:	e8 e2       	ldi	r30, 0x28	; 40
    6fb4:	f1 e0       	ldi	r31, 0x01	; 1
    6fb6:	89 81       	ldd	r24, Y+1	; 0x01
    6fb8:	88 2f       	mov	r24, r24
    6fba:	90 e0       	ldi	r25, 0x00	; 0
    6fbc:	91 83       	std	Z+1, r25	; 0x01
    6fbe:	80 83       	st	Z, r24
				// Set OC5B high by setting OCR5B to TOP
				OCR5B = 0xFF;
    6fc0:	ea e2       	ldi	r30, 0x2A	; 42
    6fc2:	f1 e0       	ldi	r31, 0x01	; 1
    6fc4:	8f ef       	ldi	r24, 0xFF	; 255
    6fc6:	90 e0       	ldi	r25, 0x00	; 0
    6fc8:	91 83       	std	Z+1, r25	; 0x01
    6fca:	80 83       	st	Z, r24
				// set OC5A & OC5B to Clear on compare
				TCCR5A |= _BV(COM5A1) | _BV(COM5C1);
    6fcc:	a0 e2       	ldi	r26, 0x20	; 32
    6fce:	b1 e0       	ldi	r27, 0x01	; 1
    6fd0:	e0 e2       	ldi	r30, 0x20	; 32
    6fd2:	f1 e0       	ldi	r31, 0x01	; 1
    6fd4:	80 81       	ld	r24, Z
    6fd6:	88 68       	ori	r24, 0x88	; 136
    6fd8:	8c 93       	st	X, r24
    6fda:	2c c0       	rjmp	.+88     	; 0x7034 <motor_speed+0x34a>
			} else if (speed == 0) {
    6fdc:	8c 81       	ldd	r24, Y+4	; 0x04
    6fde:	88 23       	and	r24, r24
    6fe0:	a9 f4       	brne	.+42     	; 0x700c <motor_speed+0x322>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR5A = OCR5B = 0xFF;
    6fe2:	a8 e2       	ldi	r26, 0x28	; 40
    6fe4:	b1 e0       	ldi	r27, 0x01	; 1
    6fe6:	ea e2       	ldi	r30, 0x2A	; 42
    6fe8:	f1 e0       	ldi	r31, 0x01	; 1
    6fea:	8f ef       	ldi	r24, 0xFF	; 255
    6fec:	90 e0       	ldi	r25, 0x00	; 0
    6fee:	91 83       	std	Z+1, r25	; 0x01
    6ff0:	80 83       	st	Z, r24
    6ff2:	80 81       	ld	r24, Z
    6ff4:	91 81       	ldd	r25, Z+1	; 0x01
    6ff6:	11 96       	adiw	r26, 0x01	; 1
    6ff8:	9c 93       	st	X, r25
    6ffa:	8e 93       	st	-X, r24
				// Compare output mode: Set OC5A, OC5B on BOTTOM and clear OC5A, OC5B on compare match
				TCCR5A |= _BV(COM5A1) | _BV(COM5B1);
    6ffc:	a0 e2       	ldi	r26, 0x20	; 32
    6ffe:	b1 e0       	ldi	r27, 0x01	; 1
    7000:	e0 e2       	ldi	r30, 0x20	; 32
    7002:	f1 e0       	ldi	r31, 0x01	; 1
    7004:	80 81       	ld	r24, Z
    7006:	80 6a       	ori	r24, 0xA0	; 160
    7008:	8c 93       	st	X, r24
    700a:	14 c0       	rjmp	.+40     	; 0x7034 <motor_speed+0x34a>
			} else {
				// CCW
				// New value in OCR5B register
				OCR5B = ocrx_value;
    700c:	ea e2       	ldi	r30, 0x2A	; 42
    700e:	f1 e0       	ldi	r31, 0x01	; 1
    7010:	89 81       	ldd	r24, Y+1	; 0x01
    7012:	88 2f       	mov	r24, r24
    7014:	90 e0       	ldi	r25, 0x00	; 0
    7016:	91 83       	std	Z+1, r25	; 0x01
    7018:	80 83       	st	Z, r24
				// Set OC5A high by setting OCR5A to TOP
				OCR5A = 0xFF;
    701a:	e8 e2       	ldi	r30, 0x28	; 40
    701c:	f1 e0       	ldi	r31, 0x01	; 1
    701e:	8f ef       	ldi	r24, 0xFF	; 255
    7020:	90 e0       	ldi	r25, 0x00	; 0
    7022:	91 83       	std	Z+1, r25	; 0x01
    7024:	80 83       	st	Z, r24
				// set OC5A & OC5B to Clear on compare
				TCCR5A |= _BV(COM5A1) | _BV(COM5C1);
    7026:	a0 e2       	ldi	r26, 0x20	; 32
    7028:	b1 e0       	ldi	r27, 0x01	; 1
    702a:	e0 e2       	ldi	r30, 0x20	; 32
    702c:	f1 e0       	ldi	r31, 0x01	; 1
    702e:	80 81       	ld	r24, Z
    7030:	88 68       	ori	r24, 0x88	; 136
    7032:	8c 93       	st	X, r24
			}
			OS_EXIT_CRITICAL();
    7034:	8a 81       	ldd	r24, Y+2	; 0x02
    7036:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    703a:	03 c0       	rjmp	.+6      	; 0x7042 <motor_speed+0x358>
			break;

		default:
			OS_EXIT_CRITICAL();
    703c:	8a 81       	ldd	r24, Y+2	; 0x02
    703e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
		}
	}
}
    7042:	28 96       	adiw	r28, 0x08	; 8
    7044:	0f b6       	in	r0, 0x3f	; 63
    7046:	f8 94       	cli
    7048:	de bf       	out	0x3e, r29	; 62
    704a:	0f be       	out	0x3f, r0	; 63
    704c:	cd bf       	out	0x3d, r28	; 61
    704e:	cf 91       	pop	r28
    7050:	df 91       	pop	r29
    7052:	08 95       	ret

00007054 <brake_motor>:
 * Brakes the motor connected to the specified motor output/H-Bridge. The brake is established by
 * shorting the motor terminals with the H-Bridge.
 *	\param motor_no specifies the motor output on the interface board [0..3].
 *********************************************************************************************************
 */
void brake_motor(INT8U motor_no) {
    7054:	df 93       	push	r29
    7056:	cf 93       	push	r28
    7058:	00 d0       	rcall	.+0      	; 0x705a <brake_motor+0x6>
    705a:	0f 92       	push	r0
    705c:	cd b7       	in	r28, 0x3d	; 61
    705e:	de b7       	in	r29, 0x3e	; 62
    7060:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
	OS_CPU_SR cpu_sr = 0;
    7062:	19 82       	std	Y+1, r1	; 0x01
#endif

	OS_ENTER_CRITICAL();
    7064:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7068:	89 83       	std	Y+1, r24	; 0x01

	if (!motor_braked[motor_no]) {
    706a:	8a 81       	ldd	r24, Y+2	; 0x02
    706c:	88 2f       	mov	r24, r24
    706e:	90 e0       	ldi	r25, 0x00	; 0
    7070:	fc 01       	movw	r30, r24
    7072:	ed 52       	subi	r30, 0x2D	; 45
    7074:	fb 4f       	sbci	r31, 0xFB	; 251
    7076:	80 81       	ld	r24, Z
    7078:	88 23       	and	r24, r24
    707a:	09 f0       	breq	.+2      	; 0x707e <brake_motor+0x2a>
    707c:	5d c0       	rjmp	.+186    	; 0x7138 <brake_motor+0xe4>
		motor_braked[motor_no] = 1;
    707e:	8a 81       	ldd	r24, Y+2	; 0x02
    7080:	88 2f       	mov	r24, r24
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	fc 01       	movw	r30, r24
    7086:	ed 52       	subi	r30, 0x2D	; 45
    7088:	fb 4f       	sbci	r31, 0xFB	; 251
    708a:	81 e0       	ldi	r24, 0x01	; 1
    708c:	80 83       	st	Z, r24

		switch (motor_no) {
    708e:	8a 81       	ldd	r24, Y+2	; 0x02
    7090:	28 2f       	mov	r18, r24
    7092:	30 e0       	ldi	r19, 0x00	; 0
    7094:	3c 83       	std	Y+4, r19	; 0x04
    7096:	2b 83       	std	Y+3, r18	; 0x03
    7098:	8b 81       	ldd	r24, Y+3	; 0x03
    709a:	9c 81       	ldd	r25, Y+4	; 0x04
    709c:	81 30       	cpi	r24, 0x01	; 1
    709e:	91 05       	cpc	r25, r1
    70a0:	01 f1       	breq	.+64     	; 0x70e2 <brake_motor+0x8e>
    70a2:	2b 81       	ldd	r18, Y+3	; 0x03
    70a4:	3c 81       	ldd	r19, Y+4	; 0x04
    70a6:	22 30       	cpi	r18, 0x02	; 2
    70a8:	31 05       	cpc	r19, r1
    70aa:	2c f4       	brge	.+10     	; 0x70b6 <brake_motor+0x62>
    70ac:	8b 81       	ldd	r24, Y+3	; 0x03
    70ae:	9c 81       	ldd	r25, Y+4	; 0x04
    70b0:	00 97       	sbiw	r24, 0x00	; 0
    70b2:	61 f0       	breq	.+24     	; 0x70cc <brake_motor+0x78>
    70b4:	3e c0       	rjmp	.+124    	; 0x7132 <brake_motor+0xde>
    70b6:	2b 81       	ldd	r18, Y+3	; 0x03
    70b8:	3c 81       	ldd	r19, Y+4	; 0x04
    70ba:	22 30       	cpi	r18, 0x02	; 2
    70bc:	31 05       	cpc	r19, r1
    70be:	19 f1       	breq	.+70     	; 0x7106 <brake_motor+0xb2>
    70c0:	8b 81       	ldd	r24, Y+3	; 0x03
    70c2:	9c 81       	ldd	r25, Y+4	; 0x04
    70c4:	83 30       	cpi	r24, 0x03	; 3
    70c6:	91 05       	cpc	r25, r1
    70c8:	49 f1       	breq	.+82     	; 0x711c <brake_motor+0xc8>
    70ca:	33 c0       	rjmp	.+102    	; 0x7132 <brake_motor+0xde>
		case 0:
			// Normal port operation
			TCCR1A &= ~(_BV(COM1A1) | _BV(COM1B1));
    70cc:	a0 e8       	ldi	r26, 0x80	; 128
    70ce:	b0 e0       	ldi	r27, 0x00	; 0
    70d0:	e0 e8       	ldi	r30, 0x80	; 128
    70d2:	f0 e0       	ldi	r31, 0x00	; 0
    70d4:	80 81       	ld	r24, Z
    70d6:	8f 75       	andi	r24, 0x5F	; 95
    70d8:	8c 93       	st	X, r24
			OS_EXIT_CRITICAL();
    70da:	89 81       	ldd	r24, Y+1	; 0x01
    70dc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    70e0:	2b c0       	rjmp	.+86     	; 0x7138 <brake_motor+0xe4>
			break;

		case 1:
			// Normal port operation
			TCCR1A &= ~_BV(COM1C1);
    70e2:	a0 e8       	ldi	r26, 0x80	; 128
    70e4:	b0 e0       	ldi	r27, 0x00	; 0
    70e6:	e0 e8       	ldi	r30, 0x80	; 128
    70e8:	f0 e0       	ldi	r31, 0x00	; 0
    70ea:	80 81       	ld	r24, Z
    70ec:	87 7f       	andi	r24, 0xF7	; 247
    70ee:	8c 93       	st	X, r24
			TCCR4A &= ~_BV(COM4A1);
    70f0:	a0 ea       	ldi	r26, 0xA0	; 160
    70f2:	b0 e0       	ldi	r27, 0x00	; 0
    70f4:	e0 ea       	ldi	r30, 0xA0	; 160
    70f6:	f0 e0       	ldi	r31, 0x00	; 0
    70f8:	80 81       	ld	r24, Z
    70fa:	8f 77       	andi	r24, 0x7F	; 127
    70fc:	8c 93       	st	X, r24
			OS_EXIT_CRITICAL();
    70fe:	89 81       	ldd	r24, Y+1	; 0x01
    7100:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    7104:	19 c0       	rjmp	.+50     	; 0x7138 <brake_motor+0xe4>
			break;

		case 2:
			// Normal port operation
			TCCR4A &= ~(_BV(COM4B1) | _BV(COM4C1));
    7106:	a0 ea       	ldi	r26, 0xA0	; 160
    7108:	b0 e0       	ldi	r27, 0x00	; 0
    710a:	e0 ea       	ldi	r30, 0xA0	; 160
    710c:	f0 e0       	ldi	r31, 0x00	; 0
    710e:	80 81       	ld	r24, Z
    7110:	87 7d       	andi	r24, 0xD7	; 215
    7112:	8c 93       	st	X, r24
			OS_EXIT_CRITICAL();
    7114:	89 81       	ldd	r24, Y+1	; 0x01
    7116:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    711a:	0e c0       	rjmp	.+28     	; 0x7138 <brake_motor+0xe4>
			break;

		case 3:
			// Normal port operation
			TCCR5A &= ~(_BV(COM5A1) | _BV(COM5B1));
    711c:	a0 e2       	ldi	r26, 0x20	; 32
    711e:	b1 e0       	ldi	r27, 0x01	; 1
    7120:	e0 e2       	ldi	r30, 0x20	; 32
    7122:	f1 e0       	ldi	r31, 0x01	; 1
    7124:	80 81       	ld	r24, Z
    7126:	8f 75       	andi	r24, 0x5F	; 95
    7128:	8c 93       	st	X, r24
			OS_EXIT_CRITICAL();
    712a:	89 81       	ldd	r24, Y+1	; 0x01
    712c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    7130:	03 c0       	rjmp	.+6      	; 0x7138 <brake_motor+0xe4>
			break;

		default:
			OS_EXIT_CRITICAL();
    7132:	89 81       	ldd	r24, Y+1	; 0x01
    7134:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
		}
	}
}
    7138:	0f 90       	pop	r0
    713a:	0f 90       	pop	r0
    713c:	0f 90       	pop	r0
    713e:	0f 90       	pop	r0
    7140:	cf 91       	pop	r28
    7142:	df 91       	pop	r29
    7144:	08 95       	ret

00007146 <__vector_32>:
 *	Handles the timing for start of the scanning of the sensor inputs via the ADC.
 *	First all sensors are powered of. Then the first conversion on ADC-channel/mux 0 is started.
 *********************************************************************************************************
 */
ISR(TIMER3_COMPA_vect)
{
    7146:	1f 92       	push	r1
    7148:	0f 92       	push	r0
    714a:	0f b6       	in	r0, 0x3f	; 63
    714c:	0f 92       	push	r0
    714e:	00 90 5b 00 	lds	r0, 0x005B
    7152:	0f 92       	push	r0
    7154:	11 24       	eor	r1, r1
    7156:	8f 93       	push	r24
    7158:	9f 93       	push	r25
    715a:	af 93       	push	r26
    715c:	bf 93       	push	r27
    715e:	ef 93       	push	r30
    7160:	ff 93       	push	r31
    7162:	df 93       	push	r29
    7164:	cf 93       	push	r28
    7166:	cd b7       	in	r28, 0x3d	; 61
    7168:	de b7       	in	r29, 0x3e	; 62
	// Setup PORTF to input => means power off to sensors
	DDRF = 0x00;
    716a:	e0 e3       	ldi	r30, 0x30	; 48
    716c:	f0 e0       	ldi	r31, 0x00	; 0
    716e:	10 82       	st	Z, r1
	PORTF = 0x00;
    7170:	e1 e3       	ldi	r30, 0x31	; 49
    7172:	f0 e0       	ldi	r31, 0x00	; 0
    7174:	10 82       	st	Z, r1

	// Start conversion on next channel
	ADMUX = (ADMUX & 0b11111000) + sensor_channel;
    7176:	ac e7       	ldi	r26, 0x7C	; 124
    7178:	b0 e0       	ldi	r27, 0x00	; 0
    717a:	ec e7       	ldi	r30, 0x7C	; 124
    717c:	f0 e0       	ldi	r31, 0x00	; 0
    717e:	80 81       	ld	r24, Z
    7180:	98 2f       	mov	r25, r24
    7182:	98 7f       	andi	r25, 0xF8	; 248
    7184:	80 91 d2 04 	lds	r24, 0x04D2
    7188:	89 0f       	add	r24, r25
    718a:	8c 93       	st	X, r24
	// Start conversion
	ADCSRA |= _BV(ADSC);
    718c:	aa e7       	ldi	r26, 0x7A	; 122
    718e:	b0 e0       	ldi	r27, 0x00	; 0
    7190:	ea e7       	ldi	r30, 0x7A	; 122
    7192:	f0 e0       	ldi	r31, 0x00	; 0
    7194:	80 81       	ld	r24, Z
    7196:	80 64       	ori	r24, 0x40	; 64
    7198:	8c 93       	st	X, r24
}
    719a:	cf 91       	pop	r28
    719c:	df 91       	pop	r29
    719e:	ff 91       	pop	r31
    71a0:	ef 91       	pop	r30
    71a2:	bf 91       	pop	r27
    71a4:	af 91       	pop	r26
    71a6:	9f 91       	pop	r25
    71a8:	8f 91       	pop	r24
    71aa:	0f 90       	pop	r0
    71ac:	00 92 5b 00 	sts	0x005B, r0
    71b0:	0f 90       	pop	r0
    71b2:	0f be       	out	0x3f, r0	; 63
    71b4:	0f 90       	pop	r0
    71b6:	1f 90       	pop	r1
    71b8:	18 95       	reti

000071ba <__vector_29>:
 * sensor input and starts a new ADC conversion. If it was the last sensor that was scanned then
 * all sensors are powered on again.
 *********************************************************************************************************
 */
ISR(ADC_vect)
{
    71ba:	1f 92       	push	r1
    71bc:	0f 92       	push	r0
    71be:	0f b6       	in	r0, 0x3f	; 63
    71c0:	0f 92       	push	r0
    71c2:	00 90 5b 00 	lds	r0, 0x005B
    71c6:	0f 92       	push	r0
    71c8:	11 24       	eor	r1, r1
    71ca:	2f 93       	push	r18
    71cc:	3f 93       	push	r19
    71ce:	8f 93       	push	r24
    71d0:	9f 93       	push	r25
    71d2:	af 93       	push	r26
    71d4:	bf 93       	push	r27
    71d6:	ef 93       	push	r30
    71d8:	ff 93       	push	r31
    71da:	df 93       	push	r29
    71dc:	cf 93       	push	r28
    71de:	cd b7       	in	r28, 0x3d	; 61
    71e0:	de b7       	in	r29, 0x3e	; 62
	sensor_result[sensor_channel] = ADC;
    71e2:	80 91 d2 04 	lds	r24, 0x04D2
    71e6:	88 2f       	mov	r24, r24
    71e8:	90 e0       	ldi	r25, 0x00	; 0
    71ea:	e8 e7       	ldi	r30, 0x78	; 120
    71ec:	f0 e0       	ldi	r31, 0x00	; 0
    71ee:	20 81       	ld	r18, Z
    71f0:	31 81       	ldd	r19, Z+1	; 0x01
    71f2:	88 0f       	add	r24, r24
    71f4:	99 1f       	adc	r25, r25
    71f6:	fc 01       	movw	r30, r24
    71f8:	e5 52       	subi	r30, 0x25	; 37
    71fa:	fb 4f       	sbci	r31, 0xFB	; 251
    71fc:	31 83       	std	Z+1, r19	; 0x01
    71fe:	20 83       	st	Z, r18

	if (sensor_channel < 7) {
    7200:	80 91 d2 04 	lds	r24, 0x04D2
    7204:	87 30       	cpi	r24, 0x07	; 7
    7206:	c0 f4       	brcc	.+48     	; 0x7238 <__vector_29+0x7e>
		ADMUX = (ADMUX & 0b11111000) + ++sensor_channel;
    7208:	ac e7       	ldi	r26, 0x7C	; 124
    720a:	b0 e0       	ldi	r27, 0x00	; 0
    720c:	ec e7       	ldi	r30, 0x7C	; 124
    720e:	f0 e0       	ldi	r31, 0x00	; 0
    7210:	80 81       	ld	r24, Z
    7212:	98 2f       	mov	r25, r24
    7214:	98 7f       	andi	r25, 0xF8	; 248
    7216:	80 91 d2 04 	lds	r24, 0x04D2
    721a:	8f 5f       	subi	r24, 0xFF	; 255
    721c:	80 93 d2 04 	sts	0x04D2, r24
    7220:	80 91 d2 04 	lds	r24, 0x04D2
    7224:	89 0f       	add	r24, r25
    7226:	8c 93       	st	X, r24
		// Start conversion
		ADCSRA |= _BV(ADSC);
    7228:	aa e7       	ldi	r26, 0x7A	; 122
    722a:	b0 e0       	ldi	r27, 0x00	; 0
    722c:	ea e7       	ldi	r30, 0x7A	; 122
    722e:	f0 e0       	ldi	r31, 0x00	; 0
    7230:	80 81       	ld	r24, Z
    7232:	80 64       	ori	r24, 0x40	; 64
    7234:	8c 93       	st	X, r24
    7236:	0a c0       	rjmp	.+20     	; 0x724c <__vector_29+0x92>
	} else {
		// power on all sensors
		DDRF = 0xFF;
    7238:	e0 e3       	ldi	r30, 0x30	; 48
    723a:	f0 e0       	ldi	r31, 0x00	; 0
    723c:	8f ef       	ldi	r24, 0xFF	; 255
    723e:	80 83       	st	Z, r24
		PORTF = 0xFF;
    7240:	e1 e3       	ldi	r30, 0x31	; 49
    7242:	f0 e0       	ldi	r31, 0x00	; 0
    7244:	8f ef       	ldi	r24, 0xFF	; 255
    7246:	80 83       	st	Z, r24

		// Prepare next scan
		sensor_channel = 0;
    7248:	10 92 d2 04 	sts	0x04D2, r1
	}
}
    724c:	cf 91       	pop	r28
    724e:	df 91       	pop	r29
    7250:	ff 91       	pop	r31
    7252:	ef 91       	pop	r30
    7254:	bf 91       	pop	r27
    7256:	af 91       	pop	r26
    7258:	9f 91       	pop	r25
    725a:	8f 91       	pop	r24
    725c:	3f 91       	pop	r19
    725e:	2f 91       	pop	r18
    7260:	0f 90       	pop	r0
    7262:	00 92 5b 00 	sts	0x005B, r0
    7266:	0f 90       	pop	r0
    7268:	0f be       	out	0x3f, r0	; 63
    726a:	0f 90       	pop	r0
    726c:	1f 90       	pop	r1
    726e:	18 95       	reti

00007270 <main>:
*             OS_CFG.H.
**************************************************************************************************************
*/

int  main (void)
{
    7270:	8f 92       	push	r8
    7272:	9f 92       	push	r9
    7274:	af 92       	push	r10
    7276:	bf 92       	push	r11
    7278:	cf 92       	push	r12
    727a:	df 92       	push	r13
    727c:	ef 92       	push	r14
    727e:	ff 92       	push	r15
    7280:	0f 93       	push	r16
    7282:	1f 93       	push	r17
    7284:	df 93       	push	r29
    7286:	cf 93       	push	r28
    7288:	cd b7       	in	r28, 0x3d	; 61
    728a:	de b7       	in	r29, 0x3e	; 62
#if (OS_TASK_NAME_SIZE > 14) && (OS_TASK_STAT_EN > 0)
    INT8U  err;
#endif

    DDRB = 0x0F;  // TODO IHA Remove after test
    728c:	e4 e2       	ldi	r30, 0x24	; 36
    728e:	f0 e0       	ldi	r31, 0x00	; 0
    7290:	8f e0       	ldi	r24, 0x0F	; 15
    7292:	80 83       	st	Z, r24

    /*---- Any initialization code prior to calling OSInit() goes HERE -------------------------------------*/

                                                     /* IMPORTANT: MUST be setup before calling 'OSInit()'  */
    OSTaskStkSize     = OS_TASK_IDLE_STK_SIZE;       /* Setup the default stack size                        */
    7294:	8f ea       	ldi	r24, 0xAF	; 175
    7296:	90 e0       	ldi	r25, 0x00	; 0
    7298:	90 93 ec 04 	sts	0x04EC, r25
    729c:	80 93 eb 04 	sts	0x04EB, r24
//    OSTaskStkSizeHard = OS_TASK_STK_SIZE_HARD;       /* Setup the default hardware stack size               */

    OSInit();                                        /* Initialize "uC/OS-II, The Real-Time Kernel"         */
    72a0:	0e 94 22 05 	call	0xa44	; 0xa44 <OSInit>

    /*---- Any initialization code before starting multitasking --------------------------------------------*/
    OSTaskStkSize     = OS_TASK_START_STK_SIZE;
    72a4:	80 ef       	ldi	r24, 0xF0	; 240
    72a6:	90 e0       	ldi	r25, 0x00	; 0
    72a8:	90 93 ec 04 	sts	0x04EC, r25
    72ac:	80 93 eb 04 	sts	0x04EB, r24

    OSTaskCreateExt(AppTaskStart,
    72b0:	80 91 eb 04 	lds	r24, 0x04EB
    72b4:	90 91 ec 04 	lds	r25, 0x04EC
    72b8:	01 97       	sbiw	r24, 0x01	; 1
    72ba:	ac 01       	movw	r20, r24
    72bc:	4a 50       	subi	r20, 0x0A	; 10
    72be:	53 4f       	sbci	r21, 0xF3	; 243
    72c0:	80 91 eb 04 	lds	r24, 0x04EB
    72c4:	90 91 ec 04 	lds	r25, 0x04EC
    72c8:	5c 01       	movw	r10, r24
    72ca:	cc 24       	eor	r12, r12
    72cc:	dd 24       	eor	r13, r13
    72ce:	0f 92       	push	r0
    72d0:	0f 92       	push	r0
    72d2:	ed b7       	in	r30, 0x3d	; 61
    72d4:	fe b7       	in	r31, 0x3e	; 62
    72d6:	31 96       	adiw	r30, 0x01	; 1
    72d8:	2a e9       	ldi	r18, 0x9A	; 154
    72da:	39 e3       	ldi	r19, 0x39	; 57
    72dc:	a6 ef       	ldi	r26, 0xF6	; 246
    72de:	bc e0       	ldi	r27, 0x0C	; 12
    72e0:	83 e0       	ldi	r24, 0x03	; 3
    72e2:	90 e0       	ldi	r25, 0x00	; 0
    72e4:	91 83       	std	Z+1, r25	; 0x01
    72e6:	80 83       	st	Z, r24
    72e8:	c9 01       	movw	r24, r18
    72ea:	60 e0       	ldi	r22, 0x00	; 0
    72ec:	70 e0       	ldi	r23, 0x00	; 0
    72ee:	20 e0       	ldi	r18, 0x00	; 0
    72f0:	00 e0       	ldi	r16, 0x00	; 0
    72f2:	10 e0       	ldi	r17, 0x00	; 0
    72f4:	7d 01       	movw	r14, r26
    72f6:	88 24       	eor	r8, r8
    72f8:	99 24       	eor	r9, r9
    72fa:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <OSTaskCreateExt>
    72fe:	0f 90       	pop	r0
    7300:	0f 90       	pop	r0

#if (OS_TASK_NAME_SIZE > 14) && (OS_TASK_STAT_EN > 0)
    OSTaskNameSet(OS_TASK_START_PRIO, "Start Task", &err);
#endif

    a_sem = OSSemCreate(0);   // create a semaphore
    7302:	80 e0       	ldi	r24, 0x00	; 0
    7304:	90 e0       	ldi	r25, 0x00	; 0
    7306:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <OSSemCreate>
    730a:	90 93 e7 0d 	sts	0x0DE7, r25
    730e:	80 93 e6 0d 	sts	0x0DE6, r24

    /*---- Create any other task you want before we start multitasking -------------------------------------*/

    OSStart();                                       /* Start multitasking (i.e. give control to uC/OS-II)  */
    7312:	0e 94 05 06 	call	0xc0a	; 0xc0a <OSStart>
    return 0;
    7316:	80 e0       	ldi	r24, 0x00	; 0
    7318:	90 e0       	ldi	r25, 0x00	; 0
}
    731a:	cf 91       	pop	r28
    731c:	df 91       	pop	r29
    731e:	1f 91       	pop	r17
    7320:	0f 91       	pop	r16
    7322:	ff 90       	pop	r15
    7324:	ef 90       	pop	r14
    7326:	df 90       	pop	r13
    7328:	cf 90       	pop	r12
    732a:	bf 90       	pop	r11
    732c:	af 90       	pop	r10
    732e:	9f 90       	pop	r9
    7330:	8f 90       	pop	r8
    7332:	08 95       	ret

00007334 <AppTaskStart>:
*                  used.  The compiler should not generate any code for this statement.
**************************************************************************************************************
*/

static void  AppTaskStart (void *p_arg)
{
    7334:	df 93       	push	r29
    7336:	cf 93       	push	r28
    7338:	00 d0       	rcall	.+0      	; 0x733a <AppTaskStart+0x6>
    733a:	00 d0       	rcall	.+0      	; 0x733c <AppTaskStart+0x8>
    733c:	cd b7       	in	r28, 0x3d	; 61
    733e:	de b7       	in	r29, 0x3e	; 62
    7340:	9e 83       	std	Y+6, r25	; 0x06
    7342:	8d 83       	std	Y+5, r24	; 0x05
    INT8U  i;
    INT8U err;

    (void)p_arg;                                 /* Prevent compiler warnings                          */

    BSP_Init();                                  /* Initialize the BSP                                 */
    7344:	0e 94 62 3b 	call	0x76c4	; 0x76c4 <BSP_Init>

    AppTaskCreate();
    7348:	0e 94 b1 39 	call	0x7362	; 0x7362 <AppTaskCreate>

    while (1) {                                  /* Task body, always written as an infinite loop.     */

    	INT8U motor_no = 1;
    734c:	81 e0       	ldi	r24, 0x01	; 1
    734e:	8a 83       	std	Y+2, r24	; 0x02
    	INT8S speed = 100;
    7350:	84 e6       	ldi	r24, 0x64	; 100
    7352:	89 83       	std	Y+1, r24	; 0x01

    	init_lego_interface();
    7354:	0e 94 16 35 	call	0x6a2c	; 0x6a2c <init_lego_interface>

    	motor_speed(motor_no, speed);
    7358:	8a 81       	ldd	r24, Y+2	; 0x02
    735a:	69 81       	ldd	r22, Y+1	; 0x01
    735c:	0e 94 75 36 	call	0x6cea	; 0x6cea <motor_speed>
    7360:	f5 cf       	rjmp	.-22     	; 0x734c <AppTaskStart+0x18>

00007362 <AppTaskCreate>:
*                  used.  The compiler should not generate any code for this statement.
**************************************************************************************************************
*/

static  void  AppTaskCreate (void)
{
    7362:	8f 92       	push	r8
    7364:	9f 92       	push	r9
    7366:	af 92       	push	r10
    7368:	bf 92       	push	r11
    736a:	cf 92       	push	r12
    736c:	df 92       	push	r13
    736e:	ef 92       	push	r14
    7370:	ff 92       	push	r15
    7372:	0f 93       	push	r16
    7374:	1f 93       	push	r17
    7376:	df 93       	push	r29
    7378:	cf 93       	push	r28
    737a:	cd b7       	in	r28, 0x3d	; 61
    737c:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;
#endif


    /*---- Task initialization code goes HERE! --------------------------------------------------------*/
    OSTaskStkSize     = OS_TASK_1_STK_SIZE;        /* Setup the default stack size                     */
    737e:	80 ef       	ldi	r24, 0xF0	; 240
    7380:	90 e0       	ldi	r25, 0x00	; 0
    7382:	90 93 ec 04 	sts	0x04EC, r25
    7386:	80 93 eb 04 	sts	0x04EB, r24
//    OSTaskStkSizeHard = OS_TASK_STK_SIZE_HARD;     /* Setup the default hardware stack size            */
    OSTaskCreateExt(AppTask1,
    738a:	80 91 eb 04 	lds	r24, 0x04EB
    738e:	90 91 ec 04 	lds	r25, 0x04EC
    7392:	01 97       	sbiw	r24, 0x01	; 1
    7394:	ac 01       	movw	r20, r24
    7396:	4a 5f       	subi	r20, 0xFA	; 250
    7398:	53 4f       	sbci	r21, 0xF3	; 243
    739a:	80 91 eb 04 	lds	r24, 0x04EB
    739e:	90 91 ec 04 	lds	r25, 0x04EC
    73a2:	5c 01       	movw	r10, r24
    73a4:	cc 24       	eor	r12, r12
    73a6:	dd 24       	eor	r13, r13
    73a8:	0f 92       	push	r0
    73aa:	0f 92       	push	r0
    73ac:	ed b7       	in	r30, 0x3d	; 61
    73ae:	fe b7       	in	r31, 0x3e	; 62
    73b0:	31 96       	adiw	r30, 0x01	; 1
    73b2:	2a e2       	ldi	r18, 0x2A	; 42
    73b4:	3a e3       	ldi	r19, 0x3A	; 58
    73b6:	a6 e0       	ldi	r26, 0x06	; 6
    73b8:	bc e0       	ldi	r27, 0x0C	; 12
    73ba:	83 e0       	ldi	r24, 0x03	; 3
    73bc:	90 e0       	ldi	r25, 0x00	; 0
    73be:	91 83       	std	Z+1, r25	; 0x01
    73c0:	80 83       	st	Z, r24
    73c2:	c9 01       	movw	r24, r18
    73c4:	60 e0       	ldi	r22, 0x00	; 0
    73c6:	70 e0       	ldi	r23, 0x00	; 0
    73c8:	21 e0       	ldi	r18, 0x01	; 1
    73ca:	01 e0       	ldi	r16, 0x01	; 1
    73cc:	10 e0       	ldi	r17, 0x00	; 0
    73ce:	7d 01       	movw	r14, r26
    73d0:	88 24       	eor	r8, r8
    73d2:	99 24       	eor	r9, r9
    73d4:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <OSTaskCreateExt>
    73d8:	0f 90       	pop	r0
    73da:	0f 90       	pop	r0
#if (OS_TASK_NAME_SIZE > 14) && (OS_TASK_STAT_EN > 0)
    OSTaskNameSet(OS_TASK_1_PRIO, "Task 1", &err);
#endif

    /*---- Task initialization code goes HERE! --------------------------------------------------------*/
    OSTaskStkSize     = OS_TASK_2_STK_SIZE;        /* Setup the default stack size                     */
    73dc:	80 ef       	ldi	r24, 0xF0	; 240
    73de:	90 e0       	ldi	r25, 0x00	; 0
    73e0:	90 93 ec 04 	sts	0x04EC, r25
    73e4:	80 93 eb 04 	sts	0x04EB, r24
    //OSTaskStkSizeHard = OS_TASK_STK_SIZE_HARD;     /* Setup the default hardware stack size            */
    OSTaskCreateExt(AppTask2,
    73e8:	80 91 eb 04 	lds	r24, 0x04EB
    73ec:	90 91 ec 04 	lds	r25, 0x04EC
    73f0:	01 97       	sbiw	r24, 0x01	; 1
    73f2:	ac 01       	movw	r20, r24
    73f4:	48 51       	subi	r20, 0x18	; 24
    73f6:	52 4f       	sbci	r21, 0xF2	; 242
    73f8:	80 91 eb 04 	lds	r24, 0x04EB
    73fc:	90 91 ec 04 	lds	r25, 0x04EC
    7400:	5c 01       	movw	r10, r24
    7402:	cc 24       	eor	r12, r12
    7404:	dd 24       	eor	r13, r13
    7406:	0f 92       	push	r0
    7408:	0f 92       	push	r0
    740a:	ed b7       	in	r30, 0x3d	; 61
    740c:	fe b7       	in	r31, 0x3e	; 62
    740e:	31 96       	adiw	r30, 0x01	; 1
    7410:	2a e3       	ldi	r18, 0x3A	; 58
    7412:	3a e3       	ldi	r19, 0x3A	; 58
    7414:	a8 ee       	ldi	r26, 0xE8	; 232
    7416:	bd e0       	ldi	r27, 0x0D	; 13
    7418:	83 e0       	ldi	r24, 0x03	; 3
    741a:	90 e0       	ldi	r25, 0x00	; 0
    741c:	91 83       	std	Z+1, r25	; 0x01
    741e:	80 83       	st	Z, r24
    7420:	c9 01       	movw	r24, r18
    7422:	60 e0       	ldi	r22, 0x00	; 0
    7424:	70 e0       	ldi	r23, 0x00	; 0
    7426:	22 e0       	ldi	r18, 0x02	; 2
    7428:	02 e0       	ldi	r16, 0x02	; 2
    742a:	10 e0       	ldi	r17, 0x00	; 0
    742c:	7d 01       	movw	r14, r26
    742e:	88 24       	eor	r8, r8
    7430:	99 24       	eor	r9, r9
    7432:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <OSTaskCreateExt>
    7436:	0f 90       	pop	r0
    7438:	0f 90       	pop	r0
                    (void *)0,
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
#if (OS_TASK_NAME_SIZE > 14) && (OS_TASK_STAT_EN > 0)
    OSTaskNameSet(OS_TASK_2_PRIO, "Task 2", &err);
#endif
}
    743a:	cf 91       	pop	r28
    743c:	df 91       	pop	r29
    743e:	1f 91       	pop	r17
    7440:	0f 91       	pop	r16
    7442:	ff 90       	pop	r15
    7444:	ef 90       	pop	r14
    7446:	df 90       	pop	r13
    7448:	cf 90       	pop	r12
    744a:	bf 90       	pop	r11
    744c:	af 90       	pop	r10
    744e:	9f 90       	pop	r9
    7450:	8f 90       	pop	r8
    7452:	08 95       	ret

00007454 <AppTask1>:
*                                                   TASK #1
**************************************************************************************************************
*/

static void  AppTask1(void *p_arg)
{
    7454:	df 93       	push	r29
    7456:	cf 93       	push	r28
    7458:	0f 92       	push	r0
    745a:	0f 92       	push	r0
    745c:	cd b7       	in	r28, 0x3d	; 61
    745e:	de b7       	in	r29, 0x3e	; 62
    7460:	9a 83       	std	Y+2, r25	; 0x02
    7462:	89 83       	std	Y+1, r24	; 0x01
    (void)p_arg;

    while (1) {
        LED_Toggle(7);
    7464:	87 e0       	ldi	r24, 0x07	; 7
    7466:	0e 94 53 3d 	call	0x7aa6	; 0x7aa6 <LED_Toggle>
        OSTimeDly(OS_TICKS_PER_SEC / 5);
    746a:	84 e1       	ldi	r24, 0x14	; 20
    746c:	90 e0       	ldi	r25, 0x00	; 0
    746e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <OSTimeDly>
    7472:	f8 cf       	rjmp	.-16     	; 0x7464 <AppTask1+0x10>

00007474 <AppTask2>:
*                                                  TASK #2
**************************************************************************************************************
*/

static void  AppTask2(void *p_arg)
{
    7474:	df 93       	push	r29
    7476:	cf 93       	push	r28
    7478:	0f 92       	push	r0
    747a:	0f 92       	push	r0
    747c:	cd b7       	in	r28, 0x3d	; 61
    747e:	de b7       	in	r29, 0x3e	; 62
    7480:	9a 83       	std	Y+2, r25	; 0x02
    7482:	89 83       	std	Y+1, r24	; 0x01
    (void)p_arg;

    while (1) {
        LED_Toggle(8);
    7484:	88 e0       	ldi	r24, 0x08	; 8
    7486:	0e 94 53 3d 	call	0x7aa6	; 0x7aa6 <LED_Toggle>
        OSTimeDly(OS_TICKS_PER_SEC / 5);
    748a:	84 e1       	ldi	r24, 0x14	; 20
    748c:	90 e0       	ldi	r25, 0x00	; 0
    748e:	0e 94 db 13 	call	0x27b6	; 0x27b6 <OSTimeDly>
    7492:	f8 cf       	rjmp	.-16     	; 0x7484 <AppTask2+0x10>

00007494 <App_TaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void App_TaskSwHook(void)  // TODO IHA Remove after test
{
    7494:	df 93       	push	r29
    7496:	cf 93       	push	r28
    7498:	cd b7       	in	r28, 0x3d	; 61
    749a:	de b7       	in	r29, 0x3e	; 62
	PORTB = ~(OSTCBHighRdy->OSTCBPrio);
    749c:	a5 e2       	ldi	r26, 0x25	; 37
    749e:	b0 e0       	ldi	r27, 0x00	; 0
    74a0:	e0 91 96 07 	lds	r30, 0x0796
    74a4:	f0 91 97 07 	lds	r31, 0x0797
    74a8:	80 8d       	ldd	r24, Z+24	; 0x18
    74aa:	80 95       	com	r24
    74ac:	8c 93       	st	X, r24
}
    74ae:	cf 91       	pop	r28
    74b0:	df 91       	pop	r29
    74b2:	08 95       	ret

000074b4 <App_TaskCreateHook>:

void App_TaskCreateHook(OS_TCB *ptcb){}
    74b4:	df 93       	push	r29
    74b6:	cf 93       	push	r28
    74b8:	0f 92       	push	r0
    74ba:	0f 92       	push	r0
    74bc:	cd b7       	in	r28, 0x3d	; 61
    74be:	de b7       	in	r29, 0x3e	; 62
    74c0:	9a 83       	std	Y+2, r25	; 0x02
    74c2:	89 83       	std	Y+1, r24	; 0x01
    74c4:	0f 90       	pop	r0
    74c6:	0f 90       	pop	r0
    74c8:	cf 91       	pop	r28
    74ca:	df 91       	pop	r29
    74cc:	08 95       	ret

000074ce <App_TaskDelHook>:
void App_TaskDelHook(OS_TCB *ptcb){}
    74ce:	df 93       	push	r29
    74d0:	cf 93       	push	r28
    74d2:	0f 92       	push	r0
    74d4:	0f 92       	push	r0
    74d6:	cd b7       	in	r28, 0x3d	; 61
    74d8:	de b7       	in	r29, 0x3e	; 62
    74da:	9a 83       	std	Y+2, r25	; 0x02
    74dc:	89 83       	std	Y+1, r24	; 0x01
    74de:	0f 90       	pop	r0
    74e0:	0f 90       	pop	r0
    74e2:	cf 91       	pop	r28
    74e4:	df 91       	pop	r29
    74e6:	08 95       	ret

000074e8 <App_TaskIdleHook>:
void App_TaskIdleHook(void){}
    74e8:	df 93       	push	r29
    74ea:	cf 93       	push	r28
    74ec:	cd b7       	in	r28, 0x3d	; 61
    74ee:	de b7       	in	r29, 0x3e	; 62
    74f0:	cf 91       	pop	r28
    74f2:	df 91       	pop	r29
    74f4:	08 95       	ret

000074f6 <App_TaskStatHook>:
void App_TaskStatHook(void){}
    74f6:	df 93       	push	r29
    74f8:	cf 93       	push	r28
    74fa:	cd b7       	in	r28, 0x3d	; 61
    74fc:	de b7       	in	r29, 0x3e	; 62
    74fe:	cf 91       	pop	r28
    7500:	df 91       	pop	r29
    7502:	08 95       	ret

00007504 <App_TCBInitHook>:
void App_TCBInitHook(OS_TCB *ptcb){}
    7504:	df 93       	push	r29
    7506:	cf 93       	push	r28
    7508:	0f 92       	push	r0
    750a:	0f 92       	push	r0
    750c:	cd b7       	in	r28, 0x3d	; 61
    750e:	de b7       	in	r29, 0x3e	; 62
    7510:	9a 83       	std	Y+2, r25	; 0x02
    7512:	89 83       	std	Y+1, r24	; 0x01
    7514:	0f 90       	pop	r0
    7516:	0f 90       	pop	r0
    7518:	cf 91       	pop	r28
    751a:	df 91       	pop	r29
    751c:	08 95       	ret

0000751e <App_TimeTickHook>:
void App_TimeTickHook(void){}
    751e:	df 93       	push	r29
    7520:	cf 93       	push	r28
    7522:	cd b7       	in	r28, 0x3d	; 61
    7524:	de b7       	in	r29, 0x3e	; 62
    7526:	cf 91       	pop	r28
    7528:	df 91       	pop	r29
    752a:	08 95       	ret

0000752c <__vector_21>:
    752c:	0f 92       	push	r0
    752e:	1f 92       	push	r1
    7530:	2f 92       	push	r2
    7532:	3f 92       	push	r3
    7534:	4f 92       	push	r4
    7536:	5f 92       	push	r5
    7538:	6f 92       	push	r6
    753a:	7f 92       	push	r7
    753c:	8f 92       	push	r8
    753e:	9f 92       	push	r9
    7540:	af 92       	push	r10
    7542:	bf 92       	push	r11
    7544:	cf 92       	push	r12
    7546:	df 92       	push	r13
    7548:	ef 92       	push	r14
    754a:	ff 92       	push	r15
    754c:	0f 93       	push	r16
    754e:	1f 93       	push	r17
    7550:	2f 93       	push	r18
    7552:	3f 93       	push	r19
    7554:	4f 93       	push	r20
    7556:	5f 93       	push	r21
    7558:	6f 93       	push	r22
    755a:	7f 93       	push	r23
    755c:	8f 93       	push	r24
    755e:	9f 93       	push	r25
    7560:	af 93       	push	r26
    7562:	bf 93       	push	r27
    7564:	cf 93       	push	r28
    7566:	df 93       	push	r29
    7568:	ef 93       	push	r30
    756a:	ff 93       	push	r31
    756c:	0b b7       	in	r16, 0x3b	; 59
    756e:	0f 93       	push	r16
    7570:	0f b7       	in	r16, 0x3f	; 63
    7572:	00 68       	ori	r16, 0x80	; 128
    7574:	0f 93       	push	r16
    7576:	00 91 4c 08 	lds	r16, 0x084C
    757a:	03 95       	inc	r16
    757c:	00 93 4c 08 	sts	0x084C, r16
    7580:	01 30       	cpi	r16, 0x01	; 1
    7582:	41 f4       	brne	.+16     	; 0x7594 <BSP_TickISR_1>
    7584:	e0 91 4d 08 	lds	r30, 0x084D
    7588:	f0 91 4e 08 	lds	r31, 0x084E
    758c:	cd b7       	in	r28, 0x3d	; 61
    758e:	c1 93       	st	Z+, r28
    7590:	de b7       	in	r29, 0x3e	; 62
    7592:	d1 93       	st	Z+, r29

00007594 <BSP_TickISR_1>:
    7594:	0e 94 fd 3b 	call	0x77fa	; 0x77fa <BSP_TickISR_Handler>
    7598:	0e 94 4f 05 	call	0xa9e	; 0xa9e <OSIntExit>
    759c:	e0 91 4d 08 	lds	r30, 0x084D
    75a0:	f0 91 4e 08 	lds	r31, 0x084E
    75a4:	c1 91       	ld	r28, Z+
    75a6:	cd bf       	out	0x3d, r28	; 61
    75a8:	d1 91       	ld	r29, Z+
    75aa:	de bf       	out	0x3e, r29	; 62
    75ac:	0f 91       	pop	r16
    75ae:	0f 77       	andi	r16, 0x7F	; 127
    75b0:	0f bf       	out	0x3f, r16	; 63
    75b2:	0f 91       	pop	r16
    75b4:	0b bf       	out	0x3b, r16	; 59
    75b6:	ff 91       	pop	r31
    75b8:	ef 91       	pop	r30
    75ba:	df 91       	pop	r29
    75bc:	cf 91       	pop	r28
    75be:	bf 91       	pop	r27
    75c0:	af 91       	pop	r26
    75c2:	9f 91       	pop	r25
    75c4:	8f 91       	pop	r24
    75c6:	7f 91       	pop	r23
    75c8:	6f 91       	pop	r22
    75ca:	5f 91       	pop	r21
    75cc:	4f 91       	pop	r20
    75ce:	3f 91       	pop	r19
    75d0:	2f 91       	pop	r18
    75d2:	1f 91       	pop	r17
    75d4:	0f 91       	pop	r16
    75d6:	ff 90       	pop	r15
    75d8:	ef 90       	pop	r14
    75da:	df 90       	pop	r13
    75dc:	cf 90       	pop	r12
    75de:	bf 90       	pop	r11
    75e0:	af 90       	pop	r10
    75e2:	9f 90       	pop	r9
    75e4:	8f 90       	pop	r8
    75e6:	7f 90       	pop	r7
    75e8:	6f 90       	pop	r6
    75ea:	5f 90       	pop	r5
    75ec:	4f 90       	pop	r4
    75ee:	3f 90       	pop	r3
    75f0:	2f 90       	pop	r2
    75f2:	1f 90       	pop	r1
    75f4:	0f 90       	pop	r0
    75f6:	18 95       	reti

000075f8 <__vector_1>:
    75f8:	0f 92       	push	r0
    75fa:	1f 92       	push	r1
    75fc:	2f 92       	push	r2
    75fe:	3f 92       	push	r3
    7600:	4f 92       	push	r4
    7602:	5f 92       	push	r5
    7604:	6f 92       	push	r6
    7606:	7f 92       	push	r7
    7608:	8f 92       	push	r8
    760a:	9f 92       	push	r9
    760c:	af 92       	push	r10
    760e:	bf 92       	push	r11
    7610:	cf 92       	push	r12
    7612:	df 92       	push	r13
    7614:	ef 92       	push	r14
    7616:	ff 92       	push	r15
    7618:	0f 93       	push	r16
    761a:	1f 93       	push	r17
    761c:	2f 93       	push	r18
    761e:	3f 93       	push	r19
    7620:	4f 93       	push	r20
    7622:	5f 93       	push	r21
    7624:	6f 93       	push	r22
    7626:	7f 93       	push	r23
    7628:	8f 93       	push	r24
    762a:	9f 93       	push	r25
    762c:	af 93       	push	r26
    762e:	bf 93       	push	r27
    7630:	cf 93       	push	r28
    7632:	df 93       	push	r29
    7634:	ef 93       	push	r30
    7636:	ff 93       	push	r31
    7638:	0b b7       	in	r16, 0x3b	; 59
    763a:	0f 93       	push	r16
    763c:	0f b7       	in	r16, 0x3f	; 63
    763e:	00 68       	ori	r16, 0x80	; 128
    7640:	0f 93       	push	r16
    7642:	00 91 4c 08 	lds	r16, 0x084C
    7646:	03 95       	inc	r16
    7648:	00 93 4c 08 	sts	0x084C, r16
    764c:	01 30       	cpi	r16, 0x01	; 1
    764e:	41 f4       	brne	.+16     	; 0x7660 <BSP_Int0ISR_1>
    7650:	e0 91 4d 08 	lds	r30, 0x084D
    7654:	f0 91 4e 08 	lds	r31, 0x084E
    7658:	cd b7       	in	r28, 0x3d	; 61
    765a:	c1 93       	st	Z+, r28
    765c:	de b7       	in	r29, 0x3e	; 62
    765e:	d1 93       	st	Z+, r29

00007660 <BSP_Int0ISR_1>:
    7660:	0e 94 06 3c 	call	0x780c	; 0x780c <BSP_Int0ISR_Handler>
    7664:	0e 94 4f 05 	call	0xa9e	; 0xa9e <OSIntExit>
    7668:	e0 91 4d 08 	lds	r30, 0x084D
    766c:	f0 91 4e 08 	lds	r31, 0x084E
    7670:	c1 91       	ld	r28, Z+
    7672:	cd bf       	out	0x3d, r28	; 61
    7674:	d1 91       	ld	r29, Z+
    7676:	de bf       	out	0x3e, r29	; 62
    7678:	0f 91       	pop	r16
    767a:	0f 77       	andi	r16, 0x7F	; 127
    767c:	0f bf       	out	0x3f, r16	; 63
    767e:	0f 91       	pop	r16
    7680:	0b bf       	out	0x3b, r16	; 59
    7682:	ff 91       	pop	r31
    7684:	ef 91       	pop	r30
    7686:	df 91       	pop	r29
    7688:	cf 91       	pop	r28
    768a:	bf 91       	pop	r27
    768c:	af 91       	pop	r26
    768e:	9f 91       	pop	r25
    7690:	8f 91       	pop	r24
    7692:	7f 91       	pop	r23
    7694:	6f 91       	pop	r22
    7696:	5f 91       	pop	r21
    7698:	4f 91       	pop	r20
    769a:	3f 91       	pop	r19
    769c:	2f 91       	pop	r18
    769e:	1f 91       	pop	r17
    76a0:	0f 91       	pop	r16
    76a2:	ff 90       	pop	r15
    76a4:	ef 90       	pop	r14
    76a6:	df 90       	pop	r13
    76a8:	cf 90       	pop	r12
    76aa:	bf 90       	pop	r11
    76ac:	af 90       	pop	r10
    76ae:	9f 90       	pop	r9
    76b0:	8f 90       	pop	r8
    76b2:	7f 90       	pop	r7
    76b4:	6f 90       	pop	r6
    76b6:	5f 90       	pop	r5
    76b8:	4f 90       	pop	r4
    76ba:	3f 90       	pop	r3
    76bc:	2f 90       	pop	r2
    76be:	1f 90       	pop	r1
    76c0:	0f 90       	pop	r0
    76c2:	18 95       	reti

000076c4 <BSP_Init>:
* Arguments   : none
*********************************************************************************************************
*/

void  BSP_Init (void)
{
    76c4:	df 93       	push	r29
    76c6:	cf 93       	push	r28
    76c8:	cd b7       	in	r28, 0x3d	; 61
    76ca:	de b7       	in	r29, 0x3e	; 62
    LED_Init();
    76cc:	0e 94 13 3c 	call	0x7826	; 0x7826 <LED_Init>

    BSP_InitTickISR();
    76d0:	0e 94 6f 3b 	call	0x76de	; 0x76de <BSP_InitTickISR>
    BSP_InitInt0ISR();
    76d4:	0e 94 99 3b 	call	0x7732	; 0x7732 <BSP_InitInt0ISR>
}
    76d8:	cf 91       	pop	r28
    76da:	df 91       	pop	r29
    76dc:	08 95       	ret

000076de <BSP_InitTickISR>:
*             in integer math, this is equivalent to adding 0.5
*********************************************************************************************************
*/

static  void  BSP_InitTickISR (void)
{
    76de:	df 93       	push	r29
    76e0:	cf 93       	push	r28
    76e2:	cd b7       	in	r28, 0x3d	; 61
    76e4:	de b7       	in	r29, 0x3e	; 62
    TCCR0A  |= _BV(WGM01);            									/* Set TIMER0 to CTC Mode              */
    76e6:	a4 e4       	ldi	r26, 0x44	; 68
    76e8:	b0 e0       	ldi	r27, 0x00	; 0
    76ea:	e4 e4       	ldi	r30, 0x44	; 68
    76ec:	f0 e0       	ldi	r31, 0x00	; 0
    76ee:	80 81       	ld	r24, Z
    76f0:	82 60       	ori	r24, 0x02	; 2
    76f2:	8c 93       	st	X, r24
    TCCR0B |= _BV(CS02) | _BV(CS00); 				   					/* Set TIMER0 prescaler CLK/1024       */
    76f4:	a5 e4       	ldi	r26, 0x45	; 69
    76f6:	b0 e0       	ldi	r27, 0x00	; 0
    76f8:	e5 e4       	ldi	r30, 0x45	; 69
    76fa:	f0 e0       	ldi	r31, 0x00	; 0
    76fc:	80 81       	ld	r24, Z
    76fe:	85 60       	ori	r24, 0x05	; 5
    7700:	8c 93       	st	X, r24
    TCNT0  =    0;                                                      /* Start TCNT at 0 for a new cycle                          */
    7702:	e6 e4       	ldi	r30, 0x46	; 70
    7704:	f0 e0       	ldi	r31, 0x00	; 0
    7706:	10 82       	st	Z, r1
    OCR0A = CPU_CLK_FREQ / OS_TICKS_PER_SEC / 1024 - 1;
    7708:	e7 e4       	ldi	r30, 0x47	; 71
    770a:	f0 e0       	ldi	r31, 0x00	; 0
    770c:	8b e9       	ldi	r24, 0x9B	; 155
    770e:	80 83       	st	Z, r24
    TIFR0  |= _BV(OCF0A);                                               /* Clear  TIMER0 compare Interrupt Flag                     */
    7710:	a5 e3       	ldi	r26, 0x35	; 53
    7712:	b0 e0       	ldi	r27, 0x00	; 0
    7714:	e5 e3       	ldi	r30, 0x35	; 53
    7716:	f0 e0       	ldi	r31, 0x00	; 0
    7718:	80 81       	ld	r24, Z
    771a:	82 60       	ori	r24, 0x02	; 2
    771c:	8c 93       	st	X, r24
    TIMSK0 |= _BV(OCIE0A);                                              /* Enable TIMER0 compare Interrupt                          */
    771e:	ae e6       	ldi	r26, 0x6E	; 110
    7720:	b0 e0       	ldi	r27, 0x00	; 0
    7722:	ee e6       	ldi	r30, 0x6E	; 110
    7724:	f0 e0       	ldi	r31, 0x00	; 0
    7726:	80 81       	ld	r24, Z
    7728:	82 60       	ori	r24, 0x02	; 2
    772a:	8c 93       	st	X, r24
}
    772c:	cf 91       	pop	r28
    772e:	df 91       	pop	r29
    7730:	08 95       	ret

00007732 <BSP_InitInt0ISR>:
* Interrupt on rising edge of INT0
*********************************************************************************************************
*/

static void  BSP_InitInt0ISR (void)
{
    7732:	df 93       	push	r29
    7734:	cf 93       	push	r28
    7736:	cd b7       	in	r28, 0x3d	; 61
    7738:	de b7       	in	r29, 0x3e	; 62
	EICRA |= _BV(ISC00) | _BV(ISC01);
    773a:	a9 e6       	ldi	r26, 0x69	; 105
    773c:	b0 e0       	ldi	r27, 0x00	; 0
    773e:	e9 e6       	ldi	r30, 0x69	; 105
    7740:	f0 e0       	ldi	r31, 0x00	; 0
    7742:	80 81       	ld	r24, Z
    7744:	83 60       	ori	r24, 0x03	; 3
    7746:	8c 93       	st	X, r24
	EIMSK |= _BV(INT0);
    7748:	ad e3       	ldi	r26, 0x3D	; 61
    774a:	b0 e0       	ldi	r27, 0x00	; 0
    774c:	ed e3       	ldi	r30, 0x3D	; 61
    774e:	f0 e0       	ldi	r31, 0x00	; 0
    7750:	80 81       	ld	r24, Z
    7752:	81 60       	ori	r24, 0x01	; 1
    7754:	8c 93       	st	X, r24
}
    7756:	cf 91       	pop	r28
    7758:	df 91       	pop	r29
    775a:	08 95       	ret

0000775c <BSP_Int0_Disable>:
*********************************************************************************************************
* Disable INT0 interrupt
*********************************************************************************************************
*/
void  inline BSP_Int0_Disable(void)
{
    775c:	df 93       	push	r29
    775e:	cf 93       	push	r28
    7760:	cd b7       	in	r28, 0x3d	; 61
    7762:	de b7       	in	r29, 0x3e	; 62
	EIMSK &= ~_BV(INT0);
    7764:	ad e3       	ldi	r26, 0x3D	; 61
    7766:	b0 e0       	ldi	r27, 0x00	; 0
    7768:	ed e3       	ldi	r30, 0x3D	; 61
    776a:	f0 e0       	ldi	r31, 0x00	; 0
    776c:	80 81       	ld	r24, Z
    776e:	8e 7f       	andi	r24, 0xFE	; 254
    7770:	8c 93       	st	X, r24
}
    7772:	cf 91       	pop	r28
    7774:	df 91       	pop	r29
    7776:	08 95       	ret

00007778 <BSP_Int0_Enable>:
* Enable INT0 interrupt
* \param clear_pending true: clears pending INT0 interrupt before enabling
*********************************************************************************************************
*/
void  inline BSP_Int0_Enable(uint8_t clear_pending)
{
    7778:	df 93       	push	r29
    777a:	cf 93       	push	r28
    777c:	0f 92       	push	r0
    777e:	cd b7       	in	r28, 0x3d	; 61
    7780:	de b7       	in	r29, 0x3e	; 62
    7782:	89 83       	std	Y+1, r24	; 0x01
	if (clear_pending)
    7784:	89 81       	ldd	r24, Y+1	; 0x01
    7786:	88 23       	and	r24, r24
    7788:	39 f0       	breq	.+14     	; 0x7798 <BSP_Int0_Enable+0x20>
	{
		EIFR &= ~_BV(INTF0); // Clear INT0 Flag
    778a:	ac e3       	ldi	r26, 0x3C	; 60
    778c:	b0 e0       	ldi	r27, 0x00	; 0
    778e:	ec e3       	ldi	r30, 0x3C	; 60
    7790:	f0 e0       	ldi	r31, 0x00	; 0
    7792:	80 81       	ld	r24, Z
    7794:	8e 7f       	andi	r24, 0xFE	; 254
    7796:	8c 93       	st	X, r24
	}
	EIMSK |= _BV(INT0);
    7798:	ad e3       	ldi	r26, 0x3D	; 61
    779a:	b0 e0       	ldi	r27, 0x00	; 0
    779c:	ed e3       	ldi	r30, 0x3D	; 61
    779e:	f0 e0       	ldi	r31, 0x00	; 0
    77a0:	80 81       	ld	r24, Z
    77a2:	81 60       	ori	r24, 0x01	; 1
    77a4:	8c 93       	st	X, r24
}
    77a6:	0f 90       	pop	r0
    77a8:	cf 91       	pop	r28
    77aa:	df 91       	pop	r29
    77ac:	08 95       	ret

000077ae <SW_in>:
* \param sw switch to read the status of. [1..8]
* \return 0: switch is not activated, <>0: switch is activated.
*********************************************************************************************************
*/
INT8U  SW_in(INT8U sw)
{
    77ae:	df 93       	push	r29
    77b0:	cf 93       	push	r28
    77b2:	0f 92       	push	r0
    77b4:	0f 92       	push	r0
    77b6:	cd b7       	in	r28, 0x3d	; 61
    77b8:	de b7       	in	r29, 0x3e	; 62
    77ba:	89 83       	std	Y+1, r24	; 0x01
	return (PIND & _BV(--sw)) == 0;
    77bc:	e9 e2       	ldi	r30, 0x29	; 41
    77be:	f0 e0       	ldi	r31, 0x00	; 0
    77c0:	80 81       	ld	r24, Z
    77c2:	28 2f       	mov	r18, r24
    77c4:	30 e0       	ldi	r19, 0x00	; 0
    77c6:	89 81       	ldd	r24, Y+1	; 0x01
    77c8:	81 50       	subi	r24, 0x01	; 1
    77ca:	89 83       	std	Y+1, r24	; 0x01
    77cc:	89 81       	ldd	r24, Y+1	; 0x01
    77ce:	88 2f       	mov	r24, r24
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	a9 01       	movw	r20, r18
    77d4:	02 c0       	rjmp	.+4      	; 0x77da <SW_in+0x2c>
    77d6:	55 95       	asr	r21
    77d8:	47 95       	ror	r20
    77da:	8a 95       	dec	r24
    77dc:	e2 f7       	brpl	.-8      	; 0x77d6 <SW_in+0x28>
    77de:	ca 01       	movw	r24, r20
    77e0:	81 70       	andi	r24, 0x01	; 1
    77e2:	90 70       	andi	r25, 0x00	; 0
    77e4:	1a 82       	std	Y+2, r1	; 0x02
    77e6:	00 97       	sbiw	r24, 0x00	; 0
    77e8:	11 f4       	brne	.+4      	; 0x77ee <SW_in+0x40>
    77ea:	51 e0       	ldi	r21, 0x01	; 1
    77ec:	5a 83       	std	Y+2, r21	; 0x02
    77ee:	8a 81       	ldd	r24, Y+2	; 0x02
}
    77f0:	0f 90       	pop	r0
    77f2:	0f 90       	pop	r0
    77f4:	cf 91       	pop	r28
    77f6:	df 91       	pop	r29
    77f8:	08 95       	ret

000077fa <BSP_TickISR_Handler>:
*             the interrupt is automatically cleared in hardware when the ISR runs.
*********************************************************************************************************
*/

void  BSP_TickISR_Handler(void)
{
    77fa:	df 93       	push	r29
    77fc:	cf 93       	push	r28
    77fe:	cd b7       	in	r28, 0x3d	; 61
    7800:	de b7       	in	r29, 0x3e	; 62
    OSTimeTick();
    7802:	0e 94 2f 06 	call	0xc5e	; 0xc5e <OSTimeTick>
}
    7806:	cf 91       	pop	r28
    7808:	df 91       	pop	r29
    780a:	08 95       	ret

0000780c <BSP_Int0ISR_Handler>:
*             the interrupt is automatically cleared in hardware when the ISR runs.
*********************************************************************************************************
*/

void  BSP_Int0ISR_Handler(void)
{
    780c:	df 93       	push	r29
    780e:	cf 93       	push	r28
    7810:	cd b7       	in	r28, 0x3d	; 61
    7812:	de b7       	in	r29, 0x3e	; 62
	OSSemPost(a_sem);
    7814:	80 91 e6 0d 	lds	r24, 0x0DE6
    7818:	90 91 e7 0d 	lds	r25, 0x0DE7
    781c:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <OSSemPost>
}
    7820:	cf 91       	pop	r28
    7822:	df 91       	pop	r29
    7824:	08 95       	ret

00007826 <LED_Init>:
* Arguments   : none
*********************************************************************************************************
*/

static  void  LED_Init (void)
{
    7826:	df 93       	push	r29
    7828:	cf 93       	push	r28
    782a:	cd b7       	in	r28, 0x3d	; 61
    782c:	de b7       	in	r29, 0x3e	; 62
    DDRA  = 0xFF;                                                       /* All PORTA pins are outputs                               */
    782e:	e1 e2       	ldi	r30, 0x21	; 33
    7830:	f0 e0       	ldi	r31, 0x00	; 0
    7832:	8f ef       	ldi	r24, 0xFF	; 255
    7834:	80 83       	st	Z, r24
    LED_Off(0);                                                         /* Turn ON all the LEDs                                     */
    7836:	80 e0       	ldi	r24, 0x00	; 0
    7838:	0e 94 b9 3c 	call	0x7972	; 0x7972 <LED_Off>
}
    783c:	cf 91       	pop	r28
    783e:	df 91       	pop	r29
    7840:	08 95       	ret

00007842 <LED_On>:
*                      8    turns ON LED8 on the board
*********************************************************************************************************
*/

void  LED_On (INT8U led)
{
    7842:	df 93       	push	r29
    7844:	cf 93       	push	r28
    7846:	00 d0       	rcall	.+0      	; 0x7848 <LED_On+0x6>
    7848:	0f 92       	push	r0
    784a:	cd b7       	in	r28, 0x3d	; 61
    784c:	de b7       	in	r29, 0x3e	; 62
    784e:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
    7850:	19 82       	std	Y+1, r1	; 0x01
#endif


    OS_ENTER_CRITICAL();
    7852:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7856:	89 83       	std	Y+1, r24	; 0x01
    switch (led) {
    7858:	8a 81       	ldd	r24, Y+2	; 0x02
    785a:	28 2f       	mov	r18, r24
    785c:	30 e0       	ldi	r19, 0x00	; 0
    785e:	3c 83       	std	Y+4, r19	; 0x04
    7860:	2b 83       	std	Y+3, r18	; 0x03
    7862:	8b 81       	ldd	r24, Y+3	; 0x03
    7864:	9c 81       	ldd	r25, Y+4	; 0x04
    7866:	84 30       	cpi	r24, 0x04	; 4
    7868:	91 05       	cpc	r25, r1
    786a:	09 f4       	brne	.+2      	; 0x786e <LED_On+0x2c>
    786c:	51 c0       	rjmp	.+162    	; 0x7910 <LED_On+0xce>
    786e:	2b 81       	ldd	r18, Y+3	; 0x03
    7870:	3c 81       	ldd	r19, Y+4	; 0x04
    7872:	25 30       	cpi	r18, 0x05	; 5
    7874:	31 05       	cpc	r19, r1
    7876:	d4 f4       	brge	.+52     	; 0x78ac <LED_On+0x6a>
    7878:	8b 81       	ldd	r24, Y+3	; 0x03
    787a:	9c 81       	ldd	r25, Y+4	; 0x04
    787c:	81 30       	cpi	r24, 0x01	; 1
    787e:	91 05       	cpc	r25, r1
    7880:	79 f1       	breq	.+94     	; 0x78e0 <LED_On+0x9e>
    7882:	2b 81       	ldd	r18, Y+3	; 0x03
    7884:	3c 81       	ldd	r19, Y+4	; 0x04
    7886:	22 30       	cpi	r18, 0x02	; 2
    7888:	31 05       	cpc	r19, r1
    788a:	2c f4       	brge	.+10     	; 0x7896 <LED_On+0x54>
    788c:	8b 81       	ldd	r24, Y+3	; 0x03
    788e:	9c 81       	ldd	r25, Y+4	; 0x04
    7890:	00 97       	sbiw	r24, 0x00	; 0
    7892:	11 f1       	breq	.+68     	; 0x78d8 <LED_On+0x96>
    7894:	64 c0       	rjmp	.+200    	; 0x795e <LED_On+0x11c>
    7896:	2b 81       	ldd	r18, Y+3	; 0x03
    7898:	3c 81       	ldd	r19, Y+4	; 0x04
    789a:	22 30       	cpi	r18, 0x02	; 2
    789c:	31 05       	cpc	r19, r1
    789e:	41 f1       	breq	.+80     	; 0x78f0 <LED_On+0xae>
    78a0:	8b 81       	ldd	r24, Y+3	; 0x03
    78a2:	9c 81       	ldd	r25, Y+4	; 0x04
    78a4:	83 30       	cpi	r24, 0x03	; 3
    78a6:	91 05       	cpc	r25, r1
    78a8:	59 f1       	breq	.+86     	; 0x7900 <LED_On+0xbe>
    78aa:	59 c0       	rjmp	.+178    	; 0x795e <LED_On+0x11c>
    78ac:	2b 81       	ldd	r18, Y+3	; 0x03
    78ae:	3c 81       	ldd	r19, Y+4	; 0x04
    78b0:	26 30       	cpi	r18, 0x06	; 6
    78b2:	31 05       	cpc	r19, r1
    78b4:	09 f4       	brne	.+2      	; 0x78b8 <LED_On+0x76>
    78b6:	3c c0       	rjmp	.+120    	; 0x7930 <LED_On+0xee>
    78b8:	8b 81       	ldd	r24, Y+3	; 0x03
    78ba:	9c 81       	ldd	r25, Y+4	; 0x04
    78bc:	86 30       	cpi	r24, 0x06	; 6
    78be:	91 05       	cpc	r25, r1
    78c0:	7c f1       	brlt	.+94     	; 0x7920 <LED_On+0xde>
    78c2:	2b 81       	ldd	r18, Y+3	; 0x03
    78c4:	3c 81       	ldd	r19, Y+4	; 0x04
    78c6:	27 30       	cpi	r18, 0x07	; 7
    78c8:	31 05       	cpc	r19, r1
    78ca:	d1 f1       	breq	.+116    	; 0x7940 <LED_On+0xfe>
    78cc:	8b 81       	ldd	r24, Y+3	; 0x03
    78ce:	9c 81       	ldd	r25, Y+4	; 0x04
    78d0:	88 30       	cpi	r24, 0x08	; 8
    78d2:	91 05       	cpc	r25, r1
    78d4:	e9 f1       	breq	.+122    	; 0x7950 <LED_On+0x10e>
    78d6:	43 c0       	rjmp	.+134    	; 0x795e <LED_On+0x11c>
        case 0:
             PORTA  =  0x00;
    78d8:	e2 e2       	ldi	r30, 0x22	; 34
    78da:	f0 e0       	ldi	r31, 0x00	; 0
    78dc:	10 82       	st	Z, r1
    78de:	3f c0       	rjmp	.+126    	; 0x795e <LED_On+0x11c>
             break;

        case 1:
             PORTA &= ~0x01;
    78e0:	a2 e2       	ldi	r26, 0x22	; 34
    78e2:	b0 e0       	ldi	r27, 0x00	; 0
    78e4:	e2 e2       	ldi	r30, 0x22	; 34
    78e6:	f0 e0       	ldi	r31, 0x00	; 0
    78e8:	80 81       	ld	r24, Z
    78ea:	8e 7f       	andi	r24, 0xFE	; 254
    78ec:	8c 93       	st	X, r24
    78ee:	37 c0       	rjmp	.+110    	; 0x795e <LED_On+0x11c>
             break;

        case 2:
             PORTA &= ~0x02;
    78f0:	a2 e2       	ldi	r26, 0x22	; 34
    78f2:	b0 e0       	ldi	r27, 0x00	; 0
    78f4:	e2 e2       	ldi	r30, 0x22	; 34
    78f6:	f0 e0       	ldi	r31, 0x00	; 0
    78f8:	80 81       	ld	r24, Z
    78fa:	8d 7f       	andi	r24, 0xFD	; 253
    78fc:	8c 93       	st	X, r24
    78fe:	2f c0       	rjmp	.+94     	; 0x795e <LED_On+0x11c>
             break;

        case 3:
             PORTA &= ~0x04;
    7900:	a2 e2       	ldi	r26, 0x22	; 34
    7902:	b0 e0       	ldi	r27, 0x00	; 0
    7904:	e2 e2       	ldi	r30, 0x22	; 34
    7906:	f0 e0       	ldi	r31, 0x00	; 0
    7908:	80 81       	ld	r24, Z
    790a:	8b 7f       	andi	r24, 0xFB	; 251
    790c:	8c 93       	st	X, r24
    790e:	27 c0       	rjmp	.+78     	; 0x795e <LED_On+0x11c>
             break;

        case 4:
             PORTA &= ~0x08;
    7910:	a2 e2       	ldi	r26, 0x22	; 34
    7912:	b0 e0       	ldi	r27, 0x00	; 0
    7914:	e2 e2       	ldi	r30, 0x22	; 34
    7916:	f0 e0       	ldi	r31, 0x00	; 0
    7918:	80 81       	ld	r24, Z
    791a:	87 7f       	andi	r24, 0xF7	; 247
    791c:	8c 93       	st	X, r24
    791e:	1f c0       	rjmp	.+62     	; 0x795e <LED_On+0x11c>
             break;

        case 5:
             PORTA &= ~0x10;
    7920:	a2 e2       	ldi	r26, 0x22	; 34
    7922:	b0 e0       	ldi	r27, 0x00	; 0
    7924:	e2 e2       	ldi	r30, 0x22	; 34
    7926:	f0 e0       	ldi	r31, 0x00	; 0
    7928:	80 81       	ld	r24, Z
    792a:	8f 7e       	andi	r24, 0xEF	; 239
    792c:	8c 93       	st	X, r24
    792e:	17 c0       	rjmp	.+46     	; 0x795e <LED_On+0x11c>
             break;

        case 6:
             PORTA &= ~0x20;
    7930:	a2 e2       	ldi	r26, 0x22	; 34
    7932:	b0 e0       	ldi	r27, 0x00	; 0
    7934:	e2 e2       	ldi	r30, 0x22	; 34
    7936:	f0 e0       	ldi	r31, 0x00	; 0
    7938:	80 81       	ld	r24, Z
    793a:	8f 7d       	andi	r24, 0xDF	; 223
    793c:	8c 93       	st	X, r24
    793e:	0f c0       	rjmp	.+30     	; 0x795e <LED_On+0x11c>
             break;

        case 7:
             PORTA &= ~0x40;
    7940:	a2 e2       	ldi	r26, 0x22	; 34
    7942:	b0 e0       	ldi	r27, 0x00	; 0
    7944:	e2 e2       	ldi	r30, 0x22	; 34
    7946:	f0 e0       	ldi	r31, 0x00	; 0
    7948:	80 81       	ld	r24, Z
    794a:	8f 7b       	andi	r24, 0xBF	; 191
    794c:	8c 93       	st	X, r24
    794e:	07 c0       	rjmp	.+14     	; 0x795e <LED_On+0x11c>
             break;

        case 8:
             PORTA &= ~0x80;
    7950:	a2 e2       	ldi	r26, 0x22	; 34
    7952:	b0 e0       	ldi	r27, 0x00	; 0
    7954:	e2 e2       	ldi	r30, 0x22	; 34
    7956:	f0 e0       	ldi	r31, 0x00	; 0
    7958:	80 81       	ld	r24, Z
    795a:	8f 77       	andi	r24, 0x7F	; 127
    795c:	8c 93       	st	X, r24
             break;
    }
    OS_EXIT_CRITICAL();
    795e:	89 81       	ldd	r24, Y+1	; 0x01
    7960:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    7964:	0f 90       	pop	r0
    7966:	0f 90       	pop	r0
    7968:	0f 90       	pop	r0
    796a:	0f 90       	pop	r0
    796c:	cf 91       	pop	r28
    796e:	df 91       	pop	r29
    7970:	08 95       	ret

00007972 <LED_Off>:
*                      8    turns OFF LED8 on the board
*********************************************************************************************************
*/

void  LED_Off (INT8U led)
{
    7972:	df 93       	push	r29
    7974:	cf 93       	push	r28
    7976:	00 d0       	rcall	.+0      	; 0x7978 <LED_Off+0x6>
    7978:	0f 92       	push	r0
    797a:	cd b7       	in	r28, 0x3d	; 61
    797c:	de b7       	in	r29, 0x3e	; 62
    797e:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
    7980:	19 82       	std	Y+1, r1	; 0x01
#endif


    OS_ENTER_CRITICAL();
    7982:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7986:	89 83       	std	Y+1, r24	; 0x01
    switch (led) {
    7988:	8a 81       	ldd	r24, Y+2	; 0x02
    798a:	28 2f       	mov	r18, r24
    798c:	30 e0       	ldi	r19, 0x00	; 0
    798e:	3c 83       	std	Y+4, r19	; 0x04
    7990:	2b 83       	std	Y+3, r18	; 0x03
    7992:	8b 81       	ldd	r24, Y+3	; 0x03
    7994:	9c 81       	ldd	r25, Y+4	; 0x04
    7996:	84 30       	cpi	r24, 0x04	; 4
    7998:	91 05       	cpc	r25, r1
    799a:	09 f4       	brne	.+2      	; 0x799e <LED_Off+0x2c>
    799c:	53 c0       	rjmp	.+166    	; 0x7a44 <LED_Off+0xd2>
    799e:	2b 81       	ldd	r18, Y+3	; 0x03
    79a0:	3c 81       	ldd	r19, Y+4	; 0x04
    79a2:	25 30       	cpi	r18, 0x05	; 5
    79a4:	31 05       	cpc	r19, r1
    79a6:	d4 f4       	brge	.+52     	; 0x79dc <LED_Off+0x6a>
    79a8:	8b 81       	ldd	r24, Y+3	; 0x03
    79aa:	9c 81       	ldd	r25, Y+4	; 0x04
    79ac:	81 30       	cpi	r24, 0x01	; 1
    79ae:	91 05       	cpc	r25, r1
    79b0:	89 f1       	breq	.+98     	; 0x7a14 <LED_Off+0xa2>
    79b2:	2b 81       	ldd	r18, Y+3	; 0x03
    79b4:	3c 81       	ldd	r19, Y+4	; 0x04
    79b6:	22 30       	cpi	r18, 0x02	; 2
    79b8:	31 05       	cpc	r19, r1
    79ba:	2c f4       	brge	.+10     	; 0x79c6 <LED_Off+0x54>
    79bc:	8b 81       	ldd	r24, Y+3	; 0x03
    79be:	9c 81       	ldd	r25, Y+4	; 0x04
    79c0:	00 97       	sbiw	r24, 0x00	; 0
    79c2:	19 f1       	breq	.+70     	; 0x7a0a <LED_Off+0x98>
    79c4:	66 c0       	rjmp	.+204    	; 0x7a92 <LED_Off+0x120>
    79c6:	2b 81       	ldd	r18, Y+3	; 0x03
    79c8:	3c 81       	ldd	r19, Y+4	; 0x04
    79ca:	22 30       	cpi	r18, 0x02	; 2
    79cc:	31 05       	cpc	r19, r1
    79ce:	51 f1       	breq	.+84     	; 0x7a24 <LED_Off+0xb2>
    79d0:	8b 81       	ldd	r24, Y+3	; 0x03
    79d2:	9c 81       	ldd	r25, Y+4	; 0x04
    79d4:	83 30       	cpi	r24, 0x03	; 3
    79d6:	91 05       	cpc	r25, r1
    79d8:	69 f1       	breq	.+90     	; 0x7a34 <LED_Off+0xc2>
    79da:	5b c0       	rjmp	.+182    	; 0x7a92 <LED_Off+0x120>
    79dc:	2b 81       	ldd	r18, Y+3	; 0x03
    79de:	3c 81       	ldd	r19, Y+4	; 0x04
    79e0:	26 30       	cpi	r18, 0x06	; 6
    79e2:	31 05       	cpc	r19, r1
    79e4:	09 f4       	brne	.+2      	; 0x79e8 <LED_Off+0x76>
    79e6:	3e c0       	rjmp	.+124    	; 0x7a64 <LED_Off+0xf2>
    79e8:	8b 81       	ldd	r24, Y+3	; 0x03
    79ea:	9c 81       	ldd	r25, Y+4	; 0x04
    79ec:	86 30       	cpi	r24, 0x06	; 6
    79ee:	91 05       	cpc	r25, r1
    79f0:	8c f1       	brlt	.+98     	; 0x7a54 <LED_Off+0xe2>
    79f2:	2b 81       	ldd	r18, Y+3	; 0x03
    79f4:	3c 81       	ldd	r19, Y+4	; 0x04
    79f6:	27 30       	cpi	r18, 0x07	; 7
    79f8:	31 05       	cpc	r19, r1
    79fa:	e1 f1       	breq	.+120    	; 0x7a74 <LED_Off+0x102>
    79fc:	8b 81       	ldd	r24, Y+3	; 0x03
    79fe:	9c 81       	ldd	r25, Y+4	; 0x04
    7a00:	88 30       	cpi	r24, 0x08	; 8
    7a02:	91 05       	cpc	r25, r1
    7a04:	09 f4       	brne	.+2      	; 0x7a08 <LED_Off+0x96>
    7a06:	3e c0       	rjmp	.+124    	; 0x7a84 <LED_Off+0x112>
    7a08:	44 c0       	rjmp	.+136    	; 0x7a92 <LED_Off+0x120>
        case 0:
             PORTA  =  0xFF;
    7a0a:	e2 e2       	ldi	r30, 0x22	; 34
    7a0c:	f0 e0       	ldi	r31, 0x00	; 0
    7a0e:	8f ef       	ldi	r24, 0xFF	; 255
    7a10:	80 83       	st	Z, r24
    7a12:	3f c0       	rjmp	.+126    	; 0x7a92 <LED_Off+0x120>
             break;

        case 1:
             PORTA |=  0x01;
    7a14:	a2 e2       	ldi	r26, 0x22	; 34
    7a16:	b0 e0       	ldi	r27, 0x00	; 0
    7a18:	e2 e2       	ldi	r30, 0x22	; 34
    7a1a:	f0 e0       	ldi	r31, 0x00	; 0
    7a1c:	80 81       	ld	r24, Z
    7a1e:	81 60       	ori	r24, 0x01	; 1
    7a20:	8c 93       	st	X, r24
    7a22:	37 c0       	rjmp	.+110    	; 0x7a92 <LED_Off+0x120>
             break;

        case 2:
             PORTA |=  0x02;
    7a24:	a2 e2       	ldi	r26, 0x22	; 34
    7a26:	b0 e0       	ldi	r27, 0x00	; 0
    7a28:	e2 e2       	ldi	r30, 0x22	; 34
    7a2a:	f0 e0       	ldi	r31, 0x00	; 0
    7a2c:	80 81       	ld	r24, Z
    7a2e:	82 60       	ori	r24, 0x02	; 2
    7a30:	8c 93       	st	X, r24
    7a32:	2f c0       	rjmp	.+94     	; 0x7a92 <LED_Off+0x120>
             break;

        case 3:
             PORTA |=  0x04;
    7a34:	a2 e2       	ldi	r26, 0x22	; 34
    7a36:	b0 e0       	ldi	r27, 0x00	; 0
    7a38:	e2 e2       	ldi	r30, 0x22	; 34
    7a3a:	f0 e0       	ldi	r31, 0x00	; 0
    7a3c:	80 81       	ld	r24, Z
    7a3e:	84 60       	ori	r24, 0x04	; 4
    7a40:	8c 93       	st	X, r24
    7a42:	27 c0       	rjmp	.+78     	; 0x7a92 <LED_Off+0x120>
             break;

        case 4:
             PORTA |=  0x08;
    7a44:	a2 e2       	ldi	r26, 0x22	; 34
    7a46:	b0 e0       	ldi	r27, 0x00	; 0
    7a48:	e2 e2       	ldi	r30, 0x22	; 34
    7a4a:	f0 e0       	ldi	r31, 0x00	; 0
    7a4c:	80 81       	ld	r24, Z
    7a4e:	88 60       	ori	r24, 0x08	; 8
    7a50:	8c 93       	st	X, r24
    7a52:	1f c0       	rjmp	.+62     	; 0x7a92 <LED_Off+0x120>
             break;

        case 5:
             PORTA |=  0x10;
    7a54:	a2 e2       	ldi	r26, 0x22	; 34
    7a56:	b0 e0       	ldi	r27, 0x00	; 0
    7a58:	e2 e2       	ldi	r30, 0x22	; 34
    7a5a:	f0 e0       	ldi	r31, 0x00	; 0
    7a5c:	80 81       	ld	r24, Z
    7a5e:	80 61       	ori	r24, 0x10	; 16
    7a60:	8c 93       	st	X, r24
    7a62:	17 c0       	rjmp	.+46     	; 0x7a92 <LED_Off+0x120>
             break;

        case 6:
             PORTA |=  0x20;
    7a64:	a2 e2       	ldi	r26, 0x22	; 34
    7a66:	b0 e0       	ldi	r27, 0x00	; 0
    7a68:	e2 e2       	ldi	r30, 0x22	; 34
    7a6a:	f0 e0       	ldi	r31, 0x00	; 0
    7a6c:	80 81       	ld	r24, Z
    7a6e:	80 62       	ori	r24, 0x20	; 32
    7a70:	8c 93       	st	X, r24
    7a72:	0f c0       	rjmp	.+30     	; 0x7a92 <LED_Off+0x120>
             break;

        case 7:
             PORTA |=  0x40;
    7a74:	a2 e2       	ldi	r26, 0x22	; 34
    7a76:	b0 e0       	ldi	r27, 0x00	; 0
    7a78:	e2 e2       	ldi	r30, 0x22	; 34
    7a7a:	f0 e0       	ldi	r31, 0x00	; 0
    7a7c:	80 81       	ld	r24, Z
    7a7e:	80 64       	ori	r24, 0x40	; 64
    7a80:	8c 93       	st	X, r24
    7a82:	07 c0       	rjmp	.+14     	; 0x7a92 <LED_Off+0x120>
             break;

        case 8:
             PORTA |=  0x80;
    7a84:	a2 e2       	ldi	r26, 0x22	; 34
    7a86:	b0 e0       	ldi	r27, 0x00	; 0
    7a88:	e2 e2       	ldi	r30, 0x22	; 34
    7a8a:	f0 e0       	ldi	r31, 0x00	; 0
    7a8c:	80 81       	ld	r24, Z
    7a8e:	80 68       	ori	r24, 0x80	; 128
    7a90:	8c 93       	st	X, r24
             break;
    }
    OS_EXIT_CRITICAL();
    7a92:	89 81       	ldd	r24, Y+1	; 0x01
    7a94:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    7a98:	0f 90       	pop	r0
    7a9a:	0f 90       	pop	r0
    7a9c:	0f 90       	pop	r0
    7a9e:	0f 90       	pop	r0
    7aa0:	cf 91       	pop	r28
    7aa2:	df 91       	pop	r29
    7aa4:	08 95       	ret

00007aa6 <LED_Toggle>:
*                      8    Toggle LED7 on the board
*********************************************************************************************************
*/

void  LED_Toggle (INT8U led)
{
    7aa6:	df 93       	push	r29
    7aa8:	cf 93       	push	r28
    7aaa:	00 d0       	rcall	.+0      	; 0x7aac <LED_Toggle+0x6>
    7aac:	0f 92       	push	r0
    7aae:	cd b7       	in	r28, 0x3d	; 61
    7ab0:	de b7       	in	r29, 0x3e	; 62
    7ab2:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
    7ab4:	19 82       	std	Y+1, r1	; 0x01
#endif


    OS_ENTER_CRITICAL();
    7ab6:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7aba:	89 83       	std	Y+1, r24	; 0x01
    switch (led) {
    7abc:	8a 81       	ldd	r24, Y+2	; 0x02
    7abe:	28 2f       	mov	r18, r24
    7ac0:	30 e0       	ldi	r19, 0x00	; 0
    7ac2:	3c 83       	std	Y+4, r19	; 0x04
    7ac4:	2b 83       	std	Y+3, r18	; 0x03
    7ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    7ac8:	9c 81       	ldd	r25, Y+4	; 0x04
    7aca:	84 30       	cpi	r24, 0x04	; 4
    7acc:	91 05       	cpc	r25, r1
    7ace:	09 f4       	brne	.+2      	; 0x7ad2 <LED_Toggle+0x2c>
    7ad0:	5a c0       	rjmp	.+180    	; 0x7b86 <LED_Toggle+0xe0>
    7ad2:	2b 81       	ldd	r18, Y+3	; 0x03
    7ad4:	3c 81       	ldd	r19, Y+4	; 0x04
    7ad6:	25 30       	cpi	r18, 0x05	; 5
    7ad8:	31 05       	cpc	r19, r1
    7ada:	d4 f4       	brge	.+52     	; 0x7b10 <LED_Toggle+0x6a>
    7adc:	8b 81       	ldd	r24, Y+3	; 0x03
    7ade:	9c 81       	ldd	r25, Y+4	; 0x04
    7ae0:	81 30       	cpi	r24, 0x01	; 1
    7ae2:	91 05       	cpc	r25, r1
    7ae4:	a9 f1       	breq	.+106    	; 0x7b50 <LED_Toggle+0xaa>
    7ae6:	2b 81       	ldd	r18, Y+3	; 0x03
    7ae8:	3c 81       	ldd	r19, Y+4	; 0x04
    7aea:	22 30       	cpi	r18, 0x02	; 2
    7aec:	31 05       	cpc	r19, r1
    7aee:	2c f4       	brge	.+10     	; 0x7afa <LED_Toggle+0x54>
    7af0:	8b 81       	ldd	r24, Y+3	; 0x03
    7af2:	9c 81       	ldd	r25, Y+4	; 0x04
    7af4:	00 97       	sbiw	r24, 0x00	; 0
    7af6:	21 f1       	breq	.+72     	; 0x7b40 <LED_Toggle+0x9a>
    7af8:	72 c0       	rjmp	.+228    	; 0x7bde <LED_Toggle+0x138>
    7afa:	2b 81       	ldd	r18, Y+3	; 0x03
    7afc:	3c 81       	ldd	r19, Y+4	; 0x04
    7afe:	22 30       	cpi	r18, 0x02	; 2
    7b00:	31 05       	cpc	r19, r1
    7b02:	79 f1       	breq	.+94     	; 0x7b62 <LED_Toggle+0xbc>
    7b04:	8b 81       	ldd	r24, Y+3	; 0x03
    7b06:	9c 81       	ldd	r25, Y+4	; 0x04
    7b08:	83 30       	cpi	r24, 0x03	; 3
    7b0a:	91 05       	cpc	r25, r1
    7b0c:	99 f1       	breq	.+102    	; 0x7b74 <LED_Toggle+0xce>
    7b0e:	67 c0       	rjmp	.+206    	; 0x7bde <LED_Toggle+0x138>
    7b10:	2b 81       	ldd	r18, Y+3	; 0x03
    7b12:	3c 81       	ldd	r19, Y+4	; 0x04
    7b14:	26 30       	cpi	r18, 0x06	; 6
    7b16:	31 05       	cpc	r19, r1
    7b18:	09 f4       	brne	.+2      	; 0x7b1c <LED_Toggle+0x76>
    7b1a:	47 c0       	rjmp	.+142    	; 0x7baa <LED_Toggle+0x104>
    7b1c:	8b 81       	ldd	r24, Y+3	; 0x03
    7b1e:	9c 81       	ldd	r25, Y+4	; 0x04
    7b20:	86 30       	cpi	r24, 0x06	; 6
    7b22:	91 05       	cpc	r25, r1
    7b24:	cc f1       	brlt	.+114    	; 0x7b98 <LED_Toggle+0xf2>
    7b26:	2b 81       	ldd	r18, Y+3	; 0x03
    7b28:	3c 81       	ldd	r19, Y+4	; 0x04
    7b2a:	27 30       	cpi	r18, 0x07	; 7
    7b2c:	31 05       	cpc	r19, r1
    7b2e:	09 f4       	brne	.+2      	; 0x7b32 <LED_Toggle+0x8c>
    7b30:	45 c0       	rjmp	.+138    	; 0x7bbc <LED_Toggle+0x116>
    7b32:	8b 81       	ldd	r24, Y+3	; 0x03
    7b34:	9c 81       	ldd	r25, Y+4	; 0x04
    7b36:	88 30       	cpi	r24, 0x08	; 8
    7b38:	91 05       	cpc	r25, r1
    7b3a:	09 f4       	brne	.+2      	; 0x7b3e <LED_Toggle+0x98>
    7b3c:	48 c0       	rjmp	.+144    	; 0x7bce <LED_Toggle+0x128>
    7b3e:	4f c0       	rjmp	.+158    	; 0x7bde <LED_Toggle+0x138>
        case 0:
             PORTA ^=  0xFF;
    7b40:	a2 e2       	ldi	r26, 0x22	; 34
    7b42:	b0 e0       	ldi	r27, 0x00	; 0
    7b44:	e2 e2       	ldi	r30, 0x22	; 34
    7b46:	f0 e0       	ldi	r31, 0x00	; 0
    7b48:	80 81       	ld	r24, Z
    7b4a:	80 95       	com	r24
    7b4c:	8c 93       	st	X, r24
    7b4e:	47 c0       	rjmp	.+142    	; 0x7bde <LED_Toggle+0x138>
             break;

        case 1:
             PORTA ^=  0x01;
    7b50:	a2 e2       	ldi	r26, 0x22	; 34
    7b52:	b0 e0       	ldi	r27, 0x00	; 0
    7b54:	e2 e2       	ldi	r30, 0x22	; 34
    7b56:	f0 e0       	ldi	r31, 0x00	; 0
    7b58:	90 81       	ld	r25, Z
    7b5a:	81 e0       	ldi	r24, 0x01	; 1
    7b5c:	89 27       	eor	r24, r25
    7b5e:	8c 93       	st	X, r24
    7b60:	3e c0       	rjmp	.+124    	; 0x7bde <LED_Toggle+0x138>
             break;

        case 2:
             PORTA ^=  0x02;
    7b62:	a2 e2       	ldi	r26, 0x22	; 34
    7b64:	b0 e0       	ldi	r27, 0x00	; 0
    7b66:	e2 e2       	ldi	r30, 0x22	; 34
    7b68:	f0 e0       	ldi	r31, 0x00	; 0
    7b6a:	90 81       	ld	r25, Z
    7b6c:	82 e0       	ldi	r24, 0x02	; 2
    7b6e:	89 27       	eor	r24, r25
    7b70:	8c 93       	st	X, r24
    7b72:	35 c0       	rjmp	.+106    	; 0x7bde <LED_Toggle+0x138>
             break;

        case 3:
             PORTA ^=  0x04;
    7b74:	a2 e2       	ldi	r26, 0x22	; 34
    7b76:	b0 e0       	ldi	r27, 0x00	; 0
    7b78:	e2 e2       	ldi	r30, 0x22	; 34
    7b7a:	f0 e0       	ldi	r31, 0x00	; 0
    7b7c:	90 81       	ld	r25, Z
    7b7e:	84 e0       	ldi	r24, 0x04	; 4
    7b80:	89 27       	eor	r24, r25
    7b82:	8c 93       	st	X, r24
    7b84:	2c c0       	rjmp	.+88     	; 0x7bde <LED_Toggle+0x138>
             break;

        case 4:
             PORTA ^=  0x08;
    7b86:	a2 e2       	ldi	r26, 0x22	; 34
    7b88:	b0 e0       	ldi	r27, 0x00	; 0
    7b8a:	e2 e2       	ldi	r30, 0x22	; 34
    7b8c:	f0 e0       	ldi	r31, 0x00	; 0
    7b8e:	90 81       	ld	r25, Z
    7b90:	88 e0       	ldi	r24, 0x08	; 8
    7b92:	89 27       	eor	r24, r25
    7b94:	8c 93       	st	X, r24
    7b96:	23 c0       	rjmp	.+70     	; 0x7bde <LED_Toggle+0x138>
             break;

        case 5:
             PORTA ^=  0x10;
    7b98:	a2 e2       	ldi	r26, 0x22	; 34
    7b9a:	b0 e0       	ldi	r27, 0x00	; 0
    7b9c:	e2 e2       	ldi	r30, 0x22	; 34
    7b9e:	f0 e0       	ldi	r31, 0x00	; 0
    7ba0:	90 81       	ld	r25, Z
    7ba2:	80 e1       	ldi	r24, 0x10	; 16
    7ba4:	89 27       	eor	r24, r25
    7ba6:	8c 93       	st	X, r24
    7ba8:	1a c0       	rjmp	.+52     	; 0x7bde <LED_Toggle+0x138>
             break;

        case 6:
             PORTA ^=  0x20;
    7baa:	a2 e2       	ldi	r26, 0x22	; 34
    7bac:	b0 e0       	ldi	r27, 0x00	; 0
    7bae:	e2 e2       	ldi	r30, 0x22	; 34
    7bb0:	f0 e0       	ldi	r31, 0x00	; 0
    7bb2:	90 81       	ld	r25, Z
    7bb4:	80 e2       	ldi	r24, 0x20	; 32
    7bb6:	89 27       	eor	r24, r25
    7bb8:	8c 93       	st	X, r24
    7bba:	11 c0       	rjmp	.+34     	; 0x7bde <LED_Toggle+0x138>
             break;

        case 7:
             PORTA ^=  0x40;
    7bbc:	a2 e2       	ldi	r26, 0x22	; 34
    7bbe:	b0 e0       	ldi	r27, 0x00	; 0
    7bc0:	e2 e2       	ldi	r30, 0x22	; 34
    7bc2:	f0 e0       	ldi	r31, 0x00	; 0
    7bc4:	90 81       	ld	r25, Z
    7bc6:	80 e4       	ldi	r24, 0x40	; 64
    7bc8:	89 27       	eor	r24, r25
    7bca:	8c 93       	st	X, r24
    7bcc:	08 c0       	rjmp	.+16     	; 0x7bde <LED_Toggle+0x138>
             break;

        case 8:
             PORTA ^=  0x80;
    7bce:	a2 e2       	ldi	r26, 0x22	; 34
    7bd0:	b0 e0       	ldi	r27, 0x00	; 0
    7bd2:	e2 e2       	ldi	r30, 0x22	; 34
    7bd4:	f0 e0       	ldi	r31, 0x00	; 0
    7bd6:	90 81       	ld	r25, Z
    7bd8:	80 e8       	ldi	r24, 0x80	; 128
    7bda:	89 27       	eor	r24, r25
    7bdc:	8c 93       	st	X, r24
             break;
    }
    OS_EXIT_CRITICAL();
    7bde:	89 81       	ldd	r24, Y+1	; 0x01
    7be0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    7be4:	0f 90       	pop	r0
    7be6:	0f 90       	pop	r0
    7be8:	0f 90       	pop	r0
    7bea:	0f 90       	pop	r0
    7bec:	cf 91       	pop	r28
    7bee:	df 91       	pop	r29
    7bf0:	08 95       	ret

00007bf2 <__mulsi3>:
    7bf2:	62 9f       	mul	r22, r18
    7bf4:	d0 01       	movw	r26, r0
    7bf6:	73 9f       	mul	r23, r19
    7bf8:	f0 01       	movw	r30, r0
    7bfa:	82 9f       	mul	r24, r18
    7bfc:	e0 0d       	add	r30, r0
    7bfe:	f1 1d       	adc	r31, r1
    7c00:	64 9f       	mul	r22, r20
    7c02:	e0 0d       	add	r30, r0
    7c04:	f1 1d       	adc	r31, r1
    7c06:	92 9f       	mul	r25, r18
    7c08:	f0 0d       	add	r31, r0
    7c0a:	83 9f       	mul	r24, r19
    7c0c:	f0 0d       	add	r31, r0
    7c0e:	74 9f       	mul	r23, r20
    7c10:	f0 0d       	add	r31, r0
    7c12:	65 9f       	mul	r22, r21
    7c14:	f0 0d       	add	r31, r0
    7c16:	99 27       	eor	r25, r25
    7c18:	72 9f       	mul	r23, r18
    7c1a:	b0 0d       	add	r27, r0
    7c1c:	e1 1d       	adc	r30, r1
    7c1e:	f9 1f       	adc	r31, r25
    7c20:	63 9f       	mul	r22, r19
    7c22:	b0 0d       	add	r27, r0
    7c24:	e1 1d       	adc	r30, r1
    7c26:	f9 1f       	adc	r31, r25
    7c28:	bd 01       	movw	r22, r26
    7c2a:	cf 01       	movw	r24, r30
    7c2c:	11 24       	eor	r1, r1
    7c2e:	08 95       	ret

00007c30 <__divmodhi4>:
    7c30:	97 fb       	bst	r25, 7
    7c32:	09 2e       	mov	r0, r25
    7c34:	07 26       	eor	r0, r23
    7c36:	0a d0       	rcall	.+20     	; 0x7c4c <__divmodhi4_neg1>
    7c38:	77 fd       	sbrc	r23, 7
    7c3a:	04 d0       	rcall	.+8      	; 0x7c44 <__divmodhi4_neg2>
    7c3c:	2e d0       	rcall	.+92     	; 0x7c9a <__udivmodhi4>
    7c3e:	06 d0       	rcall	.+12     	; 0x7c4c <__divmodhi4_neg1>
    7c40:	00 20       	and	r0, r0
    7c42:	1a f4       	brpl	.+6      	; 0x7c4a <__divmodhi4_exit>

00007c44 <__divmodhi4_neg2>:
    7c44:	70 95       	com	r23
    7c46:	61 95       	neg	r22
    7c48:	7f 4f       	sbci	r23, 0xFF	; 255

00007c4a <__divmodhi4_exit>:
    7c4a:	08 95       	ret

00007c4c <__divmodhi4_neg1>:
    7c4c:	f6 f7       	brtc	.-4      	; 0x7c4a <__divmodhi4_exit>
    7c4e:	90 95       	com	r25
    7c50:	81 95       	neg	r24
    7c52:	9f 4f       	sbci	r25, 0xFF	; 255
    7c54:	08 95       	ret

00007c56 <__udivmodsi4>:
    7c56:	a1 e2       	ldi	r26, 0x21	; 33
    7c58:	1a 2e       	mov	r1, r26
    7c5a:	aa 1b       	sub	r26, r26
    7c5c:	bb 1b       	sub	r27, r27
    7c5e:	fd 01       	movw	r30, r26
    7c60:	0d c0       	rjmp	.+26     	; 0x7c7c <__udivmodsi4_ep>

00007c62 <__udivmodsi4_loop>:
    7c62:	aa 1f       	adc	r26, r26
    7c64:	bb 1f       	adc	r27, r27
    7c66:	ee 1f       	adc	r30, r30
    7c68:	ff 1f       	adc	r31, r31
    7c6a:	a2 17       	cp	r26, r18
    7c6c:	b3 07       	cpc	r27, r19
    7c6e:	e4 07       	cpc	r30, r20
    7c70:	f5 07       	cpc	r31, r21
    7c72:	20 f0       	brcs	.+8      	; 0x7c7c <__udivmodsi4_ep>
    7c74:	a2 1b       	sub	r26, r18
    7c76:	b3 0b       	sbc	r27, r19
    7c78:	e4 0b       	sbc	r30, r20
    7c7a:	f5 0b       	sbc	r31, r21

00007c7c <__udivmodsi4_ep>:
    7c7c:	66 1f       	adc	r22, r22
    7c7e:	77 1f       	adc	r23, r23
    7c80:	88 1f       	adc	r24, r24
    7c82:	99 1f       	adc	r25, r25
    7c84:	1a 94       	dec	r1
    7c86:	69 f7       	brne	.-38     	; 0x7c62 <__udivmodsi4_loop>
    7c88:	60 95       	com	r22
    7c8a:	70 95       	com	r23
    7c8c:	80 95       	com	r24
    7c8e:	90 95       	com	r25
    7c90:	9b 01       	movw	r18, r22
    7c92:	ac 01       	movw	r20, r24
    7c94:	bd 01       	movw	r22, r26
    7c96:	cf 01       	movw	r24, r30
    7c98:	08 95       	ret

00007c9a <__udivmodhi4>:
    7c9a:	aa 1b       	sub	r26, r26
    7c9c:	bb 1b       	sub	r27, r27
    7c9e:	51 e1       	ldi	r21, 0x11	; 17
    7ca0:	07 c0       	rjmp	.+14     	; 0x7cb0 <__udivmodhi4_ep>

00007ca2 <__udivmodhi4_loop>:
    7ca2:	aa 1f       	adc	r26, r26
    7ca4:	bb 1f       	adc	r27, r27
    7ca6:	a6 17       	cp	r26, r22
    7ca8:	b7 07       	cpc	r27, r23
    7caa:	10 f0       	brcs	.+4      	; 0x7cb0 <__udivmodhi4_ep>
    7cac:	a6 1b       	sub	r26, r22
    7cae:	b7 0b       	sbc	r27, r23

00007cb0 <__udivmodhi4_ep>:
    7cb0:	88 1f       	adc	r24, r24
    7cb2:	99 1f       	adc	r25, r25
    7cb4:	5a 95       	dec	r21
    7cb6:	a9 f7       	brne	.-22     	; 0x7ca2 <__udivmodhi4_loop>
    7cb8:	80 95       	com	r24
    7cba:	90 95       	com	r25
    7cbc:	bc 01       	movw	r22, r24
    7cbe:	cd 01       	movw	r24, r26
    7cc0:	08 95       	ret

00007cc2 <_exit>:
    7cc2:	f8 94       	cli

00007cc4 <__stop_program>:
    7cc4:	ff cf       	rjmp	.-2      	; 0x7cc4 <__stop_program>
