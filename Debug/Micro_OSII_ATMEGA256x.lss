
Micro_OSII_ATMEGA256x.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d0  00800200  0000817a  0000820e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000817a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000a08  008004d0  008004d0  000084de  2**0
                  ALLOC
  3 .stab         00000768  00000000  00000000  000084e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000054  00000000  00000000  00008c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00008c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000144a  00000000  00000000  00008e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006332  00000000  00000000  0000a266  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000011d6  00000000  00000000  00010598  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005cf7  00000000  00000000  0001176e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b90  00000000  00000000  00017468  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001018  00000000  00000000  00017ff8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a0 00 	jmp	0x140	; 0x140 <__ctors_end>
       4:	0c 94 5b 3d 	jmp	0x7ab6	; 0x7ab6 <__vector_1>
       8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
       c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      10:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      14:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      18:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      1c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      20:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      24:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      28:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      2c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      30:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      34:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      38:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      3c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      40:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      44:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      48:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      4c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      50:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      54:	0c 94 f5 3c 	jmp	0x79ea	; 0x79ea <__vector_21>
      58:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      5c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      60:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      64:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      68:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      6c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      70:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      74:	0c 94 ed 3a 	jmp	0x75da	; 0x75da <__vector_29>
      78:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      7c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      80:	0c 94 ad 3a 	jmp	0x755a	; 0x755a <__vector_32>
      84:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      88:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      8c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      90:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      94:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      98:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      9c:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      a0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      a4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      a8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      ac:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      b0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      b4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      b8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      bc:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      c0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      c4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      c8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      cc:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      d0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      d4:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      d8:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      dc:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>
      e0:	0c 94 c1 00 	jmp	0x182	; 0x182 <__bad_interrupt>

000000e4 <OSDebugEn>:
      e4:	01 00                                               ..

000000e6 <OSEndiannessTest>:
      e6:	78 56 34 12                                         xV4.

000000ea <OSEventMax>:
      ea:	0a 00                                               ..

000000ec <OSEventNameSize>:
      ec:	10 00                                               ..

000000ee <OSEventEn>:
      ee:	01 00                                               ..

000000f0 <OSEventSize>:
      f0:	18 00                                               ..

000000f2 <OSEventTblSize>:
      f2:	f0 00                                               ..

000000f4 <OSFlagEn>:
	...

000000f6 <OSFlagGrpSize>:
	...

000000f8 <OSFlagNodeSize>:
	...

000000fa <OSFlagWidth>:
	...

000000fc <OSFlagMax>:
      fc:	05 00                                               ..

000000fe <OSFlagNameSize>:
      fe:	10 00                                               ..

00000100 <OSLowestPrio>:
     100:	0a 00                                               ..

00000102 <OSMboxEn>:
	...

00000104 <OSMemEn>:
	...

00000106 <OSMemMax>:
     106:	05 00                                               ..

00000108 <OSMemNameSize>:
     108:	10 00                                               ..

0000010a <OSMemSize>:
	...

0000010c <OSMemTblSize>:
	...

0000010e <OSMutexEn>:
	...

00000110 <OSPtrSize>:
     110:	02 00                                               ..

00000112 <OSQEn>:
	...

00000114 <OSQMax>:
     114:	04 00                                               ..

00000116 <OSQSize>:
	...

00000118 <OSRdyTblSize>:
     118:	02 00                                               ..

0000011a <OSSemEn>:
     11a:	01 00                                               ..

0000011c <OSStkWidth>:
     11c:	01 00                                               ..

0000011e <OSTaskCreateEn>:
     11e:	01 00                                               ..

00000120 <OSTaskCreateExtEn>:
     120:	01 00                                               ..

00000122 <OSTaskDelEn>:
	...

00000124 <OSTaskIdleStkSize>:
     124:	af 00                                               ..

00000126 <OSTaskProfileEn>:
     126:	01 00                                               ..

00000128 <OSTaskMax>:
     128:	08 00                                               ..

0000012a <OSTaskNameSize>:
     12a:	10 00                                               ..

0000012c <OSTaskStatEn>:
	...

0000012e <OSTaskStatStkSize>:
     12e:	af 00                                               ..

00000130 <OSTaskStatStkChkEn>:
	...

00000132 <OSTaskSwHookEn>:
     132:	01 00                                               ..

00000134 <OSTCBPrioTblMax>:
     134:	0b 00                                               ..

00000136 <OSTCBSize>:
     136:	3f 00                                               ?.

00000138 <OSTicksPerSec>:
     138:	64 00                                               d.

0000013a <OSTimeTickHookEn>:
     13a:	01 00                                               ..

0000013c <OSVersionNbr>:
     13c:	1e 01                                               ..

0000013e <OSDataSize>:
     13e:	cc 03                                               ..

00000140 <__ctors_end>:
     140:	11 24       	eor	r1, r1
     142:	1f be       	out	0x3f, r1	; 63
     144:	cf ef       	ldi	r28, 0xFF	; 255
     146:	d1 e2       	ldi	r29, 0x21	; 33
     148:	de bf       	out	0x3e, r29	; 62
     14a:	cd bf       	out	0x3d, r28	; 61
     14c:	00 e0       	ldi	r16, 0x00	; 0
     14e:	0c bf       	out	0x3c, r16	; 60

00000150 <__do_copy_data>:
     150:	14 e0       	ldi	r17, 0x04	; 4
     152:	a0 e0       	ldi	r26, 0x00	; 0
     154:	b2 e0       	ldi	r27, 0x02	; 2
     156:	ea e7       	ldi	r30, 0x7A	; 122
     158:	f1 e8       	ldi	r31, 0x81	; 129
     15a:	00 e0       	ldi	r16, 0x00	; 0
     15c:	0b bf       	out	0x3b, r16	; 59
     15e:	02 c0       	rjmp	.+4      	; 0x164 <__do_copy_data+0x14>
     160:	07 90       	elpm	r0, Z+
     162:	0d 92       	st	X+, r0
     164:	a0 3d       	cpi	r26, 0xD0	; 208
     166:	b1 07       	cpc	r27, r17
     168:	d9 f7       	brne	.-10     	; 0x160 <__do_copy_data+0x10>

0000016a <__do_clear_bss>:
     16a:	1e e0       	ldi	r17, 0x0E	; 14
     16c:	a0 ed       	ldi	r26, 0xD0	; 208
     16e:	b4 e0       	ldi	r27, 0x04	; 4
     170:	01 c0       	rjmp	.+2      	; 0x174 <.do_clear_bss_start>

00000172 <.do_clear_bss_loop>:
     172:	1d 92       	st	X+, r1

00000174 <.do_clear_bss_start>:
     174:	a8 3d       	cpi	r26, 0xD8	; 216
     176:	b1 07       	cpc	r27, r17
     178:	e1 f7       	brne	.-8      	; 0x172 <.do_clear_bss_loop>
     17a:	0e 94 4b 3b 	call	0x7696	; 0x7696 <main>
     17e:	0c 94 bb 40 	jmp	0x8176	; 0x8176 <_exit>

00000182 <__bad_interrupt>:
     182:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000186 <OS_CPU_SR_Save>:
     186:	8f b7       	in	r24, 0x3f	; 63
     188:	f8 94       	cli
     18a:	08 95       	ret

0000018c <OS_CPU_SR_Restore>:
     18c:	8f bf       	out	0x3f, r24	; 63
     18e:	08 95       	ret

00000190 <OSStartHighRdy>:
     190:	0e 94 b3 03 	call	0x766	; 0x766 <OSTaskSwHook>
     194:	00 91 12 05 	lds	r16, 0x0512
     198:	03 95       	inc	r16
     19a:	00 93 12 05 	sts	0x0512, r16
     19e:	e0 91 96 07 	lds	r30, 0x0796
     1a2:	f0 91 97 07 	lds	r31, 0x0797
     1a6:	c1 91       	ld	r28, Z+
     1a8:	cd bf       	out	0x3d, r28	; 61
     1aa:	d1 91       	ld	r29, Z+
     1ac:	de bf       	out	0x3e, r29	; 62
     1ae:	0f 91       	pop	r16
     1b0:	0f 77       	andi	r16, 0x7F	; 127
     1b2:	0f bf       	out	0x3f, r16	; 63
     1b4:	0f 91       	pop	r16
     1b6:	0b bf       	out	0x3b, r16	; 59
     1b8:	ff 91       	pop	r31
     1ba:	ef 91       	pop	r30
     1bc:	df 91       	pop	r29
     1be:	cf 91       	pop	r28
     1c0:	bf 91       	pop	r27
     1c2:	af 91       	pop	r26
     1c4:	9f 91       	pop	r25
     1c6:	8f 91       	pop	r24
     1c8:	7f 91       	pop	r23
     1ca:	6f 91       	pop	r22
     1cc:	5f 91       	pop	r21
     1ce:	4f 91       	pop	r20
     1d0:	3f 91       	pop	r19
     1d2:	2f 91       	pop	r18
     1d4:	1f 91       	pop	r17
     1d6:	0f 91       	pop	r16
     1d8:	ff 90       	pop	r15
     1da:	ef 90       	pop	r14
     1dc:	df 90       	pop	r13
     1de:	cf 90       	pop	r12
     1e0:	bf 90       	pop	r11
     1e2:	af 90       	pop	r10
     1e4:	9f 90       	pop	r9
     1e6:	8f 90       	pop	r8
     1e8:	7f 90       	pop	r7
     1ea:	6f 90       	pop	r6
     1ec:	5f 90       	pop	r5
     1ee:	4f 90       	pop	r4
     1f0:	3f 90       	pop	r3
     1f2:	2f 90       	pop	r2
     1f4:	1f 90       	pop	r1
     1f6:	0f 90       	pop	r0
     1f8:	18 95       	reti

000001fa <OSCtxSw>:
     1fa:	0f 92       	push	r0
     1fc:	1f 92       	push	r1
     1fe:	2f 92       	push	r2
     200:	3f 92       	push	r3
     202:	4f 92       	push	r4
     204:	5f 92       	push	r5
     206:	6f 92       	push	r6
     208:	7f 92       	push	r7
     20a:	8f 92       	push	r8
     20c:	9f 92       	push	r9
     20e:	af 92       	push	r10
     210:	bf 92       	push	r11
     212:	cf 92       	push	r12
     214:	df 92       	push	r13
     216:	ef 92       	push	r14
     218:	ff 92       	push	r15
     21a:	0f 93       	push	r16
     21c:	1f 93       	push	r17
     21e:	2f 93       	push	r18
     220:	3f 93       	push	r19
     222:	4f 93       	push	r20
     224:	5f 93       	push	r21
     226:	6f 93       	push	r22
     228:	7f 93       	push	r23
     22a:	8f 93       	push	r24
     22c:	9f 93       	push	r25
     22e:	af 93       	push	r26
     230:	bf 93       	push	r27
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ef 93       	push	r30
     238:	ff 93       	push	r31
     23a:	0b b7       	in	r16, 0x3b	; 59
     23c:	0f 93       	push	r16
     23e:	0f b7       	in	r16, 0x3f	; 63
     240:	0f 93       	push	r16
     242:	e0 91 4d 08 	lds	r30, 0x084D
     246:	f0 91 4e 08 	lds	r31, 0x084E
     24a:	cd b7       	in	r28, 0x3d	; 61
     24c:	c1 93       	st	Z+, r28
     24e:	de b7       	in	r29, 0x3e	; 62
     250:	d1 93       	st	Z+, r29
     252:	0e 94 b3 03 	call	0x766	; 0x766 <OSTaskSwHook>
     256:	00 91 19 05 	lds	r16, 0x0519
     25a:	00 93 8a 07 	sts	0x078A, r16
     25e:	e0 91 96 07 	lds	r30, 0x0796
     262:	f0 91 97 07 	lds	r31, 0x0797
     266:	e0 93 4d 08 	sts	0x084D, r30
     26a:	f0 93 4e 08 	sts	0x084E, r31
     26e:	c1 91       	ld	r28, Z+
     270:	cd bf       	out	0x3d, r28	; 61
     272:	d1 91       	ld	r29, Z+
     274:	de bf       	out	0x3e, r29	; 62
     276:	0f 91       	pop	r16
     278:	07 fd       	sbrc	r16, 7
     27a:	24 c0       	rjmp	.+72     	; 0x2c4 <OSCtxSw_1>
     27c:	0f bf       	out	0x3f, r16	; 63
     27e:	0f 91       	pop	r16
     280:	0b bf       	out	0x3b, r16	; 59
     282:	ff 91       	pop	r31
     284:	ef 91       	pop	r30
     286:	df 91       	pop	r29
     288:	cf 91       	pop	r28
     28a:	bf 91       	pop	r27
     28c:	af 91       	pop	r26
     28e:	9f 91       	pop	r25
     290:	8f 91       	pop	r24
     292:	7f 91       	pop	r23
     294:	6f 91       	pop	r22
     296:	5f 91       	pop	r21
     298:	4f 91       	pop	r20
     29a:	3f 91       	pop	r19
     29c:	2f 91       	pop	r18
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	ff 90       	pop	r15
     2a4:	ef 90       	pop	r14
     2a6:	df 90       	pop	r13
     2a8:	cf 90       	pop	r12
     2aa:	bf 90       	pop	r11
     2ac:	af 90       	pop	r10
     2ae:	9f 90       	pop	r9
     2b0:	8f 90       	pop	r8
     2b2:	7f 90       	pop	r7
     2b4:	6f 90       	pop	r6
     2b6:	5f 90       	pop	r5
     2b8:	4f 90       	pop	r4
     2ba:	3f 90       	pop	r3
     2bc:	2f 90       	pop	r2
     2be:	1f 90       	pop	r1
     2c0:	0f 90       	pop	r0
     2c2:	08 95       	ret

000002c4 <OSCtxSw_1>:
     2c4:	0f 77       	andi	r16, 0x7F	; 127
     2c6:	0f bf       	out	0x3f, r16	; 63
     2c8:	0f 91       	pop	r16
     2ca:	0b bf       	out	0x3b, r16	; 59
     2cc:	ff 91       	pop	r31
     2ce:	ef 91       	pop	r30
     2d0:	df 91       	pop	r29
     2d2:	cf 91       	pop	r28
     2d4:	bf 91       	pop	r27
     2d6:	af 91       	pop	r26
     2d8:	9f 91       	pop	r25
     2da:	8f 91       	pop	r24
     2dc:	7f 91       	pop	r23
     2de:	6f 91       	pop	r22
     2e0:	5f 91       	pop	r21
     2e2:	4f 91       	pop	r20
     2e4:	3f 91       	pop	r19
     2e6:	2f 91       	pop	r18
     2e8:	1f 91       	pop	r17
     2ea:	0f 91       	pop	r16
     2ec:	ff 90       	pop	r15
     2ee:	ef 90       	pop	r14
     2f0:	df 90       	pop	r13
     2f2:	cf 90       	pop	r12
     2f4:	bf 90       	pop	r11
     2f6:	af 90       	pop	r10
     2f8:	9f 90       	pop	r9
     2fa:	8f 90       	pop	r8
     2fc:	7f 90       	pop	r7
     2fe:	6f 90       	pop	r6
     300:	5f 90       	pop	r5
     302:	4f 90       	pop	r4
     304:	3f 90       	pop	r3
     306:	2f 90       	pop	r2
     308:	1f 90       	pop	r1
     30a:	0f 90       	pop	r0
     30c:	18 95       	reti

0000030e <OSIntCtxSw>:
     30e:	0e 94 b3 03 	call	0x766	; 0x766 <OSTaskSwHook>
     312:	00 91 19 05 	lds	r16, 0x0519
     316:	00 93 8a 07 	sts	0x078A, r16
     31a:	e0 91 96 07 	lds	r30, 0x0796
     31e:	f0 91 97 07 	lds	r31, 0x0797
     322:	e0 93 4d 08 	sts	0x084D, r30
     326:	f0 93 4e 08 	sts	0x084E, r31
     32a:	c1 91       	ld	r28, Z+
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	d1 91       	ld	r29, Z+
     330:	de bf       	out	0x3e, r29	; 62
     332:	0f 91       	pop	r16
     334:	07 fd       	sbrc	r16, 7
     336:	24 c0       	rjmp	.+72     	; 0x380 <OSIntCtxSw_1>
     338:	0f bf       	out	0x3f, r16	; 63
     33a:	0f 91       	pop	r16
     33c:	0b bf       	out	0x3b, r16	; 59
     33e:	ff 91       	pop	r31
     340:	ef 91       	pop	r30
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	bf 91       	pop	r27
     348:	af 91       	pop	r26
     34a:	9f 91       	pop	r25
     34c:	8f 91       	pop	r24
     34e:	7f 91       	pop	r23
     350:	6f 91       	pop	r22
     352:	5f 91       	pop	r21
     354:	4f 91       	pop	r20
     356:	3f 91       	pop	r19
     358:	2f 91       	pop	r18
     35a:	1f 91       	pop	r17
     35c:	0f 91       	pop	r16
     35e:	ff 90       	pop	r15
     360:	ef 90       	pop	r14
     362:	df 90       	pop	r13
     364:	cf 90       	pop	r12
     366:	bf 90       	pop	r11
     368:	af 90       	pop	r10
     36a:	9f 90       	pop	r9
     36c:	8f 90       	pop	r8
     36e:	7f 90       	pop	r7
     370:	6f 90       	pop	r6
     372:	5f 90       	pop	r5
     374:	4f 90       	pop	r4
     376:	3f 90       	pop	r3
     378:	2f 90       	pop	r2
     37a:	1f 90       	pop	r1
     37c:	0f 90       	pop	r0
     37e:	08 95       	ret

00000380 <OSIntCtxSw_1>:
     380:	0f 77       	andi	r16, 0x7F	; 127
     382:	0f bf       	out	0x3f, r16	; 63
     384:	0f 91       	pop	r16
     386:	0b bf       	out	0x3b, r16	; 59
     388:	ff 91       	pop	r31
     38a:	ef 91       	pop	r30
     38c:	df 91       	pop	r29
     38e:	cf 91       	pop	r28
     390:	bf 91       	pop	r27
     392:	af 91       	pop	r26
     394:	9f 91       	pop	r25
     396:	8f 91       	pop	r24
     398:	7f 91       	pop	r23
     39a:	6f 91       	pop	r22
     39c:	5f 91       	pop	r21
     39e:	4f 91       	pop	r20
     3a0:	3f 91       	pop	r19
     3a2:	2f 91       	pop	r18
     3a4:	1f 91       	pop	r17
     3a6:	0f 91       	pop	r16
     3a8:	ff 90       	pop	r15
     3aa:	ef 90       	pop	r14
     3ac:	df 90       	pop	r13
     3ae:	cf 90       	pop	r12
     3b0:	bf 90       	pop	r11
     3b2:	af 90       	pop	r10
     3b4:	9f 90       	pop	r9
     3b6:	8f 90       	pop	r8
     3b8:	7f 90       	pop	r7
     3ba:	6f 90       	pop	r6
     3bc:	5f 90       	pop	r5
     3be:	4f 90       	pop	r4
     3c0:	3f 90       	pop	r3
     3c2:	2f 90       	pop	r2
     3c4:	1f 90       	pop	r1
     3c6:	0f 90       	pop	r0
     3c8:	18 95       	reti

000003ca <OSInitHookBegin>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookBegin (void)
{
     3ca:	df 93       	push	r29
     3cc:	cf 93       	push	r28
     3ce:	cd b7       	in	r28, 0x3d	; 61
     3d0:	de b7       	in	r29, 0x3e	; 62
#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr = 0;
     3d2:	10 92 d1 04 	sts	0x04D1, r1
     3d6:	10 92 d0 04 	sts	0x04D0, r1
#endif
}
     3da:	cf 91       	pop	r28
     3dc:	df 91       	pop	r29
     3de:	08 95       	ret

000003e0 <OSInitHookEnd>:
* Note(s)    : 1) Interrupts should be disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSInitHookEnd (void)
{
     3e0:	df 93       	push	r29
     3e2:	cf 93       	push	r28
     3e4:	cd b7       	in	r28, 0x3d	; 61
     3e6:	de b7       	in	r29, 0x3e	; 62
}
     3e8:	cf 91       	pop	r28
     3ea:	df 91       	pop	r29
     3ec:	08 95       	ret

000003ee <OSTaskCreateHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskCreateHook (OS_TCB *ptcb)
{
     3ee:	df 93       	push	r29
     3f0:	cf 93       	push	r28
     3f2:	0f 92       	push	r0
     3f4:	0f 92       	push	r0
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	9a 83       	std	Y+2, r25	; 0x02
     3fc:	89 83       	std	Y+1, r24	; 0x01
#if OS_APP_HOOKS_EN > 0
    App_TaskCreateHook(ptcb);
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	9a 81       	ldd	r25, Y+2	; 0x02
     402:	0e 94 7c 3c 	call	0x78f8	; 0x78f8 <App_TaskCreateHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
     406:	0f 90       	pop	r0
     408:	0f 90       	pop	r0
     40a:	cf 91       	pop	r28
     40c:	df 91       	pop	r29
     40e:	08 95       	ret

00000410 <OSTaskDelHook>:
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0
void  OSTaskDelHook (OS_TCB *ptcb)
{
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	0f 92       	push	r0
     416:	0f 92       	push	r0
     418:	cd b7       	in	r28, 0x3d	; 61
     41a:	de b7       	in	r29, 0x3e	; 62
     41c:	9a 83       	std	Y+2, r25	; 0x02
     41e:	89 83       	std	Y+1, r24	; 0x01
#if OS_APP_HOOKS_EN > 0
    App_TaskDelHook(ptcb);
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	9a 81       	ldd	r25, Y+2	; 0x02
     424:	0e 94 89 3c 	call	0x7912	; 0x7912 <App_TaskDelHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
     428:	0f 90       	pop	r0
     42a:	0f 90       	pop	r0
     42c:	cf 91       	pop	r28
     42e:	df 91       	pop	r29
     430:	08 95       	ret

00000432 <OSTaskIdleHook>:
* Note(s)    : 1) Interrupts are enabled during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION >= 251
void  OSTaskIdleHook (void)
{
     432:	df 93       	push	r29
     434:	cf 93       	push	r28
     436:	cd b7       	in	r28, 0x3d	; 61
     438:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskIdleHook();
     43a:	0e 94 96 3c 	call	0x792c	; 0x792c <App_TaskIdleHook>
#endif
}
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	08 95       	ret

00000444 <OSTaskStatHook>:
*********************************************************************************************************
*/

#if OS_CPU_HOOKS_EN > 0
void  OSTaskStatHook (void)
{
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	cd b7       	in	r28, 0x3d	; 61
     44a:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskStatHook();
     44c:	0e 94 9d 3c 	call	0x793a	; 0x793a <App_TaskStatHook>
#endif
}
     450:	cf 91       	pop	r28
     452:	df 91       	pop	r29
     454:	08 95       	ret

00000456 <OSTaskStkInit>:
*
**********************************************************************************************************
*/

OS_STK  *OSTaskStkInit (void (*task)(void *pd), void *p_arg, OS_STK *ptos, INT16U opt)
{
     456:	df 93       	push	r29
     458:	cf 93       	push	r28
     45a:	cd b7       	in	r28, 0x3d	; 61
     45c:	de b7       	in	r29, 0x3e	; 62
     45e:	2c 97       	sbiw	r28, 0x0c	; 12
     460:	0f b6       	in	r0, 0x3f	; 63
     462:	f8 94       	cli
     464:	de bf       	out	0x3e, r29	; 62
     466:	0f be       	out	0x3f, r0	; 63
     468:	cd bf       	out	0x3d, r28	; 61
     46a:	9e 83       	std	Y+6, r25	; 0x06
     46c:	8d 83       	std	Y+5, r24	; 0x05
     46e:	78 87       	std	Y+8, r23	; 0x08
     470:	6f 83       	std	Y+7, r22	; 0x07
     472:	5a 87       	std	Y+10, r21	; 0x0a
     474:	49 87       	std	Y+9, r20	; 0x09
     476:	3c 87       	std	Y+12, r19	; 0x0c
     478:	2b 87       	std	Y+11, r18	; 0x0b
    INT8U  *stk;
    INT16U  tmp;

    (void)opt;                              /* 'opt' is not used, prevent warning                       */
    stk     = (INT8U *)ptos;				/* AVR return stack                                        */
     47a:	89 85       	ldd	r24, Y+9	; 0x09
     47c:	9a 85       	ldd	r25, Y+10	; 0x0a
     47e:	9c 83       	std	Y+4, r25	; 0x04
     480:	8b 83       	std	Y+3, r24	; 0x03

    tmp     = (INT16U)task;
     482:	8d 81       	ldd	r24, Y+5	; 0x05
     484:	9e 81       	ldd	r25, Y+6	; 0x06
     486:	9a 83       	std	Y+2, r25	; 0x02
     488:	89 83       	std	Y+1, r24	; 0x01
                                            /* Put task start address on top of "hardware stack"        */
    *stk--  = (INT8U)(tmp & 0xFF);    		/* Save PC return address Three Bytes PC in ATMEGA2560/ATMEGA2561 IHA*/
     48a:	29 81       	ldd	r18, Y+1	; 0x01
     48c:	8b 81       	ldd	r24, Y+3	; 0x03
     48e:	9c 81       	ldd	r25, Y+4	; 0x04
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
     494:	8b 81       	ldd	r24, Y+3	; 0x03
     496:	9c 81       	ldd	r25, Y+4	; 0x04
     498:	01 97       	sbiw	r24, 0x01	; 1
     49a:	9c 83       	std	Y+4, r25	; 0x04
     49c:	8b 83       	std	Y+3, r24	; 0x03
    tmp >>= 8;
     49e:	89 81       	ldd	r24, Y+1	; 0x01
     4a0:	9a 81       	ldd	r25, Y+2	; 0x02
     4a2:	89 2f       	mov	r24, r25
     4a4:	99 27       	eor	r25, r25
     4a6:	9a 83       	std	Y+2, r25	; 0x02
     4a8:	89 83       	std	Y+1, r24	; 0x01
    *stk--  = (INT8U)(tmp & 0xFF);
     4aa:	29 81       	ldd	r18, Y+1	; 0x01
     4ac:	8b 81       	ldd	r24, Y+3	; 0x03
     4ae:	9c 81       	ldd	r25, Y+4	; 0x04
     4b0:	fc 01       	movw	r30, r24
     4b2:	20 83       	st	Z, r18
     4b4:	8b 81       	ldd	r24, Y+3	; 0x03
     4b6:	9c 81       	ldd	r25, Y+4	; 0x04
     4b8:	01 97       	sbiw	r24, 0x01	; 1
     4ba:	9c 83       	std	Y+4, r25	; 0x04
     4bc:	8b 83       	std	Y+3, r24	; 0x03
    tmp = 0x0000;
     4be:	1a 82       	std	Y+2, r1	; 0x02
     4c0:	19 82       	std	Y+1, r1	; 0x01
    *stk--  = (INT8U)(tmp & 0xFF);
     4c2:	29 81       	ldd	r18, Y+1	; 0x01
     4c4:	8b 81       	ldd	r24, Y+3	; 0x03
     4c6:	9c 81       	ldd	r25, Y+4	; 0x04
     4c8:	fc 01       	movw	r30, r24
     4ca:	20 83       	st	Z, r18
     4cc:	8b 81       	ldd	r24, Y+3	; 0x03
     4ce:	9c 81       	ldd	r25, Y+4	; 0x04
     4d0:	01 97       	sbiw	r24, 0x01	; 1
     4d2:	9c 83       	std	Y+4, r25	; 0x04
     4d4:	8b 83       	std	Y+3, r24	; 0x03

    *stk--  = (INT8U)0x00;            /* R0    = 0x00                                             */
     4d6:	8b 81       	ldd	r24, Y+3	; 0x03
     4d8:	9c 81       	ldd	r25, Y+4	; 0x04
     4da:	fc 01       	movw	r30, r24
     4dc:	10 82       	st	Z, r1
     4de:	8b 81       	ldd	r24, Y+3	; 0x03
     4e0:	9c 81       	ldd	r25, Y+4	; 0x04
     4e2:	01 97       	sbiw	r24, 0x01	; 1
     4e4:	9c 83       	std	Y+4, r25	; 0x04
     4e6:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R1    = 0x00                                             */
     4e8:	8b 81       	ldd	r24, Y+3	; 0x03
     4ea:	9c 81       	ldd	r25, Y+4	; 0x04
     4ec:	fc 01       	movw	r30, r24
     4ee:	10 82       	st	Z, r1
     4f0:	8b 81       	ldd	r24, Y+3	; 0x03
     4f2:	9c 81       	ldd	r25, Y+4	; 0x04
     4f4:	01 97       	sbiw	r24, 0x01	; 1
     4f6:	9c 83       	std	Y+4, r25	; 0x04
     4f8:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R2    = 0x00                                             */
     4fa:	8b 81       	ldd	r24, Y+3	; 0x03
     4fc:	9c 81       	ldd	r25, Y+4	; 0x04
     4fe:	fc 01       	movw	r30, r24
     500:	10 82       	st	Z, r1
     502:	8b 81       	ldd	r24, Y+3	; 0x03
     504:	9c 81       	ldd	r25, Y+4	; 0x04
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	9c 83       	std	Y+4, r25	; 0x04
     50a:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R3    = 0x00                                             */
     50c:	8b 81       	ldd	r24, Y+3	; 0x03
     50e:	9c 81       	ldd	r25, Y+4	; 0x04
     510:	fc 01       	movw	r30, r24
     512:	10 82       	st	Z, r1
     514:	8b 81       	ldd	r24, Y+3	; 0x03
     516:	9c 81       	ldd	r25, Y+4	; 0x04
     518:	01 97       	sbiw	r24, 0x01	; 1
     51a:	9c 83       	std	Y+4, r25	; 0x04
     51c:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R4    = 0x00                                             */
     51e:	8b 81       	ldd	r24, Y+3	; 0x03
     520:	9c 81       	ldd	r25, Y+4	; 0x04
     522:	fc 01       	movw	r30, r24
     524:	10 82       	st	Z, r1
     526:	8b 81       	ldd	r24, Y+3	; 0x03
     528:	9c 81       	ldd	r25, Y+4	; 0x04
     52a:	01 97       	sbiw	r24, 0x01	; 1
     52c:	9c 83       	std	Y+4, r25	; 0x04
     52e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R5    = 0x00                                             */
     530:	8b 81       	ldd	r24, Y+3	; 0x03
     532:	9c 81       	ldd	r25, Y+4	; 0x04
     534:	fc 01       	movw	r30, r24
     536:	10 82       	st	Z, r1
     538:	8b 81       	ldd	r24, Y+3	; 0x03
     53a:	9c 81       	ldd	r25, Y+4	; 0x04
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	9c 83       	std	Y+4, r25	; 0x04
     540:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R6    = 0x00                                             */
     542:	8b 81       	ldd	r24, Y+3	; 0x03
     544:	9c 81       	ldd	r25, Y+4	; 0x04
     546:	fc 01       	movw	r30, r24
     548:	10 82       	st	Z, r1
     54a:	8b 81       	ldd	r24, Y+3	; 0x03
     54c:	9c 81       	ldd	r25, Y+4	; 0x04
     54e:	01 97       	sbiw	r24, 0x01	; 1
     550:	9c 83       	std	Y+4, r25	; 0x04
     552:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R7    = 0x00                                             */
     554:	8b 81       	ldd	r24, Y+3	; 0x03
     556:	9c 81       	ldd	r25, Y+4	; 0x04
     558:	fc 01       	movw	r30, r24
     55a:	10 82       	st	Z, r1
     55c:	8b 81       	ldd	r24, Y+3	; 0x03
     55e:	9c 81       	ldd	r25, Y+4	; 0x04
     560:	01 97       	sbiw	r24, 0x01	; 1
     562:	9c 83       	std	Y+4, r25	; 0x04
     564:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R8    = 0x00                                             */
     566:	8b 81       	ldd	r24, Y+3	; 0x03
     568:	9c 81       	ldd	r25, Y+4	; 0x04
     56a:	fc 01       	movw	r30, r24
     56c:	10 82       	st	Z, r1
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	9c 81       	ldd	r25, Y+4	; 0x04
     572:	01 97       	sbiw	r24, 0x01	; 1
     574:	9c 83       	std	Y+4, r25	; 0x04
     576:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R9    = 0x00                                             */
     578:	8b 81       	ldd	r24, Y+3	; 0x03
     57a:	9c 81       	ldd	r25, Y+4	; 0x04
     57c:	fc 01       	movw	r30, r24
     57e:	10 82       	st	Z, r1
     580:	8b 81       	ldd	r24, Y+3	; 0x03
     582:	9c 81       	ldd	r25, Y+4	; 0x04
     584:	01 97       	sbiw	r24, 0x01	; 1
     586:	9c 83       	std	Y+4, r25	; 0x04
     588:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R10   = 0x00                                             */
     58a:	8b 81       	ldd	r24, Y+3	; 0x03
     58c:	9c 81       	ldd	r25, Y+4	; 0x04
     58e:	fc 01       	movw	r30, r24
     590:	10 82       	st	Z, r1
     592:	8b 81       	ldd	r24, Y+3	; 0x03
     594:	9c 81       	ldd	r25, Y+4	; 0x04
     596:	01 97       	sbiw	r24, 0x01	; 1
     598:	9c 83       	std	Y+4, r25	; 0x04
     59a:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R11   = 0x00                                             */
     59c:	8b 81       	ldd	r24, Y+3	; 0x03
     59e:	9c 81       	ldd	r25, Y+4	; 0x04
     5a0:	fc 01       	movw	r30, r24
     5a2:	10 82       	st	Z, r1
     5a4:	8b 81       	ldd	r24, Y+3	; 0x03
     5a6:	9c 81       	ldd	r25, Y+4	; 0x04
     5a8:	01 97       	sbiw	r24, 0x01	; 1
     5aa:	9c 83       	std	Y+4, r25	; 0x04
     5ac:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R12   = 0x00                                             */
     5ae:	8b 81       	ldd	r24, Y+3	; 0x03
     5b0:	9c 81       	ldd	r25, Y+4	; 0x04
     5b2:	fc 01       	movw	r30, r24
     5b4:	10 82       	st	Z, r1
     5b6:	8b 81       	ldd	r24, Y+3	; 0x03
     5b8:	9c 81       	ldd	r25, Y+4	; 0x04
     5ba:	01 97       	sbiw	r24, 0x01	; 1
     5bc:	9c 83       	std	Y+4, r25	; 0x04
     5be:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R13   = 0x00                                             */
     5c0:	8b 81       	ldd	r24, Y+3	; 0x03
     5c2:	9c 81       	ldd	r25, Y+4	; 0x04
     5c4:	fc 01       	movw	r30, r24
     5c6:	10 82       	st	Z, r1
     5c8:	8b 81       	ldd	r24, Y+3	; 0x03
     5ca:	9c 81       	ldd	r25, Y+4	; 0x04
     5cc:	01 97       	sbiw	r24, 0x01	; 1
     5ce:	9c 83       	std	Y+4, r25	; 0x04
     5d0:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R14   = 0x00                                             */
     5d2:	8b 81       	ldd	r24, Y+3	; 0x03
     5d4:	9c 81       	ldd	r25, Y+4	; 0x04
     5d6:	fc 01       	movw	r30, r24
     5d8:	10 82       	st	Z, r1
     5da:	8b 81       	ldd	r24, Y+3	; 0x03
     5dc:	9c 81       	ldd	r25, Y+4	; 0x04
     5de:	01 97       	sbiw	r24, 0x01	; 1
     5e0:	9c 83       	std	Y+4, r25	; 0x04
     5e2:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R15   = 0x00                                             */
     5e4:	8b 81       	ldd	r24, Y+3	; 0x03
     5e6:	9c 81       	ldd	r25, Y+4	; 0x04
     5e8:	fc 01       	movw	r30, r24
     5ea:	10 82       	st	Z, r1
     5ec:	8b 81       	ldd	r24, Y+3	; 0x03
     5ee:	9c 81       	ldd	r25, Y+4	; 0x04
     5f0:	01 97       	sbiw	r24, 0x01	; 1
     5f2:	9c 83       	std	Y+4, r25	; 0x04
     5f4:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R16   = 0x00                                             */
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	9c 81       	ldd	r25, Y+4	; 0x04
     5fa:	fc 01       	movw	r30, r24
     5fc:	10 82       	st	Z, r1
     5fe:	8b 81       	ldd	r24, Y+3	; 0x03
     600:	9c 81       	ldd	r25, Y+4	; 0x04
     602:	01 97       	sbiw	r24, 0x01	; 1
     604:	9c 83       	std	Y+4, r25	; 0x04
     606:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R17   = 0x00                                             */
     608:	8b 81       	ldd	r24, Y+3	; 0x03
     60a:	9c 81       	ldd	r25, Y+4	; 0x04
     60c:	fc 01       	movw	r30, r24
     60e:	10 82       	st	Z, r1
     610:	8b 81       	ldd	r24, Y+3	; 0x03
     612:	9c 81       	ldd	r25, Y+4	; 0x04
     614:	01 97       	sbiw	r24, 0x01	; 1
     616:	9c 83       	std	Y+4, r25	; 0x04
     618:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R18   = 0x00                                             */
     61a:	8b 81       	ldd	r24, Y+3	; 0x03
     61c:	9c 81       	ldd	r25, Y+4	; 0x04
     61e:	fc 01       	movw	r30, r24
     620:	10 82       	st	Z, r1
     622:	8b 81       	ldd	r24, Y+3	; 0x03
     624:	9c 81       	ldd	r25, Y+4	; 0x04
     626:	01 97       	sbiw	r24, 0x01	; 1
     628:	9c 83       	std	Y+4, r25	; 0x04
     62a:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R19   = 0x00                                             */
     62c:	8b 81       	ldd	r24, Y+3	; 0x03
     62e:	9c 81       	ldd	r25, Y+4	; 0x04
     630:	fc 01       	movw	r30, r24
     632:	10 82       	st	Z, r1
     634:	8b 81       	ldd	r24, Y+3	; 0x03
     636:	9c 81       	ldd	r25, Y+4	; 0x04
     638:	01 97       	sbiw	r24, 0x01	; 1
     63a:	9c 83       	std	Y+4, r25	; 0x04
     63c:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R20   = 0x00                                             */
     63e:	8b 81       	ldd	r24, Y+3	; 0x03
     640:	9c 81       	ldd	r25, Y+4	; 0x04
     642:	fc 01       	movw	r30, r24
     644:	10 82       	st	Z, r1
     646:	8b 81       	ldd	r24, Y+3	; 0x03
     648:	9c 81       	ldd	r25, Y+4	; 0x04
     64a:	01 97       	sbiw	r24, 0x01	; 1
     64c:	9c 83       	std	Y+4, r25	; 0x04
     64e:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R21   = 0x00                                             */
     650:	8b 81       	ldd	r24, Y+3	; 0x03
     652:	9c 81       	ldd	r25, Y+4	; 0x04
     654:	fc 01       	movw	r30, r24
     656:	10 82       	st	Z, r1
     658:	8b 81       	ldd	r24, Y+3	; 0x03
     65a:	9c 81       	ldd	r25, Y+4	; 0x04
     65c:	01 97       	sbiw	r24, 0x01	; 1
     65e:	9c 83       	std	Y+4, r25	; 0x04
     660:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R22   = 0x00                                             */
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	fc 01       	movw	r30, r24
     668:	10 82       	st	Z, r1
     66a:	8b 81       	ldd	r24, Y+3	; 0x03
     66c:	9c 81       	ldd	r25, Y+4	; 0x04
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	9c 83       	std	Y+4, r25	; 0x04
     672:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R23   = 0x00                                             */
     674:	8b 81       	ldd	r24, Y+3	; 0x03
     676:	9c 81       	ldd	r25, Y+4	; 0x04
     678:	fc 01       	movw	r30, r24
     67a:	10 82       	st	Z, r1
     67c:	8b 81       	ldd	r24, Y+3	; 0x03
     67e:	9c 81       	ldd	r25, Y+4	; 0x04
     680:	01 97       	sbiw	r24, 0x01	; 1
     682:	9c 83       	std	Y+4, r25	; 0x04
     684:	8b 83       	std	Y+3, r24	; 0x03
    tmp     = (INT16U)p_arg;
     686:	8f 81       	ldd	r24, Y+7	; 0x07
     688:	98 85       	ldd	r25, Y+8	; 0x08
     68a:	9a 83       	std	Y+2, r25	; 0x02
     68c:	89 83       	std	Y+1, r24	; 0x01
     *stk--  = (INT8U)tmp;             /* 'p_arg' passed in R24:R25                                */
     68e:	29 81       	ldd	r18, Y+1	; 0x01
     690:	8b 81       	ldd	r24, Y+3	; 0x03
     692:	9c 81       	ldd	r25, Y+4	; 0x04
     694:	fc 01       	movw	r30, r24
     696:	20 83       	st	Z, r18
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	9c 81       	ldd	r25, Y+4	; 0x04
     69c:	01 97       	sbiw	r24, 0x01	; 1
     69e:	9c 83       	std	Y+4, r25	; 0x04
     6a0:	8b 83       	std	Y+3, r24	; 0x03
     *stk--  = (INT8U)(tmp >> 8);
     6a2:	89 81       	ldd	r24, Y+1	; 0x01
     6a4:	9a 81       	ldd	r25, Y+2	; 0x02
     6a6:	89 2f       	mov	r24, r25
     6a8:	99 27       	eor	r25, r25
     6aa:	28 2f       	mov	r18, r24
     6ac:	8b 81       	ldd	r24, Y+3	; 0x03
     6ae:	9c 81       	ldd	r25, Y+4	; 0x04
     6b0:	fc 01       	movw	r30, r24
     6b2:	20 83       	st	Z, r18
     6b4:	8b 81       	ldd	r24, Y+3	; 0x03
     6b6:	9c 81       	ldd	r25, Y+4	; 0x04
     6b8:	01 97       	sbiw	r24, 0x01	; 1
     6ba:	9c 83       	std	Y+4, r25	; 0x04
     6bc:	8b 83       	std	Y+3, r24	; 0x03

    *stk--  = (INT8U)0x00;            /* R26   = 0x00                                             */
     6be:	8b 81       	ldd	r24, Y+3	; 0x03
     6c0:	9c 81       	ldd	r25, Y+4	; 0x04
     6c2:	fc 01       	movw	r30, r24
     6c4:	10 82       	st	Z, r1
     6c6:	8b 81       	ldd	r24, Y+3	; 0x03
     6c8:	9c 81       	ldd	r25, Y+4	; 0x04
     6ca:	01 97       	sbiw	r24, 0x01	; 1
     6cc:	9c 83       	std	Y+4, r25	; 0x04
     6ce:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R27   = 0x00                                             */
     6d0:	8b 81       	ldd	r24, Y+3	; 0x03
     6d2:	9c 81       	ldd	r25, Y+4	; 0x04
     6d4:	fc 01       	movw	r30, r24
     6d6:	10 82       	st	Z, r1
     6d8:	8b 81       	ldd	r24, Y+3	; 0x03
     6da:	9c 81       	ldd	r25, Y+4	; 0x04
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	9c 83       	std	Y+4, r25	; 0x04
     6e0:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R28   = 0x00                                             */
     6e2:	8b 81       	ldd	r24, Y+3	; 0x03
     6e4:	9c 81       	ldd	r25, Y+4	; 0x04
     6e6:	fc 01       	movw	r30, r24
     6e8:	10 82       	st	Z, r1
     6ea:	8b 81       	ldd	r24, Y+3	; 0x03
     6ec:	9c 81       	ldd	r25, Y+4	; 0x04
     6ee:	01 97       	sbiw	r24, 0x01	; 1
     6f0:	9c 83       	std	Y+4, r25	; 0x04
     6f2:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R29   = 0x00                                             */
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	9c 81       	ldd	r25, Y+4	; 0x04
     6f8:	fc 01       	movw	r30, r24
     6fa:	10 82       	st	Z, r1
     6fc:	8b 81       	ldd	r24, Y+3	; 0x03
     6fe:	9c 81       	ldd	r25, Y+4	; 0x04
     700:	01 97       	sbiw	r24, 0x01	; 1
     702:	9c 83       	std	Y+4, r25	; 0x04
     704:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R30   = 0x00                                             */
     706:	8b 81       	ldd	r24, Y+3	; 0x03
     708:	9c 81       	ldd	r25, Y+4	; 0x04
     70a:	fc 01       	movw	r30, r24
     70c:	10 82       	st	Z, r1
     70e:	8b 81       	ldd	r24, Y+3	; 0x03
     710:	9c 81       	ldd	r25, Y+4	; 0x04
     712:	01 97       	sbiw	r24, 0x01	; 1
     714:	9c 83       	std	Y+4, r25	; 0x04
     716:	8b 83       	std	Y+3, r24	; 0x03
    *stk--  = (INT8U)0x00;            /* R31   = 0x00                                             */
     718:	8b 81       	ldd	r24, Y+3	; 0x03
     71a:	9c 81       	ldd	r25, Y+4	; 0x04
     71c:	fc 01       	movw	r30, r24
     71e:	10 82       	st	Z, r1
     720:	8b 81       	ldd	r24, Y+3	; 0x03
     722:	9c 81       	ldd	r25, Y+4	; 0x04
     724:	01 97       	sbiw	r24, 0x01	; 1
     726:	9c 83       	std	Y+4, r25	; 0x04
     728:	8b 83       	std	Y+3, r24	; 0x03
#ifdef RAMPZ
    *stk--  = (INT8U)0x00;            /* RAMPZ = 0x00                                             */
     72a:	8b 81       	ldd	r24, Y+3	; 0x03
     72c:	9c 81       	ldd	r25, Y+4	; 0x04
     72e:	fc 01       	movw	r30, r24
     730:	10 82       	st	Z, r1
     732:	8b 81       	ldd	r24, Y+3	; 0x03
     734:	9c 81       	ldd	r25, Y+4	; 0x04
     736:	01 97       	sbiw	r24, 0x01	; 1
     738:	9c 83       	std	Y+4, r25	; 0x04
     73a:	8b 83       	std	Y+3, r24	; 0x03
#endif
    *stk--  = (INT8U)0x80;            /* SREG  = Interrupts enabled                               */
     73c:	8b 81       	ldd	r24, Y+3	; 0x03
     73e:	9c 81       	ldd	r25, Y+4	; 0x04
     740:	20 e8       	ldi	r18, 0x80	; 128
     742:	fc 01       	movw	r30, r24
     744:	20 83       	st	Z, r18
     746:	8b 81       	ldd	r24, Y+3	; 0x03
     748:	9c 81       	ldd	r25, Y+4	; 0x04
     74a:	01 97       	sbiw	r24, 0x01	; 1
     74c:	9c 83       	std	Y+4, r25	; 0x04
     74e:	8b 83       	std	Y+3, r24	; 0x03

    return ((OS_STK *)stk);
     750:	8b 81       	ldd	r24, Y+3	; 0x03
     752:	9c 81       	ldd	r25, Y+4	; 0x04
}
     754:	2c 96       	adiw	r28, 0x0c	; 12
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <OSTaskSwHook>:
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TASK_SW_HOOK_EN > 0)
void  OSTaskSwHook (void)
{
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	cd b7       	in	r28, 0x3d	; 61
     76c:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TaskSwHook();
     76e:	0e 94 6a 3c 	call	0x78d4	; 0x78d4 <App_TaskSwHook>
#endif
}
     772:	cf 91       	pop	r28
     774:	df 91       	pop	r29
     776:	08 95       	ret

00000778 <OSTCBInitHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if OS_CPU_HOOKS_EN > 0 && OS_VERSION > 203
void  OSTCBInitHook (OS_TCB *ptcb)
{
     778:	df 93       	push	r29
     77a:	cf 93       	push	r28
     77c:	0f 92       	push	r0
     77e:	0f 92       	push	r0
     780:	cd b7       	in	r28, 0x3d	; 61
     782:	de b7       	in	r29, 0x3e	; 62
     784:	9a 83       	std	Y+2, r25	; 0x02
     786:	89 83       	std	Y+1, r24	; 0x01
#if OS_APP_HOOKS_EN > 0
    App_TCBInitHook(ptcb);
     788:	89 81       	ldd	r24, Y+1	; 0x01
     78a:	9a 81       	ldd	r25, Y+2	; 0x02
     78c:	0e 94 a4 3c 	call	0x7948	; 0x7948 <App_TCBInitHook>
#else
    (void)ptcb;                                                         /* Prevent compiler warning                                 */
#endif
}
     790:	0f 90       	pop	r0
     792:	0f 90       	pop	r0
     794:	cf 91       	pop	r28
     796:	df 91       	pop	r29
     798:	08 95       	ret

0000079a <OSTimeTickHook>:
* Note(s)    : 1) Interrupts may or may not be ENABLED during this call.
*********************************************************************************************************
*/
#if (OS_CPU_HOOKS_EN > 0) && (OS_TIME_TICK_HOOK_EN > 0)
void  OSTimeTickHook (void)
{
     79a:	df 93       	push	r29
     79c:	cf 93       	push	r28
     79e:	cd b7       	in	r28, 0x3d	; 61
     7a0:	de b7       	in	r29, 0x3e	; 62
#if OS_APP_HOOKS_EN > 0
    App_TimeTickHook();
     7a2:	0e 94 b1 3c 	call	0x7962	; 0x7962 <App_TimeTickHook>
#endif

#if OS_VERSION >= 281 && OS_TMR_EN > 0
    OSTmrCtr++;
     7a6:	80 91 d0 04 	lds	r24, 0x04D0
     7aa:	90 91 d1 04 	lds	r25, 0x04D1
     7ae:	01 96       	adiw	r24, 0x01	; 1
     7b0:	90 93 d1 04 	sts	0x04D1, r25
     7b4:	80 93 d0 04 	sts	0x04D0, r24
    if (OSTmrCtr >= (OS_TICKS_PER_SEC / OS_TMR_CFG_TICKS_PER_SEC)) {
     7b8:	80 91 d0 04 	lds	r24, 0x04D0
     7bc:	90 91 d1 04 	lds	r25, 0x04D1
     7c0:	8a 30       	cpi	r24, 0x0A	; 10
     7c2:	91 05       	cpc	r25, r1
     7c4:	30 f0       	brcs	.+12     	; 0x7d2 <OSTimeTickHook+0x38>
        OSTmrCtr = 0;
     7c6:	10 92 d1 04 	sts	0x04D1, r1
     7ca:	10 92 d0 04 	sts	0x04D0, r1
        OSTmrSignal();
     7ce:	0e 94 70 1a 	call	0x34e0	; 0x34e0 <OSTmrSignal>
    }
#endif
}
     7d2:	cf 91       	pop	r28
     7d4:	df 91       	pop	r29
     7d6:	08 95       	ret

000007d8 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_VERSION >= 270 && OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
     7d8:	df 93       	push	r29
     7da:	cf 93       	push	r28
     7dc:	0f 92       	push	r0
     7de:	0f 92       	push	r0
     7e0:	cd b7       	in	r28, 0x3d	; 61
     7e2:	de b7       	in	r29, 0x3e	; 62
    void  *ptemp;


    ptemp = (void *)&OSDebugEn;
     7e4:	84 ee       	ldi	r24, 0xE4	; 228
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	9a 83       	std	Y+2, r25	; 0x02
     7ea:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEndiannessTest;
     7ec:	86 ee       	ldi	r24, 0xE6	; 230
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	9a 83       	std	Y+2, r25	; 0x02
     7f2:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEventMax;
     7f4:	8a ee       	ldi	r24, 0xEA	; 234
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	9a 83       	std	Y+2, r25	; 0x02
     7fa:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventNameSize;
     7fc:	8c ee       	ldi	r24, 0xEC	; 236
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	9a 83       	std	Y+2, r25	; 0x02
     802:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventEn;
     804:	8e ee       	ldi	r24, 0xEE	; 238
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	9a 83       	std	Y+2, r25	; 0x02
     80a:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventSize;
     80c:	80 ef       	ldi	r24, 0xF0	; 240
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	9a 83       	std	Y+2, r25	; 0x02
     812:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventTblSize;
     814:	82 ef       	ldi	r24, 0xF2	; 242
     816:	90 e0       	ldi	r25, 0x00	; 0
     818:	9a 83       	std	Y+2, r25	; 0x02
     81a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSFlagEn;
     81c:	84 ef       	ldi	r24, 0xF4	; 244
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagGrpSize;
     824:	86 ef       	ldi	r24, 0xF6	; 246
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	9a 83       	std	Y+2, r25	; 0x02
     82a:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNodeSize;
     82c:	88 ef       	ldi	r24, 0xF8	; 248
     82e:	90 e0       	ldi	r25, 0x00	; 0
     830:	9a 83       	std	Y+2, r25	; 0x02
     832:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagWidth;
     834:	8a ef       	ldi	r24, 0xFA	; 250
     836:	90 e0       	ldi	r25, 0x00	; 0
     838:	9a 83       	std	Y+2, r25	; 0x02
     83a:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagMax;
     83c:	8c ef       	ldi	r24, 0xFC	; 252
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	9a 83       	std	Y+2, r25	; 0x02
     842:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNameSize;
     844:	8e ef       	ldi	r24, 0xFE	; 254
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	9a 83       	std	Y+2, r25	; 0x02
     84a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSLowestPrio;
     84c:	80 e0       	ldi	r24, 0x00	; 0
     84e:	91 e0       	ldi	r25, 0x01	; 1
     850:	9a 83       	std	Y+2, r25	; 0x02
     852:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMboxEn;
     854:	82 e0       	ldi	r24, 0x02	; 2
     856:	91 e0       	ldi	r25, 0x01	; 1
     858:	9a 83       	std	Y+2, r25	; 0x02
     85a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMemEn;
     85c:	84 e0       	ldi	r24, 0x04	; 4
     85e:	91 e0       	ldi	r25, 0x01	; 1
     860:	9a 83       	std	Y+2, r25	; 0x02
     862:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemMax;
     864:	86 e0       	ldi	r24, 0x06	; 6
     866:	91 e0       	ldi	r25, 0x01	; 1
     868:	9a 83       	std	Y+2, r25	; 0x02
     86a:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemNameSize;
     86c:	88 e0       	ldi	r24, 0x08	; 8
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9a 83       	std	Y+2, r25	; 0x02
     872:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemSize;
     874:	8a e0       	ldi	r24, 0x0A	; 10
     876:	91 e0       	ldi	r25, 0x01	; 1
     878:	9a 83       	std	Y+2, r25	; 0x02
     87a:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemTblSize;
     87c:	8c e0       	ldi	r24, 0x0C	; 12
     87e:	91 e0       	ldi	r25, 0x01	; 1
     880:	9a 83       	std	Y+2, r25	; 0x02
     882:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMutexEn;
     884:	8e e0       	ldi	r24, 0x0E	; 14
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	9a 83       	std	Y+2, r25	; 0x02
     88a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSPtrSize;
     88c:	80 e1       	ldi	r24, 0x10	; 16
     88e:	91 e0       	ldi	r25, 0x01	; 1
     890:	9a 83       	std	Y+2, r25	; 0x02
     892:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSQEn;
     894:	82 e1       	ldi	r24, 0x12	; 18
     896:	91 e0       	ldi	r25, 0x01	; 1
     898:	9a 83       	std	Y+2, r25	; 0x02
     89a:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQMax;
     89c:	84 e1       	ldi	r24, 0x14	; 20
     89e:	91 e0       	ldi	r25, 0x01	; 1
     8a0:	9a 83       	std	Y+2, r25	; 0x02
     8a2:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQSize;
     8a4:	86 e1       	ldi	r24, 0x16	; 22
     8a6:	91 e0       	ldi	r25, 0x01	; 1
     8a8:	9a 83       	std	Y+2, r25	; 0x02
     8aa:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSRdyTblSize;
     8ac:	88 e1       	ldi	r24, 0x18	; 24
     8ae:	91 e0       	ldi	r25, 0x01	; 1
     8b0:	9a 83       	std	Y+2, r25	; 0x02
     8b2:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSSemEn;
     8b4:	8a e1       	ldi	r24, 0x1A	; 26
     8b6:	91 e0       	ldi	r25, 0x01	; 1
     8b8:	9a 83       	std	Y+2, r25	; 0x02
     8ba:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSStkWidth;
     8bc:	8c e1       	ldi	r24, 0x1C	; 28
     8be:	91 e0       	ldi	r25, 0x01	; 1
     8c0:	9a 83       	std	Y+2, r25	; 0x02
     8c2:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTaskCreateEn;
     8c4:	8e e1       	ldi	r24, 0x1E	; 30
     8c6:	91 e0       	ldi	r25, 0x01	; 1
     8c8:	9a 83       	std	Y+2, r25	; 0x02
     8ca:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskCreateExtEn;
     8cc:	80 e2       	ldi	r24, 0x20	; 32
     8ce:	91 e0       	ldi	r25, 0x01	; 1
     8d0:	9a 83       	std	Y+2, r25	; 0x02
     8d2:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskDelEn;
     8d4:	82 e2       	ldi	r24, 0x22	; 34
     8d6:	91 e0       	ldi	r25, 0x01	; 1
     8d8:	9a 83       	std	Y+2, r25	; 0x02
     8da:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskIdleStkSize;
     8dc:	84 e2       	ldi	r24, 0x24	; 36
     8de:	91 e0       	ldi	r25, 0x01	; 1
     8e0:	9a 83       	std	Y+2, r25	; 0x02
     8e2:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskProfileEn;
     8e4:	86 e2       	ldi	r24, 0x26	; 38
     8e6:	91 e0       	ldi	r25, 0x01	; 1
     8e8:	9a 83       	std	Y+2, r25	; 0x02
     8ea:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskMax;
     8ec:	88 e2       	ldi	r24, 0x28	; 40
     8ee:	91 e0       	ldi	r25, 0x01	; 1
     8f0:	9a 83       	std	Y+2, r25	; 0x02
     8f2:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskNameSize;
     8f4:	8a e2       	ldi	r24, 0x2A	; 42
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	9a 83       	std	Y+2, r25	; 0x02
     8fa:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatEn;
     8fc:	8c e2       	ldi	r24, 0x2C	; 44
     8fe:	91 e0       	ldi	r25, 0x01	; 1
     900:	9a 83       	std	Y+2, r25	; 0x02
     902:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkSize;
     904:	8e e2       	ldi	r24, 0x2E	; 46
     906:	91 e0       	ldi	r25, 0x01	; 1
     908:	9a 83       	std	Y+2, r25	; 0x02
     90a:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkChkEn;
     90c:	80 e3       	ldi	r24, 0x30	; 48
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	9a 83       	std	Y+2, r25	; 0x02
     912:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskSwHookEn;
     914:	82 e3       	ldi	r24, 0x32	; 50
     916:	91 e0       	ldi	r25, 0x01	; 1
     918:	9a 83       	std	Y+2, r25	; 0x02
     91a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTCBPrioTblMax;
     91c:	84 e3       	ldi	r24, 0x34	; 52
     91e:	91 e0       	ldi	r25, 0x01	; 1
     920:	9a 83       	std	Y+2, r25	; 0x02
     922:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTCBSize;
     924:	86 e3       	ldi	r24, 0x36	; 54
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	9a 83       	std	Y+2, r25	; 0x02
     92a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTicksPerSec;
     92c:	88 e3       	ldi	r24, 0x38	; 56
     92e:	91 e0       	ldi	r25, 0x01	; 1
     930:	9a 83       	std	Y+2, r25	; 0x02
     932:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTimeTickHookEn;
     934:	8a e3       	ldi	r24, 0x3A	; 58
     936:	91 e0       	ldi	r25, 0x01	; 1
     938:	9a 83       	std	Y+2, r25	; 0x02
     93a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSVersionNbr;
     93c:	8c e3       	ldi	r24, 0x3C	; 60
     93e:	91 e0       	ldi	r25, 0x01	; 1
     940:	9a 83       	std	Y+2, r25	; 0x02
     942:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSDataSize;
     944:	8e e3       	ldi	r24, 0x3E	; 62
     946:	91 e0       	ldi	r25, 0x01	; 1
     948:	9a 83       	std	Y+2, r25	; 0x02
     94a:	89 83       	std	Y+1, r24	; 0x01

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
     94c:	0f 90       	pop	r0
     94e:	0f 90       	pop	r0
     950:	cf 91       	pop	r28
     952:	df 91       	pop	r29
     954:	08 95       	ret

00000956 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     956:	df 93       	push	r29
     958:	cf 93       	push	r28
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	28 97       	sbiw	r28, 0x08	; 8
     960:	0f b6       	in	r0, 0x3f	; 63
     962:	f8 94       	cli
     964:	de bf       	out	0x3e, r29	; 62
     966:	0f be       	out	0x3f, r0	; 63
     968:	cd bf       	out	0x3d, r28	; 61
     96a:	9c 83       	std	Y+4, r25	; 0x04
     96c:	8b 83       	std	Y+3, r24	; 0x03
     96e:	7e 83       	std	Y+6, r23	; 0x06
     970:	6d 83       	std	Y+5, r22	; 0x05
     972:	58 87       	std	Y+8, r21	; 0x08
     974:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     976:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     978:	80 91 4c 08 	lds	r24, 0x084C
     97c:	88 23       	and	r24, r24
     97e:	39 f0       	breq	.+14     	; 0x98e <OSEventNameGet+0x38>
        *perr  = OS_ERR_NAME_GET_ISR;
     980:	8f 81       	ldd	r24, Y+7	; 0x07
     982:	98 85       	ldd	r25, Y+8	; 0x08
     984:	21 e1       	ldi	r18, 0x11	; 17
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
        return (0);
     98a:	80 e0       	ldi	r24, 0x00	; 0
     98c:	27 c0       	rjmp	.+78     	; 0x9dc <OSEventNameGet+0x86>
    }
    switch (pevent->OSEventType) {
     98e:	8b 81       	ldd	r24, Y+3	; 0x03
     990:	9c 81       	ldd	r25, Y+4	; 0x04
     992:	fc 01       	movw	r30, r24
     994:	80 81       	ld	r24, Z
     996:	88 2f       	mov	r24, r24
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	84 30       	cpi	r24, 0x04	; 4
     99e:	91 05       	cpc	r25, r1
     9a0:	b8 f4       	brcc	.+46     	; 0x9d0 <OSEventNameGet+0x7a>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
     9a2:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     9a6:	89 83       	std	Y+1, r24	; 0x01
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
     9a8:	8b 81       	ldd	r24, Y+3	; 0x03
     9aa:	9c 81       	ldd	r25, Y+4	; 0x04
     9ac:	9c 01       	movw	r18, r24
     9ae:	28 5f       	subi	r18, 0xF8	; 248
     9b0:	3f 4f       	sbci	r19, 0xFF	; 255
     9b2:	8d 81       	ldd	r24, Y+5	; 0x05
     9b4:	9e 81       	ldd	r25, Y+6	; 0x06
     9b6:	b9 01       	movw	r22, r18
     9b8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OS_StrCopy>
     9bc:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
     9be:	89 81       	ldd	r24, Y+1	; 0x01
     9c0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
     9c4:	8f 81       	ldd	r24, Y+7	; 0x07
     9c6:	98 85       	ldd	r25, Y+8	; 0x08
     9c8:	fc 01       	movw	r30, r24
     9ca:	10 82       	st	Z, r1
    return (len);
     9cc:	8a 81       	ldd	r24, Y+2	; 0x02
     9ce:	06 c0       	rjmp	.+12     	; 0x9dc <OSEventNameGet+0x86>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     9d0:	8f 81       	ldd	r24, Y+7	; 0x07
     9d2:	98 85       	ldd	r25, Y+8	; 0x08
     9d4:	21 e0       	ldi	r18, 0x01	; 1
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
             return (0);
     9da:	80 e0       	ldi	r24, 0x00	; 0
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
     9dc:	28 96       	adiw	r28, 0x08	; 8
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	f8 94       	cli
     9e2:	de bf       	out	0x3e, r29	; 62
     9e4:	0f be       	out	0x3f, r0	; 63
     9e6:	cd bf       	out	0x3d, r28	; 61
     9e8:	cf 91       	pop	r28
     9ea:	df 91       	pop	r29
     9ec:	08 95       	ret

000009ee <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
     9ee:	df 93       	push	r29
     9f0:	cf 93       	push	r28
     9f2:	cd b7       	in	r28, 0x3d	; 61
     9f4:	de b7       	in	r29, 0x3e	; 62
     9f6:	28 97       	sbiw	r28, 0x08	; 8
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	de bf       	out	0x3e, r29	; 62
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	cd bf       	out	0x3d, r28	; 61
     a02:	9c 83       	std	Y+4, r25	; 0x04
     a04:	8b 83       	std	Y+3, r24	; 0x03
     a06:	7e 83       	std	Y+6, r23	; 0x06
     a08:	6d 83       	std	Y+5, r22	; 0x05
     a0a:	58 87       	std	Y+8, r21	; 0x08
     a0c:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     a0e:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
     a10:	80 91 4c 08 	lds	r24, 0x084C
     a14:	88 23       	and	r24, r24
     a16:	31 f0       	breq	.+12     	; 0xa24 <OSEventNameSet+0x36>
        *perr = OS_ERR_NAME_SET_ISR;
     a18:	8f 81       	ldd	r24, Y+7	; 0x07
     a1a:	98 85       	ldd	r25, Y+8	; 0x08
     a1c:	22 e1       	ldi	r18, 0x12	; 18
     a1e:	fc 01       	movw	r30, r24
     a20:	20 83       	st	Z, r18
        return;
     a22:	34 c0       	rjmp	.+104    	; 0xa8c <OSEventNameSet+0x9e>
    }
    switch (pevent->OSEventType) {
     a24:	8b 81       	ldd	r24, Y+3	; 0x03
     a26:	9c 81       	ldd	r25, Y+4	; 0x04
     a28:	fc 01       	movw	r30, r24
     a2a:	80 81       	ld	r24, Z
     a2c:	88 2f       	mov	r24, r24
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	01 97       	sbiw	r24, 0x01	; 1
     a32:	84 30       	cpi	r24, 0x04	; 4
     a34:	91 05       	cpc	r25, r1
     a36:	60 f4       	brcc	.+24     	; 0xa50 <OSEventNameSet+0x62>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
     a38:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     a3c:	89 83       	std	Y+1, r24	; 0x01
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
     a3e:	8d 81       	ldd	r24, Y+5	; 0x05
     a40:	9e 81       	ldd	r25, Y+6	; 0x06
     a42:	0e 94 06 0b 	call	0x160c	; 0x160c <OS_StrLen>
     a46:	8a 83       	std	Y+2, r24	; 0x02
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
     a48:	8a 81       	ldd	r24, Y+2	; 0x02
     a4a:	80 31       	cpi	r24, 0x10	; 16
     a4c:	38 f4       	brcc	.+14     	; 0xa5c <OSEventNameSet+0x6e>
     a4e:	0f c0       	rjmp	.+30     	; 0xa6e <OSEventNameSet+0x80>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
     a50:	8f 81       	ldd	r24, Y+7	; 0x07
     a52:	98 85       	ldd	r25, Y+8	; 0x08
     a54:	21 e0       	ldi	r18, 0x01	; 1
     a56:	fc 01       	movw	r30, r24
     a58:	20 83       	st	Z, r18
             return;
     a5a:	18 c0       	rjmp	.+48     	; 0xa8c <OSEventNameSet+0x9e>
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
     a5c:	89 81       	ldd	r24, Y+1	; 0x01
     a5e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
     a62:	8f 81       	ldd	r24, Y+7	; 0x07
     a64:	98 85       	ldd	r25, Y+8	; 0x08
     a66:	2b e0       	ldi	r18, 0x0B	; 11
     a68:	fc 01       	movw	r30, r24
     a6a:	20 83       	st	Z, r18
        return;
     a6c:	0f c0       	rjmp	.+30     	; 0xa8c <OSEventNameSet+0x9e>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
     a6e:	8b 81       	ldd	r24, Y+3	; 0x03
     a70:	9c 81       	ldd	r25, Y+4	; 0x04
     a72:	08 96       	adiw	r24, 0x08	; 8
     a74:	2d 81       	ldd	r18, Y+5	; 0x05
     a76:	3e 81       	ldd	r19, Y+6	; 0x06
     a78:	b9 01       	movw	r22, r18
     a7a:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OS_StrCopy>
    OS_EXIT_CRITICAL();
     a7e:	89 81       	ldd	r24, Y+1	; 0x01
     a80:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
     a84:	8f 81       	ldd	r24, Y+7	; 0x07
     a86:	98 85       	ldd	r25, Y+8	; 0x08
     a88:	fc 01       	movw	r30, r24
     a8a:	10 82       	st	Z, r1
}
     a8c:	28 96       	adiw	r28, 0x08	; 8
     a8e:	0f b6       	in	r0, 0x3f	; 63
     a90:	f8 94       	cli
     a92:	de bf       	out	0x3e, r29	; 62
     a94:	0f be       	out	0x3f, r0	; 63
     a96:	cd bf       	out	0x3d, r28	; 61
     a98:	cf 91       	pop	r28
     a9a:	df 91       	pop	r29
     a9c:	08 95       	ret

00000a9e <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
     a9e:	df 93       	push	r29
     aa0:	cf 93       	push	r28
     aa2:	cd b7       	in	r28, 0x3d	; 61
     aa4:	de b7       	in	r29, 0x3e	; 62
    OSInitHookBegin();                                           /* Call port specific initialization code   */
     aa6:	0e 94 e5 01 	call	0x3ca	; 0x3ca <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
     aaa:	0e 94 fe 08 	call	0x11fc	; 0x11fc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
     aae:	0e 94 25 09 	call	0x124a	; 0x124a <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
     ab2:	0e 94 a2 09 	call	0x1344	; 0x1344 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
     ab6:	0e 94 9e 08 	call	0x113c	; 0x113c <OS_InitEventList>

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
     aba:	0e 94 53 09 	call	0x12a6	; 0x12a6 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
     abe:	0e 94 1e 1b 	call	0x363c	; 0x363c <OSTmr_Init>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
     ac2:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
     ac6:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OSDebugInit>
#endif
}
     aca:	cf 91       	pop	r28
     acc:	df 91       	pop	r29
     ace:	08 95       	ret

00000ad0 <OSIntEnter>:
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
     ad0:	df 93       	push	r29
     ad2:	cf 93       	push	r28
     ad4:	cd b7       	in	r28, 0x3d	; 61
     ad6:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_TRUE) {
     ad8:	80 91 12 05 	lds	r24, 0x0512
     adc:	81 30       	cpi	r24, 0x01	; 1
     ade:	49 f4       	brne	.+18     	; 0xaf2 <OSIntEnter+0x22>
        if (OSIntNesting < 255u) {
     ae0:	80 91 4c 08 	lds	r24, 0x084C
     ae4:	8f 3f       	cpi	r24, 0xFF	; 255
     ae6:	29 f0       	breq	.+10     	; 0xaf2 <OSIntEnter+0x22>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
     ae8:	80 91 4c 08 	lds	r24, 0x084C
     aec:	8f 5f       	subi	r24, 0xFF	; 255
     aee:	80 93 4c 08 	sts	0x084C, r24
        }
    }
}
     af2:	cf 91       	pop	r28
     af4:	df 91       	pop	r29
     af6:	08 95       	ret

00000af8 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
     af8:	df 93       	push	r29
     afa:	cf 93       	push	r28
     afc:	0f 92       	push	r0
     afe:	cd b7       	in	r28, 0x3d	; 61
     b00:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
     b02:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {
     b04:	80 91 12 05 	lds	r24, 0x0512
     b08:	81 30       	cpi	r24, 0x01	; 1
     b0a:	09 f0       	breq	.+2      	; 0xb0e <OSIntExit+0x16>
     b0c:	55 c0       	rjmp	.+170    	; 0xbb8 <OSIntExit+0xc0>
        OS_ENTER_CRITICAL();
     b0e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     b12:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
     b14:	80 91 4c 08 	lds	r24, 0x084C
     b18:	88 23       	and	r24, r24
     b1a:	29 f0       	breq	.+10     	; 0xb26 <OSIntExit+0x2e>
            OSIntNesting--;
     b1c:	80 91 4c 08 	lds	r24, 0x084C
     b20:	81 50       	subi	r24, 0x01	; 1
     b22:	80 93 4c 08 	sts	0x084C, r24
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
     b26:	80 91 4c 08 	lds	r24, 0x084C
     b2a:	88 23       	and	r24, r24
     b2c:	09 f0       	breq	.+2      	; 0xb30 <OSIntExit+0x38>
     b2e:	41 c0       	rjmp	.+130    	; 0xbb2 <OSIntExit+0xba>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
     b30:	80 91 0f 05 	lds	r24, 0x050F
     b34:	88 23       	and	r24, r24
     b36:	e9 f5       	brne	.+122    	; 0xbb2 <OSIntExit+0xba>
                OS_SchedNew();
     b38:	0e 94 aa 0a 	call	0x1554	; 0x1554 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
     b3c:	90 91 19 05 	lds	r25, 0x0519
     b40:	80 91 8a 07 	lds	r24, 0x078A
     b44:	98 17       	cp	r25, r24
     b46:	a9 f1       	breq	.+106    	; 0xbb2 <OSIntExit+0xba>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
     b48:	80 91 19 05 	lds	r24, 0x0519
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	80 51       	subi	r24, 0x10	; 16
     b56:	94 4f       	sbci	r25, 0xF4	; 244
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	91 81       	ldd	r25, Z+1	; 0x01
     b5e:	90 93 97 07 	sts	0x0797, r25
     b62:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
     b66:	20 91 96 07 	lds	r18, 0x0796
     b6a:	30 91 97 07 	lds	r19, 0x0797
     b6e:	f9 01       	movw	r30, r18
     b70:	85 8d       	ldd	r24, Z+29	; 0x1d
     b72:	96 8d       	ldd	r25, Z+30	; 0x1e
     b74:	a7 8d       	ldd	r26, Z+31	; 0x1f
     b76:	b0 a1       	ldd	r27, Z+32	; 0x20
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	a1 1d       	adc	r26, r1
     b7c:	b1 1d       	adc	r27, r1
     b7e:	f9 01       	movw	r30, r18
     b80:	85 8f       	std	Z+29, r24	; 0x1d
     b82:	96 8f       	std	Z+30, r25	; 0x1e
     b84:	a7 8f       	std	Z+31, r26	; 0x1f
     b86:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
     b88:	80 91 8d 07 	lds	r24, 0x078D
     b8c:	90 91 8e 07 	lds	r25, 0x078E
     b90:	a0 91 8f 07 	lds	r26, 0x078F
     b94:	b0 91 90 07 	lds	r27, 0x0790
     b98:	01 96       	adiw	r24, 0x01	; 1
     b9a:	a1 1d       	adc	r26, r1
     b9c:	b1 1d       	adc	r27, r1
     b9e:	80 93 8d 07 	sts	0x078D, r24
     ba2:	90 93 8e 07 	sts	0x078E, r25
     ba6:	a0 93 8f 07 	sts	0x078F, r26
     baa:	b0 93 90 07 	sts	0x0790, r27
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
     bae:	0e 94 87 01 	call	0x30e	; 0x30e <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
     bb2:	89 81       	ldd	r24, Y+1	; 0x01
     bb4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
     bb8:	0f 90       	pop	r0
     bba:	cf 91       	pop	r28
     bbc:	df 91       	pop	r29
     bbe:	08 95       	ret

00000bc0 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
     bc0:	df 93       	push	r29
     bc2:	cf 93       	push	r28
     bc4:	0f 92       	push	r0
     bc6:	cd b7       	in	r28, 0x3d	; 61
     bc8:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
     bca:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
     bcc:	80 91 12 05 	lds	r24, 0x0512
     bd0:	81 30       	cpi	r24, 0x01	; 1
     bd2:	99 f4       	brne	.+38     	; 0xbfa <OSSchedLock+0x3a>
        OS_ENTER_CRITICAL();
     bd4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     bd8:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
     bda:	80 91 4c 08 	lds	r24, 0x084C
     bde:	88 23       	and	r24, r24
     be0:	49 f4       	brne	.+18     	; 0xbf4 <OSSchedLock+0x34>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
     be2:	80 91 0f 05 	lds	r24, 0x050F
     be6:	8f 3f       	cpi	r24, 0xFF	; 255
     be8:	29 f0       	breq	.+10     	; 0xbf4 <OSSchedLock+0x34>
                OSLockNesting++;                 /* Increment lock nesting level                       */
     bea:	80 91 0f 05 	lds	r24, 0x050F
     bee:	8f 5f       	subi	r24, 0xFF	; 255
     bf0:	80 93 0f 05 	sts	0x050F, r24
            }
        }
        OS_EXIT_CRITICAL();
     bf4:	89 81       	ldd	r24, Y+1	; 0x01
     bf6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
     bfa:	0f 90       	pop	r0
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	08 95       	ret

00000c02 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
     c02:	df 93       	push	r29
     c04:	cf 93       	push	r28
     c06:	0f 92       	push	r0
     c08:	cd b7       	in	r28, 0x3d	; 61
     c0a:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
     c0c:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
     c0e:	80 91 12 05 	lds	r24, 0x0512
     c12:	81 30       	cpi	r24, 0x01	; 1
     c14:	29 f5       	brne	.+74     	; 0xc60 <OSSchedUnlock+0x5e>
        OS_ENTER_CRITICAL();
     c16:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     c1a:	89 83       	std	Y+1, r24	; 0x01
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
     c1c:	80 91 0f 05 	lds	r24, 0x050F
     c20:	88 23       	and	r24, r24
     c22:	d9 f0       	breq	.+54     	; 0xc5a <OSSchedUnlock+0x58>
            OSLockNesting--;                               /* Decrement lock nesting level             */
     c24:	80 91 0f 05 	lds	r24, 0x050F
     c28:	81 50       	subi	r24, 0x01	; 1
     c2a:	80 93 0f 05 	sts	0x050F, r24
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
     c2e:	80 91 0f 05 	lds	r24, 0x050F
     c32:	88 23       	and	r24, r24
     c34:	71 f4       	brne	.+28     	; 0xc52 <OSSchedUnlock+0x50>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
     c36:	80 91 4c 08 	lds	r24, 0x084C
     c3a:	88 23       	and	r24, r24
     c3c:	31 f4       	brne	.+12     	; 0xc4a <OSSchedUnlock+0x48>
                    OS_EXIT_CRITICAL();
     c3e:	89 81       	ldd	r24, Y+1	; 0x01
     c40:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
     c44:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
                } else {
                    OS_EXIT_CRITICAL();
                }
            } else {
                OS_EXIT_CRITICAL();
     c48:	0b c0       	rjmp	.+22     	; 0xc60 <OSSchedUnlock+0x5e>
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
                } else {
                    OS_EXIT_CRITICAL();
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                }
            } else {
                OS_EXIT_CRITICAL();
     c50:	07 c0       	rjmp	.+14     	; 0xc60 <OSSchedUnlock+0x5e>
     c52:	89 81       	ldd	r24, Y+1	; 0x01
     c54:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
     c58:	03 c0       	rjmp	.+6      	; 0xc60 <OSSchedUnlock+0x5e>
            }
        } else {
            OS_EXIT_CRITICAL();
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
    }
}
     c60:	0f 90       	pop	r0
     c62:	cf 91       	pop	r28
     c64:	df 91       	pop	r29
     c66:	08 95       	ret

00000c68 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
     c68:	df 93       	push	r29
     c6a:	cf 93       	push	r28
     c6c:	cd b7       	in	r28, 0x3d	; 61
     c6e:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_FALSE) {
     c70:	80 91 12 05 	lds	r24, 0x0512
     c74:	88 23       	and	r24, r24
     c76:	f9 f4       	brne	.+62     	; 0xcb6 <OSStart+0x4e>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
     c78:	0e 94 aa 0a 	call	0x1554	; 0x1554 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
     c7c:	80 91 19 05 	lds	r24, 0x0519
     c80:	80 93 8a 07 	sts	0x078A, r24
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
     c84:	80 91 19 05 	lds	r24, 0x0519
     c88:	88 2f       	mov	r24, r24
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	88 0f       	add	r24, r24
     c8e:	99 1f       	adc	r25, r25
     c90:	80 51       	subi	r24, 0x10	; 16
     c92:	94 4f       	sbci	r25, 0xF4	; 244
     c94:	fc 01       	movw	r30, r24
     c96:	80 81       	ld	r24, Z
     c98:	91 81       	ldd	r25, Z+1	; 0x01
     c9a:	90 93 97 07 	sts	0x0797, r25
     c9e:	80 93 96 07 	sts	0x0796, r24
        OSTCBCur      = OSTCBHighRdy;
     ca2:	80 91 96 07 	lds	r24, 0x0796
     ca6:	90 91 97 07 	lds	r25, 0x0797
     caa:	90 93 4e 08 	sts	0x084E, r25
     cae:	80 93 4d 08 	sts	0x084D, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
     cb2:	0e 94 c8 00 	call	0x190	; 0x190 <OSStartHighRdy>
    }
}
     cb6:	cf 91       	pop	r28
     cb8:	df 91       	pop	r29
     cba:	08 95       	ret

00000cbc <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
     cbc:	df 93       	push	r29
     cbe:	cf 93       	push	r28
     cc0:	00 d0       	rcall	.+0      	; 0xcc2 <OSTimeTick+0x6>
     cc2:	cd b7       	in	r28, 0x3d	; 61
     cc4:	de b7       	in	r29, 0x3e	; 62
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
     cc6:	19 82       	std	Y+1, r1	; 0x01
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
     cc8:	0e 94 cd 03 	call	0x79a	; 0x79a <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
     ccc:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     cd0:	89 83       	std	Y+1, r24	; 0x01
    OSTime++;
     cd2:	80 91 53 08 	lds	r24, 0x0853
     cd6:	90 91 54 08 	lds	r25, 0x0854
     cda:	a0 91 55 08 	lds	r26, 0x0855
     cde:	b0 91 56 08 	lds	r27, 0x0856
     ce2:	01 96       	adiw	r24, 0x01	; 1
     ce4:	a1 1d       	adc	r26, r1
     ce6:	b1 1d       	adc	r27, r1
     ce8:	80 93 53 08 	sts	0x0853, r24
     cec:	90 93 54 08 	sts	0x0854, r25
     cf0:	a0 93 55 08 	sts	0x0855, r26
     cf4:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
     cf8:	89 81       	ldd	r24, Y+1	; 0x01
     cfa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
     cfe:	80 91 12 05 	lds	r24, 0x0512
     d02:	81 30       	cpi	r24, 0x01	; 1
     d04:	09 f0       	breq	.+2      	; 0xd08 <OSTimeTick+0x4c>
     d06:	82 c0       	rjmp	.+260    	; 0xe0c <OSTimeTick+0x150>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
     d08:	80 91 8b 07 	lds	r24, 0x078B
     d0c:	90 91 8c 07 	lds	r25, 0x078C
     d10:	9b 83       	std	Y+3, r25	; 0x03
     d12:	8a 83       	std	Y+2, r24	; 0x02
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
     d14:	74 c0       	rjmp	.+232    	; 0xdfe <OSTimeTick+0x142>
            OS_ENTER_CRITICAL();
     d16:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
     d1a:	89 83       	std	Y+1, r24	; 0x01
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
     d1c:	8a 81       	ldd	r24, Y+2	; 0x02
     d1e:	9b 81       	ldd	r25, Y+3	; 0x03
     d20:	fc 01       	movw	r30, r24
     d22:	84 89       	ldd	r24, Z+20	; 0x14
     d24:	95 89       	ldd	r25, Z+21	; 0x15
     d26:	00 97       	sbiw	r24, 0x00	; 0
     d28:	09 f4       	brne	.+2      	; 0xd2c <OSTimeTick+0x70>
     d2a:	5f c0       	rjmp	.+190    	; 0xdea <OSTimeTick+0x12e>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
     d2c:	8a 81       	ldd	r24, Y+2	; 0x02
     d2e:	9b 81       	ldd	r25, Y+3	; 0x03
     d30:	fc 01       	movw	r30, r24
     d32:	84 89       	ldd	r24, Z+20	; 0x14
     d34:	95 89       	ldd	r25, Z+21	; 0x15
     d36:	9c 01       	movw	r18, r24
     d38:	21 50       	subi	r18, 0x01	; 1
     d3a:	30 40       	sbci	r19, 0x00	; 0
     d3c:	8a 81       	ldd	r24, Y+2	; 0x02
     d3e:	9b 81       	ldd	r25, Y+3	; 0x03
     d40:	fc 01       	movw	r30, r24
     d42:	35 8b       	std	Z+21, r19	; 0x15
     d44:	24 8b       	std	Z+20, r18	; 0x14
     d46:	8a 81       	ldd	r24, Y+2	; 0x02
     d48:	9b 81       	ldd	r25, Y+3	; 0x03
     d4a:	fc 01       	movw	r30, r24
     d4c:	84 89       	ldd	r24, Z+20	; 0x14
     d4e:	95 89       	ldd	r25, Z+21	; 0x15
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	09 f0       	breq	.+2      	; 0xd56 <OSTimeTick+0x9a>
     d54:	4a c0       	rjmp	.+148    	; 0xdea <OSTimeTick+0x12e>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
     d56:	8a 81       	ldd	r24, Y+2	; 0x02
     d58:	9b 81       	ldd	r25, Y+3	; 0x03
     d5a:	fc 01       	movw	r30, r24
     d5c:	86 89       	ldd	r24, Z+22	; 0x16
     d5e:	88 2f       	mov	r24, r24
     d60:	90 e0       	ldi	r25, 0x00	; 0
     d62:	87 73       	andi	r24, 0x37	; 55
     d64:	90 70       	andi	r25, 0x00	; 0
     d66:	00 97       	sbiw	r24, 0x00	; 0
     d68:	81 f0       	breq	.+32     	; 0xd8a <OSTimeTick+0xce>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
     d6a:	8a 81       	ldd	r24, Y+2	; 0x02
     d6c:	9b 81       	ldd	r25, Y+3	; 0x03
     d6e:	fc 01       	movw	r30, r24
     d70:	86 89       	ldd	r24, Z+22	; 0x16
     d72:	28 2f       	mov	r18, r24
     d74:	28 7c       	andi	r18, 0xC8	; 200
     d76:	8a 81       	ldd	r24, Y+2	; 0x02
     d78:	9b 81       	ldd	r25, Y+3	; 0x03
     d7a:	fc 01       	movw	r30, r24
     d7c:	26 8b       	std	Z+22, r18	; 0x16
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
     d7e:	8a 81       	ldd	r24, Y+2	; 0x02
     d80:	9b 81       	ldd	r25, Y+3	; 0x03
     d82:	21 e0       	ldi	r18, 0x01	; 1
     d84:	fc 01       	movw	r30, r24
     d86:	27 8b       	std	Z+23, r18	; 0x17
     d88:	04 c0       	rjmp	.+8      	; 0xd92 <OSTimeTick+0xd6>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	9b 81       	ldd	r25, Y+3	; 0x03
     d8e:	fc 01       	movw	r30, r24
     d90:	17 8a       	std	Z+23, r1	; 0x17
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
     d92:	8a 81       	ldd	r24, Y+2	; 0x02
     d94:	9b 81       	ldd	r25, Y+3	; 0x03
     d96:	fc 01       	movw	r30, r24
     d98:	86 89       	ldd	r24, Z+22	; 0x16
     d9a:	88 2f       	mov	r24, r24
     d9c:	90 e0       	ldi	r25, 0x00	; 0
     d9e:	88 70       	andi	r24, 0x08	; 8
     da0:	90 70       	andi	r25, 0x00	; 0
     da2:	00 97       	sbiw	r24, 0x00	; 0
     da4:	11 f5       	brne	.+68     	; 0xdea <OSTimeTick+0x12e>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
     da6:	8a 81       	ldd	r24, Y+2	; 0x02
     da8:	9b 81       	ldd	r25, Y+3	; 0x03
     daa:	fc 01       	movw	r30, r24
     dac:	94 8d       	ldd	r25, Z+28	; 0x1c
     dae:	80 91 98 07 	lds	r24, 0x0798
     db2:	89 2b       	or	r24, r25
     db4:	80 93 98 07 	sts	0x0798, r24
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
     db8:	8a 81       	ldd	r24, Y+2	; 0x02
     dba:	9b 81       	ldd	r25, Y+3	; 0x03
     dbc:	fc 01       	movw	r30, r24
     dbe:	82 8d       	ldd	r24, Z+26	; 0x1a
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	2a 81       	ldd	r18, Y+2	; 0x02
     dc6:	3b 81       	ldd	r19, Y+3	; 0x03
     dc8:	f9 01       	movw	r30, r18
     dca:	22 8d       	ldd	r18, Z+26	; 0x1a
     dcc:	22 2f       	mov	r18, r18
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	27 56       	subi	r18, 0x67	; 103
     dd2:	38 4f       	sbci	r19, 0xF8	; 248
     dd4:	f9 01       	movw	r30, r18
     dd6:	40 81       	ld	r20, Z
     dd8:	2a 81       	ldd	r18, Y+2	; 0x02
     dda:	3b 81       	ldd	r19, Y+3	; 0x03
     ddc:	f9 01       	movw	r30, r18
     dde:	23 8d       	ldd	r18, Z+27	; 0x1b
     de0:	24 2b       	or	r18, r20
     de2:	87 56       	subi	r24, 0x67	; 103
     de4:	98 4f       	sbci	r25, 0xF8	; 248
     de6:	fc 01       	movw	r30, r24
     de8:	20 83       	st	Z, r18
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
     dea:	8a 81       	ldd	r24, Y+2	; 0x02
     dec:	9b 81       	ldd	r25, Y+3	; 0x03
     dee:	fc 01       	movw	r30, r24
     df0:	86 85       	ldd	r24, Z+14	; 0x0e
     df2:	97 85       	ldd	r25, Z+15	; 0x0f
     df4:	9b 83       	std	Y+3, r25	; 0x03
     df6:	8a 83       	std	Y+2, r24	; 0x02
            OS_EXIT_CRITICAL();
     df8:	89 81       	ldd	r24, Y+1	; 0x01
     dfa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
     dfe:	8a 81       	ldd	r24, Y+2	; 0x02
     e00:	9b 81       	ldd	r25, Y+3	; 0x03
     e02:	fc 01       	movw	r30, r24
     e04:	80 8d       	ldd	r24, Z+24	; 0x18
     e06:	8a 30       	cpi	r24, 0x0A	; 10
     e08:	09 f0       	breq	.+2      	; 0xe0c <OSTimeTick+0x150>
     e0a:	85 cf       	rjmp	.-246    	; 0xd16 <OSTimeTick+0x5a>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
     e0c:	0f 90       	pop	r0
     e0e:	0f 90       	pop	r0
     e10:	0f 90       	pop	r0
     e12:	cf 91       	pop	r28
     e14:	df 91       	pop	r29
     e16:	08 95       	ret

00000e18 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
     e18:	df 93       	push	r29
     e1a:	cf 93       	push	r28
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
    return (OS_VERSION);
     e20:	8e e1       	ldi	r24, 0x1E	; 30
     e22:	91 e0       	ldi	r25, 0x01	; 1
}
     e24:	cf 91       	pop	r28
     e26:	df 91       	pop	r29
     e28:	08 95       	ret

00000e2a <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
     e2a:	df 93       	push	r29
     e2c:	cf 93       	push	r28
     e2e:	cd b7       	in	r28, 0x3d	; 61
     e30:	de b7       	in	r29, 0x3e	; 62
     e32:	2b 97       	sbiw	r28, 0x0b	; 11
     e34:	0f b6       	in	r0, 0x3f	; 63
     e36:	f8 94       	cli
     e38:	de bf       	out	0x3e, r29	; 62
     e3a:	0f be       	out	0x3f, r0	; 63
     e3c:	cd bf       	out	0x3d, r28	; 61
     e3e:	9f 83       	std	Y+7, r25	; 0x07
     e40:	8e 83       	std	Y+6, r24	; 0x06
     e42:	79 87       	std	Y+9, r23	; 0x09
     e44:	68 87       	std	Y+8, r22	; 0x08
     e46:	4a 87       	std	Y+10, r20	; 0x0a
     e48:	2b 87       	std	Y+11, r18	; 0x0b
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
     e4a:	8e 81       	ldd	r24, Y+6	; 0x06
     e4c:	9f 81       	ldd	r25, Y+7	; 0x07
     e4e:	fc 01       	movw	r30, r24
     e50:	85 81       	ldd	r24, Z+5	; 0x05
     e52:	88 2f       	mov	r24, r24
     e54:	90 e0       	ldi	r25, 0x00	; 0
     e56:	80 50       	subi	r24, 0x00	; 0
     e58:	9e 4f       	sbci	r25, 0xFE	; 254
     e5a:	fc 01       	movw	r30, r24
     e5c:	80 81       	ld	r24, Z
     e5e:	8b 83       	std	Y+3, r24	; 0x03
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
     e60:	8b 81       	ldd	r24, Y+3	; 0x03
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	2e 81       	ldd	r18, Y+6	; 0x06
     e68:	3f 81       	ldd	r19, Y+7	; 0x07
     e6a:	82 0f       	add	r24, r18
     e6c:	93 1f       	adc	r25, r19
     e6e:	06 96       	adiw	r24, 0x06	; 6
     e70:	fc 01       	movw	r30, r24
     e72:	80 81       	ld	r24, Z
     e74:	88 2f       	mov	r24, r24
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	80 50       	subi	r24, 0x00	; 0
     e7a:	9e 4f       	sbci	r25, 0xFE	; 254
     e7c:	fc 01       	movw	r30, r24
     e7e:	80 81       	ld	r24, Z
     e80:	8a 83       	std	Y+2, r24	; 0x02
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
     e82:	8b 81       	ldd	r24, Y+3	; 0x03
     e84:	98 2f       	mov	r25, r24
     e86:	99 0f       	add	r25, r25
     e88:	99 0f       	add	r25, r25
     e8a:	99 0f       	add	r25, r25
     e8c:	8a 81       	ldd	r24, Y+2	; 0x02
     e8e:	89 0f       	add	r24, r25
     e90:	89 83       	std	Y+1, r24	; 0x01
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
     e92:	89 81       	ldd	r24, Y+1	; 0x01
     e94:	88 2f       	mov	r24, r24
     e96:	90 e0       	ldi	r25, 0x00	; 0
     e98:	88 0f       	add	r24, r24
     e9a:	99 1f       	adc	r25, r25
     e9c:	80 51       	subi	r24, 0x10	; 16
     e9e:	94 4f       	sbci	r25, 0xF4	; 244
     ea0:	fc 01       	movw	r30, r24
     ea2:	80 81       	ld	r24, Z
     ea4:	91 81       	ldd	r25, Z+1	; 0x01
     ea6:	9d 83       	std	Y+5, r25	; 0x05
     ea8:	8c 83       	std	Y+4, r24	; 0x04
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
     eaa:	8c 81       	ldd	r24, Y+4	; 0x04
     eac:	9d 81       	ldd	r25, Y+5	; 0x05
     eae:	fc 01       	movw	r30, r24
     eb0:	15 8a       	std	Z+21, r1	; 0x15
     eb2:	14 8a       	std	Z+20, r1	; 0x14
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
     eb4:	8c 81       	ldd	r24, Y+4	; 0x04
     eb6:	9d 81       	ldd	r25, Y+5	; 0x05
     eb8:	fc 01       	movw	r30, r24
     eba:	86 89       	ldd	r24, Z+22	; 0x16
     ebc:	98 2f       	mov	r25, r24
     ebe:	8a 85       	ldd	r24, Y+10	; 0x0a
     ec0:	80 95       	com	r24
     ec2:	89 23       	and	r24, r25
     ec4:	28 2f       	mov	r18, r24
     ec6:	8c 81       	ldd	r24, Y+4	; 0x04
     ec8:	9d 81       	ldd	r25, Y+5	; 0x05
     eca:	fc 01       	movw	r30, r24
     ecc:	26 8b       	std	Z+22, r18	; 0x16
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
     ece:	8c 81       	ldd	r24, Y+4	; 0x04
     ed0:	9d 81       	ldd	r25, Y+5	; 0x05
     ed2:	2b 85       	ldd	r18, Y+11	; 0x0b
     ed4:	fc 01       	movw	r30, r24
     ed6:	27 8b       	std	Z+23, r18	; 0x17
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
     ed8:	8c 81       	ldd	r24, Y+4	; 0x04
     eda:	9d 81       	ldd	r25, Y+5	; 0x05
     edc:	fc 01       	movw	r30, r24
     ede:	86 89       	ldd	r24, Z+22	; 0x16
     ee0:	88 2f       	mov	r24, r24
     ee2:	90 e0       	ldi	r25, 0x00	; 0
     ee4:	88 70       	andi	r24, 0x08	; 8
     ee6:	90 70       	andi	r25, 0x00	; 0
     ee8:	00 97       	sbiw	r24, 0x00	; 0
     eea:	e1 f4       	brne	.+56     	; 0xf24 <OS_EventTaskRdy+0xfa>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
     eec:	8c 81       	ldd	r24, Y+4	; 0x04
     eee:	9d 81       	ldd	r25, Y+5	; 0x05
     ef0:	fc 01       	movw	r30, r24
     ef2:	94 8d       	ldd	r25, Z+28	; 0x1c
     ef4:	80 91 98 07 	lds	r24, 0x0798
     ef8:	89 2b       	or	r24, r25
     efa:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
     efe:	8b 81       	ldd	r24, Y+3	; 0x03
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	2b 81       	ldd	r18, Y+3	; 0x03
     f06:	22 2f       	mov	r18, r18
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	27 56       	subi	r18, 0x67	; 103
     f0c:	38 4f       	sbci	r19, 0xF8	; 248
     f0e:	f9 01       	movw	r30, r18
     f10:	40 81       	ld	r20, Z
     f12:	2c 81       	ldd	r18, Y+4	; 0x04
     f14:	3d 81       	ldd	r19, Y+5	; 0x05
     f16:	f9 01       	movw	r30, r18
     f18:	23 8d       	ldd	r18, Z+27	; 0x1b
     f1a:	24 2b       	or	r18, r20
     f1c:	87 56       	subi	r24, 0x67	; 103
     f1e:	98 4f       	sbci	r25, 0xF8	; 248
     f20:	fc 01       	movw	r30, r24
     f22:	20 83       	st	Z, r18
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
     f24:	8c 81       	ldd	r24, Y+4	; 0x04
     f26:	9d 81       	ldd	r25, Y+5	; 0x05
     f28:	2e 81       	ldd	r18, Y+6	; 0x06
     f2a:	3f 81       	ldd	r19, Y+7	; 0x07
     f2c:	b9 01       	movw	r22, r18
     f2e:	0e 94 22 08 	call	0x1044	; 0x1044 <OS_EventTaskRemove>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    }
#endif

    return (prio);
     f32:	89 81       	ldd	r24, Y+1	; 0x01
}
     f34:	2b 96       	adiw	r28, 0x0b	; 11
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <OS_EventTaskWait+0x6>
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	9b 83       	std	Y+3, r25	; 0x03
     f52:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
     f54:	80 91 4d 08 	lds	r24, 0x084D
     f58:	90 91 4e 08 	lds	r25, 0x084E
     f5c:	2a 81       	ldd	r18, Y+2	; 0x02
     f5e:	3b 81       	ldd	r19, Y+3	; 0x03
     f60:	fc 01       	movw	r30, r24
     f62:	33 8b       	std	Z+19, r19	; 0x13
     f64:	22 8b       	std	Z+18, r18	; 0x12

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
     f66:	80 91 4d 08 	lds	r24, 0x084D
     f6a:	90 91 4e 08 	lds	r25, 0x084E
     f6e:	fc 01       	movw	r30, r24
     f70:	82 8d       	ldd	r24, Z+26	; 0x1a
     f72:	88 2f       	mov	r24, r24
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	20 91 4d 08 	lds	r18, 0x084D
     f7a:	30 91 4e 08 	lds	r19, 0x084E
     f7e:	f9 01       	movw	r30, r18
     f80:	22 8d       	ldd	r18, Z+26	; 0x1a
     f82:	22 2f       	mov	r18, r18
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	4a 81       	ldd	r20, Y+2	; 0x02
     f88:	5b 81       	ldd	r21, Y+3	; 0x03
     f8a:	24 0f       	add	r18, r20
     f8c:	35 1f       	adc	r19, r21
     f8e:	2a 5f       	subi	r18, 0xFA	; 250
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	f9 01       	movw	r30, r18
     f94:	40 81       	ld	r20, Z
     f96:	20 91 4d 08 	lds	r18, 0x084D
     f9a:	30 91 4e 08 	lds	r19, 0x084E
     f9e:	f9 01       	movw	r30, r18
     fa0:	23 8d       	ldd	r18, Z+27	; 0x1b
     fa2:	42 2b       	or	r20, r18
     fa4:	2a 81       	ldd	r18, Y+2	; 0x02
     fa6:	3b 81       	ldd	r19, Y+3	; 0x03
     fa8:	82 0f       	add	r24, r18
     faa:	93 1f       	adc	r25, r19
     fac:	06 96       	adiw	r24, 0x06	; 6
     fae:	fc 01       	movw	r30, r24
     fb0:	40 83       	st	Z, r20
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
     fb2:	8a 81       	ldd	r24, Y+2	; 0x02
     fb4:	9b 81       	ldd	r25, Y+3	; 0x03
     fb6:	fc 01       	movw	r30, r24
     fb8:	25 81       	ldd	r18, Z+5	; 0x05
     fba:	80 91 4d 08 	lds	r24, 0x084D
     fbe:	90 91 4e 08 	lds	r25, 0x084E
     fc2:	fc 01       	movw	r30, r24
     fc4:	84 8d       	ldd	r24, Z+28	; 0x1c
     fc6:	28 2b       	or	r18, r24
     fc8:	8a 81       	ldd	r24, Y+2	; 0x02
     fca:	9b 81       	ldd	r25, Y+3	; 0x03
     fcc:	fc 01       	movw	r30, r24
     fce:	25 83       	std	Z+5, r18	; 0x05

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
     fd0:	80 91 4d 08 	lds	r24, 0x084D
     fd4:	90 91 4e 08 	lds	r25, 0x084E
     fd8:	fc 01       	movw	r30, r24
     fda:	82 8d       	ldd	r24, Z+26	; 0x1a
     fdc:	89 83       	std	Y+1, r24	; 0x01
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
     fde:	89 81       	ldd	r24, Y+1	; 0x01
     fe0:	88 2f       	mov	r24, r24
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	29 81       	ldd	r18, Y+1	; 0x01
     fe6:	22 2f       	mov	r18, r18
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	27 56       	subi	r18, 0x67	; 103
     fec:	38 4f       	sbci	r19, 0xF8	; 248
     fee:	f9 01       	movw	r30, r18
     ff0:	20 81       	ld	r18, Z
     ff2:	42 2f       	mov	r20, r18
     ff4:	20 91 4d 08 	lds	r18, 0x084D
     ff8:	30 91 4e 08 	lds	r19, 0x084E
     ffc:	f9 01       	movw	r30, r18
     ffe:	23 8d       	ldd	r18, Z+27	; 0x1b
    1000:	20 95       	com	r18
    1002:	24 23       	and	r18, r20
    1004:	87 56       	subi	r24, 0x67	; 103
    1006:	98 4f       	sbci	r25, 0xF8	; 248
    1008:	fc 01       	movw	r30, r24
    100a:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    100c:	89 81       	ldd	r24, Y+1	; 0x01
    100e:	88 2f       	mov	r24, r24
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	87 56       	subi	r24, 0x67	; 103
    1014:	98 4f       	sbci	r25, 0xF8	; 248
    1016:	fc 01       	movw	r30, r24
    1018:	80 81       	ld	r24, Z
    101a:	88 23       	and	r24, r24
    101c:	69 f4       	brne	.+26     	; 0x1038 <OS_EventTaskWait+0xf2>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    101e:	80 91 4d 08 	lds	r24, 0x084D
    1022:	90 91 4e 08 	lds	r25, 0x084E
    1026:	fc 01       	movw	r30, r24
    1028:	84 8d       	ldd	r24, Z+28	; 0x1c
    102a:	98 2f       	mov	r25, r24
    102c:	90 95       	com	r25
    102e:	80 91 98 07 	lds	r24, 0x0798
    1032:	89 23       	and	r24, r25
    1034:	80 93 98 07 	sts	0x0798, r24
    }
}
    1038:	0f 90       	pop	r0
    103a:	0f 90       	pop	r0
    103c:	0f 90       	pop	r0
    103e:	cf 91       	pop	r28
    1040:	df 91       	pop	r29
    1042:	08 95       	ret

00001044 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    1044:	df 93       	push	r29
    1046:	cf 93       	push	r28
    1048:	00 d0       	rcall	.+0      	; 0x104a <OS_EventTaskRemove+0x6>
    104a:	0f 92       	push	r0
    104c:	0f 92       	push	r0
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	9b 83       	std	Y+3, r25	; 0x03
    1054:	8a 83       	std	Y+2, r24	; 0x02
    1056:	7d 83       	std	Y+5, r23	; 0x05
    1058:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    105a:	8a 81       	ldd	r24, Y+2	; 0x02
    105c:	9b 81       	ldd	r25, Y+3	; 0x03
    105e:	fc 01       	movw	r30, r24
    1060:	82 8d       	ldd	r24, Z+26	; 0x1a
    1062:	89 83       	std	Y+1, r24	; 0x01
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    1064:	89 81       	ldd	r24, Y+1	; 0x01
    1066:	88 2f       	mov	r24, r24
    1068:	90 e0       	ldi	r25, 0x00	; 0
    106a:	29 81       	ldd	r18, Y+1	; 0x01
    106c:	22 2f       	mov	r18, r18
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	4c 81       	ldd	r20, Y+4	; 0x04
    1072:	5d 81       	ldd	r21, Y+5	; 0x05
    1074:	24 0f       	add	r18, r20
    1076:	35 1f       	adc	r19, r21
    1078:	2a 5f       	subi	r18, 0xFA	; 250
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	f9 01       	movw	r30, r18
    107e:	20 81       	ld	r18, Z
    1080:	42 2f       	mov	r20, r18
    1082:	2a 81       	ldd	r18, Y+2	; 0x02
    1084:	3b 81       	ldd	r19, Y+3	; 0x03
    1086:	f9 01       	movw	r30, r18
    1088:	23 8d       	ldd	r18, Z+27	; 0x1b
    108a:	20 95       	com	r18
    108c:	24 23       	and	r18, r20
    108e:	42 2f       	mov	r20, r18
    1090:	2c 81       	ldd	r18, Y+4	; 0x04
    1092:	3d 81       	ldd	r19, Y+5	; 0x05
    1094:	82 0f       	add	r24, r18
    1096:	93 1f       	adc	r25, r19
    1098:	06 96       	adiw	r24, 0x06	; 6
    109a:	fc 01       	movw	r30, r24
    109c:	40 83       	st	Z, r20
    if (pevent->OSEventTbl[y] == 0) {
    109e:	89 81       	ldd	r24, Y+1	; 0x01
    10a0:	88 2f       	mov	r24, r24
    10a2:	90 e0       	ldi	r25, 0x00	; 0
    10a4:	2c 81       	ldd	r18, Y+4	; 0x04
    10a6:	3d 81       	ldd	r19, Y+5	; 0x05
    10a8:	82 0f       	add	r24, r18
    10aa:	93 1f       	adc	r25, r19
    10ac:	06 96       	adiw	r24, 0x06	; 6
    10ae:	fc 01       	movw	r30, r24
    10b0:	80 81       	ld	r24, Z
    10b2:	88 23       	and	r24, r24
    10b4:	81 f4       	brne	.+32     	; 0x10d6 <OS_EventTaskRemove+0x92>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    10b6:	8c 81       	ldd	r24, Y+4	; 0x04
    10b8:	9d 81       	ldd	r25, Y+5	; 0x05
    10ba:	fc 01       	movw	r30, r24
    10bc:	85 81       	ldd	r24, Z+5	; 0x05
    10be:	28 2f       	mov	r18, r24
    10c0:	8a 81       	ldd	r24, Y+2	; 0x02
    10c2:	9b 81       	ldd	r25, Y+3	; 0x03
    10c4:	fc 01       	movw	r30, r24
    10c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    10c8:	80 95       	com	r24
    10ca:	82 23       	and	r24, r18
    10cc:	28 2f       	mov	r18, r24
    10ce:	8c 81       	ldd	r24, Y+4	; 0x04
    10d0:	9d 81       	ldd	r25, Y+5	; 0x05
    10d2:	fc 01       	movw	r30, r24
    10d4:	25 83       	std	Z+5, r18	; 0x05
    }
}
    10d6:	0f 90       	pop	r0
    10d8:	0f 90       	pop	r0
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <OS_EventWaitListInit+0x6>
    10ec:	0f 92       	push	r0
    10ee:	0f 92       	push	r0
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9d 83       	std	Y+5, r25	; 0x05
    10f6:	8c 83       	std	Y+4, r24	; 0x04
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    10f8:	8c 81       	ldd	r24, Y+4	; 0x04
    10fa:	9d 81       	ldd	r25, Y+5	; 0x05
    10fc:	fc 01       	movw	r30, r24
    10fe:	15 82       	std	Z+5, r1	; 0x05
    ptbl               = &pevent->OSEventTbl[0];
    1100:	8c 81       	ldd	r24, Y+4	; 0x04
    1102:	9d 81       	ldd	r25, Y+5	; 0x05
    1104:	06 96       	adiw	r24, 0x06	; 6
    1106:	9b 83       	std	Y+3, r25	; 0x03
    1108:	8a 83       	std	Y+2, r24	; 0x02

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    110a:	19 82       	std	Y+1, r1	; 0x01
    110c:	0c c0       	rjmp	.+24     	; 0x1126 <OS_EventWaitListInit+0x40>
        *ptbl++ = 0;
    110e:	8a 81       	ldd	r24, Y+2	; 0x02
    1110:	9b 81       	ldd	r25, Y+3	; 0x03
    1112:	fc 01       	movw	r30, r24
    1114:	10 82       	st	Z, r1
    1116:	8a 81       	ldd	r24, Y+2	; 0x02
    1118:	9b 81       	ldd	r25, Y+3	; 0x03
    111a:	01 96       	adiw	r24, 0x01	; 1
    111c:	9b 83       	std	Y+3, r25	; 0x03
    111e:	8a 83       	std	Y+2, r24	; 0x02


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	8f 5f       	subi	r24, 0xFF	; 255
    1124:	89 83       	std	Y+1, r24	; 0x01
    1126:	89 81       	ldd	r24, Y+1	; 0x01
    1128:	82 30       	cpi	r24, 0x02	; 2
    112a:	88 f3       	brcs	.-30     	; 0x110e <OS_EventWaitListInit+0x28>
        *ptbl++ = 0;
    }
}
    112c:	0f 90       	pop	r0
    112e:	0f 90       	pop	r0
    1130:	0f 90       	pop	r0
    1132:	0f 90       	pop	r0
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	00 d0       	rcall	.+0      	; 0x1142 <OS_InitEventList+0x6>
    1142:	00 d0       	rcall	.+0      	; 0x1144 <OS_InitEventList+0x8>
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    1148:	88 e0       	ldi	r24, 0x08	; 8
    114a:	99 e0       	ldi	r25, 0x09	; 9
    114c:	60 ef       	ldi	r22, 0xF0	; 240
    114e:	70 e0       	ldi	r23, 0x00	; 0
    1150:	0e 94 ff 09 	call	0x13fe	; 0x13fe <OS_MemClr>
    pevent1 = &OSEventTbl[0];
    1154:	88 e0       	ldi	r24, 0x08	; 8
    1156:	99 e0       	ldi	r25, 0x09	; 9
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
    pevent2 = &OSEventTbl[1];
    115c:	80 e2       	ldi	r24, 0x20	; 32
    115e:	99 e0       	ldi	r25, 0x09	; 9
    1160:	9a 83       	std	Y+2, r25	; 0x02
    1162:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    1164:	1e 82       	std	Y+6, r1	; 0x06
    1166:	1d 82       	std	Y+5, r1	; 0x05
    1168:	23 c0       	rjmp	.+70     	; 0x11b0 <OS_InitEventList+0x74>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	fc 01       	movw	r30, r24
    1170:	10 82       	st	Z, r1
        pevent1->OSEventPtr     = pevent2;
    1172:	8b 81       	ldd	r24, Y+3	; 0x03
    1174:	9c 81       	ldd	r25, Y+4	; 0x04
    1176:	29 81       	ldd	r18, Y+1	; 0x01
    1178:	3a 81       	ldd	r19, Y+2	; 0x02
    117a:	fc 01       	movw	r30, r24
    117c:	32 83       	std	Z+2, r19	; 0x02
    117e:	21 83       	std	Z+1, r18	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    1180:	8b 81       	ldd	r24, Y+3	; 0x03
    1182:	9c 81       	ldd	r25, Y+4	; 0x04
    1184:	2f e3       	ldi	r18, 0x3F	; 63
    1186:	fc 01       	movw	r30, r24
    1188:	20 87       	std	Z+8, r18	; 0x08
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    118a:	8b 81       	ldd	r24, Y+3	; 0x03
    118c:	9c 81       	ldd	r25, Y+4	; 0x04
    118e:	fc 01       	movw	r30, r24
    1190:	11 86       	std	Z+9, r1	; 0x09
#endif
        pevent1++;
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	48 96       	adiw	r24, 0x18	; 24
    1198:	9c 83       	std	Y+4, r25	; 0x04
    119a:	8b 83       	std	Y+3, r24	; 0x03
        pevent2++;
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	48 96       	adiw	r24, 0x18	; 24
    11a2:	9a 83       	std	Y+2, r25	; 0x02
    11a4:	89 83       	std	Y+1, r24	; 0x01


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    11a6:	8d 81       	ldd	r24, Y+5	; 0x05
    11a8:	9e 81       	ldd	r25, Y+6	; 0x06
    11aa:	01 96       	adiw	r24, 0x01	; 1
    11ac:	9e 83       	std	Y+6, r25	; 0x06
    11ae:	8d 83       	std	Y+5, r24	; 0x05
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	89 30       	cpi	r24, 0x09	; 9
    11b6:	91 05       	cpc	r25, r1
    11b8:	c0 f2       	brcs	.-80     	; 0x116a <OS_InitEventList+0x2e>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	9c 81       	ldd	r25, Y+4	; 0x04
    11be:	fc 01       	movw	r30, r24
    11c0:	10 82       	st	Z, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    11c2:	8b 81       	ldd	r24, Y+3	; 0x03
    11c4:	9c 81       	ldd	r25, Y+4	; 0x04
    11c6:	fc 01       	movw	r30, r24
    11c8:	12 82       	std	Z+2, r1	; 0x02
    11ca:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    11cc:	8b 81       	ldd	r24, Y+3	; 0x03
    11ce:	9c 81       	ldd	r25, Y+4	; 0x04
    11d0:	2f e3       	ldi	r18, 0x3F	; 63
    11d2:	fc 01       	movw	r30, r24
    11d4:	20 87       	std	Z+8, r18	; 0x08
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    11d6:	8b 81       	ldd	r24, Y+3	; 0x03
    11d8:	9c 81       	ldd	r25, Y+4	; 0x04
    11da:	fc 01       	movw	r30, r24
    11dc:	11 86       	std	Z+9, r1	; 0x09
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    11de:	88 e0       	ldi	r24, 0x08	; 8
    11e0:	99 e0       	ldi	r25, 0x09	; 9
    11e2:	90 93 4b 08 	sts	0x084B, r25
    11e6:	80 93 4a 08 	sts	0x084A, r24
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    11ea:	26 96       	adiw	r28, 0x06	; 6
    11ec:	0f b6       	in	r0, 0x3f	; 63
    11ee:	f8 94       	cli
    11f0:	de bf       	out	0x3e, r29	; 62
    11f2:	0f be       	out	0x3f, r0	; 63
    11f4:	cd bf       	out	0x3d, r28	; 61
    11f6:	cf 91       	pop	r28
    11f8:	df 91       	pop	r29
    11fa:	08 95       	ret

000011fc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    1204:	10 92 53 08 	sts	0x0853, r1
    1208:	10 92 54 08 	sts	0x0854, r1
    120c:	10 92 55 08 	sts	0x0855, r1
    1210:	10 92 56 08 	sts	0x0856, r1
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    1214:	10 92 4c 08 	sts	0x084C, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    1218:	10 92 0f 05 	sts	0x050F, r1

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    121c:	10 92 95 07 	sts	0x0795, r1

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    1220:	10 92 12 05 	sts	0x0512, r1

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    1224:	10 92 8d 07 	sts	0x078D, r1
    1228:	10 92 8e 07 	sts	0x078E, r1
    122c:	10 92 8f 07 	sts	0x078F, r1
    1230:	10 92 90 07 	sts	0x0790, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    1234:	10 92 13 05 	sts	0x0513, r1
    1238:	10 92 14 05 	sts	0x0514, r1
    123c:	10 92 15 05 	sts	0x0515, r1
    1240:	10 92 16 05 	sts	0x0516, r1
#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
#endif
}
    1244:	cf 91       	pop	r28
    1246:	df 91       	pop	r29
    1248:	08 95       	ret

0000124a <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    124a:	df 93       	push	r29
    124c:	cf 93       	push	r28
    124e:	00 d0       	rcall	.+0      	; 0x1250 <OS_InitRdyList+0x6>
    1250:	cd b7       	in	r28, 0x3d	; 61
    1252:	de b7       	in	r29, 0x3e	; 62
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    1254:	10 92 98 07 	sts	0x0798, r1
    prdytbl       = &OSRdyTbl[0];
    1258:	89 e9       	ldi	r24, 0x99	; 153
    125a:	97 e0       	ldi	r25, 0x07	; 7
    125c:	9a 83       	std	Y+2, r25	; 0x02
    125e:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1260:	1b 82       	std	Y+3, r1	; 0x03
    1262:	0c c0       	rjmp	.+24     	; 0x127c <OS_InitRdyList+0x32>
        *prdytbl++ = 0;
    1264:	89 81       	ldd	r24, Y+1	; 0x01
    1266:	9a 81       	ldd	r25, Y+2	; 0x02
    1268:	fc 01       	movw	r30, r24
    126a:	10 82       	st	Z, r1
    126c:	89 81       	ldd	r24, Y+1	; 0x01
    126e:	9a 81       	ldd	r25, Y+2	; 0x02
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	9a 83       	std	Y+2, r25	; 0x02
    1274:	89 83       	std	Y+1, r24	; 0x01
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	8f 5f       	subi	r24, 0xFF	; 255
    127a:	8b 83       	std	Y+3, r24	; 0x03
    127c:	8b 81       	ldd	r24, Y+3	; 0x03
    127e:	82 30       	cpi	r24, 0x02	; 2
    1280:	88 f3       	brcs	.-30     	; 0x1264 <OS_InitRdyList+0x1a>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    1282:	10 92 8a 07 	sts	0x078A, r1
    OSPrioHighRdy = 0;
    1286:	10 92 19 05 	sts	0x0519, r1

    OSTCBHighRdy  = (OS_TCB *)0;
    128a:	10 92 97 07 	sts	0x0797, r1
    128e:	10 92 96 07 	sts	0x0796, r1
    OSTCBCur      = (OS_TCB *)0;
    1292:	10 92 4e 08 	sts	0x084E, r1
    1296:	10 92 4d 08 	sts	0x084D, r1
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	cf 91       	pop	r28
    12a2:	df 91       	pop	r29
    12a4:	08 95       	ret

000012a6 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    12a6:	8f 92       	push	r8
    12a8:	9f 92       	push	r9
    12aa:	af 92       	push	r10
    12ac:	bf 92       	push	r11
    12ae:	cf 92       	push	r12
    12b0:	df 92       	push	r13
    12b2:	ef 92       	push	r14
    12b4:	ff 92       	push	r15
    12b6:	0f 93       	push	r16
    12b8:	1f 93       	push	r17
    12ba:	df 93       	push	r29
    12bc:	cf 93       	push	r28
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    12c4:	0f 92       	push	r0
    12c6:	0f 92       	push	r0
    12c8:	4d b7       	in	r20, 0x3d	; 61
    12ca:	5e b7       	in	r21, 0x3e	; 62
    12cc:	4f 5f       	subi	r20, 0xFF	; 255
    12ce:	5f 4f       	sbci	r21, 0xFF	; 255
    12d0:	84 e2       	ldi	r24, 0x24	; 36
    12d2:	9b e0       	ldi	r25, 0x0B	; 11
    12d4:	27 e0       	ldi	r18, 0x07	; 7
    12d6:	39 e0       	ldi	r19, 0x09	; 9
    12d8:	e9 e5       	ldi	r30, 0x59	; 89
    12da:	f8 e0       	ldi	r31, 0x08	; 8
    12dc:	63 e0       	ldi	r22, 0x03	; 3
    12de:	70 e0       	ldi	r23, 0x00	; 0
    12e0:	da 01       	movw	r26, r20
    12e2:	6d 93       	st	X+, r22
    12e4:	7c 93       	st	X, r23
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	a9 01       	movw	r20, r18
    12ec:	2a e0       	ldi	r18, 0x0A	; 10
    12ee:	0f ef       	ldi	r16, 0xFF	; 255
    12f0:	1f ef       	ldi	r17, 0xFF	; 255
    12f2:	7f 01       	movw	r14, r30
    12f4:	0f 2e       	mov	r0, r31
    12f6:	ff ea       	ldi	r31, 0xAF	; 175
    12f8:	af 2e       	mov	r10, r31
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	bf 2e       	mov	r11, r31
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	cf 2e       	mov	r12, r31
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	df 2e       	mov	r13, r31
    1306:	f0 2d       	mov	r31, r0
    1308:	88 24       	eor	r8, r8
    130a:	99 24       	eor	r9, r9
    130c:	0e 94 b2 11 	call	0x2364	; 0x2364 <OSTaskCreateExt>
    1310:	0f 90       	pop	r0
    1312:	0f 90       	pop	r0
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    1314:	20 e0       	ldi	r18, 0x00	; 0
    1316:	33 e0       	ldi	r19, 0x03	; 3
    1318:	8a e0       	ldi	r24, 0x0A	; 10
    131a:	b9 01       	movw	r22, r18
    131c:	9e 01       	movw	r18, r28
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	a9 01       	movw	r20, r18
    1324:	0e 94 c2 12 	call	0x2584	; 0x2584 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    1328:	0f 90       	pop	r0
    132a:	cf 91       	pop	r28
    132c:	df 91       	pop	r29
    132e:	1f 91       	pop	r17
    1330:	0f 91       	pop	r16
    1332:	ff 90       	pop	r15
    1334:	ef 90       	pop	r14
    1336:	df 90       	pop	r13
    1338:	cf 90       	pop	r12
    133a:	bf 90       	pop	r11
    133c:	af 90       	pop	r10
    133e:	9f 90       	pop	r9
    1340:	8f 90       	pop	r8
    1342:	08 95       	ret

00001344 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	00 d0       	rcall	.+0      	; 0x134a <OS_InitTCBList+0x6>
    134a:	0f 92       	push	r0
    134c:	0f 92       	push	r0
    134e:	cd b7       	in	r28, 0x3d	; 61
    1350:	de b7       	in	r29, 0x3e	; 62
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    1352:	88 ef       	ldi	r24, 0xF8	; 248
    1354:	99 e0       	ldi	r25, 0x09	; 9
    1356:	68 ef       	ldi	r22, 0xF8	; 248
    1358:	71 e0       	ldi	r23, 0x01	; 1
    135a:	0e 94 ff 09 	call	0x13fe	; 0x13fe <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    135e:	80 ef       	ldi	r24, 0xF0	; 240
    1360:	9b e0       	ldi	r25, 0x0B	; 11
    1362:	66 e1       	ldi	r22, 0x16	; 22
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	0e 94 ff 09 	call	0x13fe	; 0x13fe <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
    136a:	88 ef       	ldi	r24, 0xF8	; 248
    136c:	99 e0       	ldi	r25, 0x09	; 9
    136e:	9c 83       	std	Y+4, r25	; 0x04
    1370:	8b 83       	std	Y+3, r24	; 0x03
    ptcb2 = &OSTCBTbl[1];
    1372:	87 e3       	ldi	r24, 0x37	; 55
    1374:	9a e0       	ldi	r25, 0x0A	; 10
    1376:	9a 83       	std	Y+2, r25	; 0x02
    1378:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    137a:	1d 82       	std	Y+5, r1	; 0x05
    137c:	1d c0       	rjmp	.+58     	; 0x13b8 <OS_InitTCBList+0x74>
        ptcb1->OSTCBNext = ptcb2;
    137e:	8b 81       	ldd	r24, Y+3	; 0x03
    1380:	9c 81       	ldd	r25, Y+4	; 0x04
    1382:	29 81       	ldd	r18, Y+1	; 0x01
    1384:	3a 81       	ldd	r19, Y+2	; 0x02
    1386:	fc 01       	movw	r30, r24
    1388:	37 87       	std	Z+15, r19	; 0x0f
    138a:	26 87       	std	Z+14, r18	; 0x0e
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    138c:	8b 81       	ldd	r24, Y+3	; 0x03
    138e:	9c 81       	ldd	r25, Y+4	; 0x04
    1390:	2f e3       	ldi	r18, 0x3F	; 63
    1392:	fc 01       	movw	r30, r24
    1394:	27 a7       	std	Z+47, r18	; 0x2f
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	fc 01       	movw	r30, r24
    139c:	10 aa       	std	Z+48, r1	; 0x30
#endif
        ptcb1++;
    139e:	8b 81       	ldd	r24, Y+3	; 0x03
    13a0:	9c 81       	ldd	r25, Y+4	; 0x04
    13a2:	cf 96       	adiw	r24, 0x3f	; 63
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
        ptcb2++;
    13a8:	89 81       	ldd	r24, Y+1	; 0x01
    13aa:	9a 81       	ldd	r25, Y+2	; 0x02
    13ac:	cf 96       	adiw	r24, 0x3f	; 63
    13ae:	9a 83       	std	Y+2, r25	; 0x02
    13b0:	89 83       	std	Y+1, r24	; 0x01

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    13b2:	8d 81       	ldd	r24, Y+5	; 0x05
    13b4:	8f 5f       	subi	r24, 0xFF	; 255
    13b6:	8d 83       	std	Y+5, r24	; 0x05
    13b8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ba:	87 30       	cpi	r24, 0x07	; 7
    13bc:	00 f3       	brcs	.-64     	; 0x137e <OS_InitTCBList+0x3a>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    13be:	8b 81       	ldd	r24, Y+3	; 0x03
    13c0:	9c 81       	ldd	r25, Y+4	; 0x04
    13c2:	fc 01       	movw	r30, r24
    13c4:	17 86       	std	Z+15, r1	; 0x0f
    13c6:	16 86       	std	Z+14, r1	; 0x0e
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	9c 81       	ldd	r25, Y+4	; 0x04
    13cc:	2f e3       	ldi	r18, 0x3F	; 63
    13ce:	fc 01       	movw	r30, r24
    13d0:	27 a7       	std	Z+47, r18	; 0x2f
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    13d2:	8b 81       	ldd	r24, Y+3	; 0x03
    13d4:	9c 81       	ldd	r25, Y+4	; 0x04
    13d6:	fc 01       	movw	r30, r24
    13d8:	10 aa       	std	Z+48, r1	; 0x30
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    13da:	10 92 8c 07 	sts	0x078C, r1
    13de:	10 92 8b 07 	sts	0x078B, r1
    OSTCBFreeList           = &OSTCBTbl[0];
    13e2:	88 ef       	ldi	r24, 0xF8	; 248
    13e4:	99 e0       	ldi	r25, 0x09	; 9
    13e6:	90 93 94 07 	sts	0x0794, r25
    13ea:	80 93 93 07 	sts	0x0793, r24
}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	00 d0       	rcall	.+0      	; 0x1404 <OS_MemClr+0x6>
    1404:	0f 92       	push	r0
    1406:	cd b7       	in	r28, 0x3d	; 61
    1408:	de b7       	in	r29, 0x3e	; 62
    140a:	9a 83       	std	Y+2, r25	; 0x02
    140c:	89 83       	std	Y+1, r24	; 0x01
    140e:	7c 83       	std	Y+4, r23	; 0x04
    1410:	6b 83       	std	Y+3, r22	; 0x03
    while (size > 0) {
    1412:	0e c0       	rjmp	.+28     	; 0x1430 <OS_MemClr+0x32>
        *pdest++ = (INT8U)0;
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	fc 01       	movw	r30, r24
    141a:	10 82       	st	Z, r1
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	01 96       	adiw	r24, 0x01	; 1
    1422:	9a 83       	std	Y+2, r25	; 0x02
    1424:	89 83       	std	Y+1, r24	; 0x01
        size--;
    1426:	8b 81       	ldd	r24, Y+3	; 0x03
    1428:	9c 81       	ldd	r25, Y+4	; 0x04
    142a:	01 97       	sbiw	r24, 0x01	; 1
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	8b 83       	std	Y+3, r24	; 0x03
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	9c 81       	ldd	r25, Y+4	; 0x04
    1434:	00 97       	sbiw	r24, 0x00	; 0
    1436:	71 f7       	brne	.-36     	; 0x1414 <OS_MemClr+0x16>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    1438:	0f 90       	pop	r0
    143a:	0f 90       	pop	r0
    143c:	0f 90       	pop	r0
    143e:	0f 90       	pop	r0
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	00 d0       	rcall	.+0      	; 0x144c <OS_MemCopy+0x6>
    144c:	00 d0       	rcall	.+0      	; 0x144e <OS_MemCopy+0x8>
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    1452:	9a 83       	std	Y+2, r25	; 0x02
    1454:	89 83       	std	Y+1, r24	; 0x01
    1456:	7c 83       	std	Y+4, r23	; 0x04
    1458:	6b 83       	std	Y+3, r22	; 0x03
    145a:	5e 83       	std	Y+6, r21	; 0x06
    145c:	4d 83       	std	Y+5, r20	; 0x05
    while (size > 0) {
    145e:	17 c0       	rjmp	.+46     	; 0x148e <OS_MemCopy+0x48>
        *pdest++ = *psrc++;
    1460:	8b 81       	ldd	r24, Y+3	; 0x03
    1462:	9c 81       	ldd	r25, Y+4	; 0x04
    1464:	fc 01       	movw	r30, r24
    1466:	20 81       	ld	r18, Z
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	9a 81       	ldd	r25, Y+2	; 0x02
    146c:	fc 01       	movw	r30, r24
    146e:	20 83       	st	Z, r18
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	9a 81       	ldd	r25, Y+2	; 0x02
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	9a 83       	std	Y+2, r25	; 0x02
    1478:	89 83       	std	Y+1, r24	; 0x01
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	01 96       	adiw	r24, 0x01	; 1
    1480:	9c 83       	std	Y+4, r25	; 0x04
    1482:	8b 83       	std	Y+3, r24	; 0x03
        size--;
    1484:	8d 81       	ldd	r24, Y+5	; 0x05
    1486:	9e 81       	ldd	r25, Y+6	; 0x06
    1488:	01 97       	sbiw	r24, 0x01	; 1
    148a:	9e 83       	std	Y+6, r25	; 0x06
    148c:	8d 83       	std	Y+5, r24	; 0x05
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    148e:	8d 81       	ldd	r24, Y+5	; 0x05
    1490:	9e 81       	ldd	r25, Y+6	; 0x06
    1492:	00 97       	sbiw	r24, 0x00	; 0
    1494:	29 f7       	brne	.-54     	; 0x1460 <OS_MemCopy+0x1a>
        *pdest++ = *psrc++;
        size--;
    }
}
    1496:	26 96       	adiw	r28, 0x06	; 6
    1498:	0f b6       	in	r0, 0x3f	; 63
    149a:	f8 94       	cli
    149c:	de bf       	out	0x3e, r29	; 62
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	cd bf       	out	0x3d, r28	; 61
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	0f 92       	push	r0
    14ae:	cd b7       	in	r28, 0x3d	; 61
    14b0:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    14b2:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    14b4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    14b8:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    14ba:	80 91 4c 08 	lds	r24, 0x084C
    14be:	88 23       	and	r24, r24
    14c0:	09 f0       	breq	.+2      	; 0x14c4 <OS_Sched+0x1c>
    14c2:	41 c0       	rjmp	.+130    	; 0x1546 <OS_Sched+0x9e>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    14c4:	80 91 0f 05 	lds	r24, 0x050F
    14c8:	88 23       	and	r24, r24
    14ca:	e9 f5       	brne	.+122    	; 0x1546 <OS_Sched+0x9e>
            OS_SchedNew();
    14cc:	0e 94 aa 0a 	call	0x1554	; 0x1554 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    14d0:	90 91 19 05 	lds	r25, 0x0519
    14d4:	80 91 8a 07 	lds	r24, 0x078A
    14d8:	98 17       	cp	r25, r24
    14da:	a9 f1       	breq	.+106    	; 0x1546 <OS_Sched+0x9e>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    14dc:	80 91 19 05 	lds	r24, 0x0519
    14e0:	88 2f       	mov	r24, r24
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	88 0f       	add	r24, r24
    14e6:	99 1f       	adc	r25, r25
    14e8:	80 51       	subi	r24, 0x10	; 16
    14ea:	94 4f       	sbci	r25, 0xF4	; 244
    14ec:	fc 01       	movw	r30, r24
    14ee:	80 81       	ld	r24, Z
    14f0:	91 81       	ldd	r25, Z+1	; 0x01
    14f2:	90 93 97 07 	sts	0x0797, r25
    14f6:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    14fa:	20 91 96 07 	lds	r18, 0x0796
    14fe:	30 91 97 07 	lds	r19, 0x0797
    1502:	f9 01       	movw	r30, r18
    1504:	85 8d       	ldd	r24, Z+29	; 0x1d
    1506:	96 8d       	ldd	r25, Z+30	; 0x1e
    1508:	a7 8d       	ldd	r26, Z+31	; 0x1f
    150a:	b0 a1       	ldd	r27, Z+32	; 0x20
    150c:	01 96       	adiw	r24, 0x01	; 1
    150e:	a1 1d       	adc	r26, r1
    1510:	b1 1d       	adc	r27, r1
    1512:	f9 01       	movw	r30, r18
    1514:	85 8f       	std	Z+29, r24	; 0x1d
    1516:	96 8f       	std	Z+30, r25	; 0x1e
    1518:	a7 8f       	std	Z+31, r26	; 0x1f
    151a:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    151c:	80 91 8d 07 	lds	r24, 0x078D
    1520:	90 91 8e 07 	lds	r25, 0x078E
    1524:	a0 91 8f 07 	lds	r26, 0x078F
    1528:	b0 91 90 07 	lds	r27, 0x0790
    152c:	01 96       	adiw	r24, 0x01	; 1
    152e:	a1 1d       	adc	r26, r1
    1530:	b1 1d       	adc	r27, r1
    1532:	80 93 8d 07 	sts	0x078D, r24
    1536:	90 93 8e 07 	sts	0x078E, r25
    153a:	a0 93 8f 07 	sts	0x078F, r26
    153e:	b0 93 90 07 	sts	0x0790, r27
                OS_TASK_SW();                          /* Perform a context switch                     */
    1542:	0e 94 fd 00 	call	0x1fa	; 0x1fa <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
    1546:	89 81       	ldd	r24, Y+1	; 0x01
    1548:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    154c:	0f 90       	pop	r0
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	0f 92       	push	r0
    155a:	cd b7       	in	r28, 0x3d	; 61
    155c:	de b7       	in	r29, 0x3e	; 62
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    155e:	80 91 98 07 	lds	r24, 0x0798
    1562:	88 2f       	mov	r24, r24
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	80 50       	subi	r24, 0x00	; 0
    1568:	9e 4f       	sbci	r25, 0xFE	; 254
    156a:	fc 01       	movw	r30, r24
    156c:	80 81       	ld	r24, Z
    156e:	89 83       	std	Y+1, r24	; 0x01
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    1570:	89 81       	ldd	r24, Y+1	; 0x01
    1572:	28 2f       	mov	r18, r24
    1574:	22 0f       	add	r18, r18
    1576:	22 0f       	add	r18, r18
    1578:	22 0f       	add	r18, r18
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	88 2f       	mov	r24, r24
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	87 56       	subi	r24, 0x67	; 103
    1582:	98 4f       	sbci	r25, 0xF8	; 248
    1584:	fc 01       	movw	r30, r24
    1586:	80 81       	ld	r24, Z
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	80 50       	subi	r24, 0x00	; 0
    158e:	9e 4f       	sbci	r25, 0xFE	; 254
    1590:	fc 01       	movw	r30, r24
    1592:	80 81       	ld	r24, Z
    1594:	82 0f       	add	r24, r18
    1596:	80 93 19 05 	sts	0x0519, r24
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    159a:	0f 90       	pop	r0
    159c:	cf 91       	pop	r28
    159e:	df 91       	pop	r29
    15a0:	08 95       	ret

000015a2 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    15a2:	df 93       	push	r29
    15a4:	cf 93       	push	r28
    15a6:	00 d0       	rcall	.+0      	; 0x15a8 <OS_StrCopy+0x6>
    15a8:	0f 92       	push	r0
    15aa:	0f 92       	push	r0
    15ac:	cd b7       	in	r28, 0x3d	; 61
    15ae:	de b7       	in	r29, 0x3e	; 62
    15b0:	9b 83       	std	Y+3, r25	; 0x03
    15b2:	8a 83       	std	Y+2, r24	; 0x02
    15b4:	7d 83       	std	Y+5, r23	; 0x05
    15b6:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  len;


    len = 0;
    15b8:	19 82       	std	Y+1, r1	; 0x01
    while (*psrc != OS_ASCII_NUL) {
    15ba:	15 c0       	rjmp	.+42     	; 0x15e6 <OS_StrCopy+0x44>
        *pdest++ = *psrc++;
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	fc 01       	movw	r30, r24
    15c2:	20 81       	ld	r18, Z
    15c4:	8a 81       	ldd	r24, Y+2	; 0x02
    15c6:	9b 81       	ldd	r25, Y+3	; 0x03
    15c8:	fc 01       	movw	r30, r24
    15ca:	20 83       	st	Z, r18
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	9b 81       	ldd	r25, Y+3	; 0x03
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	9b 83       	std	Y+3, r25	; 0x03
    15d4:	8a 83       	std	Y+2, r24	; 0x02
    15d6:	8c 81       	ldd	r24, Y+4	; 0x04
    15d8:	9d 81       	ldd	r25, Y+5	; 0x05
    15da:	01 96       	adiw	r24, 0x01	; 1
    15dc:	9d 83       	std	Y+5, r25	; 0x05
    15de:	8c 83       	std	Y+4, r24	; 0x04
        len++;
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	8f 5f       	subi	r24, 0xFF	; 255
    15e4:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    15e6:	8c 81       	ldd	r24, Y+4	; 0x04
    15e8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ea:	fc 01       	movw	r30, r24
    15ec:	80 81       	ld	r24, Z
    15ee:	88 23       	and	r24, r24
    15f0:	29 f7       	brne	.-54     	; 0x15bc <OS_StrCopy+0x1a>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    15f2:	8a 81       	ldd	r24, Y+2	; 0x02
    15f4:	9b 81       	ldd	r25, Y+3	; 0x03
    15f6:	fc 01       	movw	r30, r24
    15f8:	10 82       	st	Z, r1
    return (len);
    15fa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15fc:	0f 90       	pop	r0
    15fe:	0f 90       	pop	r0
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	0f 90       	pop	r0
    1606:	cf 91       	pop	r28
    1608:	df 91       	pop	r29
    160a:	08 95       	ret

0000160c <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    160c:	df 93       	push	r29
    160e:	cf 93       	push	r28
    1610:	00 d0       	rcall	.+0      	; 0x1612 <OS_StrLen+0x6>
    1612:	cd b7       	in	r28, 0x3d	; 61
    1614:	de b7       	in	r29, 0x3e	; 62
    1616:	9b 83       	std	Y+3, r25	; 0x03
    1618:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  len;


    len = 0;
    161a:	19 82       	std	Y+1, r1	; 0x01
    while (*psrc != OS_ASCII_NUL) {
    161c:	08 c0       	rjmp	.+16     	; 0x162e <OS_StrLen+0x22>
        psrc++;
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	01 96       	adiw	r24, 0x01	; 1
    1624:	9b 83       	std	Y+3, r25	; 0x03
    1626:	8a 83       	std	Y+2, r24	; 0x02
        len++;
    1628:	89 81       	ldd	r24, Y+1	; 0x01
    162a:	8f 5f       	subi	r24, 0xFF	; 255
    162c:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    162e:	8a 81       	ldd	r24, Y+2	; 0x02
    1630:	9b 81       	ldd	r25, Y+3	; 0x03
    1632:	fc 01       	movw	r30, r24
    1634:	80 81       	ld	r24, Z
    1636:	88 23       	and	r24, r24
    1638:	91 f7       	brne	.-28     	; 0x161e <OS_StrLen+0x12>
        psrc++;
        len++;
    }
    return (len);
    163a:	89 81       	ldd	r24, Y+1	; 0x01
}
    163c:	0f 90       	pop	r0
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	cf 91       	pop	r28
    1644:	df 91       	pop	r29
    1646:	08 95       	ret

00001648 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    1648:	df 93       	push	r29
    164a:	cf 93       	push	r28
    164c:	00 d0       	rcall	.+0      	; 0x164e <OS_TaskIdle+0x6>
    164e:	cd b7       	in	r28, 0x3d	; 61
    1650:	de b7       	in	r29, 0x3e	; 62
    1652:	9b 83       	std	Y+3, r25	; 0x03
    1654:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    1656:	19 82       	std	Y+1, r1	; 0x01



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    1658:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    165c:	89 83       	std	Y+1, r24	; 0x01
        OSIdleCtr++;
    165e:	80 91 13 05 	lds	r24, 0x0513
    1662:	90 91 14 05 	lds	r25, 0x0514
    1666:	a0 91 15 05 	lds	r26, 0x0515
    166a:	b0 91 16 05 	lds	r27, 0x0516
    166e:	01 96       	adiw	r24, 0x01	; 1
    1670:	a1 1d       	adc	r26, r1
    1672:	b1 1d       	adc	r27, r1
    1674:	80 93 13 05 	sts	0x0513, r24
    1678:	90 93 14 05 	sts	0x0514, r25
    167c:	a0 93 15 05 	sts	0x0515, r26
    1680:	b0 93 16 05 	sts	0x0516, r27
        OS_EXIT_CRITICAL();
    1684:	89 81       	ldd	r24, Y+1	; 0x01
    1686:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    168a:	0e 94 19 02 	call	0x432	; 0x432 <OSTaskIdleHook>
    }
    168e:	e4 cf       	rjmp	.-56     	; 0x1658 <OS_TaskIdle+0x10>

00001690 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    1690:	af 92       	push	r10
    1692:	bf 92       	push	r11
    1694:	cf 92       	push	r12
    1696:	df 92       	push	r13
    1698:	ef 92       	push	r14
    169a:	ff 92       	push	r15
    169c:	0f 93       	push	r16
    169e:	1f 93       	push	r17
    16a0:	df 93       	push	r29
    16a2:	cf 93       	push	r28
    16a4:	cd b7       	in	r28, 0x3d	; 61
    16a6:	de b7       	in	r29, 0x3e	; 62
    16a8:	62 97       	sbiw	r28, 0x12	; 18
    16aa:	0f b6       	in	r0, 0x3f	; 63
    16ac:	f8 94       	cli
    16ae:	de bf       	out	0x3e, r29	; 62
    16b0:	0f be       	out	0x3f, r0	; 63
    16b2:	cd bf       	out	0x3d, r28	; 61
    16b4:	8c 83       	std	Y+4, r24	; 0x04
    16b6:	7e 83       	std	Y+6, r23	; 0x06
    16b8:	6d 83       	std	Y+5, r22	; 0x05
    16ba:	58 87       	std	Y+8, r21	; 0x08
    16bc:	4f 83       	std	Y+7, r20	; 0x07
    16be:	3a 87       	std	Y+10, r19	; 0x0a
    16c0:	29 87       	std	Y+9, r18	; 0x09
    16c2:	eb 86       	std	Y+11, r14	; 0x0b
    16c4:	fc 86       	std	Y+12, r15	; 0x0c
    16c6:	0d 87       	std	Y+13, r16	; 0x0d
    16c8:	1e 87       	std	Y+14, r17	; 0x0e
    16ca:	d8 8a       	std	Y+16, r13	; 0x10
    16cc:	cf 86       	std	Y+15, r12	; 0x0f
    16ce:	ba 8a       	std	Y+18, r11	; 0x12
    16d0:	a9 8a       	std	Y+17, r10	; 0x11
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    16d2:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    16d4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    16d8:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    16da:	80 91 93 07 	lds	r24, 0x0793
    16de:	90 91 94 07 	lds	r25, 0x0794
    16e2:	9b 83       	std	Y+3, r25	; 0x03
    16e4:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb != (OS_TCB *)0) {
    16e6:	8a 81       	ldd	r24, Y+2	; 0x02
    16e8:	9b 81       	ldd	r25, Y+3	; 0x03
    16ea:	00 97       	sbiw	r24, 0x00	; 0
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <OS_TCBInit+0x60>
    16ee:	15 c1       	rjmp	.+554    	; 0x191a <OS_TCBInit+0x28a>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	9b 81       	ldd	r25, Y+3	; 0x03
    16f4:	fc 01       	movw	r30, r24
    16f6:	86 85       	ldd	r24, Z+14	; 0x0e
    16f8:	97 85       	ldd	r25, Z+15	; 0x0f
    16fa:	90 93 94 07 	sts	0x0794, r25
    16fe:	80 93 93 07 	sts	0x0793, r24
        OS_EXIT_CRITICAL();
    1702:	89 81       	ldd	r24, Y+1	; 0x01
    1704:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	9b 81       	ldd	r25, Y+3	; 0x03
    170c:	2d 81       	ldd	r18, Y+5	; 0x05
    170e:	3e 81       	ldd	r19, Y+6	; 0x06
    1710:	fc 01       	movw	r30, r24
    1712:	31 83       	std	Z+1, r19	; 0x01
    1714:	20 83       	st	Z, r18
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    1716:	8a 81       	ldd	r24, Y+2	; 0x02
    1718:	9b 81       	ldd	r25, Y+3	; 0x03
    171a:	2c 81       	ldd	r18, Y+4	; 0x04
    171c:	fc 01       	movw	r30, r24
    171e:	20 8f       	std	Z+24, r18	; 0x18
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	9b 81       	ldd	r25, Y+3	; 0x03
    1724:	fc 01       	movw	r30, r24
    1726:	16 8a       	std	Z+22, r1	; 0x16
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	fc 01       	movw	r30, r24
    172e:	17 8a       	std	Z+23, r1	; 0x17
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    1730:	8a 81       	ldd	r24, Y+2	; 0x02
    1732:	9b 81       	ldd	r25, Y+3	; 0x03
    1734:	fc 01       	movw	r30, r24
    1736:	15 8a       	std	Z+21, r1	; 0x15
    1738:	14 8a       	std	Z+20, r1	; 0x14

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    173a:	8a 81       	ldd	r24, Y+2	; 0x02
    173c:	9b 81       	ldd	r25, Y+3	; 0x03
    173e:	2f 85       	ldd	r18, Y+15	; 0x0f
    1740:	38 89       	ldd	r19, Y+16	; 0x10
    1742:	fc 01       	movw	r30, r24
    1744:	33 83       	std	Z+3, r19	; 0x03
    1746:	22 83       	std	Z+2, r18	; 0x02
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    1748:	2a 81       	ldd	r18, Y+2	; 0x02
    174a:	3b 81       	ldd	r19, Y+3	; 0x03
    174c:	8b 85       	ldd	r24, Y+11	; 0x0b
    174e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1750:	ad 85       	ldd	r26, Y+13	; 0x0d
    1752:	be 85       	ldd	r27, Y+14	; 0x0e
    1754:	f9 01       	movw	r30, r18
    1756:	86 83       	std	Z+6, r24	; 0x06
    1758:	97 83       	std	Z+7, r25	; 0x07
    175a:	a0 87       	std	Z+8, r26	; 0x08
    175c:	b1 87       	std	Z+9, r27	; 0x09
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	9b 81       	ldd	r25, Y+3	; 0x03
    1762:	2f 81       	ldd	r18, Y+7	; 0x07
    1764:	38 85       	ldd	r19, Y+8	; 0x08
    1766:	fc 01       	movw	r30, r24
    1768:	35 83       	std	Z+5, r19	; 0x05
    176a:	24 83       	std	Z+4, r18	; 0x04
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    176c:	8a 81       	ldd	r24, Y+2	; 0x02
    176e:	9b 81       	ldd	r25, Y+3	; 0x03
    1770:	29 89       	ldd	r18, Y+17	; 0x11
    1772:	3a 89       	ldd	r19, Y+18	; 0x12
    1774:	fc 01       	movw	r30, r24
    1776:	33 87       	std	Z+11, r19	; 0x0b
    1778:	22 87       	std	Z+10, r18	; 0x0a
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	9b 81       	ldd	r25, Y+3	; 0x03
    177e:	29 85       	ldd	r18, Y+9	; 0x09
    1780:	3a 85       	ldd	r19, Y+10	; 0x0a
    1782:	fc 01       	movw	r30, r24
    1784:	35 87       	std	Z+13, r19	; 0x0d
    1786:	24 87       	std	Z+12, r18	; 0x0c
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    1788:	8c 81       	ldd	r24, Y+4	; 0x04
    178a:	28 2f       	mov	r18, r24
    178c:	26 95       	lsr	r18
    178e:	26 95       	lsr	r18
    1790:	26 95       	lsr	r18
    1792:	8a 81       	ldd	r24, Y+2	; 0x02
    1794:	9b 81       	ldd	r25, Y+3	; 0x03
    1796:	fc 01       	movw	r30, r24
    1798:	22 8f       	std	Z+26, r18	; 0x1a
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    179a:	8c 81       	ldd	r24, Y+4	; 0x04
    179c:	28 2f       	mov	r18, r24
    179e:	27 70       	andi	r18, 0x07	; 7
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	9b 81       	ldd	r25, Y+3	; 0x03
    17a4:	fc 01       	movw	r30, r24
    17a6:	21 8f       	std	Z+25, r18	; 0x19
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    17a8:	8a 81       	ldd	r24, Y+2	; 0x02
    17aa:	9b 81       	ldd	r25, Y+3	; 0x03
    17ac:	fc 01       	movw	r30, r24
    17ae:	82 8d       	ldd	r24, Z+26	; 0x1a
    17b0:	28 2f       	mov	r18, r24
    17b2:	30 e0       	ldi	r19, 0x00	; 0
    17b4:	81 e0       	ldi	r24, 0x01	; 1
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	02 c0       	rjmp	.+4      	; 0x17be <OS_TCBInit+0x12e>
    17ba:	88 0f       	add	r24, r24
    17bc:	99 1f       	adc	r25, r25
    17be:	2a 95       	dec	r18
    17c0:	e2 f7       	brpl	.-8      	; 0x17ba <OS_TCBInit+0x12a>
    17c2:	28 2f       	mov	r18, r24
    17c4:	8a 81       	ldd	r24, Y+2	; 0x02
    17c6:	9b 81       	ldd	r25, Y+3	; 0x03
    17c8:	fc 01       	movw	r30, r24
    17ca:	24 8f       	std	Z+28, r18	; 0x1c
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    17cc:	8a 81       	ldd	r24, Y+2	; 0x02
    17ce:	9b 81       	ldd	r25, Y+3	; 0x03
    17d0:	fc 01       	movw	r30, r24
    17d2:	81 8d       	ldd	r24, Z+25	; 0x19
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <OS_TCBInit+0x152>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	2a 95       	dec	r18
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <OS_TCBInit+0x14e>
    17e6:	28 2f       	mov	r18, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	9b 81       	ldd	r25, Y+3	; 0x03
    17ec:	fc 01       	movw	r30, r24
    17ee:	23 8f       	std	Z+27, r18	; 0x1b
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    17f0:	8a 81       	ldd	r24, Y+2	; 0x02
    17f2:	9b 81       	ldd	r25, Y+3	; 0x03
    17f4:	fc 01       	movw	r30, r24
    17f6:	13 8a       	std	Z+19, r1	; 0x13
    17f8:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	9b 81       	ldd	r25, Y+3	; 0x03
    17fe:	fc 01       	movw	r30, r24
    1800:	15 8e       	std	Z+29, r1	; 0x1d
    1802:	16 8e       	std	Z+30, r1	; 0x1e
    1804:	17 8e       	std	Z+31, r1	; 0x1f
    1806:	10 a2       	std	Z+32, r1	; 0x20
        ptcb->OSTCBCyclesStart = 0L;
    1808:	8a 81       	ldd	r24, Y+2	; 0x02
    180a:	9b 81       	ldd	r25, Y+3	; 0x03
    180c:	fc 01       	movw	r30, r24
    180e:	15 a2       	std	Z+37, r1	; 0x25
    1810:	16 a2       	std	Z+38, r1	; 0x26
    1812:	17 a2       	std	Z+39, r1	; 0x27
    1814:	10 a6       	std	Z+40, r1	; 0x28
        ptcb->OSTCBCyclesTot   = 0L;
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	9b 81       	ldd	r25, Y+3	; 0x03
    181a:	fc 01       	movw	r30, r24
    181c:	11 a2       	std	Z+33, r1	; 0x21
    181e:	12 a2       	std	Z+34, r1	; 0x22
    1820:	13 a2       	std	Z+35, r1	; 0x23
    1822:	14 a2       	std	Z+36, r1	; 0x24
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    1824:	8a 81       	ldd	r24, Y+2	; 0x02
    1826:	9b 81       	ldd	r25, Y+3	; 0x03
    1828:	fc 01       	movw	r30, r24
    182a:	12 a6       	std	Z+42, r1	; 0x2a
    182c:	11 a6       	std	Z+41, r1	; 0x29
        ptcb->OSTCBStkUsed     = 0L;
    182e:	8a 81       	ldd	r24, Y+2	; 0x02
    1830:	9b 81       	ldd	r25, Y+3	; 0x03
    1832:	fc 01       	movw	r30, r24
    1834:	13 a6       	std	Z+43, r1	; 0x2b
    1836:	14 a6       	std	Z+44, r1	; 0x2c
    1838:	15 a6       	std	Z+45, r1	; 0x2d
    183a:	16 a6       	std	Z+46, r1	; 0x2e
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    183c:	8a 81       	ldd	r24, Y+2	; 0x02
    183e:	9b 81       	ldd	r25, Y+3	; 0x03
    1840:	2f e3       	ldi	r18, 0x3F	; 63
    1842:	fc 01       	movw	r30, r24
    1844:	27 a7       	std	Z+47, r18	; 0x2f
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    1846:	8a 81       	ldd	r24, Y+2	; 0x02
    1848:	9b 81       	ldd	r25, Y+3	; 0x03
    184a:	fc 01       	movw	r30, r24
    184c:	10 aa       	std	Z+48, r1	; 0x30
#endif

        OSTCBInitHook(ptcb);
    184e:	8a 81       	ldd	r24, Y+2	; 0x02
    1850:	9b 81       	ldd	r25, Y+3	; 0x03
    1852:	0e 94 bc 03 	call	0x778	; 0x778 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    1856:	8a 81       	ldd	r24, Y+2	; 0x02
    1858:	9b 81       	ldd	r25, Y+3	; 0x03
    185a:	0e 94 f7 01 	call	0x3ee	; 0x3ee <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
    185e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1862:	89 83       	std	Y+1, r24	; 0x01
        OSTCBPrioTbl[prio] = ptcb;
    1864:	8c 81       	ldd	r24, Y+4	; 0x04
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	88 0f       	add	r24, r24
    186c:	99 1f       	adc	r25, r25
    186e:	80 51       	subi	r24, 0x10	; 16
    1870:	94 4f       	sbci	r25, 0xF4	; 244
    1872:	2a 81       	ldd	r18, Y+2	; 0x02
    1874:	3b 81       	ldd	r19, Y+3	; 0x03
    1876:	fc 01       	movw	r30, r24
    1878:	31 83       	std	Z+1, r19	; 0x01
    187a:	20 83       	st	Z, r18
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    187c:	20 91 8b 07 	lds	r18, 0x078B
    1880:	30 91 8c 07 	lds	r19, 0x078C
    1884:	8a 81       	ldd	r24, Y+2	; 0x02
    1886:	9b 81       	ldd	r25, Y+3	; 0x03
    1888:	fc 01       	movw	r30, r24
    188a:	37 87       	std	Z+15, r19	; 0x0f
    188c:	26 87       	std	Z+14, r18	; 0x0e
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	fc 01       	movw	r30, r24
    1894:	11 8a       	std	Z+17, r1	; 0x11
    1896:	10 8a       	std	Z+16, r1	; 0x10
        if (OSTCBList != (OS_TCB *)0) {
    1898:	80 91 8b 07 	lds	r24, 0x078B
    189c:	90 91 8c 07 	lds	r25, 0x078C
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	49 f0       	breq	.+18     	; 0x18b6 <OS_TCBInit+0x226>
            OSTCBList->OSTCBPrev = ptcb;
    18a4:	80 91 8b 07 	lds	r24, 0x078B
    18a8:	90 91 8c 07 	lds	r25, 0x078C
    18ac:	2a 81       	ldd	r18, Y+2	; 0x02
    18ae:	3b 81       	ldd	r19, Y+3	; 0x03
    18b0:	fc 01       	movw	r30, r24
    18b2:	31 8b       	std	Z+17, r19	; 0x11
    18b4:	20 8b       	std	Z+16, r18	; 0x10
        }
        OSTCBList               = ptcb;
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	9b 81       	ldd	r25, Y+3	; 0x03
    18ba:	90 93 8c 07 	sts	0x078C, r25
    18be:	80 93 8b 07 	sts	0x078B, r24
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	9b 81       	ldd	r25, Y+3	; 0x03
    18c6:	fc 01       	movw	r30, r24
    18c8:	94 8d       	ldd	r25, Z+28	; 0x1c
    18ca:	80 91 98 07 	lds	r24, 0x0798
    18ce:	89 2b       	or	r24, r25
    18d0:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	9b 81       	ldd	r25, Y+3	; 0x03
    18d8:	fc 01       	movw	r30, r24
    18da:	82 8d       	ldd	r24, Z+26	; 0x1a
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	2a 81       	ldd	r18, Y+2	; 0x02
    18e2:	3b 81       	ldd	r19, Y+3	; 0x03
    18e4:	f9 01       	movw	r30, r18
    18e6:	22 8d       	ldd	r18, Z+26	; 0x1a
    18e8:	22 2f       	mov	r18, r18
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	27 56       	subi	r18, 0x67	; 103
    18ee:	38 4f       	sbci	r19, 0xF8	; 248
    18f0:	f9 01       	movw	r30, r18
    18f2:	40 81       	ld	r20, Z
    18f4:	2a 81       	ldd	r18, Y+2	; 0x02
    18f6:	3b 81       	ldd	r19, Y+3	; 0x03
    18f8:	f9 01       	movw	r30, r18
    18fa:	23 8d       	ldd	r18, Z+27	; 0x1b
    18fc:	24 2b       	or	r18, r20
    18fe:	87 56       	subi	r24, 0x67	; 103
    1900:	98 4f       	sbci	r25, 0xF8	; 248
    1902:	fc 01       	movw	r30, r24
    1904:	20 83       	st	Z, r18
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    1906:	80 91 95 07 	lds	r24, 0x0795
    190a:	8f 5f       	subi	r24, 0xFF	; 255
    190c:	80 93 95 07 	sts	0x0795, r24
        OS_EXIT_CRITICAL();
    1910:	89 81       	ldd	r24, Y+1	; 0x01
    1912:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    1916:	80 e0       	ldi	r24, 0x00	; 0
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <OS_TCBInit+0x292>
    }
    OS_EXIT_CRITICAL();
    191a:	89 81       	ldd	r24, Y+1	; 0x01
    191c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
    1920:	82 e4       	ldi	r24, 0x42	; 66
}
    1922:	62 96       	adiw	r28, 0x12	; 18
    1924:	0f b6       	in	r0, 0x3f	; 63
    1926:	f8 94       	cli
    1928:	de bf       	out	0x3e, r29	; 62
    192a:	0f be       	out	0x3f, r0	; 63
    192c:	cd bf       	out	0x3d, r28	; 61
    192e:	cf 91       	pop	r28
    1930:	df 91       	pop	r29
    1932:	1f 91       	pop	r17
    1934:	0f 91       	pop	r16
    1936:	ff 90       	pop	r15
    1938:	ef 90       	pop	r14
    193a:	df 90       	pop	r13
    193c:	cf 90       	pop	r12
    193e:	bf 90       	pop	r11
    1940:	af 90       	pop	r10
    1942:	08 95       	ret
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
    1944:	df 93       	push	r29
    1946:	cf 93       	push	r28
    1948:	0f 92       	push	r0
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
    1950:	8e e0       	ldi	r24, 0x0E	; 14
    1952:	93 e0       	ldi	r25, 0x03	; 3
    1954:	9a 83       	std	Y+2, r25	; 0x02
    1956:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEndiannessTest;
    1958:	80 e1       	ldi	r24, 0x10	; 16
    195a:	93 e0       	ldi	r25, 0x03	; 3
    195c:	9a 83       	std	Y+2, r25	; 0x02
    195e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSEventMax;
    1960:	86 e1       	ldi	r24, 0x16	; 22
    1962:	93 e0       	ldi	r25, 0x03	; 3
    1964:	9a 83       	std	Y+2, r25	; 0x02
    1966:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventNameSize;
    1968:	88 e1       	ldi	r24, 0x18	; 24
    196a:	93 e0       	ldi	r25, 0x03	; 3
    196c:	9a 83       	std	Y+2, r25	; 0x02
    196e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventEn;
    1970:	84 e1       	ldi	r24, 0x14	; 20
    1972:	93 e0       	ldi	r25, 0x03	; 3
    1974:	9a 83       	std	Y+2, r25	; 0x02
    1976:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventSize;
    1978:	8a e1       	ldi	r24, 0x1A	; 26
    197a:	93 e0       	ldi	r25, 0x03	; 3
    197c:	9a 83       	std	Y+2, r25	; 0x02
    197e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventTblSize;
    1980:	8c e1       	ldi	r24, 0x1C	; 28
    1982:	93 e0       	ldi	r25, 0x03	; 3
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSEventMultiEn;
    1988:	8e e1       	ldi	r24, 0x1E	; 30
    198a:	93 e0       	ldi	r25, 0x03	; 3
    198c:	9a 83       	std	Y+2, r25	; 0x02
    198e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSFlagEn;
    1990:	80 e2       	ldi	r24, 0x20	; 32
    1992:	93 e0       	ldi	r25, 0x03	; 3
    1994:	9a 83       	std	Y+2, r25	; 0x02
    1996:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagGrpSize;
    1998:	82 e2       	ldi	r24, 0x22	; 34
    199a:	93 e0       	ldi	r25, 0x03	; 3
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNodeSize;
    19a0:	84 e2       	ldi	r24, 0x24	; 36
    19a2:	93 e0       	ldi	r25, 0x03	; 3
    19a4:	9a 83       	std	Y+2, r25	; 0x02
    19a6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagWidth;
    19a8:	86 e2       	ldi	r24, 0x26	; 38
    19aa:	93 e0       	ldi	r25, 0x03	; 3
    19ac:	9a 83       	std	Y+2, r25	; 0x02
    19ae:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagMax;
    19b0:	88 e2       	ldi	r24, 0x28	; 40
    19b2:	93 e0       	ldi	r25, 0x03	; 3
    19b4:	9a 83       	std	Y+2, r25	; 0x02
    19b6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSFlagNameSize;
    19b8:	8a e2       	ldi	r24, 0x2A	; 42
    19ba:	93 e0       	ldi	r25, 0x03	; 3
    19bc:	9a 83       	std	Y+2, r25	; 0x02
    19be:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSLowestPrio;
    19c0:	8c e2       	ldi	r24, 0x2C	; 44
    19c2:	93 e0       	ldi	r25, 0x03	; 3
    19c4:	9a 83       	std	Y+2, r25	; 0x02
    19c6:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMboxEn;
    19c8:	8e e2       	ldi	r24, 0x2E	; 46
    19ca:	93 e0       	ldi	r25, 0x03	; 3
    19cc:	9a 83       	std	Y+2, r25	; 0x02
    19ce:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMemEn;
    19d0:	80 e3       	ldi	r24, 0x30	; 48
    19d2:	93 e0       	ldi	r25, 0x03	; 3
    19d4:	9a 83       	std	Y+2, r25	; 0x02
    19d6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemMax;
    19d8:	82 e3       	ldi	r24, 0x32	; 50
    19da:	93 e0       	ldi	r25, 0x03	; 3
    19dc:	9a 83       	std	Y+2, r25	; 0x02
    19de:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemNameSize;
    19e0:	84 e3       	ldi	r24, 0x34	; 52
    19e2:	93 e0       	ldi	r25, 0x03	; 3
    19e4:	9a 83       	std	Y+2, r25	; 0x02
    19e6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemSize;
    19e8:	86 e3       	ldi	r24, 0x36	; 54
    19ea:	93 e0       	ldi	r25, 0x03	; 3
    19ec:	9a 83       	std	Y+2, r25	; 0x02
    19ee:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSMemTblSize;
    19f0:	88 e3       	ldi	r24, 0x38	; 56
    19f2:	93 e0       	ldi	r25, 0x03	; 3
    19f4:	9a 83       	std	Y+2, r25	; 0x02
    19f6:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSMutexEn;
    19f8:	8a e3       	ldi	r24, 0x3A	; 58
    19fa:	93 e0       	ldi	r25, 0x03	; 3
    19fc:	9a 83       	std	Y+2, r25	; 0x02
    19fe:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSPtrSize;
    1a00:	8c e3       	ldi	r24, 0x3C	; 60
    1a02:	93 e0       	ldi	r25, 0x03	; 3
    1a04:	9a 83       	std	Y+2, r25	; 0x02
    1a06:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSQEn;
    1a08:	8e e3       	ldi	r24, 0x3E	; 62
    1a0a:	93 e0       	ldi	r25, 0x03	; 3
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQMax;
    1a10:	80 e4       	ldi	r24, 0x40	; 64
    1a12:	93 e0       	ldi	r25, 0x03	; 3
    1a14:	9a 83       	std	Y+2, r25	; 0x02
    1a16:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSQSize;
    1a18:	82 e4       	ldi	r24, 0x42	; 66
    1a1a:	93 e0       	ldi	r25, 0x03	; 3
    1a1c:	9a 83       	std	Y+2, r25	; 0x02
    1a1e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSRdyTblSize;
    1a20:	84 e4       	ldi	r24, 0x44	; 68
    1a22:	93 e0       	ldi	r25, 0x03	; 3
    1a24:	9a 83       	std	Y+2, r25	; 0x02
    1a26:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSSemEn;
    1a28:	86 e4       	ldi	r24, 0x46	; 70
    1a2a:	93 e0       	ldi	r25, 0x03	; 3
    1a2c:	9a 83       	std	Y+2, r25	; 0x02
    1a2e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSStkWidth;
    1a30:	88 e4       	ldi	r24, 0x48	; 72
    1a32:	93 e0       	ldi	r25, 0x03	; 3
    1a34:	9a 83       	std	Y+2, r25	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTaskCreateEn;
    1a38:	8a e4       	ldi	r24, 0x4A	; 74
    1a3a:	93 e0       	ldi	r25, 0x03	; 3
    1a3c:	9a 83       	std	Y+2, r25	; 0x02
    1a3e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskCreateExtEn;
    1a40:	8c e4       	ldi	r24, 0x4C	; 76
    1a42:	93 e0       	ldi	r25, 0x03	; 3
    1a44:	9a 83       	std	Y+2, r25	; 0x02
    1a46:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskDelEn;
    1a48:	8e e4       	ldi	r24, 0x4E	; 78
    1a4a:	93 e0       	ldi	r25, 0x03	; 3
    1a4c:	9a 83       	std	Y+2, r25	; 0x02
    1a4e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskIdleStkSize;
    1a50:	80 e5       	ldi	r24, 0x50	; 80
    1a52:	93 e0       	ldi	r25, 0x03	; 3
    1a54:	9a 83       	std	Y+2, r25	; 0x02
    1a56:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskProfileEn;
    1a58:	82 e5       	ldi	r24, 0x52	; 82
    1a5a:	93 e0       	ldi	r25, 0x03	; 3
    1a5c:	9a 83       	std	Y+2, r25	; 0x02
    1a5e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskMax;
    1a60:	84 e5       	ldi	r24, 0x54	; 84
    1a62:	93 e0       	ldi	r25, 0x03	; 3
    1a64:	9a 83       	std	Y+2, r25	; 0x02
    1a66:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskNameSize;
    1a68:	86 e5       	ldi	r24, 0x56	; 86
    1a6a:	93 e0       	ldi	r25, 0x03	; 3
    1a6c:	9a 83       	std	Y+2, r25	; 0x02
    1a6e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatEn;
    1a70:	88 e5       	ldi	r24, 0x58	; 88
    1a72:	93 e0       	ldi	r25, 0x03	; 3
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkSize;
    1a78:	8a e5       	ldi	r24, 0x5A	; 90
    1a7a:	93 e0       	ldi	r25, 0x03	; 3
    1a7c:	9a 83       	std	Y+2, r25	; 0x02
    1a7e:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskStatStkChkEn;
    1a80:	8c e5       	ldi	r24, 0x5C	; 92
    1a82:	93 e0       	ldi	r25, 0x03	; 3
    1a84:	9a 83       	std	Y+2, r25	; 0x02
    1a86:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTaskSwHookEn;
    1a88:	8e e5       	ldi	r24, 0x5E	; 94
    1a8a:	93 e0       	ldi	r25, 0x03	; 3
    1a8c:	9a 83       	std	Y+2, r25	; 0x02
    1a8e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTCBPrioTblMax;
    1a90:	80 e6       	ldi	r24, 0x60	; 96
    1a92:	93 e0       	ldi	r25, 0x03	; 3
    1a94:	9a 83       	std	Y+2, r25	; 0x02
    1a96:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTCBSize;
    1a98:	82 e6       	ldi	r24, 0x62	; 98
    1a9a:	93 e0       	ldi	r25, 0x03	; 3
    1a9c:	9a 83       	std	Y+2, r25	; 0x02
    1a9e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTicksPerSec;
    1aa0:	84 e6       	ldi	r24, 0x64	; 100
    1aa2:	93 e0       	ldi	r25, 0x03	; 3
    1aa4:	9a 83       	std	Y+2, r25	; 0x02
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTimeTickHookEn;
    1aa8:	86 e6       	ldi	r24, 0x66	; 102
    1aaa:	93 e0       	ldi	r25, 0x03	; 3
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01

#if OS_TMR_EN > 0
    ptemp = (void *)&OSTmrTbl[0];
    1ab0:	8a e1       	ldi	r24, 0x1A	; 26
    1ab2:	95 e0       	ldi	r25, 0x05	; 5
    1ab4:	9a 83       	std	Y+2, r25	; 0x02
    1ab6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrWheelTbl[0];
    1ab8:	8f ee       	ldi	r24, 0xEF	; 239
    1aba:	94 e0       	ldi	r25, 0x04	; 4
    1abc:	9a 83       	std	Y+2, r25	; 0x02
    1abe:	89 83       	std	Y+1, r24	; 0x01
    
    ptemp = (void *)&OSTmrEn;
    1ac0:	8a e6       	ldi	r24, 0x6A	; 106
    1ac2:	93 e0       	ldi	r25, 0x03	; 3
    1ac4:	9a 83       	std	Y+2, r25	; 0x02
    1ac6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgMax;
    1ac8:	8c e6       	ldi	r24, 0x6C	; 108
    1aca:	93 e0       	ldi	r25, 0x03	; 3
    1acc:	9a 83       	std	Y+2, r25	; 0x02
    1ace:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgNameSize;
    1ad0:	8e e6       	ldi	r24, 0x6E	; 110
    1ad2:	93 e0       	ldi	r25, 0x03	; 3
    1ad4:	9a 83       	std	Y+2, r25	; 0x02
    1ad6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgWheelSize;
    1ad8:	80 e7       	ldi	r24, 0x70	; 112
    1ada:	93 e0       	ldi	r25, 0x03	; 3
    1adc:	9a 83       	std	Y+2, r25	; 0x02
    1ade:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrCfgTicksPerSec;
    1ae0:	82 e7       	ldi	r24, 0x72	; 114
    1ae2:	93 e0       	ldi	r25, 0x03	; 3
    1ae4:	9a 83       	std	Y+2, r25	; 0x02
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrSize;
    1ae8:	84 e7       	ldi	r24, 0x74	; 116
    1aea:	93 e0       	ldi	r25, 0x03	; 3
    1aec:	9a 83       	std	Y+2, r25	; 0x02
    1aee:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrTblSize;
    1af0:	86 e7       	ldi	r24, 0x76	; 118
    1af2:	93 e0       	ldi	r25, 0x03	; 3
    1af4:	9a 83       	std	Y+2, r25	; 0x02
    1af6:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSTmrWheelSize;
    1af8:	88 e7       	ldi	r24, 0x78	; 120
    1afa:	93 e0       	ldi	r25, 0x03	; 3
    1afc:	9a 83       	std	Y+2, r25	; 0x02
    1afe:	89 83       	std	Y+1, r24	; 0x01
    ptemp = (void *)&OSTmrWheelTblSize;
    1b00:	8a e7       	ldi	r24, 0x7A	; 122
    1b02:	93 e0       	ldi	r25, 0x03	; 3
    1b04:	9a 83       	std	Y+2, r25	; 0x02
    1b06:	89 83       	std	Y+1, r24	; 0x01
#endif

    ptemp = (void *)&OSVersionNbr;
    1b08:	88 e6       	ldi	r24, 0x68	; 104
    1b0a:	93 e0       	ldi	r25, 0x03	; 3
    1b0c:	9a 83       	std	Y+2, r25	; 0x02
    1b0e:	89 83       	std	Y+1, r24	; 0x01

    ptemp = (void *)&OSDataSize;
    1b10:	8c e7       	ldi	r24, 0x7C	; 124
    1b12:	93 e0       	ldi	r25, 0x03	; 3
    1b14:	9a 83       	std	Y+2, r25	; 0x02
    1b16:	89 83       	std	Y+1, r24	; 0x01

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
    1b18:	0f 90       	pop	r0
    1b1a:	0f 90       	pop	r0
    1b1c:	cf 91       	pop	r28
    1b1e:	df 91       	pop	r29
    1b20:	08 95       	ret

00001b22 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    1b22:	df 93       	push	r29
    1b24:	cf 93       	push	r28
    1b26:	00 d0       	rcall	.+0      	; 0x1b28 <OSSemAccept+0x6>
    1b28:	0f 92       	push	r0
    1b2a:	0f 92       	push	r0
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	9d 83       	std	Y+5, r25	; 0x05
    1b32:	8c 83       	std	Y+4, r24	; 0x04
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    1b34:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	80 81       	ld	r24, Z
    1b3e:	83 30       	cpi	r24, 0x03	; 3
    1b40:	19 f0       	breq	.+6      	; 0x1b48 <OSSemAccept+0x26>
        return (0);
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	90 e0       	ldi	r25, 0x00	; 0
    1b46:	20 c0       	rjmp	.+64     	; 0x1b88 <OSSemAccept+0x66>
    }
    OS_ENTER_CRITICAL();
    1b48:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    cnt = pevent->OSEventCnt;
    1b4e:	8c 81       	ldd	r24, Y+4	; 0x04
    1b50:	9d 81       	ldd	r25, Y+5	; 0x05
    1b52:	fc 01       	movw	r30, r24
    1b54:	83 81       	ldd	r24, Z+3	; 0x03
    1b56:	94 81       	ldd	r25, Z+4	; 0x04
    1b58:	9b 83       	std	Y+3, r25	; 0x03
    1b5a:	8a 83       	std	Y+2, r24	; 0x02
    if (cnt > 0) {                                    /* See if resource is available                  */
    1b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    1b60:	00 97       	sbiw	r24, 0x00	; 0
    1b62:	69 f0       	breq	.+26     	; 0x1b7e <OSSemAccept+0x5c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    1b64:	8c 81       	ldd	r24, Y+4	; 0x04
    1b66:	9d 81       	ldd	r25, Y+5	; 0x05
    1b68:	fc 01       	movw	r30, r24
    1b6a:	83 81       	ldd	r24, Z+3	; 0x03
    1b6c:	94 81       	ldd	r25, Z+4	; 0x04
    1b6e:	9c 01       	movw	r18, r24
    1b70:	21 50       	subi	r18, 0x01	; 1
    1b72:	30 40       	sbci	r19, 0x00	; 0
    1b74:	8c 81       	ldd	r24, Y+4	; 0x04
    1b76:	9d 81       	ldd	r25, Y+5	; 0x05
    1b78:	fc 01       	movw	r30, r24
    1b7a:	34 83       	std	Z+4, r19	; 0x04
    1b7c:	23 83       	std	Z+3, r18	; 0x03
    }
    OS_EXIT_CRITICAL();
    1b7e:	89 81       	ldd	r24, Y+1	; 0x01
    1b80:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (cnt);                                     /* Return semaphore count                        */
    1b84:	8a 81       	ldd	r24, Y+2	; 0x02
    1b86:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1b88:	0f 90       	pop	r0
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <OSSemCreate+0x6>
    1b9e:	0f 92       	push	r0
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	9d 83       	std	Y+5, r25	; 0x05
    1ba8:	8c 83       	std	Y+4, r24	; 0x04
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1baa:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    1bac:	80 91 4c 08 	lds	r24, 0x084C
    1bb0:	88 23       	and	r24, r24
    1bb2:	19 f0       	breq	.+6      	; 0x1bba <OSSemCreate+0x22>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    1bb4:	80 e0       	ldi	r24, 0x00	; 0
    1bb6:	90 e0       	ldi	r25, 0x00	; 0
    1bb8:	41 c0       	rjmp	.+130    	; 0x1c3c <OSSemCreate+0xa4>
    }
    OS_ENTER_CRITICAL();
    1bba:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    1bc0:	80 91 4a 08 	lds	r24, 0x084A
    1bc4:	90 91 4b 08 	lds	r25, 0x084B
    1bc8:	9b 83       	std	Y+3, r25	; 0x03
    1bca:	8a 83       	std	Y+2, r24	; 0x02
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    1bcc:	80 91 4a 08 	lds	r24, 0x084A
    1bd0:	90 91 4b 08 	lds	r25, 0x084B
    1bd4:	00 97       	sbiw	r24, 0x00	; 0
    1bd6:	59 f0       	breq	.+22     	; 0x1bee <OSSemCreate+0x56>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    1bd8:	80 91 4a 08 	lds	r24, 0x084A
    1bdc:	90 91 4b 08 	lds	r25, 0x084B
    1be0:	fc 01       	movw	r30, r24
    1be2:	81 81       	ldd	r24, Z+1	; 0x01
    1be4:	92 81       	ldd	r25, Z+2	; 0x02
    1be6:	90 93 4b 08 	sts	0x084B, r25
    1bea:	80 93 4a 08 	sts	0x084A, r24
    }
    OS_EXIT_CRITICAL();
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
    1bf0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    1bf4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf6:	9b 81       	ldd	r25, Y+3	; 0x03
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	f1 f0       	breq	.+60     	; 0x1c38 <OSSemCreate+0xa0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    1bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    1c00:	23 e0       	ldi	r18, 0x03	; 3
    1c02:	fc 01       	movw	r30, r24
    1c04:	20 83       	st	Z, r18
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    1c06:	8a 81       	ldd	r24, Y+2	; 0x02
    1c08:	9b 81       	ldd	r25, Y+3	; 0x03
    1c0a:	2c 81       	ldd	r18, Y+4	; 0x04
    1c0c:	3d 81       	ldd	r19, Y+5	; 0x05
    1c0e:	fc 01       	movw	r30, r24
    1c10:	34 83       	std	Z+4, r19	; 0x04
    1c12:	23 83       	std	Z+3, r18	; 0x03
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    1c14:	8a 81       	ldd	r24, Y+2	; 0x02
    1c16:	9b 81       	ldd	r25, Y+3	; 0x03
    1c18:	fc 01       	movw	r30, r24
    1c1a:	12 82       	std	Z+2, r1	; 0x02
    1c1c:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	9b 81       	ldd	r25, Y+3	; 0x03
    1c22:	2f e3       	ldi	r18, 0x3F	; 63
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 87       	std	Z+8, r18	; 0x08
        pevent->OSEventName[1] = OS_ASCII_NUL;
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	9b 81       	ldd	r25, Y+3	; 0x03
    1c2c:	fc 01       	movw	r30, r24
    1c2e:	11 86       	std	Z+9, r1	; 0x09
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    1c30:	8a 81       	ldd	r24, Y+2	; 0x02
    1c32:	9b 81       	ldd	r25, Y+3	; 0x03
    1c34:	0e 94 73 08 	call	0x10e6	; 0x10e6 <OS_EventWaitListInit>
    }
    return (pevent);
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1c3c:	0f 90       	pop	r0
    1c3e:	0f 90       	pop	r0
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	cf 91       	pop	r28
    1c48:	df 91       	pop	r29
    1c4a:	08 95       	ret

00001c4c <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    1c4c:	df 93       	push	r29
    1c4e:	cf 93       	push	r28
    1c50:	cd b7       	in	r28, 0x3d	; 61
    1c52:	de b7       	in	r29, 0x3e	; 62
    1c54:	29 97       	sbiw	r28, 0x09	; 9
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	de bf       	out	0x3e, r29	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	cd bf       	out	0x3d, r28	; 61
    1c60:	9e 83       	std	Y+6, r25	; 0x06
    1c62:	8d 83       	std	Y+5, r24	; 0x05
    1c64:	6f 83       	std	Y+7, r22	; 0x07
    1c66:	59 87       	std	Y+9, r21	; 0x09
    1c68:	48 87       	std	Y+8, r20	; 0x08
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    1c6a:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    1c6c:	8d 81       	ldd	r24, Y+5	; 0x05
    1c6e:	9e 81       	ldd	r25, Y+6	; 0x06
    1c70:	fc 01       	movw	r30, r24
    1c72:	80 81       	ld	r24, Z
    1c74:	83 30       	cpi	r24, 0x03	; 3
    1c76:	41 f0       	breq	.+16     	; 0x1c88 <OSSemDel+0x3c>
        *perr = OS_ERR_EVENT_TYPE;
    1c78:	88 85       	ldd	r24, Y+8	; 0x08
    1c7a:	99 85       	ldd	r25, Y+9	; 0x09
    1c7c:	21 e0       	ldi	r18, 0x01	; 1
    1c7e:	fc 01       	movw	r30, r24
    1c80:	20 83       	st	Z, r18
        return (pevent);
    1c82:	8d 81       	ldd	r24, Y+5	; 0x05
    1c84:	9e 81       	ldd	r25, Y+6	; 0x06
    1c86:	ac c0       	rjmp	.+344    	; 0x1de0 <OSSemDel+0x194>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    1c88:	80 91 4c 08 	lds	r24, 0x084C
    1c8c:	88 23       	and	r24, r24
    1c8e:	41 f0       	breq	.+16     	; 0x1ca0 <OSSemDel+0x54>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    1c90:	88 85       	ldd	r24, Y+8	; 0x08
    1c92:	99 85       	ldd	r25, Y+9	; 0x09
    1c94:	2f e0       	ldi	r18, 0x0F	; 15
    1c96:	fc 01       	movw	r30, r24
    1c98:	20 83       	st	Z, r18
        return (pevent);
    1c9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c9e:	a0 c0       	rjmp	.+320    	; 0x1de0 <OSSemDel+0x194>
    }
    OS_ENTER_CRITICAL();
    1ca0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1ca4:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    1ca6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ca8:	9e 81       	ldd	r25, Y+6	; 0x06
    1caa:	fc 01       	movw	r30, r24
    1cac:	85 81       	ldd	r24, Z+5	; 0x05
    1cae:	88 23       	and	r24, r24
    1cb0:	19 f0       	breq	.+6      	; 0x1cb8 <OSSemDel+0x6c>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	8c 83       	std	Y+4, r24	; 0x04
    1cb6:	01 c0       	rjmp	.+2      	; 0x1cba <OSSemDel+0x6e>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    1cb8:	1c 82       	std	Y+4, r1	; 0x04
    }
    switch (opt) {
    1cba:	8f 81       	ldd	r24, Y+7	; 0x07
    1cbc:	88 2f       	mov	r24, r24
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	00 97       	sbiw	r24, 0x00	; 0
    1cc2:	29 f0       	breq	.+10     	; 0x1cce <OSSemDel+0x82>
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <OSSemDel+0x80>
    1cca:	45 c0       	rjmp	.+138    	; 0x1d56 <OSSemDel+0x10a>
    1ccc:	7b c0       	rjmp	.+246    	; 0x1dc4 <OSSemDel+0x178>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    1cce:	8c 81       	ldd	r24, Y+4	; 0x04
    1cd0:	88 23       	and	r24, r24
    1cd2:	59 f5       	brne	.+86     	; 0x1d2a <OSSemDel+0xde>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    1cd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd8:	2f e3       	ldi	r18, 0x3F	; 63
    1cda:	fc 01       	movw	r30, r24
    1cdc:	20 87       	std	Z+8, r18	; 0x08
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    1cde:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce2:	fc 01       	movw	r30, r24
    1ce4:	11 86       	std	Z+9, r1	; 0x09
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1ce6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cea:	fc 01       	movw	r30, r24
    1cec:	10 82       	st	Z, r1
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    1cee:	20 91 4a 08 	lds	r18, 0x084A
    1cf2:	30 91 4b 08 	lds	r19, 0x084B
    1cf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1cf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1cfa:	fc 01       	movw	r30, r24
    1cfc:	32 83       	std	Z+2, r19	; 0x02
    1cfe:	21 83       	std	Z+1, r18	; 0x01
                 pevent->OSEventCnt     = 0;
    1d00:	8d 81       	ldd	r24, Y+5	; 0x05
    1d02:	9e 81       	ldd	r25, Y+6	; 0x06
    1d04:	fc 01       	movw	r30, r24
    1d06:	14 82       	std	Z+4, r1	; 0x04
    1d08:	13 82       	std	Z+3, r1	; 0x03
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	90 93 4b 08 	sts	0x084B, r25
    1d12:	80 93 4a 08 	sts	0x084A, r24
                 OS_EXIT_CRITICAL();
    1d16:	89 81       	ldd	r24, Y+1	; 0x01
    1d18:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_NONE;
    1d1c:	88 85       	ldd	r24, Y+8	; 0x08
    1d1e:	99 85       	ldd	r25, Y+9	; 0x09
    1d20:	fc 01       	movw	r30, r24
    1d22:	10 82       	st	Z, r1
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    1d24:	1b 82       	std	Y+3, r1	; 0x03
    1d26:	1a 82       	std	Y+2, r1	; 0x02
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    1d28:	59 c0       	rjmp	.+178    	; 0x1ddc <OSSemDel+0x190>
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_TASK_WAITING;
    1d30:	88 85       	ldd	r24, Y+8	; 0x08
    1d32:	99 85       	ldd	r25, Y+9	; 0x09
    1d34:	29 e4       	ldi	r18, 0x49	; 73
    1d36:	fc 01       	movw	r30, r24
    1d38:	20 83       	st	Z, r18
                 pevent_return          = pevent;
    1d3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d3e:	9b 83       	std	Y+3, r25	; 0x03
    1d40:	8a 83       	std	Y+2, r24	; 0x02
             }
             break;
    1d42:	4c c0       	rjmp	.+152    	; 0x1ddc <OSSemDel+0x190>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    1d44:	8d 81       	ldd	r24, Y+5	; 0x05
    1d46:	9e 81       	ldd	r25, Y+6	; 0x06
    1d48:	60 e0       	ldi	r22, 0x00	; 0
    1d4a:	70 e0       	ldi	r23, 0x00	; 0
    1d4c:	41 e0       	ldi	r20, 0x01	; 1
    1d4e:	20 e0       	ldi	r18, 0x00	; 0
    1d50:	0e 94 15 07 	call	0xe2a	; 0xe2a <OS_EventTaskRdy>
    1d54:	01 c0       	rjmp	.+2      	; 0x1d58 <OSSemDel+0x10c>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    1d56:	00 00       	nop
    1d58:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5a:	9e 81       	ldd	r25, Y+6	; 0x06
    1d5c:	fc 01       	movw	r30, r24
    1d5e:	85 81       	ldd	r24, Z+5	; 0x05
    1d60:	88 23       	and	r24, r24
    1d62:	81 f7       	brne	.-32     	; 0x1d44 <OSSemDel+0xf8>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    1d64:	8d 81       	ldd	r24, Y+5	; 0x05
    1d66:	9e 81       	ldd	r25, Y+6	; 0x06
    1d68:	2f e3       	ldi	r18, 0x3F	; 63
    1d6a:	fc 01       	movw	r30, r24
    1d6c:	20 87       	std	Z+8, r18	; 0x08
             pevent->OSEventName[1] = OS_ASCII_NUL;
    1d6e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d70:	9e 81       	ldd	r25, Y+6	; 0x06
    1d72:	fc 01       	movw	r30, r24
    1d74:	11 86       	std	Z+9, r1	; 0x09
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    1d76:	8d 81       	ldd	r24, Y+5	; 0x05
    1d78:	9e 81       	ldd	r25, Y+6	; 0x06
    1d7a:	fc 01       	movw	r30, r24
    1d7c:	10 82       	st	Z, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    1d7e:	20 91 4a 08 	lds	r18, 0x084A
    1d82:	30 91 4b 08 	lds	r19, 0x084B
    1d86:	8d 81       	ldd	r24, Y+5	; 0x05
    1d88:	9e 81       	ldd	r25, Y+6	; 0x06
    1d8a:	fc 01       	movw	r30, r24
    1d8c:	32 83       	std	Z+2, r19	; 0x02
    1d8e:	21 83       	std	Z+1, r18	; 0x01
             pevent->OSEventCnt     = 0;
    1d90:	8d 81       	ldd	r24, Y+5	; 0x05
    1d92:	9e 81       	ldd	r25, Y+6	; 0x06
    1d94:	fc 01       	movw	r30, r24
    1d96:	14 82       	std	Z+4, r1	; 0x04
    1d98:	13 82       	std	Z+3, r1	; 0x03
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d9e:	90 93 4b 08 	sts	0x084B, r25
    1da2:	80 93 4a 08 	sts	0x084A, r24
             OS_EXIT_CRITICAL();
    1da6:	89 81       	ldd	r24, Y+1	; 0x01
    1da8:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    1dac:	8c 81       	ldd	r24, Y+4	; 0x04
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	11 f4       	brne	.+4      	; 0x1db6 <OSSemDel+0x16a>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    1db2:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
    1db6:	88 85       	ldd	r24, Y+8	; 0x08
    1db8:	99 85       	ldd	r25, Y+9	; 0x09
    1dba:	fc 01       	movw	r30, r24
    1dbc:	10 82       	st	Z, r1
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    1dbe:	1b 82       	std	Y+3, r1	; 0x03
    1dc0:	1a 82       	std	Y+2, r1	; 0x02
             break;
    1dc2:	0c c0       	rjmp	.+24     	; 0x1ddc <OSSemDel+0x190>

        default:
             OS_EXIT_CRITICAL();
    1dc4:	89 81       	ldd	r24, Y+1	; 0x01
    1dc6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             *perr                  = OS_ERR_INVALID_OPT;
    1dca:	88 85       	ldd	r24, Y+8	; 0x08
    1dcc:	99 85       	ldd	r25, Y+9	; 0x09
    1dce:	27 e0       	ldi	r18, 0x07	; 7
    1dd0:	fc 01       	movw	r30, r24
    1dd2:	20 83       	st	Z, r18
             pevent_return          = pevent;
    1dd4:	8d 81       	ldd	r24, Y+5	; 0x05
    1dd6:	9e 81       	ldd	r25, Y+6	; 0x06
    1dd8:	9b 83       	std	Y+3, r25	; 0x03
    1dda:	8a 83       	std	Y+2, r24	; 0x02
             break;
    }
    return (pevent_return);
    1ddc:	8a 81       	ldd	r24, Y+2	; 0x02
    1dde:	9b 81       	ldd	r25, Y+3	; 0x03
}
    1de0:	29 96       	adiw	r28, 0x09	; 9
    1de2:	0f b6       	in	r0, 0x3f	; 63
    1de4:	f8 94       	cli
    1de6:	de bf       	out	0x3e, r29	; 62
    1de8:	0f be       	out	0x3f, r0	; 63
    1dea:	cd bf       	out	0x3d, r28	; 61
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	08 95       	ret

00001df2 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    1df2:	df 93       	push	r29
    1df4:	cf 93       	push	r28
    1df6:	cd b7       	in	r28, 0x3d	; 61
    1df8:	de b7       	in	r29, 0x3e	; 62
    1dfa:	27 97       	sbiw	r28, 0x07	; 7
    1dfc:	0f b6       	in	r0, 0x3f	; 63
    1dfe:	f8 94       	cli
    1e00:	de bf       	out	0x3e, r29	; 62
    1e02:	0f be       	out	0x3f, r0	; 63
    1e04:	cd bf       	out	0x3d, r28	; 61
    1e06:	9b 83       	std	Y+3, r25	; 0x03
    1e08:	8a 83       	std	Y+2, r24	; 0x02
    1e0a:	7d 83       	std	Y+5, r23	; 0x05
    1e0c:	6c 83       	std	Y+4, r22	; 0x04
    1e0e:	5f 83       	std	Y+7, r21	; 0x07
    1e10:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    1e12:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
    1e16:	9b 81       	ldd	r25, Y+3	; 0x03
    1e18:	fc 01       	movw	r30, r24
    1e1a:	80 81       	ld	r24, Z
    1e1c:	83 30       	cpi	r24, 0x03	; 3
    1e1e:	31 f0       	breq	.+12     	; 0x1e2c <OSSemPend+0x3a>
        *perr = OS_ERR_EVENT_TYPE;
    1e20:	8e 81       	ldd	r24, Y+6	; 0x06
    1e22:	9f 81       	ldd	r25, Y+7	; 0x07
    1e24:	21 e0       	ldi	r18, 0x01	; 1
    1e26:	fc 01       	movw	r30, r24
    1e28:	20 83       	st	Z, r18
        return;
    1e2a:	98 c0       	rjmp	.+304    	; 0x1f5c <OSSemPend+0x16a>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    1e2c:	80 91 4c 08 	lds	r24, 0x084C
    1e30:	88 23       	and	r24, r24
    1e32:	31 f0       	breq	.+12     	; 0x1e40 <OSSemPend+0x4e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    1e34:	8e 81       	ldd	r24, Y+6	; 0x06
    1e36:	9f 81       	ldd	r25, Y+7	; 0x07
    1e38:	22 e0       	ldi	r18, 0x02	; 2
    1e3a:	fc 01       	movw	r30, r24
    1e3c:	20 83       	st	Z, r18
        return;
    1e3e:	8e c0       	rjmp	.+284    	; 0x1f5c <OSSemPend+0x16a>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    1e40:	80 91 0f 05 	lds	r24, 0x050F
    1e44:	88 23       	and	r24, r24
    1e46:	31 f0       	breq	.+12     	; 0x1e54 <OSSemPend+0x62>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    1e48:	8e 81       	ldd	r24, Y+6	; 0x06
    1e4a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e4c:	2d e0       	ldi	r18, 0x0D	; 13
    1e4e:	fc 01       	movw	r30, r24
    1e50:	20 83       	st	Z, r18
        return;
    1e52:	84 c0       	rjmp	.+264    	; 0x1f5c <OSSemPend+0x16a>
    }
    OS_ENTER_CRITICAL();
    1e54:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1e58:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    1e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e5e:	fc 01       	movw	r30, r24
    1e60:	83 81       	ldd	r24, Z+3	; 0x03
    1e62:	94 81       	ldd	r25, Z+4	; 0x04
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	a9 f0       	breq	.+42     	; 0x1e92 <OSSemPend+0xa0>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	83 81       	ldd	r24, Z+3	; 0x03
    1e70:	94 81       	ldd	r25, Z+4	; 0x04
    1e72:	9c 01       	movw	r18, r24
    1e74:	21 50       	subi	r18, 0x01	; 1
    1e76:	30 40       	sbci	r19, 0x00	; 0
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	34 83       	std	Z+4, r19	; 0x04
    1e80:	23 83       	std	Z+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
    1e88:	8e 81       	ldd	r24, Y+6	; 0x06
    1e8a:	9f 81       	ldd	r25, Y+7	; 0x07
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	10 82       	st	Z, r1
        return;
    1e90:	65 c0       	rjmp	.+202    	; 0x1f5c <OSSemPend+0x16a>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    1e92:	80 91 4d 08 	lds	r24, 0x084D
    1e96:	90 91 4e 08 	lds	r25, 0x084E
    1e9a:	20 91 4d 08 	lds	r18, 0x084D
    1e9e:	30 91 4e 08 	lds	r19, 0x084E
    1ea2:	f9 01       	movw	r30, r18
    1ea4:	26 89       	ldd	r18, Z+22	; 0x16
    1ea6:	21 60       	ori	r18, 0x01	; 1
    1ea8:	fc 01       	movw	r30, r24
    1eaa:	26 8b       	std	Z+22, r18	; 0x16
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    1eac:	80 91 4d 08 	lds	r24, 0x084D
    1eb0:	90 91 4e 08 	lds	r25, 0x084E
    1eb4:	fc 01       	movw	r30, r24
    1eb6:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    1eb8:	80 91 4d 08 	lds	r24, 0x084D
    1ebc:	90 91 4e 08 	lds	r25, 0x084E
    1ec0:	2c 81       	ldd	r18, Y+4	; 0x04
    1ec2:	3d 81       	ldd	r19, Y+5	; 0x05
    1ec4:	fc 01       	movw	r30, r24
    1ec6:	35 8b       	std	Z+21, r19	; 0x15
    1ec8:	24 8b       	std	Z+20, r18	; 0x14
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    1eca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ecc:	9b 81       	ldd	r25, Y+3	; 0x03
    1ece:	0e 94 a3 07 	call	0xf46	; 0xf46 <OS_EventTaskWait>
    OS_EXIT_CRITICAL();
    1ed2:	89 81       	ldd	r24, Y+1	; 0x01
    1ed4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
    1ed8:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
    OS_ENTER_CRITICAL();
    1edc:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    1ee2:	80 91 4d 08 	lds	r24, 0x084D
    1ee6:	90 91 4e 08 	lds	r25, 0x084E
    1eea:	fc 01       	movw	r30, r24
    1eec:	87 89       	ldd	r24, Z+23	; 0x17
    1eee:	88 2f       	mov	r24, r24
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	21 f0       	breq	.+8      	; 0x1efe <OSSemPend+0x10c>
    1ef6:	82 30       	cpi	r24, 0x02	; 2
    1ef8:	91 05       	cpc	r25, r1
    1efa:	31 f0       	breq	.+12     	; 0x1f08 <OSSemPend+0x116>
    1efc:	0b c0       	rjmp	.+22     	; 0x1f14 <OSSemPend+0x122>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    1efe:	8e 81       	ldd	r24, Y+6	; 0x06
    1f00:	9f 81       	ldd	r25, Y+7	; 0x07
    1f02:	fc 01       	movw	r30, r24
    1f04:	10 82       	st	Z, r1
             break;
    1f06:	14 c0       	rjmp	.+40     	; 0x1f30 <OSSemPend+0x13e>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    1f08:	8e 81       	ldd	r24, Y+6	; 0x06
    1f0a:	9f 81       	ldd	r25, Y+7	; 0x07
    1f0c:	2e e0       	ldi	r18, 0x0E	; 14
    1f0e:	fc 01       	movw	r30, r24
    1f10:	20 83       	st	Z, r18
             break;
    1f12:	0e c0       	rjmp	.+28     	; 0x1f30 <OSSemPend+0x13e>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    1f14:	80 91 4d 08 	lds	r24, 0x084D
    1f18:	90 91 4e 08 	lds	r25, 0x084E
    1f1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1f1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1f20:	b9 01       	movw	r22, r18
    1f22:	0e 94 22 08 	call	0x1044	; 0x1044 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    1f26:	8e 81       	ldd	r24, Y+6	; 0x06
    1f28:	9f 81       	ldd	r25, Y+7	; 0x07
    1f2a:	2a e0       	ldi	r18, 0x0A	; 10
    1f2c:	fc 01       	movw	r30, r24
    1f2e:	20 83       	st	Z, r18
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    1f30:	80 91 4d 08 	lds	r24, 0x084D
    1f34:	90 91 4e 08 	lds	r25, 0x084E
    1f38:	fc 01       	movw	r30, r24
    1f3a:	16 8a       	std	Z+22, r1	; 0x16
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    1f3c:	80 91 4d 08 	lds	r24, 0x084D
    1f40:	90 91 4e 08 	lds	r25, 0x084E
    1f44:	fc 01       	movw	r30, r24
    1f46:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    1f48:	80 91 4d 08 	lds	r24, 0x084D
    1f4c:	90 91 4e 08 	lds	r25, 0x084E
    1f50:	fc 01       	movw	r30, r24
    1f52:	13 8a       	std	Z+19, r1	; 0x13
    1f54:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    1f5c:	27 96       	adiw	r28, 0x07	; 7
    1f5e:	0f b6       	in	r0, 0x3f	; 63
    1f60:	f8 94       	cli
    1f62:	de bf       	out	0x3e, r29	; 62
    1f64:	0f be       	out	0x3f, r0	; 63
    1f66:	cd bf       	out	0x3d, r28	; 61
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    1f6e:	df 93       	push	r29
    1f70:	cf 93       	push	r28
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	27 97       	sbiw	r28, 0x07	; 7
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	de bf       	out	0x3e, r29	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	cd bf       	out	0x3d, r28	; 61
    1f82:	9c 83       	std	Y+4, r25	; 0x04
    1f84:	8b 83       	std	Y+3, r24	; 0x03
    1f86:	6d 83       	std	Y+5, r22	; 0x05
    1f88:	5f 83       	std	Y+7, r21	; 0x07
    1f8a:	4e 83       	std	Y+6, r20	; 0x06
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    1f8c:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	fc 01       	movw	r30, r24
    1f94:	80 81       	ld	r24, Z
    1f96:	83 30       	cpi	r24, 0x03	; 3
    1f98:	39 f0       	breq	.+14     	; 0x1fa8 <OSSemPendAbort+0x3a>
        *perr = OS_ERR_EVENT_TYPE;
    1f9a:	8e 81       	ldd	r24, Y+6	; 0x06
    1f9c:	9f 81       	ldd	r25, Y+7	; 0x07
    1f9e:	21 e0       	ldi	r18, 0x01	; 1
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	20 83       	st	Z, r18
        return (0);
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	44 c0       	rjmp	.+136    	; 0x2030 <OSSemPendAbort+0xc2>
    }
    OS_ENTER_CRITICAL();
    1fa8:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    1fac:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    1fae:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb2:	fc 01       	movw	r30, r24
    1fb4:	85 81       	ldd	r24, Z+5	; 0x05
    1fb6:	88 23       	and	r24, r24
    1fb8:	99 f1       	breq	.+102    	; 0x2020 <OSSemPendAbort+0xb2>
        nbr_tasks = 0;
    1fba:	1a 82       	std	Y+2, r1	; 0x02
        switch (opt) {
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	88 2f       	mov	r24, r24
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	91 05       	cpc	r25, r1
    1fc6:	69 f0       	breq	.+26     	; 0x1fe2 <OSSemPendAbort+0x74>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <OSSemPendAbort+0x84>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    1fca:	8b 81       	ldd	r24, Y+3	; 0x03
    1fcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fce:	60 e0       	ldi	r22, 0x00	; 0
    1fd0:	70 e0       	ldi	r23, 0x00	; 0
    1fd2:	41 e0       	ldi	r20, 0x01	; 1
    1fd4:	22 e0       	ldi	r18, 0x02	; 2
    1fd6:	0e 94 15 07 	call	0xe2a	; 0xe2a <OS_EventTaskRdy>
                     nbr_tasks++;
    1fda:	8a 81       	ldd	r24, Y+2	; 0x02
    1fdc:	8f 5f       	subi	r24, 0xFF	; 255
    1fde:	8a 83       	std	Y+2, r24	; 0x02
    1fe0:	01 c0       	rjmp	.+2      	; 0x1fe4 <OSSemPendAbort+0x76>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    1fe2:	00 00       	nop
    1fe4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe8:	fc 01       	movw	r30, r24
    1fea:	85 81       	ldd	r24, Z+5	; 0x05
    1fec:	88 23       	and	r24, r24
    1fee:	69 f7       	brne	.-38     	; 0x1fca <OSSemPendAbort+0x5c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    1ff0:	0b c0       	rjmp	.+22     	; 0x2008 <OSSemPendAbort+0x9a>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	60 e0       	ldi	r22, 0x00	; 0
    1ff8:	70 e0       	ldi	r23, 0x00	; 0
    1ffa:	41 e0       	ldi	r20, 0x01	; 1
    1ffc:	22 e0       	ldi	r18, 0x02	; 2
    1ffe:	0e 94 15 07 	call	0xe2a	; 0xe2a <OS_EventTaskRdy>
                 nbr_tasks++;
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	8f 5f       	subi	r24, 0xFF	; 255
    2006:	8a 83       	std	Y+2, r24	; 0x02
                 break;
        }
        OS_EXIT_CRITICAL();
    2008:	89 81       	ldd	r24, Y+1	; 0x01
    200a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    200e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
    2012:	8e 81       	ldd	r24, Y+6	; 0x06
    2014:	9f 81       	ldd	r25, Y+7	; 0x07
    2016:	2e e0       	ldi	r18, 0x0E	; 14
    2018:	fc 01       	movw	r30, r24
    201a:	20 83       	st	Z, r18
        return (nbr_tasks);
    201c:	8a 81       	ldd	r24, Y+2	; 0x02
    201e:	08 c0       	rjmp	.+16     	; 0x2030 <OSSemPendAbort+0xc2>
    }
    OS_EXIT_CRITICAL();
    2020:	89 81       	ldd	r24, Y+1	; 0x01
    2022:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    2026:	8e 81       	ldd	r24, Y+6	; 0x06
    2028:	9f 81       	ldd	r25, Y+7	; 0x07
    202a:	fc 01       	movw	r30, r24
    202c:	10 82       	st	Z, r1
    return (0);                                       /* No tasks waiting on semaphore                 */
    202e:	80 e0       	ldi	r24, 0x00	; 0
}
    2030:	27 96       	adiw	r28, 0x07	; 7
    2032:	0f b6       	in	r0, 0x3f	; 63
    2034:	f8 94       	cli
    2036:	de bf       	out	0x3e, r29	; 62
    2038:	0f be       	out	0x3f, r0	; 63
    203a:	cd bf       	out	0x3d, r28	; 61
    203c:	cf 91       	pop	r28
    203e:	df 91       	pop	r29
    2040:	08 95       	ret

00002042 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	00 d0       	rcall	.+0      	; 0x2048 <OSSemPost+0x6>
    2048:	cd b7       	in	r28, 0x3d	; 61
    204a:	de b7       	in	r29, 0x3e	; 62
    204c:	9b 83       	std	Y+3, r25	; 0x03
    204e:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    2050:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	9b 81       	ldd	r25, Y+3	; 0x03
    2056:	fc 01       	movw	r30, r24
    2058:	80 81       	ld	r24, Z
    205a:	83 30       	cpi	r24, 0x03	; 3
    205c:	11 f0       	breq	.+4      	; 0x2062 <OSSemPost+0x20>
        return (OS_ERR_EVENT_TYPE);
    205e:	81 e0       	ldi	r24, 0x01	; 1
    2060:	37 c0       	rjmp	.+110    	; 0x20d0 <OSSemPost+0x8e>
    }
    OS_ENTER_CRITICAL();
    2062:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2066:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    2068:	8a 81       	ldd	r24, Y+2	; 0x02
    206a:	9b 81       	ldd	r25, Y+3	; 0x03
    206c:	fc 01       	movw	r30, r24
    206e:	85 81       	ldd	r24, Z+5	; 0x05
    2070:	88 23       	and	r24, r24
    2072:	79 f0       	breq	.+30     	; 0x2092 <OSSemPost+0x50>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    2074:	8a 81       	ldd	r24, Y+2	; 0x02
    2076:	9b 81       	ldd	r25, Y+3	; 0x03
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	20 e0       	ldi	r18, 0x00	; 0
    2080:	0e 94 15 07 	call	0xe2a	; 0xe2a <OS_EventTaskRdy>
        OS_EXIT_CRITICAL();
    2084:	89 81       	ldd	r24, Y+1	; 0x01
    2086:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    208a:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
        return (OS_ERR_NONE);
    208e:	80 e0       	ldi	r24, 0x00	; 0
    2090:	1f c0       	rjmp	.+62     	; 0x20d0 <OSSemPost+0x8e>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    2092:	8a 81       	ldd	r24, Y+2	; 0x02
    2094:	9b 81       	ldd	r25, Y+3	; 0x03
    2096:	fc 01       	movw	r30, r24
    2098:	83 81       	ldd	r24, Z+3	; 0x03
    209a:	94 81       	ldd	r25, Z+4	; 0x04
    209c:	ff ef       	ldi	r31, 0xFF	; 255
    209e:	8f 3f       	cpi	r24, 0xFF	; 255
    20a0:	9f 07       	cpc	r25, r31
    20a2:	91 f0       	breq	.+36     	; 0x20c8 <OSSemPost+0x86>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    20a4:	8a 81       	ldd	r24, Y+2	; 0x02
    20a6:	9b 81       	ldd	r25, Y+3	; 0x03
    20a8:	fc 01       	movw	r30, r24
    20aa:	83 81       	ldd	r24, Z+3	; 0x03
    20ac:	94 81       	ldd	r25, Z+4	; 0x04
    20ae:	9c 01       	movw	r18, r24
    20b0:	2f 5f       	subi	r18, 0xFF	; 255
    20b2:	3f 4f       	sbci	r19, 0xFF	; 255
    20b4:	8a 81       	ldd	r24, Y+2	; 0x02
    20b6:	9b 81       	ldd	r25, Y+3	; 0x03
    20b8:	fc 01       	movw	r30, r24
    20ba:	34 83       	std	Z+4, r19	; 0x04
    20bc:	23 83       	std	Z+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    20be:	89 81       	ldd	r24, Y+1	; 0x01
    20c0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	04 c0       	rjmp	.+8      	; 0x20d0 <OSSemPost+0x8e>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    20c8:	89 81       	ldd	r24, Y+1	; 0x01
    20ca:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
    20ce:	82 e3       	ldi	r24, 0x32	; 50
}
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	0f 90       	pop	r0
    20d6:	cf 91       	pop	r28
    20d8:	df 91       	pop	r29
    20da:	08 95       	ret

000020dc <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    20dc:	df 93       	push	r29
    20de:	cf 93       	push	r28
    20e0:	cd b7       	in	r28, 0x3d	; 61
    20e2:	de b7       	in	r29, 0x3e	; 62
    20e4:	2a 97       	sbiw	r28, 0x0a	; 10
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	98 87       	std	Y+8, r25	; 0x08
    20f2:	8f 83       	std	Y+7, r24	; 0x07
    20f4:	7a 87       	std	Y+10, r23	; 0x0a
    20f6:	69 87       	std	Y+9, r22	; 0x09
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    20f8:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    20fa:	8f 81       	ldd	r24, Y+7	; 0x07
    20fc:	98 85       	ldd	r25, Y+8	; 0x08
    20fe:	fc 01       	movw	r30, r24
    2100:	80 81       	ld	r24, Z
    2102:	83 30       	cpi	r24, 0x03	; 3
    2104:	11 f0       	breq	.+4      	; 0x210a <OSSemQuery+0x2e>
        return (OS_ERR_EVENT_TYPE);
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	3d c0       	rjmp	.+122    	; 0x2184 <OSSemQuery+0xa8>
    }
    OS_ENTER_CRITICAL();
    210a:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    210e:	89 83       	std	Y+1, r24	; 0x01
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    2110:	8f 81       	ldd	r24, Y+7	; 0x07
    2112:	98 85       	ldd	r25, Y+8	; 0x08
    2114:	fc 01       	movw	r30, r24
    2116:	25 81       	ldd	r18, Z+5	; 0x05
    2118:	89 85       	ldd	r24, Y+9	; 0x09
    211a:	9a 85       	ldd	r25, Y+10	; 0x0a
    211c:	fc 01       	movw	r30, r24
    211e:	24 83       	std	Z+4, r18	; 0x04
    psrc                   = &pevent->OSEventTbl[0];
    2120:	8f 81       	ldd	r24, Y+7	; 0x07
    2122:	98 85       	ldd	r25, Y+8	; 0x08
    2124:	06 96       	adiw	r24, 0x06	; 6
    2126:	9e 83       	std	Y+6, r25	; 0x06
    2128:	8d 83       	std	Y+5, r24	; 0x05
    pdest                  = &p_sem_data->OSEventTbl[0];
    212a:	89 85       	ldd	r24, Y+9	; 0x09
    212c:	9a 85       	ldd	r25, Y+10	; 0x0a
    212e:	02 96       	adiw	r24, 0x02	; 2
    2130:	9c 83       	std	Y+4, r25	; 0x04
    2132:	8b 83       	std	Y+3, r24	; 0x03
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    2134:	1a 82       	std	Y+2, r1	; 0x02
    2136:	15 c0       	rjmp	.+42     	; 0x2162 <OSSemQuery+0x86>
        *pdest++ = *psrc++;
    2138:	8d 81       	ldd	r24, Y+5	; 0x05
    213a:	9e 81       	ldd	r25, Y+6	; 0x06
    213c:	fc 01       	movw	r30, r24
    213e:	20 81       	ld	r18, Z
    2140:	8b 81       	ldd	r24, Y+3	; 0x03
    2142:	9c 81       	ldd	r25, Y+4	; 0x04
    2144:	fc 01       	movw	r30, r24
    2146:	20 83       	st	Z, r18
    2148:	8b 81       	ldd	r24, Y+3	; 0x03
    214a:	9c 81       	ldd	r25, Y+4	; 0x04
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	9c 83       	std	Y+4, r25	; 0x04
    2150:	8b 83       	std	Y+3, r24	; 0x03
    2152:	8d 81       	ldd	r24, Y+5	; 0x05
    2154:	9e 81       	ldd	r25, Y+6	; 0x06
    2156:	01 96       	adiw	r24, 0x01	; 1
    2158:	9e 83       	std	Y+6, r25	; 0x06
    215a:	8d 83       	std	Y+5, r24	; 0x05
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    215c:	8a 81       	ldd	r24, Y+2	; 0x02
    215e:	8f 5f       	subi	r24, 0xFF	; 255
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	82 30       	cpi	r24, 0x02	; 2
    2166:	40 f3       	brcs	.-48     	; 0x2138 <OSSemQuery+0x5c>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    2168:	8f 81       	ldd	r24, Y+7	; 0x07
    216a:	98 85       	ldd	r25, Y+8	; 0x08
    216c:	fc 01       	movw	r30, r24
    216e:	23 81       	ldd	r18, Z+3	; 0x03
    2170:	34 81       	ldd	r19, Z+4	; 0x04
    2172:	89 85       	ldd	r24, Y+9	; 0x09
    2174:	9a 85       	ldd	r25, Y+10	; 0x0a
    2176:	fc 01       	movw	r30, r24
    2178:	31 83       	std	Z+1, r19	; 0x01
    217a:	20 83       	st	Z, r18
    OS_EXIT_CRITICAL();
    217c:	89 81       	ldd	r24, Y+1	; 0x01
    217e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    2182:	80 e0       	ldi	r24, 0x00	; 0
}
    2184:	2a 96       	adiw	r28, 0x0a	; 10
    2186:	0f b6       	in	r0, 0x3f	; 63
    2188:	f8 94       	cli
    218a:	de bf       	out	0x3e, r29	; 62
    218c:	0f be       	out	0x3f, r0	; 63
    218e:	cd bf       	out	0x3d, r28	; 61
    2190:	cf 91       	pop	r28
    2192:	df 91       	pop	r29
    2194:	08 95       	ret

00002196 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    2196:	df 93       	push	r29
    2198:	cf 93       	push	r28
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	27 97       	sbiw	r28, 0x07	; 7
    21a0:	0f b6       	in	r0, 0x3f	; 63
    21a2:	f8 94       	cli
    21a4:	de bf       	out	0x3e, r29	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	cd bf       	out	0x3d, r28	; 61
    21aa:	9b 83       	std	Y+3, r25	; 0x03
    21ac:	8a 83       	std	Y+2, r24	; 0x02
    21ae:	7d 83       	std	Y+5, r23	; 0x05
    21b0:	6c 83       	std	Y+4, r22	; 0x04
    21b2:	5f 83       	std	Y+7, r21	; 0x07
    21b4:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    21b6:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	9b 81       	ldd	r25, Y+3	; 0x03
    21bc:	fc 01       	movw	r30, r24
    21be:	80 81       	ld	r24, Z
    21c0:	83 30       	cpi	r24, 0x03	; 3
    21c2:	31 f0       	breq	.+12     	; 0x21d0 <OSSemSet+0x3a>
        *perr = OS_ERR_EVENT_TYPE;
    21c4:	8e 81       	ldd	r24, Y+6	; 0x06
    21c6:	9f 81       	ldd	r25, Y+7	; 0x07
    21c8:	21 e0       	ldi	r18, 0x01	; 1
    21ca:	fc 01       	movw	r30, r24
    21cc:	20 83       	st	Z, r18
        return;
    21ce:	2c c0       	rjmp	.+88     	; 0x2228 <__stack+0x29>
    }
    OS_ENTER_CRITICAL();
    21d0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    21d4:	89 83       	std	Y+1, r24	; 0x01
    *perr = OS_ERR_NONE;
    21d6:	8e 81       	ldd	r24, Y+6	; 0x06
    21d8:	9f 81       	ldd	r25, Y+7	; 0x07
    21da:	fc 01       	movw	r30, r24
    21dc:	10 82       	st	Z, r1
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	fc 01       	movw	r30, r24
    21e4:	83 81       	ldd	r24, Z+3	; 0x03
    21e6:	94 81       	ldd	r25, Z+4	; 0x04
    21e8:	00 97       	sbiw	r24, 0x00	; 0
    21ea:	41 f0       	breq	.+16     	; 0x21fc <OSSemSet+0x66>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    21ec:	8a 81       	ldd	r24, Y+2	; 0x02
    21ee:	9b 81       	ldd	r25, Y+3	; 0x03
    21f0:	2c 81       	ldd	r18, Y+4	; 0x04
    21f2:	3d 81       	ldd	r19, Y+5	; 0x05
    21f4:	fc 01       	movw	r30, r24
    21f6:	34 83       	std	Z+4, r19	; 0x04
    21f8:	23 83       	std	Z+3, r18	; 0x03
    21fa:	13 c0       	rjmp	.+38     	; 0x2222 <__stack+0x23>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    21fc:	8a 81       	ldd	r24, Y+2	; 0x02
    21fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2200:	fc 01       	movw	r30, r24
    2202:	85 81       	ldd	r24, Z+5	; 0x05
    2204:	88 23       	and	r24, r24
    2206:	41 f4       	brne	.+16     	; 0x2218 <__stack+0x19>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	9b 81       	ldd	r25, Y+3	; 0x03
    220c:	2c 81       	ldd	r18, Y+4	; 0x04
    220e:	3d 81       	ldd	r19, Y+5	; 0x05
    2210:	fc 01       	movw	r30, r24
    2212:	34 83       	std	Z+4, r19	; 0x04
    2214:	23 83       	std	Z+3, r18	; 0x03
    2216:	05 c0       	rjmp	.+10     	; 0x2222 <__stack+0x23>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    2218:	8e 81       	ldd	r24, Y+6	; 0x06
    221a:	9f 81       	ldd	r25, Y+7	; 0x07
    221c:	29 e4       	ldi	r18, 0x49	; 73
    221e:	fc 01       	movw	r30, r24
    2220:	20 83       	st	Z, r18
        }
    }
    OS_EXIT_CRITICAL();
    2222:	89 81       	ldd	r24, Y+1	; 0x01
    2224:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    2228:	27 96       	adiw	r28, 0x07	; 7
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	08 95       	ret

0000223a <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    223a:	af 92       	push	r10
    223c:	bf 92       	push	r11
    223e:	cf 92       	push	r12
    2240:	df 92       	push	r13
    2242:	ef 92       	push	r14
    2244:	ff 92       	push	r15
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	cd b7       	in	r28, 0x3d	; 61
    2250:	de b7       	in	r29, 0x3e	; 62
    2252:	2b 97       	sbiw	r28, 0x0b	; 11
    2254:	0f b6       	in	r0, 0x3f	; 63
    2256:	f8 94       	cli
    2258:	de bf       	out	0x3e, r29	; 62
    225a:	0f be       	out	0x3f, r0	; 63
    225c:	cd bf       	out	0x3d, r28	; 61
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
    2262:	78 87       	std	Y+8, r23	; 0x08
    2264:	6f 83       	std	Y+7, r22	; 0x07
    2266:	5a 87       	std	Y+10, r21	; 0x0a
    2268:	49 87       	std	Y+9, r20	; 0x09
    226a:	2b 87       	std	Y+11, r18	; 0x0b
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    226c:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    226e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2272:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    2274:	80 91 4c 08 	lds	r24, 0x084C
    2278:	88 23       	and	r24, r24
    227a:	29 f0       	breq	.+10     	; 0x2286 <OSTaskCreate+0x4c>
        OS_EXIT_CRITICAL();
    227c:	89 81       	ldd	r24, Y+1	; 0x01
    227e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    2282:	8c e3       	ldi	r24, 0x3C	; 60
    2284:	5e c0       	rjmp	.+188    	; 0x2342 <OSTaskCreate+0x108>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    2286:	8b 85       	ldd	r24, Y+11	; 0x0b
    2288:	88 2f       	mov	r24, r24
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	88 0f       	add	r24, r24
    228e:	99 1f       	adc	r25, r25
    2290:	80 51       	subi	r24, 0x10	; 16
    2292:	94 4f       	sbci	r25, 0xF4	; 244
    2294:	fc 01       	movw	r30, r24
    2296:	80 81       	ld	r24, Z
    2298:	91 81       	ldd	r25, Z+1	; 0x01
    229a:	00 97       	sbiw	r24, 0x00	; 0
    229c:	09 f0       	breq	.+2      	; 0x22a0 <OSTaskCreate+0x66>
    229e:	4d c0       	rjmp	.+154    	; 0x233a <OSTaskCreate+0x100>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    22a0:	8b 85       	ldd	r24, Y+11	; 0x0b
    22a2:	88 2f       	mov	r24, r24
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	88 0f       	add	r24, r24
    22a8:	99 1f       	adc	r25, r25
    22aa:	80 51       	subi	r24, 0x10	; 16
    22ac:	94 4f       	sbci	r25, 0xF4	; 244
    22ae:	21 e0       	ldi	r18, 0x01	; 1
    22b0:	30 e0       	ldi	r19, 0x00	; 0
    22b2:	fc 01       	movw	r30, r24
    22b4:	31 83       	std	Z+1, r19	; 0x01
    22b6:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    22b8:	89 81       	ldd	r24, Y+1	; 0x01
    22ba:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    22be:	8d 81       	ldd	r24, Y+5	; 0x05
    22c0:	9e 81       	ldd	r25, Y+6	; 0x06
    22c2:	4f 81       	ldd	r20, Y+7	; 0x07
    22c4:	58 85       	ldd	r21, Y+8	; 0x08
    22c6:	29 85       	ldd	r18, Y+9	; 0x09
    22c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    22ca:	ba 01       	movw	r22, r20
    22cc:	a9 01       	movw	r20, r18
    22ce:	20 e0       	ldi	r18, 0x00	; 0
    22d0:	30 e0       	ldi	r19, 0x00	; 0
    22d2:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    22d6:	9c 83       	std	Y+4, r25	; 0x04
    22d8:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    22da:	2b 81       	ldd	r18, Y+3	; 0x03
    22dc:	3c 81       	ldd	r19, Y+4	; 0x04
    22de:	8b 85       	ldd	r24, Y+11	; 0x0b
    22e0:	b9 01       	movw	r22, r18
    22e2:	40 e0       	ldi	r20, 0x00	; 0
    22e4:	50 e0       	ldi	r21, 0x00	; 0
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	ee 24       	eor	r14, r14
    22ec:	ff 24       	eor	r15, r15
    22ee:	87 01       	movw	r16, r14
    22f0:	cc 24       	eor	r12, r12
    22f2:	dd 24       	eor	r13, r13
    22f4:	aa 24       	eor	r10, r10
    22f6:	bb 24       	eor	r11, r11
    22f8:	0e 94 48 0b 	call	0x1690	; 0x1690 <OS_TCBInit>
    22fc:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    22fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2300:	88 23       	and	r24, r24
    2302:	39 f4       	brne	.+14     	; 0x2312 <OSTaskCreate+0xd8>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    2304:	80 91 12 05 	lds	r24, 0x0512
    2308:	81 30       	cpi	r24, 0x01	; 1
    230a:	a1 f4       	brne	.+40     	; 0x2334 <OSTaskCreate+0xfa>
                OS_Sched();
    230c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
    2310:	12 c0       	rjmp	.+36     	; 0x2336 <OSTaskCreate+0xfc>
            }
        } else {
            OS_ENTER_CRITICAL();
    2312:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2316:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    2318:	8b 85       	ldd	r24, Y+11	; 0x0b
    231a:	88 2f       	mov	r24, r24
    231c:	90 e0       	ldi	r25, 0x00	; 0
    231e:	88 0f       	add	r24, r24
    2320:	99 1f       	adc	r25, r25
    2322:	80 51       	subi	r24, 0x10	; 16
    2324:	94 4f       	sbci	r25, 0xF4	; 244
    2326:	fc 01       	movw	r30, r24
    2328:	11 82       	std	Z+1, r1	; 0x01
    232a:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    2332:	01 c0       	rjmp	.+2      	; 0x2336 <OSTaskCreate+0xfc>
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
        if (err == OS_ERR_NONE) {
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
                OS_Sched();
    2334:	00 00       	nop
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
            OS_EXIT_CRITICAL();
        }
        return (err);
    2336:	8a 81       	ldd	r24, Y+2	; 0x02
    2338:	04 c0       	rjmp	.+8      	; 0x2342 <OSTaskCreate+0x108>
    }
    OS_EXIT_CRITICAL();
    233a:	89 81       	ldd	r24, Y+1	; 0x01
    233c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    2340:	88 e2       	ldi	r24, 0x28	; 40
}
    2342:	2b 96       	adiw	r28, 0x0b	; 11
    2344:	0f b6       	in	r0, 0x3f	; 63
    2346:	f8 94       	cli
    2348:	de bf       	out	0x3e, r29	; 62
    234a:	0f be       	out	0x3f, r0	; 63
    234c:	cd bf       	out	0x3d, r28	; 61
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	cf 90       	pop	r12
    235e:	bf 90       	pop	r11
    2360:	af 90       	pop	r10
    2362:	08 95       	ret

00002364 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    2364:	8f 92       	push	r8
    2366:	9f 92       	push	r9
    2368:	af 92       	push	r10
    236a:	bf 92       	push	r11
    236c:	cf 92       	push	r12
    236e:	df 92       	push	r13
    2370:	ef 92       	push	r14
    2372:	ff 92       	push	r15
    2374:	0f 93       	push	r16
    2376:	1f 93       	push	r17
    2378:	df 93       	push	r29
    237a:	cf 93       	push	r28
    237c:	cd b7       	in	r28, 0x3d	; 61
    237e:	de b7       	in	r29, 0x3e	; 62
    2380:	65 97       	sbiw	r28, 0x15	; 21
    2382:	0f b6       	in	r0, 0x3f	; 63
    2384:	f8 94       	cli
    2386:	de bf       	out	0x3e, r29	; 62
    2388:	0f be       	out	0x3f, r0	; 63
    238a:	cd bf       	out	0x3d, r28	; 61
    238c:	9e 83       	std	Y+6, r25	; 0x06
    238e:	8d 83       	std	Y+5, r24	; 0x05
    2390:	78 87       	std	Y+8, r23	; 0x08
    2392:	6f 83       	std	Y+7, r22	; 0x07
    2394:	5a 87       	std	Y+10, r21	; 0x0a
    2396:	49 87       	std	Y+9, r20	; 0x09
    2398:	2b 87       	std	Y+11, r18	; 0x0b
    239a:	1d 87       	std	Y+13, r17	; 0x0d
    239c:	0c 87       	std	Y+12, r16	; 0x0c
    239e:	ff 86       	std	Y+15, r15	; 0x0f
    23a0:	ee 86       	std	Y+14, r14	; 0x0e
    23a2:	a8 8a       	std	Y+16, r10	; 0x10
    23a4:	b9 8a       	std	Y+17, r11	; 0x11
    23a6:	ca 8a       	std	Y+18, r12	; 0x12
    23a8:	db 8a       	std	Y+19, r13	; 0x13
    23aa:	9d 8a       	std	Y+21, r9	; 0x15
    23ac:	8c 8a       	std	Y+20, r8	; 0x14
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    23ae:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    23b0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    23b4:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    23b6:	80 91 4c 08 	lds	r24, 0x084C
    23ba:	88 23       	and	r24, r24
    23bc:	29 f0       	breq	.+10     	; 0x23c8 <OSTaskCreateExt+0x64>
        OS_EXIT_CRITICAL();
    23be:	89 81       	ldd	r24, Y+1	; 0x01
    23c0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    23c4:	8c e3       	ldi	r24, 0x3C	; 60
    23c6:	5e c0       	rjmp	.+188    	; 0x2484 <OSTaskCreateExt+0x120>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    23c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    23ca:	88 2f       	mov	r24, r24
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	80 51       	subi	r24, 0x10	; 16
    23d4:	94 4f       	sbci	r25, 0xF4	; 244
    23d6:	fc 01       	movw	r30, r24
    23d8:	80 81       	ld	r24, Z
    23da:	91 81       	ldd	r25, Z+1	; 0x01
    23dc:	00 97       	sbiw	r24, 0x00	; 0
    23de:	09 f0       	breq	.+2      	; 0x23e2 <OSTaskCreateExt+0x7e>
    23e0:	4d c0       	rjmp	.+154    	; 0x247c <OSTaskCreateExt+0x118>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    23e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    23e4:	88 2f       	mov	r24, r24
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	88 0f       	add	r24, r24
    23ea:	99 1f       	adc	r25, r25
    23ec:	80 51       	subi	r24, 0x10	; 16
    23ee:	94 4f       	sbci	r25, 0xF4	; 244
    23f0:	21 e0       	ldi	r18, 0x01	; 1
    23f2:	30 e0       	ldi	r19, 0x00	; 0
    23f4:	fc 01       	movw	r30, r24
    23f6:	31 83       	std	Z+1, r19	; 0x01
    23f8:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    2400:	8d 81       	ldd	r24, Y+5	; 0x05
    2402:	9e 81       	ldd	r25, Y+6	; 0x06
    2404:	6f 81       	ldd	r22, Y+7	; 0x07
    2406:	78 85       	ldd	r23, Y+8	; 0x08
    2408:	49 85       	ldd	r20, Y+9	; 0x09
    240a:	5a 85       	ldd	r21, Y+10	; 0x0a
    240c:	2d a1       	ldd	r18, Y+37	; 0x25
    240e:	3e a1       	ldd	r19, Y+38	; 0x26
    2410:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    2414:	9c 83       	std	Y+4, r25	; 0x04
    2416:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    2418:	6b 81       	ldd	r22, Y+3	; 0x03
    241a:	7c 81       	ldd	r23, Y+4	; 0x04
    241c:	4e 85       	ldd	r20, Y+14	; 0x0e
    241e:	5f 85       	ldd	r21, Y+15	; 0x0f
    2420:	2c 85       	ldd	r18, Y+12	; 0x0c
    2422:	3d 85       	ldd	r19, Y+13	; 0x0d
    2424:	e8 88       	ldd	r14, Y+16	; 0x10
    2426:	f9 88       	ldd	r15, Y+17	; 0x11
    2428:	0a 89       	ldd	r16, Y+18	; 0x12
    242a:	1b 89       	ldd	r17, Y+19	; 0x13
    242c:	ac 89       	ldd	r26, Y+20	; 0x14
    242e:	bd 89       	ldd	r27, Y+21	; 0x15
    2430:	ed a1       	ldd	r30, Y+37	; 0x25
    2432:	fe a1       	ldd	r31, Y+38	; 0x26
    2434:	8b 85       	ldd	r24, Y+11	; 0x0b
    2436:	6d 01       	movw	r12, r26
    2438:	5f 01       	movw	r10, r30
    243a:	0e 94 48 0b 	call	0x1690	; 0x1690 <OS_TCBInit>
    243e:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	88 23       	and	r24, r24
    2444:	39 f4       	brne	.+14     	; 0x2454 <OSTaskCreateExt+0xf0>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    2446:	80 91 12 05 	lds	r24, 0x0512
    244a:	81 30       	cpi	r24, 0x01	; 1
    244c:	a1 f4       	brne	.+40     	; 0x2476 <OSTaskCreateExt+0x112>
                OS_Sched();
    244e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
    2452:	12 c0       	rjmp	.+36     	; 0x2478 <OSTaskCreateExt+0x114>
            }
        } else {
            OS_ENTER_CRITICAL();
    2454:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2458:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    245a:	8b 85       	ldd	r24, Y+11	; 0x0b
    245c:	88 2f       	mov	r24, r24
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	88 0f       	add	r24, r24
    2462:	99 1f       	adc	r25, r25
    2464:	80 51       	subi	r24, 0x10	; 16
    2466:	94 4f       	sbci	r25, 0xF4	; 244
    2468:	fc 01       	movw	r30, r24
    246a:	11 82       	std	Z+1, r1	; 0x01
    246c:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    246e:	89 81       	ldd	r24, Y+1	; 0x01
    2470:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    2474:	01 c0       	rjmp	.+2      	; 0x2478 <OSTaskCreateExt+0x114>

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
        if (err == OS_ERR_NONE) {
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
                OS_Sched();
    2476:	00 00       	nop
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
            OS_EXIT_CRITICAL();
        }
        return (err);
    2478:	8a 81       	ldd	r24, Y+2	; 0x02
    247a:	04 c0       	rjmp	.+8      	; 0x2484 <OSTaskCreateExt+0x120>
    }
    OS_EXIT_CRITICAL();
    247c:	89 81       	ldd	r24, Y+1	; 0x01
    247e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    2482:	88 e2       	ldi	r24, 0x28	; 40
}
    2484:	65 96       	adiw	r28, 0x15	; 21
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	de bf       	out	0x3e, r29	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	cd bf       	out	0x3d, r28	; 61
    2490:	cf 91       	pop	r28
    2492:	df 91       	pop	r29
    2494:	1f 91       	pop	r17
    2496:	0f 91       	pop	r16
    2498:	ff 90       	pop	r15
    249a:	ef 90       	pop	r14
    249c:	df 90       	pop	r13
    249e:	cf 90       	pop	r12
    24a0:	bf 90       	pop	r11
    24a2:	af 90       	pop	r10
    24a4:	9f 90       	pop	r9
    24a6:	8f 90       	pop	r8
    24a8:	08 95       	ret

000024aa <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    24aa:	df 93       	push	r29
    24ac:	cf 93       	push	r28
    24ae:	cd b7       	in	r28, 0x3d	; 61
    24b0:	de b7       	in	r29, 0x3e	; 62
    24b2:	29 97       	sbiw	r28, 0x09	; 9
    24b4:	0f b6       	in	r0, 0x3f	; 63
    24b6:	f8 94       	cli
    24b8:	de bf       	out	0x3e, r29	; 62
    24ba:	0f be       	out	0x3f, r0	; 63
    24bc:	cd bf       	out	0x3d, r28	; 61
    24be:	8d 83       	std	Y+5, r24	; 0x05
    24c0:	7f 83       	std	Y+7, r23	; 0x07
    24c2:	6e 83       	std	Y+6, r22	; 0x06
    24c4:	59 87       	std	Y+9, r21	; 0x09
    24c6:	48 87       	std	Y+8, r20	; 0x08
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    24c8:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    24ca:	80 91 4c 08 	lds	r24, 0x084C
    24ce:	88 23       	and	r24, r24
    24d0:	39 f0       	breq	.+14     	; 0x24e0 <OSTaskNameGet+0x36>
        *perr = OS_ERR_NAME_GET_ISR;
    24d2:	88 85       	ldd	r24, Y+8	; 0x08
    24d4:	99 85       	ldd	r25, Y+9	; 0x09
    24d6:	21 e1       	ldi	r18, 0x11	; 17
    24d8:	fc 01       	movw	r30, r24
    24da:	20 83       	st	Z, r18
        return (0);
    24dc:	80 e0       	ldi	r24, 0x00	; 0
    24de:	49 c0       	rjmp	.+146    	; 0x2572 <OSTaskNameGet+0xc8>
    }
    OS_ENTER_CRITICAL();
    24e0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    24e4:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    24e6:	8d 81       	ldd	r24, Y+5	; 0x05
    24e8:	8f 3f       	cpi	r24, 0xFF	; 255
    24ea:	39 f4       	brne	.+14     	; 0x24fa <OSTaskNameGet+0x50>
        prio = OSTCBCur->OSTCBPrio;
    24ec:	80 91 4d 08 	lds	r24, 0x084D
    24f0:	90 91 4e 08 	lds	r25, 0x084E
    24f4:	fc 01       	movw	r30, r24
    24f6:	80 8d       	ldd	r24, Z+24	; 0x18
    24f8:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    24fa:	8d 81       	ldd	r24, Y+5	; 0x05
    24fc:	88 2f       	mov	r24, r24
    24fe:	90 e0       	ldi	r25, 0x00	; 0
    2500:	88 0f       	add	r24, r24
    2502:	99 1f       	adc	r25, r25
    2504:	80 51       	subi	r24, 0x10	; 16
    2506:	94 4f       	sbci	r25, 0xF4	; 244
    2508:	fc 01       	movw	r30, r24
    250a:	80 81       	ld	r24, Z
    250c:	91 81       	ldd	r25, Z+1	; 0x01
    250e:	9c 83       	std	Y+4, r25	; 0x04
    2510:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	51 f4       	brne	.+20     	; 0x252e <OSTaskNameGet+0x84>
        OS_EXIT_CRITICAL();                              /* No                                         */
    251a:	89 81       	ldd	r24, Y+1	; 0x01
    251c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    2520:	88 85       	ldd	r24, Y+8	; 0x08
    2522:	99 85       	ldd	r25, Y+9	; 0x09
    2524:	23 e4       	ldi	r18, 0x43	; 67
    2526:	fc 01       	movw	r30, r24
    2528:	20 83       	st	Z, r18
        return (0);
    252a:	80 e0       	ldi	r24, 0x00	; 0
    252c:	22 c0       	rjmp	.+68     	; 0x2572 <OSTaskNameGet+0xc8>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    252e:	8b 81       	ldd	r24, Y+3	; 0x03
    2530:	9c 81       	ldd	r25, Y+4	; 0x04
    2532:	81 30       	cpi	r24, 0x01	; 1
    2534:	91 05       	cpc	r25, r1
    2536:	51 f4       	brne	.+20     	; 0x254c <OSTaskNameGet+0xa2>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
    2538:	89 81       	ldd	r24, Y+1	; 0x01
    253a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    253e:	88 85       	ldd	r24, Y+8	; 0x08
    2540:	99 85       	ldd	r25, Y+9	; 0x09
    2542:	23 e4       	ldi	r18, 0x43	; 67
    2544:	fc 01       	movw	r30, r24
    2546:	20 83       	st	Z, r18
        return (0);
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	13 c0       	rjmp	.+38     	; 0x2572 <OSTaskNameGet+0xc8>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    254c:	8b 81       	ldd	r24, Y+3	; 0x03
    254e:	9c 81       	ldd	r25, Y+4	; 0x04
    2550:	9c 01       	movw	r18, r24
    2552:	21 5d       	subi	r18, 0xD1	; 209
    2554:	3f 4f       	sbci	r19, 0xFF	; 255
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	9f 81       	ldd	r25, Y+7	; 0x07
    255a:	b9 01       	movw	r22, r18
    255c:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OS_StrCopy>
    2560:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    2562:	89 81       	ldd	r24, Y+1	; 0x01
    2564:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    2568:	88 85       	ldd	r24, Y+8	; 0x08
    256a:	99 85       	ldd	r25, Y+9	; 0x09
    256c:	fc 01       	movw	r30, r24
    256e:	10 82       	st	Z, r1
    return (len);
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2572:	29 96       	adiw	r28, 0x09	; 9
    2574:	0f b6       	in	r0, 0x3f	; 63
    2576:	f8 94       	cli
    2578:	de bf       	out	0x3e, r29	; 62
    257a:	0f be       	out	0x3f, r0	; 63
    257c:	cd bf       	out	0x3d, r28	; 61
    257e:	cf 91       	pop	r28
    2580:	df 91       	pop	r29
    2582:	08 95       	ret

00002584 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	cd b7       	in	r28, 0x3d	; 61
    258a:	de b7       	in	r29, 0x3e	; 62
    258c:	29 97       	sbiw	r28, 0x09	; 9
    258e:	0f b6       	in	r0, 0x3f	; 63
    2590:	f8 94       	cli
    2592:	de bf       	out	0x3e, r29	; 62
    2594:	0f be       	out	0x3f, r0	; 63
    2596:	cd bf       	out	0x3d, r28	; 61
    2598:	8d 83       	std	Y+5, r24	; 0x05
    259a:	7f 83       	std	Y+7, r23	; 0x07
    259c:	6e 83       	std	Y+6, r22	; 0x06
    259e:	59 87       	std	Y+9, r21	; 0x09
    25a0:	48 87       	std	Y+8, r20	; 0x08
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    25a2:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    25a4:	80 91 4c 08 	lds	r24, 0x084C
    25a8:	88 23       	and	r24, r24
    25aa:	31 f0       	breq	.+12     	; 0x25b8 <OSTaskNameSet+0x34>
        *perr = OS_ERR_NAME_SET_ISR;
    25ac:	88 85       	ldd	r24, Y+8	; 0x08
    25ae:	99 85       	ldd	r25, Y+9	; 0x09
    25b0:	22 e1       	ldi	r18, 0x12	; 18
    25b2:	fc 01       	movw	r30, r24
    25b4:	20 83       	st	Z, r18
        return;
    25b6:	54 c0       	rjmp	.+168    	; 0x2660 <OSTaskNameSet+0xdc>
    }
    OS_ENTER_CRITICAL();
    25b8:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    25bc:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    25be:	8d 81       	ldd	r24, Y+5	; 0x05
    25c0:	8f 3f       	cpi	r24, 0xFF	; 255
    25c2:	39 f4       	brne	.+14     	; 0x25d2 <OSTaskNameSet+0x4e>
        prio = OSTCBCur->OSTCBPrio;
    25c4:	80 91 4d 08 	lds	r24, 0x084D
    25c8:	90 91 4e 08 	lds	r25, 0x084E
    25cc:	fc 01       	movw	r30, r24
    25ce:	80 8d       	ldd	r24, Z+24	; 0x18
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    25d2:	8d 81       	ldd	r24, Y+5	; 0x05
    25d4:	88 2f       	mov	r24, r24
    25d6:	90 e0       	ldi	r25, 0x00	; 0
    25d8:	88 0f       	add	r24, r24
    25da:	99 1f       	adc	r25, r25
    25dc:	80 51       	subi	r24, 0x10	; 16
    25de:	94 4f       	sbci	r25, 0xF4	; 244
    25e0:	fc 01       	movw	r30, r24
    25e2:	80 81       	ld	r24, Z
    25e4:	91 81       	ldd	r25, Z+1	; 0x01
    25e6:	9b 83       	std	Y+3, r25	; 0x03
    25e8:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	00 97       	sbiw	r24, 0x00	; 0
    25f0:	49 f4       	brne	.+18     	; 0x2604 <OSTaskNameSet+0x80>
        OS_EXIT_CRITICAL();                          /* No                                             */
    25f2:	89 81       	ldd	r24, Y+1	; 0x01
    25f4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    25f8:	88 85       	ldd	r24, Y+8	; 0x08
    25fa:	99 85       	ldd	r25, Y+9	; 0x09
    25fc:	23 e4       	ldi	r18, 0x43	; 67
    25fe:	fc 01       	movw	r30, r24
    2600:	20 83       	st	Z, r18
        return;
    2602:	2e c0       	rjmp	.+92     	; 0x2660 <OSTaskNameSet+0xdc>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    2604:	8a 81       	ldd	r24, Y+2	; 0x02
    2606:	9b 81       	ldd	r25, Y+3	; 0x03
    2608:	81 30       	cpi	r24, 0x01	; 1
    260a:	91 05       	cpc	r25, r1
    260c:	49 f4       	brne	.+18     	; 0x2620 <OSTaskNameSet+0x9c>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    2614:	88 85       	ldd	r24, Y+8	; 0x08
    2616:	99 85       	ldd	r25, Y+9	; 0x09
    2618:	23 e4       	ldi	r18, 0x43	; 67
    261a:	fc 01       	movw	r30, r24
    261c:	20 83       	st	Z, r18
        return;
    261e:	20 c0       	rjmp	.+64     	; 0x2660 <OSTaskNameSet+0xdc>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    2620:	8e 81       	ldd	r24, Y+6	; 0x06
    2622:	9f 81       	ldd	r25, Y+7	; 0x07
    2624:	0e 94 06 0b 	call	0x160c	; 0x160c <OS_StrLen>
    2628:	8c 83       	std	Y+4, r24	; 0x04
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    262a:	8c 81       	ldd	r24, Y+4	; 0x04
    262c:	80 31       	cpi	r24, 0x10	; 16
    262e:	48 f0       	brcs	.+18     	; 0x2642 <OSTaskNameSet+0xbe>
        OS_EXIT_CRITICAL();
    2630:	89 81       	ldd	r24, Y+1	; 0x01
    2632:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    2636:	88 85       	ldd	r24, Y+8	; 0x08
    2638:	99 85       	ldd	r25, Y+9	; 0x09
    263a:	21 e4       	ldi	r18, 0x41	; 65
    263c:	fc 01       	movw	r30, r24
    263e:	20 83       	st	Z, r18
        return;
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <OSTaskNameSet+0xdc>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    2642:	8a 81       	ldd	r24, Y+2	; 0x02
    2644:	9b 81       	ldd	r25, Y+3	; 0x03
    2646:	8f 96       	adiw	r24, 0x2f	; 47
    2648:	2e 81       	ldd	r18, Y+6	; 0x06
    264a:	3f 81       	ldd	r19, Y+7	; 0x07
    264c:	b9 01       	movw	r22, r18
    264e:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OS_StrCopy>
    OS_EXIT_CRITICAL();
    2652:	89 81       	ldd	r24, Y+1	; 0x01
    2654:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    2658:	88 85       	ldd	r24, Y+8	; 0x08
    265a:	99 85       	ldd	r25, Y+9	; 0x09
    265c:	fc 01       	movw	r30, r24
    265e:	10 82       	st	Z, r1
}
    2660:	29 96       	adiw	r28, 0x09	; 9
    2662:	0f b6       	in	r0, 0x3f	; 63
    2664:	f8 94       	cli
    2666:	de bf       	out	0x3e, r29	; 62
    2668:	0f be       	out	0x3f, r0	; 63
    266a:	cd bf       	out	0x3d, r28	; 61
    266c:	cf 91       	pop	r28
    266e:	df 91       	pop	r29
    2670:	08 95       	ret

00002672 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    2672:	df 93       	push	r29
    2674:	cf 93       	push	r28
    2676:	00 d0       	rcall	.+0      	; 0x2678 <OSTaskResume+0x6>
    2678:	0f 92       	push	r0
    267a:	cd b7       	in	r28, 0x3d	; 61
    267c:	de b7       	in	r29, 0x3e	; 62
    267e:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    2680:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    2682:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2686:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];
    2688:	8c 81       	ldd	r24, Y+4	; 0x04
    268a:	88 2f       	mov	r24, r24
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	88 0f       	add	r24, r24
    2690:	99 1f       	adc	r25, r25
    2692:	80 51       	subi	r24, 0x10	; 16
    2694:	94 4f       	sbci	r25, 0xF4	; 244
    2696:	fc 01       	movw	r30, r24
    2698:	80 81       	ld	r24, Z
    269a:	91 81       	ldd	r25, Z+1	; 0x01
    269c:	9b 83       	std	Y+3, r25	; 0x03
    269e:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    26a0:	8a 81       	ldd	r24, Y+2	; 0x02
    26a2:	9b 81       	ldd	r25, Y+3	; 0x03
    26a4:	00 97       	sbiw	r24, 0x00	; 0
    26a6:	29 f4       	brne	.+10     	; 0x26b2 <OSTaskResume+0x40>
        OS_EXIT_CRITICAL();
    26a8:	89 81       	ldd	r24, Y+1	; 0x01
    26aa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
    26ae:	86 e4       	ldi	r24, 0x46	; 70
    26b0:	67 c0       	rjmp	.+206    	; 0x2780 <OSTaskResume+0x10e>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    26b2:	8a 81       	ldd	r24, Y+2	; 0x02
    26b4:	9b 81       	ldd	r25, Y+3	; 0x03
    26b6:	81 30       	cpi	r24, 0x01	; 1
    26b8:	91 05       	cpc	r25, r1
    26ba:	29 f4       	brne	.+10     	; 0x26c6 <OSTaskResume+0x54>
        OS_EXIT_CRITICAL();
    26bc:	89 81       	ldd	r24, Y+1	; 0x01
    26be:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    26c2:	83 e4       	ldi	r24, 0x43	; 67
    26c4:	5d c0       	rjmp	.+186    	; 0x2780 <OSTaskResume+0x10e>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    26c6:	8a 81       	ldd	r24, Y+2	; 0x02
    26c8:	9b 81       	ldd	r25, Y+3	; 0x03
    26ca:	fc 01       	movw	r30, r24
    26cc:	86 89       	ldd	r24, Z+22	; 0x16
    26ce:	88 2f       	mov	r24, r24
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	88 70       	andi	r24, 0x08	; 8
    26d4:	90 70       	andi	r25, 0x00	; 0
    26d6:	00 97       	sbiw	r24, 0x00	; 0
    26d8:	09 f4       	brne	.+2      	; 0x26dc <OSTaskResume+0x6a>
    26da:	4e c0       	rjmp	.+156    	; 0x2778 <OSTaskResume+0x106>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    26dc:	8a 81       	ldd	r24, Y+2	; 0x02
    26de:	9b 81       	ldd	r25, Y+3	; 0x03
    26e0:	fc 01       	movw	r30, r24
    26e2:	86 89       	ldd	r24, Z+22	; 0x16
    26e4:	28 2f       	mov	r18, r24
    26e6:	27 7f       	andi	r18, 0xF7	; 247
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	9b 81       	ldd	r25, Y+3	; 0x03
    26ec:	fc 01       	movw	r30, r24
    26ee:	26 8b       	std	Z+22, r18	; 0x16
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    26f0:	8a 81       	ldd	r24, Y+2	; 0x02
    26f2:	9b 81       	ldd	r25, Y+3	; 0x03
    26f4:	fc 01       	movw	r30, r24
    26f6:	86 89       	ldd	r24, Z+22	; 0x16
    26f8:	88 23       	and	r24, r24
    26fa:	b9 f5       	brne	.+110    	; 0x276a <OSTaskResume+0xf8>
            if (ptcb->OSTCBDly == 0) {
    26fc:	8a 81       	ldd	r24, Y+2	; 0x02
    26fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2700:	fc 01       	movw	r30, r24
    2702:	84 89       	ldd	r24, Z+20	; 0x14
    2704:	95 89       	ldd	r25, Z+21	; 0x15
    2706:	00 97       	sbiw	r24, 0x00	; 0
    2708:	61 f5       	brne	.+88     	; 0x2762 <OSTaskResume+0xf0>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    270a:	8a 81       	ldd	r24, Y+2	; 0x02
    270c:	9b 81       	ldd	r25, Y+3	; 0x03
    270e:	fc 01       	movw	r30, r24
    2710:	94 8d       	ldd	r25, Z+28	; 0x1c
    2712:	80 91 98 07 	lds	r24, 0x0798
    2716:	89 2b       	or	r24, r25
    2718:	80 93 98 07 	sts	0x0798, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    271c:	8a 81       	ldd	r24, Y+2	; 0x02
    271e:	9b 81       	ldd	r25, Y+3	; 0x03
    2720:	fc 01       	movw	r30, r24
    2722:	82 8d       	ldd	r24, Z+26	; 0x1a
    2724:	88 2f       	mov	r24, r24
    2726:	90 e0       	ldi	r25, 0x00	; 0
    2728:	2a 81       	ldd	r18, Y+2	; 0x02
    272a:	3b 81       	ldd	r19, Y+3	; 0x03
    272c:	f9 01       	movw	r30, r18
    272e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2730:	22 2f       	mov	r18, r18
    2732:	30 e0       	ldi	r19, 0x00	; 0
    2734:	27 56       	subi	r18, 0x67	; 103
    2736:	38 4f       	sbci	r19, 0xF8	; 248
    2738:	f9 01       	movw	r30, r18
    273a:	40 81       	ld	r20, Z
    273c:	2a 81       	ldd	r18, Y+2	; 0x02
    273e:	3b 81       	ldd	r19, Y+3	; 0x03
    2740:	f9 01       	movw	r30, r18
    2742:	23 8d       	ldd	r18, Z+27	; 0x1b
    2744:	24 2b       	or	r18, r20
    2746:	87 56       	subi	r24, 0x67	; 103
    2748:	98 4f       	sbci	r25, 0xF8	; 248
    274a:	fc 01       	movw	r30, r24
    274c:	20 83       	st	Z, r18
                OS_EXIT_CRITICAL();
    274e:	89 81       	ldd	r24, Y+1	; 0x01
    2750:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
    2754:	80 91 12 05 	lds	r24, 0x0512
    2758:	81 30       	cpi	r24, 0x01	; 1
    275a:	59 f4       	brne	.+22     	; 0x2772 <OSTaskResume+0x100>
                    OS_Sched();                               /* Find new highest priority task        */
    275c:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
                }
            } else {
                OS_EXIT_CRITICAL();
    2760:	09 c0       	rjmp	.+18     	; 0x2774 <OSTaskResume+0x102>
    2762:	89 81       	ldd	r24, Y+1	; 0x01
    2764:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    2768:	05 c0       	rjmp	.+10     	; 0x2774 <OSTaskResume+0x102>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
    276a:	89 81       	ldd	r24, Y+1	; 0x01
    276c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    2770:	01 c0       	rjmp	.+2      	; 0x2774 <OSTaskResume+0x102>
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
                    OS_Sched();                               /* Find new highest priority task        */
                }
            } else {
                OS_EXIT_CRITICAL();
    2772:	00 00       	nop
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	04 c0       	rjmp	.+8      	; 0x2780 <OSTaskResume+0x10e>
    }
    OS_EXIT_CRITICAL();
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
    277e:	84 e4       	ldi	r24, 0x44	; 68
}
    2780:	0f 90       	pop	r0
    2782:	0f 90       	pop	r0
    2784:	0f 90       	pop	r0
    2786:	0f 90       	pop	r0
    2788:	cf 91       	pop	r28
    278a:	df 91       	pop	r29
    278c:	08 95       	ret

0000278e <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    278e:	df 93       	push	r29
    2790:	cf 93       	push	r28
    2792:	00 d0       	rcall	.+0      	; 0x2794 <OSTaskSuspend+0x6>
    2794:	00 d0       	rcall	.+0      	; 0x2796 <OSTaskSuspend+0x8>
    2796:	cd b7       	in	r28, 0x3d	; 61
    2798:	de b7       	in	r29, 0x3e	; 62
    279a:	8e 83       	std	Y+6, r24	; 0x06
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    279c:	19 82       	std	Y+1, r1	; 0x01
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    279e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    27a2:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    27a4:	8e 81       	ldd	r24, Y+6	; 0x06
    27a6:	8f 3f       	cpi	r24, 0xFF	; 255
    27a8:	51 f4       	brne	.+20     	; 0x27be <OSTaskSuspend+0x30>
        prio = OSTCBCur->OSTCBPrio;
    27aa:	80 91 4d 08 	lds	r24, 0x084D
    27ae:	90 91 4e 08 	lds	r25, 0x084E
    27b2:	fc 01       	movw	r30, r24
    27b4:	80 8d       	ldd	r24, Z+24	; 0x18
    27b6:	8e 83       	std	Y+6, r24	; 0x06
        self = OS_TRUE;
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	8d 83       	std	Y+5, r24	; 0x05
    27bc:	0d c0       	rjmp	.+26     	; 0x27d8 <OSTaskSuspend+0x4a>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    27be:	80 91 4d 08 	lds	r24, 0x084D
    27c2:	90 91 4e 08 	lds	r25, 0x084E
    27c6:	fc 01       	movw	r30, r24
    27c8:	90 8d       	ldd	r25, Z+24	; 0x18
    27ca:	8e 81       	ldd	r24, Y+6	; 0x06
    27cc:	98 17       	cp	r25, r24
    27ce:	19 f4       	brne	.+6      	; 0x27d6 <OSTaskSuspend+0x48>
        self = OS_TRUE;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	01 c0       	rjmp	.+2      	; 0x27d8 <OSTaskSuspend+0x4a>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    27d6:	1d 82       	std	Y+5, r1	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    27d8:	8e 81       	ldd	r24, Y+6	; 0x06
    27da:	88 2f       	mov	r24, r24
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	88 0f       	add	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	80 51       	subi	r24, 0x10	; 16
    27e4:	94 4f       	sbci	r25, 0xF4	; 244
    27e6:	fc 01       	movw	r30, r24
    27e8:	80 81       	ld	r24, Z
    27ea:	91 81       	ldd	r25, Z+1	; 0x01
    27ec:	9c 83       	std	Y+4, r25	; 0x04
    27ee:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	00 97       	sbiw	r24, 0x00	; 0
    27f6:	29 f4       	brne	.+10     	; 0x2802 <OSTaskSuspend+0x74>
        OS_EXIT_CRITICAL();
    27f8:	89 81       	ldd	r24, Y+1	; 0x01
    27fa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
    27fe:	88 e4       	ldi	r24, 0x48	; 72
    2800:	4b c0       	rjmp	.+150    	; 0x2898 <OSTaskSuspend+0x10a>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    2802:	8b 81       	ldd	r24, Y+3	; 0x03
    2804:	9c 81       	ldd	r25, Y+4	; 0x04
    2806:	81 30       	cpi	r24, 0x01	; 1
    2808:	91 05       	cpc	r25, r1
    280a:	29 f4       	brne	.+10     	; 0x2816 <OSTaskSuspend+0x88>
        OS_EXIT_CRITICAL();
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    2812:	83 e4       	ldi	r24, 0x43	; 67
    2814:	41 c0       	rjmp	.+130    	; 0x2898 <OSTaskSuspend+0x10a>
    }
    y            = ptcb->OSTCBY;
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	9c 81       	ldd	r25, Y+4	; 0x04
    281a:	fc 01       	movw	r30, r24
    281c:	82 8d       	ldd	r24, Z+26	; 0x1a
    281e:	8a 83       	std	Y+2, r24	; 0x02
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    2820:	8a 81       	ldd	r24, Y+2	; 0x02
    2822:	88 2f       	mov	r24, r24
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	2a 81       	ldd	r18, Y+2	; 0x02
    2828:	22 2f       	mov	r18, r18
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	27 56       	subi	r18, 0x67	; 103
    282e:	38 4f       	sbci	r19, 0xF8	; 248
    2830:	f9 01       	movw	r30, r18
    2832:	20 81       	ld	r18, Z
    2834:	42 2f       	mov	r20, r18
    2836:	2b 81       	ldd	r18, Y+3	; 0x03
    2838:	3c 81       	ldd	r19, Y+4	; 0x04
    283a:	f9 01       	movw	r30, r18
    283c:	23 8d       	ldd	r18, Z+27	; 0x1b
    283e:	20 95       	com	r18
    2840:	24 23       	and	r18, r20
    2842:	87 56       	subi	r24, 0x67	; 103
    2844:	98 4f       	sbci	r25, 0xF8	; 248
    2846:	fc 01       	movw	r30, r24
    2848:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    284a:	8a 81       	ldd	r24, Y+2	; 0x02
    284c:	88 2f       	mov	r24, r24
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	87 56       	subi	r24, 0x67	; 103
    2852:	98 4f       	sbci	r25, 0xF8	; 248
    2854:	fc 01       	movw	r30, r24
    2856:	80 81       	ld	r24, Z
    2858:	88 23       	and	r24, r24
    285a:	59 f4       	brne	.+22     	; 0x2872 <OSTaskSuspend+0xe4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    285c:	8b 81       	ldd	r24, Y+3	; 0x03
    285e:	9c 81       	ldd	r25, Y+4	; 0x04
    2860:	fc 01       	movw	r30, r24
    2862:	84 8d       	ldd	r24, Z+28	; 0x1c
    2864:	98 2f       	mov	r25, r24
    2866:	90 95       	com	r25
    2868:	80 91 98 07 	lds	r24, 0x0798
    286c:	89 23       	and	r24, r25
    286e:	80 93 98 07 	sts	0x0798, r24
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    2872:	8b 81       	ldd	r24, Y+3	; 0x03
    2874:	9c 81       	ldd	r25, Y+4	; 0x04
    2876:	fc 01       	movw	r30, r24
    2878:	86 89       	ldd	r24, Z+22	; 0x16
    287a:	28 2f       	mov	r18, r24
    287c:	28 60       	ori	r18, 0x08	; 8
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	fc 01       	movw	r30, r24
    2884:	26 8b       	std	Z+22, r18	; 0x16
    OS_EXIT_CRITICAL();
    2886:	89 81       	ldd	r24, Y+1	; 0x01
    2888:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    288c:	8d 81       	ldd	r24, Y+5	; 0x05
    288e:	81 30       	cpi	r24, 0x01	; 1
    2890:	11 f4       	brne	.+4      	; 0x2896 <OSTaskSuspend+0x108>
        OS_Sched();                                             /* Find new highest priority task      */
    2892:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
    }
    return (OS_ERR_NONE);
    2896:	80 e0       	ldi	r24, 0x00	; 0
}
    2898:	26 96       	adiw	r28, 0x06	; 6
    289a:	0f b6       	in	r0, 0x3f	; 63
    289c:	f8 94       	cli
    289e:	de bf       	out	0x3e, r29	; 62
    28a0:	0f be       	out	0x3f, r0	; 63
    28a2:	cd bf       	out	0x3d, r28	; 61
    28a4:	cf 91       	pop	r28
    28a6:	df 91       	pop	r29
    28a8:	08 95       	ret

000028aa <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    28aa:	df 93       	push	r29
    28ac:	cf 93       	push	r28
    28ae:	00 d0       	rcall	.+0      	; 0x28b0 <OSTaskQuery+0x6>
    28b0:	00 d0       	rcall	.+0      	; 0x28b2 <OSTaskQuery+0x8>
    28b2:	cd b7       	in	r28, 0x3d	; 61
    28b4:	de b7       	in	r29, 0x3e	; 62
    28b6:	8c 83       	std	Y+4, r24	; 0x04
    28b8:	7e 83       	std	Y+6, r23	; 0x06
    28ba:	6d 83       	std	Y+5, r22	; 0x05
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    28bc:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
    28be:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    28c2:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    28c4:	8c 81       	ldd	r24, Y+4	; 0x04
    28c6:	8f 3f       	cpi	r24, 0xFF	; 255
    28c8:	39 f4       	brne	.+14     	; 0x28d8 <OSTaskQuery+0x2e>
        prio = OSTCBCur->OSTCBPrio;
    28ca:	80 91 4d 08 	lds	r24, 0x084D
    28ce:	90 91 4e 08 	lds	r25, 0x084E
    28d2:	fc 01       	movw	r30, r24
    28d4:	80 8d       	ldd	r24, Z+24	; 0x18
    28d6:	8c 83       	std	Y+4, r24	; 0x04
    }
    ptcb = OSTCBPrioTbl[prio];
    28d8:	8c 81       	ldd	r24, Y+4	; 0x04
    28da:	88 2f       	mov	r24, r24
    28dc:	90 e0       	ldi	r25, 0x00	; 0
    28de:	88 0f       	add	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	80 51       	subi	r24, 0x10	; 16
    28e4:	94 4f       	sbci	r25, 0xF4	; 244
    28e6:	fc 01       	movw	r30, r24
    28e8:	80 81       	ld	r24, Z
    28ea:	91 81       	ldd	r25, Z+1	; 0x01
    28ec:	9b 83       	std	Y+3, r25	; 0x03
    28ee:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	9b 81       	ldd	r25, Y+3	; 0x03
    28f4:	00 97       	sbiw	r24, 0x00	; 0
    28f6:	29 f4       	brne	.+10     	; 0x2902 <OSTaskQuery+0x58>
        OS_EXIT_CRITICAL();
    28f8:	89 81       	ldd	r24, Y+1	; 0x01
    28fa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO);
    28fe:	89 e2       	ldi	r24, 0x29	; 41
    2900:	17 c0       	rjmp	.+46     	; 0x2930 <OSTaskQuery+0x86>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    2902:	8a 81       	ldd	r24, Y+2	; 0x02
    2904:	9b 81       	ldd	r25, Y+3	; 0x03
    2906:	81 30       	cpi	r24, 0x01	; 1
    2908:	91 05       	cpc	r25, r1
    290a:	29 f4       	brne	.+10     	; 0x2916 <OSTaskQuery+0x6c>
        OS_EXIT_CRITICAL();
    290c:	89 81       	ldd	r24, Y+1	; 0x01
    290e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    2912:	83 e4       	ldi	r24, 0x43	; 67
    2914:	0d c0       	rjmp	.+26     	; 0x2930 <OSTaskQuery+0x86>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    2916:	8d 81       	ldd	r24, Y+5	; 0x05
    2918:	9e 81       	ldd	r25, Y+6	; 0x06
    291a:	2a 81       	ldd	r18, Y+2	; 0x02
    291c:	3b 81       	ldd	r19, Y+3	; 0x03
    291e:	b9 01       	movw	r22, r18
    2920:	4f e3       	ldi	r20, 0x3F	; 63
    2922:	50 e0       	ldi	r21, 0x00	; 0
    2924:	0e 94 23 0a 	call	0x1446	; 0x1446 <OS_MemCopy>
    OS_EXIT_CRITICAL();
    2928:	89 81       	ldd	r24, Y+1	; 0x01
    292a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    292e:	80 e0       	ldi	r24, 0x00	; 0
}
    2930:	26 96       	adiw	r28, 0x06	; 6
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	f8 94       	cli
    2936:	de bf       	out	0x3e, r29	; 62
    2938:	0f be       	out	0x3f, r0	; 63
    293a:	cd bf       	out	0x3d, r28	; 61
    293c:	cf 91       	pop	r28
    293e:	df 91       	pop	r29
    2940:	08 95       	ret

00002942 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    2942:	df 93       	push	r29
    2944:	cf 93       	push	r28
    2946:	00 d0       	rcall	.+0      	; 0x2948 <OSTimeDly+0x6>
    2948:	0f 92       	push	r0
    294a:	cd b7       	in	r28, 0x3d	; 61
    294c:	de b7       	in	r29, 0x3e	; 62
    294e:	9c 83       	std	Y+4, r25	; 0x04
    2950:	8b 83       	std	Y+3, r24	; 0x03
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2952:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    2954:	80 91 4c 08 	lds	r24, 0x084C
    2958:	88 23       	and	r24, r24
    295a:	09 f0       	breq	.+2      	; 0x295e <OSTimeDly+0x1c>
    295c:	4b c0       	rjmp	.+150    	; 0x29f4 <OSTimeDly+0xb2>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    295e:	8b 81       	ldd	r24, Y+3	; 0x03
    2960:	9c 81       	ldd	r25, Y+4	; 0x04
    2962:	00 97       	sbiw	r24, 0x00	; 0
    2964:	09 f4       	brne	.+2      	; 0x2968 <OSTimeDly+0x26>
    2966:	47 c0       	rjmp	.+142    	; 0x29f6 <OSTimeDly+0xb4>
        OS_ENTER_CRITICAL();
    2968:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    296c:	89 83       	std	Y+1, r24	; 0x01
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    296e:	80 91 4d 08 	lds	r24, 0x084D
    2972:	90 91 4e 08 	lds	r25, 0x084E
    2976:	fc 01       	movw	r30, r24
    2978:	82 8d       	ldd	r24, Z+26	; 0x1a
    297a:	8a 83       	std	Y+2, r24	; 0x02
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    297c:	8a 81       	ldd	r24, Y+2	; 0x02
    297e:	88 2f       	mov	r24, r24
    2980:	90 e0       	ldi	r25, 0x00	; 0
    2982:	2a 81       	ldd	r18, Y+2	; 0x02
    2984:	22 2f       	mov	r18, r18
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	27 56       	subi	r18, 0x67	; 103
    298a:	38 4f       	sbci	r19, 0xF8	; 248
    298c:	f9 01       	movw	r30, r18
    298e:	20 81       	ld	r18, Z
    2990:	42 2f       	mov	r20, r18
    2992:	20 91 4d 08 	lds	r18, 0x084D
    2996:	30 91 4e 08 	lds	r19, 0x084E
    299a:	f9 01       	movw	r30, r18
    299c:	23 8d       	ldd	r18, Z+27	; 0x1b
    299e:	20 95       	com	r18
    29a0:	24 23       	and	r18, r20
    29a2:	87 56       	subi	r24, 0x67	; 103
    29a4:	98 4f       	sbci	r25, 0xF8	; 248
    29a6:	fc 01       	movw	r30, r24
    29a8:	20 83       	st	Z, r18
        if (OSRdyTbl[y] == 0) {
    29aa:	8a 81       	ldd	r24, Y+2	; 0x02
    29ac:	88 2f       	mov	r24, r24
    29ae:	90 e0       	ldi	r25, 0x00	; 0
    29b0:	87 56       	subi	r24, 0x67	; 103
    29b2:	98 4f       	sbci	r25, 0xF8	; 248
    29b4:	fc 01       	movw	r30, r24
    29b6:	80 81       	ld	r24, Z
    29b8:	88 23       	and	r24, r24
    29ba:	69 f4       	brne	.+26     	; 0x29d6 <OSTimeDly+0x94>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    29bc:	80 91 4d 08 	lds	r24, 0x084D
    29c0:	90 91 4e 08 	lds	r25, 0x084E
    29c4:	fc 01       	movw	r30, r24
    29c6:	84 8d       	ldd	r24, Z+28	; 0x1c
    29c8:	98 2f       	mov	r25, r24
    29ca:	90 95       	com	r25
    29cc:	80 91 98 07 	lds	r24, 0x0798
    29d0:	89 23       	and	r24, r25
    29d2:	80 93 98 07 	sts	0x0798, r24
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    29d6:	80 91 4d 08 	lds	r24, 0x084D
    29da:	90 91 4e 08 	lds	r25, 0x084E
    29de:	2b 81       	ldd	r18, Y+3	; 0x03
    29e0:	3c 81       	ldd	r19, Y+4	; 0x04
    29e2:	fc 01       	movw	r30, r24
    29e4:	35 8b       	std	Z+21, r19	; 0x15
    29e6:	24 8b       	std	Z+20, r18	; 0x14
        OS_EXIT_CRITICAL();
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
    29ee:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <OSTimeDly+0xb4>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    29f4:	00 00       	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    29f6:	0f 90       	pop	r0
    29f8:	0f 90       	pop	r0
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    2a04:	ef 92       	push	r14
    2a06:	ff 92       	push	r15
    2a08:	0f 93       	push	r16
    2a0a:	1f 93       	push	r17
    2a0c:	df 93       	push	r29
    2a0e:	cf 93       	push	r28
    2a10:	cd b7       	in	r28, 0x3d	; 61
    2a12:	de b7       	in	r29, 0x3e	; 62
    2a14:	2b 97       	sbiw	r28, 0x0b	; 11
    2a16:	0f b6       	in	r0, 0x3f	; 63
    2a18:	f8 94       	cli
    2a1a:	de bf       	out	0x3e, r29	; 62
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	cd bf       	out	0x3d, r28	; 61
    2a20:	8f 83       	std	Y+7, r24	; 0x07
    2a22:	68 87       	std	Y+8, r22	; 0x08
    2a24:	49 87       	std	Y+9, r20	; 0x09
    2a26:	3b 87       	std	Y+11, r19	; 0x0b
    2a28:	2a 87       	std	Y+10, r18	; 0x0a
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    2a2a:	80 91 4c 08 	lds	r24, 0x084C
    2a2e:	88 23       	and	r24, r24
    2a30:	11 f0       	breq	.+4      	; 0x2a36 <OSTimeDlyHMSM+0x32>
        return (OS_ERR_TIME_DLY_ISR);
    2a32:	85 e5       	ldi	r24, 0x55	; 85
    2a34:	86 c0       	rjmp	.+268    	; 0x2b42 <OSTimeDlyHMSM+0x13e>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    2a36:	8f 81       	ldd	r24, Y+7	; 0x07
    2a38:	88 2f       	mov	r24, r24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e0       	ldi	r26, 0x00	; 0
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	20 e1       	ldi	r18, 0x10	; 16
    2a42:	3e e0       	ldi	r19, 0x0E	; 14
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	bc 01       	movw	r22, r24
    2a4a:	cd 01       	movw	r24, r26
    2a4c:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    2a50:	7b 01       	movw	r14, r22
    2a52:	8c 01       	movw	r16, r24
    2a54:	88 85       	ldd	r24, Y+8	; 0x08
    2a56:	88 2f       	mov	r24, r24
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	a0 e0       	ldi	r26, 0x00	; 0
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	2c e3       	ldi	r18, 0x3C	; 60
    2a60:	30 e0       	ldi	r19, 0x00	; 0
    2a62:	40 e0       	ldi	r20, 0x00	; 0
    2a64:	50 e0       	ldi	r21, 0x00	; 0
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	a8 01       	movw	r20, r16
    2a74:	97 01       	movw	r18, r14
    2a76:	28 0f       	add	r18, r24
    2a78:	39 1f       	adc	r19, r25
    2a7a:	4a 1f       	adc	r20, r26
    2a7c:	5b 1f       	adc	r21, r27
    2a7e:	89 85       	ldd	r24, Y+9	; 0x09
    2a80:	88 2f       	mov	r24, r24
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	a0 e0       	ldi	r26, 0x00	; 0
    2a86:	b0 e0       	ldi	r27, 0x00	; 0
    2a88:	82 0f       	add	r24, r18
    2a8a:	93 1f       	adc	r25, r19
    2a8c:	a4 1f       	adc	r26, r20
    2a8e:	b5 1f       	adc	r27, r21
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    2a90:	24 e6       	ldi	r18, 0x64	; 100
    2a92:	30 e0       	ldi	r19, 0x00	; 0
    2a94:	40 e0       	ldi	r20, 0x00	; 0
    2a96:	50 e0       	ldi	r21, 0x00	; 0
    2a98:	bc 01       	movw	r22, r24
    2a9a:	cd 01       	movw	r24, r26
    2a9c:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    2aa0:	7b 01       	movw	r14, r22
    2aa2:	8c 01       	movw	r16, r24
    2aa4:	8a 85       	ldd	r24, Y+10	; 0x0a
    2aa6:	9b 85       	ldd	r25, Y+11	; 0x0b
    2aa8:	cc 01       	movw	r24, r24
    2aaa:	a0 e0       	ldi	r26, 0x00	; 0
    2aac:	b0 e0       	ldi	r27, 0x00	; 0
    2aae:	24 e6       	ldi	r18, 0x64	; 100
    2ab0:	30 e0       	ldi	r19, 0x00	; 0
    2ab2:	40 e0       	ldi	r20, 0x00	; 0
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	bc 01       	movw	r22, r24
    2ab8:	cd 01       	movw	r24, r26
    2aba:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	8c 50       	subi	r24, 0x0C	; 12
    2ac4:	9e 4f       	sbci	r25, 0xFE	; 254
    2ac6:	af 4f       	sbci	r26, 0xFF	; 255
    2ac8:	bf 4f       	sbci	r27, 0xFF	; 255
    2aca:	28 ee       	ldi	r18, 0xE8	; 232
    2acc:	33 e0       	ldi	r19, 0x03	; 3
    2ace:	40 e0       	ldi	r20, 0x00	; 0
    2ad0:	50 e0       	ldi	r21, 0x00	; 0
    2ad2:	bc 01       	movw	r22, r24
    2ad4:	cd 01       	movw	r24, r26
    2ad6:	0e 94 85 40 	call	0x810a	; 0x810a <__udivmodsi4>
    2ada:	da 01       	movw	r26, r20
    2adc:	c9 01       	movw	r24, r18
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    2ade:	8e 0d       	add	r24, r14
    2ae0:	9f 1d       	adc	r25, r15
    2ae2:	a0 1f       	adc	r26, r16
    2ae4:	b1 1f       	adc	r27, r17
    2ae6:	8b 83       	std	Y+3, r24	; 0x03
    2ae8:	9c 83       	std	Y+4, r25	; 0x04
    2aea:	ad 83       	std	Y+5, r26	; 0x05
    2aec:	be 83       	std	Y+6, r27	; 0x06
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    2aee:	8b 81       	ldd	r24, Y+3	; 0x03
    2af0:	9c 81       	ldd	r25, Y+4	; 0x04
    2af2:	ad 81       	ldd	r26, Y+5	; 0x05
    2af4:	be 81       	ldd	r27, Y+6	; 0x06
    2af6:	cd 01       	movw	r24, r26
    2af8:	aa 27       	eor	r26, r26
    2afa:	bb 27       	eor	r27, r27
    2afc:	9a 83       	std	Y+2, r25	; 0x02
    2afe:	89 83       	std	Y+1, r24	; 0x01
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	ad 81       	ldd	r26, Y+5	; 0x05
    2b06:	be 81       	ldd	r27, Y+6	; 0x06
    2b08:	a0 70       	andi	r26, 0x00	; 0
    2b0a:	b0 70       	andi	r27, 0x00	; 0
    2b0c:	8b 83       	std	Y+3, r24	; 0x03
    2b0e:	9c 83       	std	Y+4, r25	; 0x04
    2b10:	ad 83       	std	Y+5, r26	; 0x05
    2b12:	be 83       	std	Y+6, r27	; 0x06
    OSTimeDly((INT16U)ticks);
    2b14:	8b 81       	ldd	r24, Y+3	; 0x03
    2b16:	9c 81       	ldd	r25, Y+4	; 0x04
    2b18:	0e 94 a1 14 	call	0x2942	; 0x2942 <OSTimeDly>
    while (loops > 0) {
    2b1c:	0d c0       	rjmp	.+26     	; 0x2b38 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	90 e8       	ldi	r25, 0x80	; 128
    2b22:	0e 94 a1 14 	call	0x2942	; 0x2942 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	90 e8       	ldi	r25, 0x80	; 128
    2b2a:	0e 94 a1 14 	call	0x2942	; 0x2942 <OSTimeDly>
        loops--;
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	9a 81       	ldd	r25, Y+2	; 0x02
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    2b38:	89 81       	ldd	r24, Y+1	; 0x01
    2b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2b3c:	00 97       	sbiw	r24, 0x00	; 0
    2b3e:	79 f7       	brne	.-34     	; 0x2b1e <OSTimeDlyHMSM+0x11a>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    2b40:	80 e0       	ldi	r24, 0x00	; 0
}
    2b42:	2b 96       	adiw	r28, 0x0b	; 11
    2b44:	0f b6       	in	r0, 0x3f	; 63
    2b46:	f8 94       	cli
    2b48:	de bf       	out	0x3e, r29	; 62
    2b4a:	0f be       	out	0x3f, r0	; 63
    2b4c:	cd bf       	out	0x3d, r28	; 61
    2b4e:	cf 91       	pop	r28
    2b50:	df 91       	pop	r29
    2b52:	1f 91       	pop	r17
    2b54:	0f 91       	pop	r16
    2b56:	ff 90       	pop	r15
    2b58:	ef 90       	pop	r14
    2b5a:	08 95       	ret

00002b5c <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	00 d0       	rcall	.+0      	; 0x2b62 <OSTimeDlyResume+0x6>
    2b62:	0f 92       	push	r0
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    2b6a:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (prio >= OS_LOWEST_PRIO) {
    2b6c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6e:	8a 30       	cpi	r24, 0x0A	; 10
    2b70:	10 f0       	brcs	.+4      	; 0x2b76 <OSTimeDlyResume+0x1a>
        return (OS_ERR_PRIO_INVALID);
    2b72:	8a e2       	ldi	r24, 0x2A	; 42
    2b74:	87 c0       	rjmp	.+270    	; 0x2c84 <OSTimeDlyResume+0x128>
    }
    OS_ENTER_CRITICAL();
    2b76:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2b7a:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    2b7c:	8c 81       	ldd	r24, Y+4	; 0x04
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	88 0f       	add	r24, r24
    2b84:	99 1f       	adc	r25, r25
    2b86:	80 51       	subi	r24, 0x10	; 16
    2b88:	94 4f       	sbci	r25, 0xF4	; 244
    2b8a:	fc 01       	movw	r30, r24
    2b8c:	80 81       	ld	r24, Z
    2b8e:	91 81       	ldd	r25, Z+1	; 0x01
    2b90:	9b 83       	std	Y+3, r25	; 0x03
    2b92:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	9b 81       	ldd	r25, Y+3	; 0x03
    2b98:	00 97       	sbiw	r24, 0x00	; 0
    2b9a:	29 f4       	brne	.+10     	; 0x2ba6 <OSTimeDlyResume+0x4a>
        OS_EXIT_CRITICAL();
    2b9c:	89 81       	ldd	r24, Y+1	; 0x01
    2b9e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    2ba2:	83 e4       	ldi	r24, 0x43	; 67
    2ba4:	6f c0       	rjmp	.+222    	; 0x2c84 <OSTimeDlyResume+0x128>
    }
    if (ptcb == OS_TCB_RESERVED) {
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	9b 81       	ldd	r25, Y+3	; 0x03
    2baa:	81 30       	cpi	r24, 0x01	; 1
    2bac:	91 05       	cpc	r25, r1
    2bae:	29 f4       	brne	.+10     	; 0x2bba <OSTimeDlyResume+0x5e>
        OS_EXIT_CRITICAL();
    2bb0:	89 81       	ldd	r24, Y+1	; 0x01
    2bb2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    2bb6:	83 e4       	ldi	r24, 0x43	; 67
    2bb8:	65 c0       	rjmp	.+202    	; 0x2c84 <OSTimeDlyResume+0x128>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    2bba:	8a 81       	ldd	r24, Y+2	; 0x02
    2bbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2bbe:	fc 01       	movw	r30, r24
    2bc0:	84 89       	ldd	r24, Z+20	; 0x14
    2bc2:	95 89       	ldd	r25, Z+21	; 0x15
    2bc4:	00 97       	sbiw	r24, 0x00	; 0
    2bc6:	29 f4       	brne	.+10     	; 0x2bd2 <OSTimeDlyResume+0x76>
        OS_EXIT_CRITICAL();
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    2bce:	80 e5       	ldi	r24, 0x50	; 80
    2bd0:	59 c0       	rjmp	.+178    	; 0x2c84 <OSTimeDlyResume+0x128>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	15 8a       	std	Z+21, r1	; 0x15
    2bda:	14 8a       	std	Z+20, r1	; 0x14
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	9b 81       	ldd	r25, Y+3	; 0x03
    2be0:	fc 01       	movw	r30, r24
    2be2:	86 89       	ldd	r24, Z+22	; 0x16
    2be4:	88 2f       	mov	r24, r24
    2be6:	90 e0       	ldi	r25, 0x00	; 0
    2be8:	87 73       	andi	r24, 0x37	; 55
    2bea:	90 70       	andi	r25, 0x00	; 0
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	81 f0       	breq	.+32     	; 0x2c10 <OSTimeDlyResume+0xb4>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    2bf0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf4:	fc 01       	movw	r30, r24
    2bf6:	86 89       	ldd	r24, Z+22	; 0x16
    2bf8:	28 2f       	mov	r18, r24
    2bfa:	28 7c       	andi	r18, 0xC8	; 200
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2c00:	fc 01       	movw	r30, r24
    2c02:	26 8b       	std	Z+22, r18	; 0x16
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	9b 81       	ldd	r25, Y+3	; 0x03
    2c08:	21 e0       	ldi	r18, 0x01	; 1
    2c0a:	fc 01       	movw	r30, r24
    2c0c:	27 8b       	std	Z+23, r18	; 0x17
    2c0e:	04 c0       	rjmp	.+8      	; 0x2c18 <OSTimeDlyResume+0xbc>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    2c10:	8a 81       	ldd	r24, Y+2	; 0x02
    2c12:	9b 81       	ldd	r25, Y+3	; 0x03
    2c14:	fc 01       	movw	r30, r24
    2c16:	17 8a       	std	Z+23, r1	; 0x17
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    2c18:	8a 81       	ldd	r24, Y+2	; 0x02
    2c1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1c:	fc 01       	movw	r30, r24
    2c1e:	86 89       	ldd	r24, Z+22	; 0x16
    2c20:	88 2f       	mov	r24, r24
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	88 70       	andi	r24, 0x08	; 8
    2c26:	90 70       	andi	r25, 0x00	; 0
    2c28:	00 97       	sbiw	r24, 0x00	; 0
    2c2a:	41 f5       	brne	.+80     	; 0x2c7c <OSTimeDlyResume+0x120>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c30:	fc 01       	movw	r30, r24
    2c32:	94 8d       	ldd	r25, Z+28	; 0x1c
    2c34:	80 91 98 07 	lds	r24, 0x0798
    2c38:	89 2b       	or	r24, r25
    2c3a:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	fc 01       	movw	r30, r24
    2c44:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c46:	88 2f       	mov	r24, r24
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	2a 81       	ldd	r18, Y+2	; 0x02
    2c4c:	3b 81       	ldd	r19, Y+3	; 0x03
    2c4e:	f9 01       	movw	r30, r18
    2c50:	22 8d       	ldd	r18, Z+26	; 0x1a
    2c52:	22 2f       	mov	r18, r18
    2c54:	30 e0       	ldi	r19, 0x00	; 0
    2c56:	27 56       	subi	r18, 0x67	; 103
    2c58:	38 4f       	sbci	r19, 0xF8	; 248
    2c5a:	f9 01       	movw	r30, r18
    2c5c:	40 81       	ld	r20, Z
    2c5e:	2a 81       	ldd	r18, Y+2	; 0x02
    2c60:	3b 81       	ldd	r19, Y+3	; 0x03
    2c62:	f9 01       	movw	r30, r18
    2c64:	23 8d       	ldd	r18, Z+27	; 0x1b
    2c66:	24 2b       	or	r18, r20
    2c68:	87 56       	subi	r24, 0x67	; 103
    2c6a:	98 4f       	sbci	r25, 0xF8	; 248
    2c6c:	fc 01       	movw	r30, r24
    2c6e:	20 83       	st	Z, r18
        OS_EXIT_CRITICAL();
    2c70:	89 81       	ldd	r24, Y+1	; 0x01
    2c72:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                            /* See if this is new highest priority  */
    2c76:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <OS_Sched>
    2c7a:	03 c0       	rjmp	.+6      	; 0x2c82 <OSTimeDlyResume+0x126>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
    return (OS_ERR_NONE);
    2c82:	80 e0       	ldi	r24, 0x00	; 0
}
    2c84:	0f 90       	pop	r0
    2c86:	0f 90       	pop	r0
    2c88:	0f 90       	pop	r0
    2c8a:	0f 90       	pop	r0
    2c8c:	cf 91       	pop	r28
    2c8e:	df 91       	pop	r29
    2c90:	08 95       	ret

00002c92 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    2c92:	df 93       	push	r29
    2c94:	cf 93       	push	r28
    2c96:	00 d0       	rcall	.+0      	; 0x2c98 <OSTimeGet+0x6>
    2c98:	0f 92       	push	r0
    2c9a:	0f 92       	push	r0
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2ca0:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    2ca2:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2ca6:	89 83       	std	Y+1, r24	; 0x01
    ticks = OSTime;
    2ca8:	80 91 53 08 	lds	r24, 0x0853
    2cac:	90 91 54 08 	lds	r25, 0x0854
    2cb0:	a0 91 55 08 	lds	r26, 0x0855
    2cb4:	b0 91 56 08 	lds	r27, 0x0856
    2cb8:	8a 83       	std	Y+2, r24	; 0x02
    2cba:	9b 83       	std	Y+3, r25	; 0x03
    2cbc:	ac 83       	std	Y+4, r26	; 0x04
    2cbe:	bd 83       	std	Y+5, r27	; 0x05
    OS_EXIT_CRITICAL();
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (ticks);
    2cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    2cc8:	9b 81       	ldd	r25, Y+3	; 0x03
    2cca:	ac 81       	ldd	r26, Y+4	; 0x04
    2ccc:	bd 81       	ldd	r27, Y+5	; 0x05
}
    2cce:	bc 01       	movw	r22, r24
    2cd0:	cd 01       	movw	r24, r26
    2cd2:	0f 90       	pop	r0
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	0f 90       	pop	r0
    2cdc:	cf 91       	pop	r28
    2cde:	df 91       	pop	r29
    2ce0:	08 95       	ret

00002ce2 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    2ce2:	df 93       	push	r29
    2ce4:	cf 93       	push	r28
    2ce6:	00 d0       	rcall	.+0      	; 0x2ce8 <OSTimeSet+0x6>
    2ce8:	0f 92       	push	r0
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	6a 83       	std	Y+2, r22	; 0x02
    2cf2:	7b 83       	std	Y+3, r23	; 0x03
    2cf4:	8c 83       	std	Y+4, r24	; 0x04
    2cf6:	9d 83       	std	Y+5, r25	; 0x05
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    2cf8:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    2cfa:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    2cfe:	89 83       	std	Y+1, r24	; 0x01
    OSTime = ticks;
    2d00:	8a 81       	ldd	r24, Y+2	; 0x02
    2d02:	9b 81       	ldd	r25, Y+3	; 0x03
    2d04:	ac 81       	ldd	r26, Y+4	; 0x04
    2d06:	bd 81       	ldd	r27, Y+5	; 0x05
    2d08:	80 93 53 08 	sts	0x0853, r24
    2d0c:	90 93 54 08 	sts	0x0854, r25
    2d10:	a0 93 55 08 	sts	0x0855, r26
    2d14:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
    2d18:	89 81       	ldd	r24, Y+1	; 0x01
    2d1a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
    2d28:	cf 91       	pop	r28
    2d2a:	df 91       	pop	r29
    2d2c:	08 95       	ret

00002d2e <OSTmrCreate>:
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
    2d2e:	8f 92       	push	r8
    2d30:	9f 92       	push	r9
    2d32:	af 92       	push	r10
    2d34:	bf 92       	push	r11
    2d36:	cf 92       	push	r12
    2d38:	df 92       	push	r13
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	df 93       	push	r29
    2d42:	cf 93       	push	r28
    2d44:	cd b7       	in	r28, 0x3d	; 61
    2d46:	de b7       	in	r29, 0x3e	; 62
    2d48:	64 97       	sbiw	r28, 0x14	; 20
    2d4a:	0f b6       	in	r0, 0x3f	; 63
    2d4c:	f8 94       	cli
    2d4e:	de bf       	out	0x3e, r29	; 62
    2d50:	0f be       	out	0x3f, r0	; 63
    2d52:	cd bf       	out	0x3d, r28	; 61
    2d54:	6c 83       	std	Y+4, r22	; 0x04
    2d56:	7d 83       	std	Y+5, r23	; 0x05
    2d58:	8e 83       	std	Y+6, r24	; 0x06
    2d5a:	9f 83       	std	Y+7, r25	; 0x07
    2d5c:	28 87       	std	Y+8, r18	; 0x08
    2d5e:	39 87       	std	Y+9, r19	; 0x09
    2d60:	4a 87       	std	Y+10, r20	; 0x0a
    2d62:	5b 87       	std	Y+11, r21	; 0x0b
    2d64:	0c 87       	std	Y+12, r16	; 0x0c
    2d66:	fe 86       	std	Y+14, r15	; 0x0e
    2d68:	ed 86       	std	Y+13, r14	; 0x0d
    2d6a:	d8 8a       	std	Y+16, r13	; 0x10
    2d6c:	cf 86       	std	Y+15, r12	; 0x0f
    2d6e:	ba 8a       	std	Y+18, r11	; 0x12
    2d70:	a9 8a       	std	Y+17, r10	; 0x11
    2d72:	9c 8a       	std	Y+20, r9	; 0x14
    2d74:	8b 8a       	std	Y+19, r8	; 0x13
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    2d76:	80 91 4c 08 	lds	r24, 0x084C
    2d7a:	88 23       	and	r24, r24
    2d7c:	41 f0       	breq	.+16     	; 0x2d8e <OSTmrCreate+0x60>
        *perr  = OS_ERR_TMR_ISR;
    2d7e:	8b 89       	ldd	r24, Y+19	; 0x13
    2d80:	9c 89       	ldd	r25, Y+20	; 0x14
    2d82:	2b e8       	ldi	r18, 0x8B	; 139
    2d84:	fc 01       	movw	r30, r24
    2d86:	20 83       	st	Z, r18
        return ((OS_TMR *)0);
    2d88:	80 e0       	ldi	r24, 0x00	; 0
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	72 c0       	rjmp	.+228    	; 0x2e72 <OSTmrCreate+0x144>
    }
    OSTmr_Lock();
    2d8e:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
    2d92:	0e 94 81 1a 	call	0x3502	; 0x3502 <OSTmr_Alloc>
    2d96:	9b 83       	std	Y+3, r25	; 0x03
    2d98:	8a 83       	std	Y+2, r24	; 0x02
    if (ptmr == (OS_TMR *)0) {
    2d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d9c:	9b 81       	ldd	r25, Y+3	; 0x03
    2d9e:	00 97       	sbiw	r24, 0x00	; 0
    2da0:	51 f4       	brne	.+20     	; 0x2db6 <OSTmrCreate+0x88>
        OSTmr_Unlock();
    2da2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
    2da6:	8b 89       	ldd	r24, Y+19	; 0x13
    2da8:	9c 89       	ldd	r25, Y+20	; 0x14
    2daa:	26 e8       	ldi	r18, 0x86	; 134
    2dac:	fc 01       	movw	r30, r24
    2dae:	20 83       	st	Z, r18
        return ((OS_TMR *)0);
    2db0:	80 e0       	ldi	r24, 0x00	; 0
    2db2:	90 e0       	ldi	r25, 0x00	; 0
    2db4:	5e c0       	rjmp	.+188    	; 0x2e72 <OSTmrCreate+0x144>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
    2db6:	8a 81       	ldd	r24, Y+2	; 0x02
    2db8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dba:	21 e0       	ldi	r18, 0x01	; 1
    2dbc:	fc 01       	movw	r30, r24
    2dbe:	26 a3       	std	Z+38, r18	; 0x26
    ptmr->OSTmrDly         = dly;
    2dc0:	2a 81       	ldd	r18, Y+2	; 0x02
    2dc2:	3b 81       	ldd	r19, Y+3	; 0x03
    2dc4:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc6:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc8:	ae 81       	ldd	r26, Y+6	; 0x06
    2dca:	bf 81       	ldd	r27, Y+7	; 0x07
    2dcc:	f9 01       	movw	r30, r18
    2dce:	85 87       	std	Z+13, r24	; 0x0d
    2dd0:	96 87       	std	Z+14, r25	; 0x0e
    2dd2:	a7 87       	std	Z+15, r26	; 0x0f
    2dd4:	b0 8b       	std	Z+16, r27	; 0x10
    ptmr->OSTmrPeriod      = period;
    2dd6:	2a 81       	ldd	r18, Y+2	; 0x02
    2dd8:	3b 81       	ldd	r19, Y+3	; 0x03
    2dda:	88 85       	ldd	r24, Y+8	; 0x08
    2ddc:	99 85       	ldd	r25, Y+9	; 0x09
    2dde:	aa 85       	ldd	r26, Y+10	; 0x0a
    2de0:	bb 85       	ldd	r27, Y+11	; 0x0b
    2de2:	f9 01       	movw	r30, r18
    2de4:	81 8b       	std	Z+17, r24	; 0x11
    2de6:	92 8b       	std	Z+18, r25	; 0x12
    2de8:	a3 8b       	std	Z+19, r26	; 0x13
    2dea:	b4 8b       	std	Z+20, r27	; 0x14
    ptmr->OSTmrOpt         = opt;
    2dec:	8a 81       	ldd	r24, Y+2	; 0x02
    2dee:	9b 81       	ldd	r25, Y+3	; 0x03
    2df0:	2c 85       	ldd	r18, Y+12	; 0x0c
    2df2:	fc 01       	movw	r30, r24
    2df4:	25 a3       	std	Z+37, r18	; 0x25
    ptmr->OSTmrCallback    = callback;
    2df6:	8a 81       	ldd	r24, Y+2	; 0x02
    2df8:	9b 81       	ldd	r25, Y+3	; 0x03
    2dfa:	2d 85       	ldd	r18, Y+13	; 0x0d
    2dfc:	3e 85       	ldd	r19, Y+14	; 0x0e
    2dfe:	fc 01       	movw	r30, r24
    2e00:	32 83       	std	Z+2, r19	; 0x02
    2e02:	21 83       	std	Z+1, r18	; 0x01
    ptmr->OSTmrCallbackArg = callback_arg;
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	9b 81       	ldd	r25, Y+3	; 0x03
    2e08:	2f 85       	ldd	r18, Y+15	; 0x0f
    2e0a:	38 89       	ldd	r19, Y+16	; 0x10
    2e0c:	fc 01       	movw	r30, r24
    2e0e:	34 83       	std	Z+4, r19	; 0x04
    2e10:	23 83       	std	Z+3, r18	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
    2e12:	89 89       	ldd	r24, Y+17	; 0x11
    2e14:	9a 89       	ldd	r25, Y+18	; 0x12
    2e16:	00 97       	sbiw	r24, 0x00	; 0
    2e18:	21 f1       	breq	.+72     	; 0x2e62 <OSTmrCreate+0x134>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
    2e1a:	89 89       	ldd	r24, Y+17	; 0x11
    2e1c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e1e:	0e 94 06 0b 	call	0x160c	; 0x160c <OS_StrLen>
    2e22:	89 83       	std	Y+1, r24	; 0x01
        if (len < OS_TMR_CFG_NAME_SIZE) {
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	80 31       	cpi	r24, 0x10	; 16
    2e28:	48 f4       	brcc	.+18     	; 0x2e3c <OSTmrCreate+0x10e>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
    2e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2e2e:	45 96       	adiw	r24, 0x15	; 21
    2e30:	29 89       	ldd	r18, Y+17	; 0x11
    2e32:	3a 89       	ldd	r19, Y+18	; 0x12
    2e34:	b9 01       	movw	r22, r18
    2e36:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OS_StrCopy>
    2e3a:	13 c0       	rjmp	.+38     	; 0x2e62 <OSTmrCreate+0x134>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
    2e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e40:	23 e2       	ldi	r18, 0x23	; 35
    2e42:	fc 01       	movw	r30, r24
    2e44:	25 8b       	std	Z+21, r18	; 0x15
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
    2e46:	8a 81       	ldd	r24, Y+2	; 0x02
    2e48:	9b 81       	ldd	r25, Y+3	; 0x03
    2e4a:	fc 01       	movw	r30, r24
    2e4c:	16 8a       	std	Z+22, r1	; 0x16
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
    2e4e:	8b 89       	ldd	r24, Y+19	; 0x13
    2e50:	9c 89       	ldd	r25, Y+20	; 0x14
    2e52:	2c e8       	ldi	r18, 0x8C	; 140
    2e54:	fc 01       	movw	r30, r24
    2e56:	20 83       	st	Z, r18
            OSTmr_Unlock();
    2e58:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
            return (ptmr);
    2e5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2e60:	08 c0       	rjmp	.+16     	; 0x2e72 <OSTmrCreate+0x144>
        }
    }
#endif
    OSTmr_Unlock();
    2e62:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
    2e66:	8b 89       	ldd	r24, Y+19	; 0x13
    2e68:	9c 89       	ldd	r25, Y+20	; 0x14
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	10 82       	st	Z, r1
    return (ptmr);
    2e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e70:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2e72:	64 96       	adiw	r28, 0x14	; 20
    2e74:	0f b6       	in	r0, 0x3f	; 63
    2e76:	f8 94       	cli
    2e78:	de bf       	out	0x3e, r29	; 62
    2e7a:	0f be       	out	0x3f, r0	; 63
    2e7c:	cd bf       	out	0x3d, r28	; 61
    2e7e:	cf 91       	pop	r28
    2e80:	df 91       	pop	r29
    2e82:	0f 91       	pop	r16
    2e84:	ff 90       	pop	r15
    2e86:	ef 90       	pop	r14
    2e88:	df 90       	pop	r13
    2e8a:	cf 90       	pop	r12
    2e8c:	bf 90       	pop	r11
    2e8e:	af 90       	pop	r10
    2e90:	9f 90       	pop	r9
    2e92:	8f 90       	pop	r8
    2e94:	08 95       	ret

00002e96 <OSTmrDel>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
    2e96:	df 93       	push	r29
    2e98:	cf 93       	push	r28
    2e9a:	00 d0       	rcall	.+0      	; 0x2e9c <OSTmrDel+0x6>
    2e9c:	0f 92       	push	r0
    2e9e:	cd b7       	in	r28, 0x3d	; 61
    2ea0:	de b7       	in	r29, 0x3e	; 62
    2ea2:	9a 83       	std	Y+2, r25	; 0x02
    2ea4:	89 83       	std	Y+1, r24	; 0x01
    2ea6:	7c 83       	std	Y+4, r23	; 0x04
    2ea8:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    2eaa:	89 81       	ldd	r24, Y+1	; 0x01
    2eac:	9a 81       	ldd	r25, Y+2	; 0x02
    2eae:	fc 01       	movw	r30, r24
    2eb0:	80 81       	ld	r24, Z
    2eb2:	84 36       	cpi	r24, 0x64	; 100
    2eb4:	39 f0       	breq	.+14     	; 0x2ec4 <OSTmrDel+0x2e>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    2eb6:	8b 81       	ldd	r24, Y+3	; 0x03
    2eb8:	9c 81       	ldd	r25, Y+4	; 0x04
    2eba:	29 e8       	ldi	r18, 0x89	; 137
    2ebc:	fc 01       	movw	r30, r24
    2ebe:	20 83       	st	Z, r18
        return (OS_FALSE);
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
    2ec2:	4c c0       	rjmp	.+152    	; 0x2f5c <OSTmrDel+0xc6>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    2ec4:	80 91 4c 08 	lds	r24, 0x084C
    2ec8:	88 23       	and	r24, r24
    2eca:	39 f0       	breq	.+14     	; 0x2eda <OSTmrDel+0x44>
        *perr  = OS_ERR_TMR_ISR;
    2ecc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ece:	9c 81       	ldd	r25, Y+4	; 0x04
    2ed0:	2b e8       	ldi	r18, 0x8B	; 139
    2ed2:	fc 01       	movw	r30, r24
    2ed4:	20 83       	st	Z, r18
        return (OS_FALSE);
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	41 c0       	rjmp	.+130    	; 0x2f5c <OSTmrDel+0xc6>
    }
    OSTmr_Lock();
    2eda:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ee2:	fc 01       	movw	r30, r24
    2ee4:	86 a1       	ldd	r24, Z+38	; 0x26
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	83 30       	cpi	r24, 0x03	; 3
    2eec:	91 05       	cpc	r25, r1
    2eee:	34 f4       	brge	.+12     	; 0x2efc <OSTmrDel+0x66>
    2ef0:	81 30       	cpi	r24, 0x01	; 1
    2ef2:	91 05       	cpc	r25, r1
    2ef4:	b4 f4       	brge	.+44     	; 0x2f22 <OSTmrDel+0x8c>
    2ef6:	00 97       	sbiw	r24, 0x00	; 0
    2ef8:	01 f1       	breq	.+64     	; 0x2f3a <OSTmrDel+0xa4>
    2efa:	28 c0       	rjmp	.+80     	; 0x2f4c <OSTmrDel+0xb6>
    2efc:	83 30       	cpi	r24, 0x03	; 3
    2efe:	91 05       	cpc	r25, r1
    2f00:	29 f5       	brne	.+74     	; 0x2f4c <OSTmrDel+0xb6>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
    2f02:	89 81       	ldd	r24, Y+1	; 0x01
    2f04:	9a 81       	ldd	r25, Y+2	; 0x02
    2f06:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    2f0a:	89 81       	ldd	r24, Y+1	; 0x01
    2f0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f0e:	0e 94 c2 1a 	call	0x3584	; 0x3584 <OSTmr_Free>
             OSTmr_Unlock();
    2f12:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    2f16:	8b 81       	ldd	r24, Y+3	; 0x03
    2f18:	9c 81       	ldd	r25, Y+4	; 0x04
    2f1a:	fc 01       	movw	r30, r24
    2f1c:	10 82       	st	Z, r1
             return (OS_TRUE);
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	1d c0       	rjmp	.+58     	; 0x2f5c <OSTmrDel+0xc6>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    2f22:	89 81       	ldd	r24, Y+1	; 0x01
    2f24:	9a 81       	ldd	r25, Y+2	; 0x02
    2f26:	0e 94 c2 1a 	call	0x3584	; 0x3584 <OSTmr_Free>
             OSTmr_Unlock();
    2f2a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    2f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f30:	9c 81       	ldd	r25, Y+4	; 0x04
    2f32:	fc 01       	movw	r30, r24
    2f34:	10 82       	st	Z, r1
             return (OS_TRUE);
    2f36:	81 e0       	ldi	r24, 0x01	; 1
    2f38:	11 c0       	rjmp	.+34     	; 0x2f5c <OSTmrDel+0xc6>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
    2f3a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    2f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2f40:	9c 81       	ldd	r25, Y+4	; 0x04
    2f42:	27 e8       	ldi	r18, 0x87	; 135
    2f44:	fc 01       	movw	r30, r24
    2f46:	20 83       	st	Z, r18
             return (OS_FALSE);
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	08 c0       	rjmp	.+16     	; 0x2f5c <OSTmrDel+0xc6>

        default:
             OSTmr_Unlock();
    2f4c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	9c 81       	ldd	r25, Y+4	; 0x04
    2f54:	2d e8       	ldi	r18, 0x8D	; 141
    2f56:	fc 01       	movw	r30, r24
    2f58:	20 83       	st	Z, r18
             return (OS_FALSE);
    2f5a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    2f5c:	0f 90       	pop	r0
    2f5e:	0f 90       	pop	r0
    2f60:	0f 90       	pop	r0
    2f62:	0f 90       	pop	r0
    2f64:	cf 91       	pop	r28
    2f66:	df 91       	pop	r29
    2f68:	08 95       	ret

00002f6a <OSTmrNameGet>:

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
    2f6a:	df 93       	push	r29
    2f6c:	cf 93       	push	r28
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	27 97       	sbiw	r28, 0x07	; 7
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	9b 83       	std	Y+3, r25	; 0x03
    2f80:	8a 83       	std	Y+2, r24	; 0x02
    2f82:	7d 83       	std	Y+5, r23	; 0x05
    2f84:	6c 83       	std	Y+4, r22	; 0x04
    2f86:	5f 83       	std	Y+7, r21	; 0x07
    2f88:	4e 83       	std	Y+6, r20	; 0x06
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f8e:	fc 01       	movw	r30, r24
    2f90:	80 81       	ld	r24, Z
    2f92:	84 36       	cpi	r24, 0x64	; 100
    2f94:	39 f0       	breq	.+14     	; 0x2fa4 <OSTmrNameGet+0x3a>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    2f96:	8e 81       	ldd	r24, Y+6	; 0x06
    2f98:	9f 81       	ldd	r25, Y+7	; 0x07
    2f9a:	29 e8       	ldi	r18, 0x89	; 137
    2f9c:	fc 01       	movw	r30, r24
    2f9e:	20 83       	st	Z, r18
        return (0);
    2fa0:	80 e0       	ldi	r24, 0x00	; 0
    2fa2:	3e c0       	rjmp	.+124    	; 0x3020 <OSTmrNameGet+0xb6>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    2fa4:	80 91 4c 08 	lds	r24, 0x084C
    2fa8:	88 23       	and	r24, r24
    2faa:	39 f0       	breq	.+14     	; 0x2fba <OSTmrNameGet+0x50>
        *perr = OS_ERR_NAME_GET_ISR;
    2fac:	8e 81       	ldd	r24, Y+6	; 0x06
    2fae:	9f 81       	ldd	r25, Y+7	; 0x07
    2fb0:	21 e1       	ldi	r18, 0x11	; 17
    2fb2:	fc 01       	movw	r30, r24
    2fb4:	20 83       	st	Z, r18
        return (0);
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	33 c0       	rjmp	.+102    	; 0x3020 <OSTmrNameGet+0xb6>
    }
    OSTmr_Lock();
    2fba:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	fc 01       	movw	r30, r24
    2fc4:	86 a1       	ldd	r24, Z+38	; 0x26
    2fc6:	88 2f       	mov	r24, r24
    2fc8:	90 e0       	ldi	r25, 0x00	; 0
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	c1 f0       	breq	.+48     	; 0x2ffe <OSTmrNameGet+0x94>
    2fce:	99 23       	and	r25, r25
    2fd0:	fc f0       	brlt	.+62     	; 0x3010 <OSTmrNameGet+0xa6>
    2fd2:	84 30       	cpi	r24, 0x04	; 4
    2fd4:	91 05       	cpc	r25, r1
    2fd6:	e4 f4       	brge	.+56     	; 0x3010 <OSTmrNameGet+0xa6>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
    2fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    2fda:	9b 81       	ldd	r25, Y+3	; 0x03
    2fdc:	9c 01       	movw	r18, r24
    2fde:	2b 5e       	subi	r18, 0xEB	; 235
    2fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fe4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fe6:	b9 01       	movw	r22, r18
    2fe8:	0e 94 d1 0a 	call	0x15a2	; 0x15a2 <OS_StrCopy>
    2fec:	89 83       	std	Y+1, r24	; 0x01
             OSTmr_Unlock();
    2fee:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    2ff2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ff4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ff6:	fc 01       	movw	r30, r24
    2ff8:	10 82       	st	Z, r1
             return (len);
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	11 c0       	rjmp	.+34     	; 0x3020 <OSTmrNameGet+0xb6>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
    2ffe:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    3002:	8e 81       	ldd	r24, Y+6	; 0x06
    3004:	9f 81       	ldd	r25, Y+7	; 0x07
    3006:	27 e8       	ldi	r18, 0x87	; 135
    3008:	fc 01       	movw	r30, r24
    300a:	20 83       	st	Z, r18
             return (0);
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	08 c0       	rjmp	.+16     	; 0x3020 <OSTmrNameGet+0xb6>

        default:
             OSTmr_Unlock();
    3010:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    3014:	8e 81       	ldd	r24, Y+6	; 0x06
    3016:	9f 81       	ldd	r25, Y+7	; 0x07
    3018:	2d e8       	ldi	r18, 0x8D	; 141
    301a:	fc 01       	movw	r30, r24
    301c:	20 83       	st	Z, r18
             return (0);
    301e:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    3020:	27 96       	adiw	r28, 0x07	; 7
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	cf 91       	pop	r28
    302e:	df 91       	pop	r29
    3030:	08 95       	ret

00003032 <OSTmrRemainGet>:
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
    3032:	ef 92       	push	r14
    3034:	ff 92       	push	r15
    3036:	0f 93       	push	r16
    3038:	1f 93       	push	r17
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
    3042:	28 97       	sbiw	r28, 0x08	; 8
    3044:	0f b6       	in	r0, 0x3f	; 63
    3046:	f8 94       	cli
    3048:	de bf       	out	0x3e, r29	; 62
    304a:	0f be       	out	0x3f, r0	; 63
    304c:	cd bf       	out	0x3d, r28	; 61
    304e:	9e 83       	std	Y+6, r25	; 0x06
    3050:	8d 83       	std	Y+5, r24	; 0x05
    3052:	78 87       	std	Y+8, r23	; 0x08
    3054:	6f 83       	std	Y+7, r22	; 0x07
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    3056:	8d 81       	ldd	r24, Y+5	; 0x05
    3058:	9e 81       	ldd	r25, Y+6	; 0x06
    305a:	fc 01       	movw	r30, r24
    305c:	80 81       	ld	r24, Z
    305e:	84 36       	cpi	r24, 0x64	; 100
    3060:	51 f0       	breq	.+20     	; 0x3076 <OSTmrRemainGet+0x44>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    3062:	8f 81       	ldd	r24, Y+7	; 0x07
    3064:	98 85       	ldd	r25, Y+8	; 0x08
    3066:	29 e8       	ldi	r18, 0x89	; 137
    3068:	fc 01       	movw	r30, r24
    306a:	20 83       	st	Z, r18
        return (0);
    306c:	80 e0       	ldi	r24, 0x00	; 0
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a0 e0       	ldi	r26, 0x00	; 0
    3072:	b0 e0       	ldi	r27, 0x00	; 0
    3074:	b8 c0       	rjmp	.+368    	; 0x31e6 <OSTmrRemainGet+0x1b4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    3076:	80 91 4c 08 	lds	r24, 0x084C
    307a:	88 23       	and	r24, r24
    307c:	51 f0       	breq	.+20     	; 0x3092 <OSTmrRemainGet+0x60>
        *perr = OS_ERR_TMR_ISR;
    307e:	8f 81       	ldd	r24, Y+7	; 0x07
    3080:	98 85       	ldd	r25, Y+8	; 0x08
    3082:	2b e8       	ldi	r18, 0x8B	; 139
    3084:	fc 01       	movw	r30, r24
    3086:	20 83       	st	Z, r18
        return (0);
    3088:	80 e0       	ldi	r24, 0x00	; 0
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	a0 e0       	ldi	r26, 0x00	; 0
    308e:	b0 e0       	ldi	r27, 0x00	; 0
    3090:	aa c0       	rjmp	.+340    	; 0x31e6 <OSTmrRemainGet+0x1b4>
    }
    OSTmr_Lock();
    3092:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	fc 01       	movw	r30, r24
    309c:	86 a1       	ldd	r24, Z+38	; 0x26
    309e:	88 2f       	mov	r24, r24
    30a0:	90 e0       	ldi	r25, 0x00	; 0
    30a2:	81 30       	cpi	r24, 0x01	; 1
    30a4:	91 05       	cpc	r25, r1
    30a6:	a9 f1       	breq	.+106    	; 0x3112 <OSTmrRemainGet+0xe0>
    30a8:	82 30       	cpi	r24, 0x02	; 2
    30aa:	91 05       	cpc	r25, r1
    30ac:	24 f4       	brge	.+8      	; 0x30b6 <OSTmrRemainGet+0x84>
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	09 f4       	brne	.+2      	; 0x30b4 <OSTmrRemainGet+0x82>
    30b2:	82 c0       	rjmp	.+260    	; 0x31b8 <OSTmrRemainGet+0x186>
    30b4:	8d c0       	rjmp	.+282    	; 0x31d0 <OSTmrRemainGet+0x19e>
    30b6:	82 30       	cpi	r24, 0x02	; 2
    30b8:	91 05       	cpc	r25, r1
    30ba:	09 f4       	brne	.+2      	; 0x30be <OSTmrRemainGet+0x8c>
    30bc:	72 c0       	rjmp	.+228    	; 0x31a2 <OSTmrRemainGet+0x170>
    30be:	83 30       	cpi	r24, 0x03	; 3
    30c0:	91 05       	cpc	r25, r1
    30c2:	09 f0       	breq	.+2      	; 0x30c6 <OSTmrRemainGet+0x94>
    30c4:	85 c0       	rjmp	.+266    	; 0x31d0 <OSTmrRemainGet+0x19e>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
    30c6:	8d 81       	ldd	r24, Y+5	; 0x05
    30c8:	9e 81       	ldd	r25, Y+6	; 0x06
    30ca:	fc 01       	movw	r30, r24
    30cc:	21 85       	ldd	r18, Z+9	; 0x09
    30ce:	32 85       	ldd	r19, Z+10	; 0x0a
    30d0:	43 85       	ldd	r20, Z+11	; 0x0b
    30d2:	54 85       	ldd	r21, Z+12	; 0x0c
    30d4:	80 91 4f 08 	lds	r24, 0x084F
    30d8:	90 91 50 08 	lds	r25, 0x0850
    30dc:	a0 91 51 08 	lds	r26, 0x0851
    30e0:	b0 91 52 08 	lds	r27, 0x0852
    30e4:	79 01       	movw	r14, r18
    30e6:	8a 01       	movw	r16, r20
    30e8:	e8 1a       	sub	r14, r24
    30ea:	f9 0a       	sbc	r15, r25
    30ec:	0a 0b       	sbc	r16, r26
    30ee:	1b 0b       	sbc	r17, r27
    30f0:	d8 01       	movw	r26, r16
    30f2:	c7 01       	movw	r24, r14
    30f4:	89 83       	std	Y+1, r24	; 0x01
    30f6:	9a 83       	std	Y+2, r25	; 0x02
    30f8:	ab 83       	std	Y+3, r26	; 0x03
    30fa:	bc 83       	std	Y+4, r27	; 0x04
             OSTmr_Unlock();
    30fc:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
    3100:	8f 81       	ldd	r24, Y+7	; 0x07
    3102:	98 85       	ldd	r25, Y+8	; 0x08
    3104:	fc 01       	movw	r30, r24
    3106:	10 82       	st	Z, r1
             return (remain);
    3108:	89 81       	ldd	r24, Y+1	; 0x01
    310a:	9a 81       	ldd	r25, Y+2	; 0x02
    310c:	ab 81       	ldd	r26, Y+3	; 0x03
    310e:	bc 81       	ldd	r27, Y+4	; 0x04
    3110:	6a c0       	rjmp	.+212    	; 0x31e6 <OSTmrRemainGet+0x1b4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
    3112:	8d 81       	ldd	r24, Y+5	; 0x05
    3114:	9e 81       	ldd	r25, Y+6	; 0x06
    3116:	fc 01       	movw	r30, r24
    3118:	85 a1       	ldd	r24, Z+37	; 0x25
    311a:	88 2f       	mov	r24, r24
    311c:	90 e0       	ldi	r25, 0x00	; 0
    311e:	82 30       	cpi	r24, 0x02	; 2
    3120:	91 05       	cpc	r25, r1
    3122:	49 f5       	brne	.+82     	; 0x3176 <OSTmrRemainGet+0x144>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
    3124:	8d 81       	ldd	r24, Y+5	; 0x05
    3126:	9e 81       	ldd	r25, Y+6	; 0x06
    3128:	fc 01       	movw	r30, r24
    312a:	85 85       	ldd	r24, Z+13	; 0x0d
    312c:	96 85       	ldd	r25, Z+14	; 0x0e
    312e:	a7 85       	ldd	r26, Z+15	; 0x0f
    3130:	b0 89       	ldd	r27, Z+16	; 0x10
    3132:	00 97       	sbiw	r24, 0x00	; 0
    3134:	a1 05       	cpc	r26, r1
    3136:	b1 05       	cpc	r27, r1
    3138:	61 f4       	brne	.+24     	; 0x3152 <OSTmrRemainGet+0x120>
                          remain = ptmr->OSTmrPeriod;
    313a:	8d 81       	ldd	r24, Y+5	; 0x05
    313c:	9e 81       	ldd	r25, Y+6	; 0x06
    313e:	fc 01       	movw	r30, r24
    3140:	81 89       	ldd	r24, Z+17	; 0x11
    3142:	92 89       	ldd	r25, Z+18	; 0x12
    3144:	a3 89       	ldd	r26, Z+19	; 0x13
    3146:	b4 89       	ldd	r27, Z+20	; 0x14
    3148:	89 83       	std	Y+1, r24	; 0x01
    314a:	9a 83       	std	Y+2, r25	; 0x02
    314c:	ab 83       	std	Y+3, r26	; 0x03
    314e:	bc 83       	std	Y+4, r27	; 0x04
    3150:	0b c0       	rjmp	.+22     	; 0x3168 <OSTmrRemainGet+0x136>
                      } else {
                          remain = ptmr->OSTmrDly;
    3152:	8d 81       	ldd	r24, Y+5	; 0x05
    3154:	9e 81       	ldd	r25, Y+6	; 0x06
    3156:	fc 01       	movw	r30, r24
    3158:	85 85       	ldd	r24, Z+13	; 0x0d
    315a:	96 85       	ldd	r25, Z+14	; 0x0e
    315c:	a7 85       	ldd	r26, Z+15	; 0x0f
    315e:	b0 89       	ldd	r27, Z+16	; 0x10
    3160:	89 83       	std	Y+1, r24	; 0x01
    3162:	9a 83       	std	Y+2, r25	; 0x02
    3164:	ab 83       	std	Y+3, r26	; 0x03
    3166:	bc 83       	std	Y+4, r27	; 0x04
                      }
                      OSTmr_Unlock();
    3168:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    316c:	8f 81       	ldd	r24, Y+7	; 0x07
    316e:	98 85       	ldd	r25, Y+8	; 0x08
    3170:	fc 01       	movw	r30, r24
    3172:	10 82       	st	Z, r1
                      break;
    3174:	11 c0       	rjmp	.+34     	; 0x3198 <OSTmrRemainGet+0x166>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
    3176:	8d 81       	ldd	r24, Y+5	; 0x05
    3178:	9e 81       	ldd	r25, Y+6	; 0x06
    317a:	fc 01       	movw	r30, r24
    317c:	85 85       	ldd	r24, Z+13	; 0x0d
    317e:	96 85       	ldd	r25, Z+14	; 0x0e
    3180:	a7 85       	ldd	r26, Z+15	; 0x0f
    3182:	b0 89       	ldd	r27, Z+16	; 0x10
    3184:	89 83       	std	Y+1, r24	; 0x01
    3186:	9a 83       	std	Y+2, r25	; 0x02
    3188:	ab 83       	std	Y+3, r26	; 0x03
    318a:	bc 83       	std	Y+4, r27	; 0x04
                      OSTmr_Unlock();
    318c:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    3190:	8f 81       	ldd	r24, Y+7	; 0x07
    3192:	98 85       	ldd	r25, Y+8	; 0x08
    3194:	fc 01       	movw	r30, r24
    3196:	10 82       	st	Z, r1
                      break;
             }
             return (remain);
    3198:	89 81       	ldd	r24, Y+1	; 0x01
    319a:	9a 81       	ldd	r25, Y+2	; 0x02
    319c:	ab 81       	ldd	r26, Y+3	; 0x03
    319e:	bc 81       	ldd	r27, Y+4	; 0x04
    31a0:	22 c0       	rjmp	.+68     	; 0x31e6 <OSTmrRemainGet+0x1b4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
    31a2:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    31a6:	8f 81       	ldd	r24, Y+7	; 0x07
    31a8:	98 85       	ldd	r25, Y+8	; 0x08
    31aa:	fc 01       	movw	r30, r24
    31ac:	10 82       	st	Z, r1
             return (0);
    31ae:	80 e0       	ldi	r24, 0x00	; 0
    31b0:	90 e0       	ldi	r25, 0x00	; 0
    31b2:	a0 e0       	ldi	r26, 0x00	; 0
    31b4:	b0 e0       	ldi	r27, 0x00	; 0
    31b6:	17 c0       	rjmp	.+46     	; 0x31e6 <OSTmrRemainGet+0x1b4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
    31b8:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    31bc:	8f 81       	ldd	r24, Y+7	; 0x07
    31be:	98 85       	ldd	r25, Y+8	; 0x08
    31c0:	27 e8       	ldi	r18, 0x87	; 135
    31c2:	fc 01       	movw	r30, r24
    31c4:	20 83       	st	Z, r18
             return (0);
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	90 e0       	ldi	r25, 0x00	; 0
    31ca:	a0 e0       	ldi	r26, 0x00	; 0
    31cc:	b0 e0       	ldi	r27, 0x00	; 0
    31ce:	0b c0       	rjmp	.+22     	; 0x31e6 <OSTmrRemainGet+0x1b4>

        default:
             OSTmr_Unlock();
    31d0:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    31d4:	8f 81       	ldd	r24, Y+7	; 0x07
    31d6:	98 85       	ldd	r25, Y+8	; 0x08
    31d8:	2d e8       	ldi	r18, 0x8D	; 141
    31da:	fc 01       	movw	r30, r24
    31dc:	20 83       	st	Z, r18
             return (0);
    31de:	80 e0       	ldi	r24, 0x00	; 0
    31e0:	90 e0       	ldi	r25, 0x00	; 0
    31e2:	a0 e0       	ldi	r26, 0x00	; 0
    31e4:	b0 e0       	ldi	r27, 0x00	; 0
    }
}
    31e6:	bc 01       	movw	r22, r24
    31e8:	cd 01       	movw	r24, r26
    31ea:	28 96       	adiw	r28, 0x08	; 8
    31ec:	0f b6       	in	r0, 0x3f	; 63
    31ee:	f8 94       	cli
    31f0:	de bf       	out	0x3e, r29	; 62
    31f2:	0f be       	out	0x3f, r0	; 63
    31f4:	cd bf       	out	0x3d, r28	; 61
    31f6:	cf 91       	pop	r28
    31f8:	df 91       	pop	r29
    31fa:	1f 91       	pop	r17
    31fc:	0f 91       	pop	r16
    31fe:	ff 90       	pop	r15
    3200:	ef 90       	pop	r14
    3202:	08 95       	ret

00003204 <OSTmrStateGet>:
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	00 d0       	rcall	.+0      	; 0x320a <OSTmrStateGet+0x6>
    320a:	0f 92       	push	r0
    320c:	0f 92       	push	r0
    320e:	cd b7       	in	r28, 0x3d	; 61
    3210:	de b7       	in	r29, 0x3e	; 62
    3212:	9b 83       	std	Y+3, r25	; 0x03
    3214:	8a 83       	std	Y+2, r24	; 0x02
    3216:	7d 83       	std	Y+5, r23	; 0x05
    3218:	6c 83       	std	Y+4, r22	; 0x04
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    321a:	8a 81       	ldd	r24, Y+2	; 0x02
    321c:	9b 81       	ldd	r25, Y+3	; 0x03
    321e:	fc 01       	movw	r30, r24
    3220:	80 81       	ld	r24, Z
    3222:	84 36       	cpi	r24, 0x64	; 100
    3224:	39 f0       	breq	.+14     	; 0x3234 <OSTmrStateGet+0x30>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    3226:	8c 81       	ldd	r24, Y+4	; 0x04
    3228:	9d 81       	ldd	r25, Y+5	; 0x05
    322a:	29 e8       	ldi	r18, 0x89	; 137
    322c:	fc 01       	movw	r30, r24
    322e:	20 83       	st	Z, r18
        return (0);
    3230:	80 e0       	ldi	r24, 0x00	; 0
    3232:	26 c0       	rjmp	.+76     	; 0x3280 <OSTmrStateGet+0x7c>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    3234:	80 91 4c 08 	lds	r24, 0x084C
    3238:	88 23       	and	r24, r24
    323a:	39 f0       	breq	.+14     	; 0x324a <OSTmrStateGet+0x46>
        *perr = OS_ERR_TMR_ISR;
    323c:	8c 81       	ldd	r24, Y+4	; 0x04
    323e:	9d 81       	ldd	r25, Y+5	; 0x05
    3240:	2b e8       	ldi	r18, 0x8B	; 139
    3242:	fc 01       	movw	r30, r24
    3244:	20 83       	st	Z, r18
        return (0);
    3246:	80 e0       	ldi	r24, 0x00	; 0
    3248:	1b c0       	rjmp	.+54     	; 0x3280 <OSTmrStateGet+0x7c>
    }
    OSTmr_Lock();
    324a:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
    state = ptmr->OSTmrState;
    324e:	8a 81       	ldd	r24, Y+2	; 0x02
    3250:	9b 81       	ldd	r25, Y+3	; 0x03
    3252:	fc 01       	movw	r30, r24
    3254:	86 a1       	ldd	r24, Z+38	; 0x26
    3256:	89 83       	std	Y+1, r24	; 0x01
    switch (state) {
    3258:	89 81       	ldd	r24, Y+1	; 0x01
    325a:	88 2f       	mov	r24, r24
    325c:	90 e0       	ldi	r25, 0x00	; 0
    325e:	00 96       	adiw	r24, 0x00	; 0
    3260:	84 30       	cpi	r24, 0x04	; 4
    3262:	91 05       	cpc	r25, r1
    3264:	28 f4       	brcc	.+10     	; 0x3270 <OSTmrStateGet+0x6c>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
    3266:	8c 81       	ldd	r24, Y+4	; 0x04
    3268:	9d 81       	ldd	r25, Y+5	; 0x05
    326a:	fc 01       	movw	r30, r24
    326c:	10 82       	st	Z, r1
             break;
    326e:	05 c0       	rjmp	.+10     	; 0x327a <OSTmrStateGet+0x76>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
    3270:	8c 81       	ldd	r24, Y+4	; 0x04
    3272:	9d 81       	ldd	r25, Y+5	; 0x05
    3274:	2d e8       	ldi	r18, 0x8D	; 141
    3276:	fc 01       	movw	r30, r24
    3278:	20 83       	st	Z, r18
             break;
    }
    OSTmr_Unlock();
    327a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
    return (state);
    327e:	89 81       	ldd	r24, Y+1	; 0x01
}
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <OSTmrStart>:
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <OSTmrStart+0x6>
    3296:	0f 92       	push	r0
    3298:	cd b7       	in	r28, 0x3d	; 61
    329a:	de b7       	in	r29, 0x3e	; 62
    329c:	9a 83       	std	Y+2, r25	; 0x02
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	7c 83       	std	Y+4, r23	; 0x04
    32a2:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	9a 81       	ldd	r25, Y+2	; 0x02
    32a8:	fc 01       	movw	r30, r24
    32aa:	80 81       	ld	r24, Z
    32ac:	84 36       	cpi	r24, 0x64	; 100
    32ae:	39 f0       	breq	.+14     	; 0x32be <OSTmrStart+0x2e>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    32b0:	8b 81       	ldd	r24, Y+3	; 0x03
    32b2:	9c 81       	ldd	r25, Y+4	; 0x04
    32b4:	29 e8       	ldi	r18, 0x89	; 137
    32b6:	fc 01       	movw	r30, r24
    32b8:	20 83       	st	Z, r18
        return (OS_FALSE);
    32ba:	80 e0       	ldi	r24, 0x00	; 0
    32bc:	4e c0       	rjmp	.+156    	; 0x335a <OSTmrStart+0xca>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    32be:	80 91 4c 08 	lds	r24, 0x084C
    32c2:	88 23       	and	r24, r24
    32c4:	39 f0       	breq	.+14     	; 0x32d4 <OSTmrStart+0x44>
        *perr  = OS_ERR_TMR_ISR;
    32c6:	8b 81       	ldd	r24, Y+3	; 0x03
    32c8:	9c 81       	ldd	r25, Y+4	; 0x04
    32ca:	2b e8       	ldi	r18, 0x8B	; 139
    32cc:	fc 01       	movw	r30, r24
    32ce:	20 83       	st	Z, r18
        return (OS_FALSE);
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	43 c0       	rjmp	.+134    	; 0x335a <OSTmrStart+0xca>
    }
    OSTmr_Lock();
    32d4:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	9a 81       	ldd	r25, Y+2	; 0x02
    32dc:	fc 01       	movw	r30, r24
    32de:	86 a1       	ldd	r24, Z+38	; 0x26
    32e0:	88 2f       	mov	r24, r24
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	83 30       	cpi	r24, 0x03	; 3
    32e6:	91 05       	cpc	r25, r1
    32e8:	34 f4       	brge	.+12     	; 0x32f6 <OSTmrStart+0x66>
    32ea:	81 30       	cpi	r24, 0x01	; 1
    32ec:	91 05       	cpc	r25, r1
    32ee:	bc f4       	brge	.+46     	; 0x331e <OSTmrStart+0x8e>
    32f0:	00 97       	sbiw	r24, 0x00	; 0
    32f2:	11 f1       	breq	.+68     	; 0x3338 <OSTmrStart+0xa8>
    32f4:	2a c0       	rjmp	.+84     	; 0x334a <OSTmrStart+0xba>
    32f6:	83 30       	cpi	r24, 0x03	; 3
    32f8:	91 05       	cpc	r25, r1
    32fa:	39 f5       	brne	.+78     	; 0x334a <OSTmrStart+0xba>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
    32fc:	89 81       	ldd	r24, Y+1	; 0x01
    32fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3300:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    3304:	89 81       	ldd	r24, Y+1	; 0x01
    3306:	9a 81       	ldd	r25, Y+2	; 0x02
    3308:	60 e0       	ldi	r22, 0x00	; 0
    330a:	0e 94 1f 1c 	call	0x383e	; 0x383e <OSTmr_Link>
             OSTmr_Unlock();
    330e:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    3312:	8b 81       	ldd	r24, Y+3	; 0x03
    3314:	9c 81       	ldd	r25, Y+4	; 0x04
    3316:	fc 01       	movw	r30, r24
    3318:	10 82       	st	Z, r1
             return (OS_TRUE);
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	1e c0       	rjmp	.+60     	; 0x335a <OSTmrStart+0xca>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    331e:	89 81       	ldd	r24, Y+1	; 0x01
    3320:	9a 81       	ldd	r25, Y+2	; 0x02
    3322:	60 e0       	ldi	r22, 0x00	; 0
    3324:	0e 94 1f 1c 	call	0x383e	; 0x383e <OSTmr_Link>
             OSTmr_Unlock();
    3328:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    332c:	8b 81       	ldd	r24, Y+3	; 0x03
    332e:	9c 81       	ldd	r25, Y+4	; 0x04
    3330:	fc 01       	movw	r30, r24
    3332:	10 82       	st	Z, r1
             return (OS_TRUE);
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	11 c0       	rjmp	.+34     	; 0x335a <OSTmrStart+0xca>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
    3338:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	9c 81       	ldd	r25, Y+4	; 0x04
    3340:	27 e8       	ldi	r18, 0x87	; 135
    3342:	fc 01       	movw	r30, r24
    3344:	20 83       	st	Z, r18
             return (OS_FALSE);
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	08 c0       	rjmp	.+16     	; 0x335a <OSTmrStart+0xca>

        default:
             OSTmr_Unlock();
    334a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	9c 81       	ldd	r25, Y+4	; 0x04
    3352:	2d e8       	ldi	r18, 0x8D	; 141
    3354:	fc 01       	movw	r30, r24
    3356:	20 83       	st	Z, r18
             return (OS_FALSE);
    3358:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	08 95       	ret

00003368 <OSTmrStop>:
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
    3368:	df 93       	push	r29
    336a:	cf 93       	push	r28
    336c:	cd b7       	in	r28, 0x3d	; 61
    336e:	de b7       	in	r29, 0x3e	; 62
    3370:	29 97       	sbiw	r28, 0x09	; 9
    3372:	0f b6       	in	r0, 0x3f	; 63
    3374:	f8 94       	cli
    3376:	de bf       	out	0x3e, r29	; 62
    3378:	0f be       	out	0x3f, r0	; 63
    337a:	cd bf       	out	0x3d, r28	; 61
    337c:	9c 83       	std	Y+4, r25	; 0x04
    337e:	8b 83       	std	Y+3, r24	; 0x03
    3380:	6d 83       	std	Y+5, r22	; 0x05
    3382:	5f 83       	std	Y+7, r21	; 0x07
    3384:	4e 83       	std	Y+6, r20	; 0x06
    3386:	39 87       	std	Y+9, r19	; 0x09
    3388:	28 87       	std	Y+8, r18	; 0x08
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	9c 81       	ldd	r25, Y+4	; 0x04
    338e:	fc 01       	movw	r30, r24
    3390:	80 81       	ld	r24, Z
    3392:	84 36       	cpi	r24, 0x64	; 100
    3394:	39 f0       	breq	.+14     	; 0x33a4 <OSTmrStop+0x3c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    3396:	88 85       	ldd	r24, Y+8	; 0x08
    3398:	99 85       	ldd	r25, Y+9	; 0x09
    339a:	29 e8       	ldi	r18, 0x89	; 137
    339c:	fc 01       	movw	r30, r24
    339e:	20 83       	st	Z, r18
        return (OS_FALSE);
    33a0:	80 e0       	ldi	r24, 0x00	; 0
    33a2:	95 c0       	rjmp	.+298    	; 0x34ce <OSTmrStop+0x166>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
    33a4:	80 91 4c 08 	lds	r24, 0x084C
    33a8:	88 23       	and	r24, r24
    33aa:	39 f0       	breq	.+14     	; 0x33ba <OSTmrStop+0x52>
        *perr  = OS_ERR_TMR_ISR;
    33ac:	88 85       	ldd	r24, Y+8	; 0x08
    33ae:	99 85       	ldd	r25, Y+9	; 0x09
    33b0:	2b e8       	ldi	r18, 0x8B	; 139
    33b2:	fc 01       	movw	r30, r24
    33b4:	20 83       	st	Z, r18
        return (OS_FALSE);
    33b6:	80 e0       	ldi	r24, 0x00	; 0
    33b8:	8a c0       	rjmp	.+276    	; 0x34ce <OSTmrStop+0x166>
    }
    OSTmr_Lock();
    33ba:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    33be:	8b 81       	ldd	r24, Y+3	; 0x03
    33c0:	9c 81       	ldd	r25, Y+4	; 0x04
    33c2:	fc 01       	movw	r30, r24
    33c4:	86 a1       	ldd	r24, Z+38	; 0x26
    33c6:	88 2f       	mov	r24, r24
    33c8:	90 e0       	ldi	r25, 0x00	; 0
    33ca:	83 30       	cpi	r24, 0x03	; 3
    33cc:	91 05       	cpc	r25, r1
    33ce:	44 f4       	brge	.+16     	; 0x33e0 <OSTmrStop+0x78>
    33d0:	81 30       	cpi	r24, 0x01	; 1
    33d2:	91 05       	cpc	r25, r1
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <OSTmrStop+0x70>
    33d6:	61 c0       	rjmp	.+194    	; 0x349a <OSTmrStop+0x132>
    33d8:	00 97       	sbiw	r24, 0x00	; 0
    33da:	09 f4       	brne	.+2      	; 0x33de <OSTmrStop+0x76>
    33dc:	67 c0       	rjmp	.+206    	; 0x34ac <OSTmrStop+0x144>
    33de:	6f c0       	rjmp	.+222    	; 0x34be <OSTmrStop+0x156>
    33e0:	83 30       	cpi	r24, 0x03	; 3
    33e2:	91 05       	cpc	r25, r1
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <OSTmrStop+0x80>
    33e6:	6b c0       	rjmp	.+214    	; 0x34be <OSTmrStop+0x156>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
    33e8:	8b 81       	ldd	r24, Y+3	; 0x03
    33ea:	9c 81       	ldd	r25, Y+4	; 0x04
    33ec:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
    33f0:	88 85       	ldd	r24, Y+8	; 0x08
    33f2:	99 85       	ldd	r25, Y+9	; 0x09
    33f4:	fc 01       	movw	r30, r24
    33f6:	10 82       	st	Z, r1
             switch (opt) {
    33f8:	8d 81       	ldd	r24, Y+5	; 0x05
    33fa:	88 2f       	mov	r24, r24
    33fc:	90 e0       	ldi	r25, 0x00	; 0
    33fe:	83 30       	cpi	r24, 0x03	; 3
    3400:	91 05       	cpc	r25, r1
    3402:	39 f0       	breq	.+14     	; 0x3412 <OSTmrStop+0xaa>
    3404:	84 30       	cpi	r24, 0x04	; 4
    3406:	91 05       	cpc	r25, r1
    3408:	11 f1       	breq	.+68     	; 0x344e <OSTmrStop+0xe6>
    340a:	00 97       	sbiw	r24, 0x00	; 0
    340c:	09 f4       	brne	.+2      	; 0x3410 <OSTmrStop+0xa8>
    340e:	40 c0       	rjmp	.+128    	; 0x3490 <OSTmrStop+0x128>
    3410:	39 c0       	rjmp	.+114    	; 0x3484 <OSTmrStop+0x11c>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    3412:	8b 81       	ldd	r24, Y+3	; 0x03
    3414:	9c 81       	ldd	r25, Y+4	; 0x04
    3416:	fc 01       	movw	r30, r24
    3418:	81 81       	ldd	r24, Z+1	; 0x01
    341a:	92 81       	ldd	r25, Z+2	; 0x02
    341c:	9a 83       	std	Y+2, r25	; 0x02
    341e:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	9a 81       	ldd	r25, Y+2	; 0x02
    3424:	00 97       	sbiw	r24, 0x00	; 0
    3426:	69 f0       	breq	.+26     	; 0x3442 <OSTmrStop+0xda>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	9c 81       	ldd	r25, Y+4	; 0x04
    342c:	fc 01       	movw	r30, r24
    342e:	43 81       	ldd	r20, Z+3	; 0x03
    3430:	54 81       	ldd	r21, Z+4	; 0x04
    3432:	8b 81       	ldd	r24, Y+3	; 0x03
    3434:	9c 81       	ldd	r25, Y+4	; 0x04
    3436:	29 81       	ldd	r18, Y+1	; 0x01
    3438:	3a 81       	ldd	r19, Y+2	; 0x02
    343a:	ba 01       	movw	r22, r20
    343c:	f9 01       	movw	r30, r18
    343e:	19 95       	eicall
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    3440:	28 c0       	rjmp	.+80     	; 0x3492 <OSTmrStop+0x12a>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    3442:	88 85       	ldd	r24, Y+8	; 0x08
    3444:	99 85       	ldd	r25, Y+9	; 0x09
    3446:	2f e8       	ldi	r18, 0x8F	; 143
    3448:	fc 01       	movw	r30, r24
    344a:	20 83       	st	Z, r18
                      }
                      break;
    344c:	22 c0       	rjmp	.+68     	; 0x3492 <OSTmrStop+0x12a>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    344e:	8b 81       	ldd	r24, Y+3	; 0x03
    3450:	9c 81       	ldd	r25, Y+4	; 0x04
    3452:	fc 01       	movw	r30, r24
    3454:	81 81       	ldd	r24, Z+1	; 0x01
    3456:	92 81       	ldd	r25, Z+2	; 0x02
    3458:	9a 83       	std	Y+2, r25	; 0x02
    345a:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    345c:	89 81       	ldd	r24, Y+1	; 0x01
    345e:	9a 81       	ldd	r25, Y+2	; 0x02
    3460:	00 97       	sbiw	r24, 0x00	; 0
    3462:	51 f0       	breq	.+20     	; 0x3478 <OSTmrStop+0x110>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
    3464:	8b 81       	ldd	r24, Y+3	; 0x03
    3466:	9c 81       	ldd	r25, Y+4	; 0x04
    3468:	4e 81       	ldd	r20, Y+6	; 0x06
    346a:	5f 81       	ldd	r21, Y+7	; 0x07
    346c:	29 81       	ldd	r18, Y+1	; 0x01
    346e:	3a 81       	ldd	r19, Y+2	; 0x02
    3470:	ba 01       	movw	r22, r20
    3472:	f9 01       	movw	r30, r18
    3474:	19 95       	eicall
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    3476:	0d c0       	rjmp	.+26     	; 0x3492 <OSTmrStop+0x12a>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    3478:	88 85       	ldd	r24, Y+8	; 0x08
    347a:	99 85       	ldd	r25, Y+9	; 0x09
    347c:	2f e8       	ldi	r18, 0x8F	; 143
    347e:	fc 01       	movw	r30, r24
    3480:	20 83       	st	Z, r18
                      }
                      break;
    3482:	07 c0       	rjmp	.+14     	; 0x3492 <OSTmrStop+0x12a>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
    3484:	88 85       	ldd	r24, Y+8	; 0x08
    3486:	99 85       	ldd	r25, Y+9	; 0x09
    3488:	24 e8       	ldi	r18, 0x84	; 132
    348a:	fc 01       	movw	r30, r24
    348c:	20 83       	st	Z, r18
    348e:	01 c0       	rjmp	.+2      	; 0x3492 <OSTmrStop+0x12a>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
    3490:	00 00       	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
    3492:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             return (OS_TRUE);
    3496:	81 e0       	ldi	r24, 0x01	; 1
    3498:	1a c0       	rjmp	.+52     	; 0x34ce <OSTmrStop+0x166>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
    349a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
    349e:	88 85       	ldd	r24, Y+8	; 0x08
    34a0:	99 85       	ldd	r25, Y+9	; 0x09
    34a2:	2e e8       	ldi	r18, 0x8E	; 142
    34a4:	fc 01       	movw	r30, r24
    34a6:	20 83       	st	Z, r18
             return (OS_TRUE);
    34a8:	81 e0       	ldi	r24, 0x01	; 1
    34aa:	11 c0       	rjmp	.+34     	; 0x34ce <OSTmrStop+0x166>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
    34ac:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    34b0:	88 85       	ldd	r24, Y+8	; 0x08
    34b2:	99 85       	ldd	r25, Y+9	; 0x09
    34b4:	27 e8       	ldi	r18, 0x87	; 135
    34b6:	fc 01       	movw	r30, r24
    34b8:	20 83       	st	Z, r18
             return (OS_FALSE);
    34ba:	80 e0       	ldi	r24, 0x00	; 0
    34bc:	08 c0       	rjmp	.+16     	; 0x34ce <OSTmrStop+0x166>

        default:
             OSTmr_Unlock();
    34be:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    34c2:	88 85       	ldd	r24, Y+8	; 0x08
    34c4:	99 85       	ldd	r25, Y+9	; 0x09
    34c6:	2d e8       	ldi	r18, 0x8D	; 141
    34c8:	fc 01       	movw	r30, r24
    34ca:	20 83       	st	Z, r18
             return (OS_FALSE);
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    34ce:	29 96       	adiw	r28, 0x09	; 9
    34d0:	0f b6       	in	r0, 0x3f	; 63
    34d2:	f8 94       	cli
    34d4:	de bf       	out	0x3e, r29	; 62
    34d6:	0f be       	out	0x3f, r0	; 63
    34d8:	cd bf       	out	0x3d, r28	; 61
    34da:	cf 91       	pop	r28
    34dc:	df 91       	pop	r29
    34de:	08 95       	ret

000034e0 <OSTmrSignal>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
    34e0:	df 93       	push	r29
    34e2:	cf 93       	push	r28
    34e4:	0f 92       	push	r0
    34e6:	cd b7       	in	r28, 0x3d	; 61
    34e8:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
    34ea:	80 91 10 05 	lds	r24, 0x0510
    34ee:	90 91 11 05 	lds	r25, 0x0511
    34f2:	0e 94 21 10 	call	0x2042	; 0x2042 <OSSemPost>
    34f6:	89 83       	std	Y+1, r24	; 0x01
    return (err);
    34f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    34fa:	0f 90       	pop	r0
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret

00003502 <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
    3502:	df 93       	push	r29
    3504:	cf 93       	push	r28
    3506:	0f 92       	push	r0
    3508:	0f 92       	push	r0
    350a:	cd b7       	in	r28, 0x3d	; 61
    350c:	de b7       	in	r29, 0x3e	; 62
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
    350e:	80 91 ed 04 	lds	r24, 0x04ED
    3512:	90 91 ee 04 	lds	r25, 0x04EE
    3516:	00 97       	sbiw	r24, 0x00	; 0
    3518:	19 f4       	brne	.+6      	; 0x3520 <OSTmr_Alloc+0x1e>
        return ((OS_TMR *)0);
    351a:	80 e0       	ldi	r24, 0x00	; 0
    351c:	90 e0       	ldi	r25, 0x00	; 0
    351e:	2d c0       	rjmp	.+90     	; 0x357a <OSTmr_Alloc+0x78>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    3520:	80 91 ed 04 	lds	r24, 0x04ED
    3524:	90 91 ee 04 	lds	r25, 0x04EE
    3528:	9a 83       	std	Y+2, r25	; 0x02
    352a:	89 83       	std	Y+1, r24	; 0x01
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    352c:	89 81       	ldd	r24, Y+1	; 0x01
    352e:	9a 81       	ldd	r25, Y+2	; 0x02
    3530:	fc 01       	movw	r30, r24
    3532:	85 81       	ldd	r24, Z+5	; 0x05
    3534:	96 81       	ldd	r25, Z+6	; 0x06
    3536:	90 93 ee 04 	sts	0x04EE, r25
    353a:	80 93 ed 04 	sts	0x04ED, r24
    ptmr->OSTmrNext = (OS_TCB *)0;
    353e:	89 81       	ldd	r24, Y+1	; 0x01
    3540:	9a 81       	ldd	r25, Y+2	; 0x02
    3542:	fc 01       	movw	r30, r24
    3544:	16 82       	std	Z+6, r1	; 0x06
    3546:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev = (OS_TCB *)0;
    3548:	89 81       	ldd	r24, Y+1	; 0x01
    354a:	9a 81       	ldd	r25, Y+2	; 0x02
    354c:	fc 01       	movw	r30, r24
    354e:	10 86       	std	Z+8, r1	; 0x08
    3550:	17 82       	std	Z+7, r1	; 0x07
    OSTmrUsed++;
    3552:	80 91 17 05 	lds	r24, 0x0517
    3556:	90 91 18 05 	lds	r25, 0x0518
    355a:	01 96       	adiw	r24, 0x01	; 1
    355c:	90 93 18 05 	sts	0x0518, r25
    3560:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree--;
    3564:	80 91 91 07 	lds	r24, 0x0791
    3568:	90 91 92 07 	lds	r25, 0x0792
    356c:	01 97       	sbiw	r24, 0x01	; 1
    356e:	90 93 92 07 	sts	0x0792, r25
    3572:	80 93 91 07 	sts	0x0791, r24
    return (ptmr);
    3576:	89 81       	ldd	r24, Y+1	; 0x01
    3578:	9a 81       	ldd	r25, Y+2	; 0x02
}
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	08 95       	ret

00003584 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    3584:	df 93       	push	r29
    3586:	cf 93       	push	r28
    3588:	0f 92       	push	r0
    358a:	0f 92       	push	r0
    358c:	cd b7       	in	r28, 0x3d	; 61
    358e:	de b7       	in	r29, 0x3e	; 62
    3590:	9a 83       	std	Y+2, r25	; 0x02
    3592:	89 83       	std	Y+1, r24	; 0x01
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
    3594:	89 81       	ldd	r24, Y+1	; 0x01
    3596:	9a 81       	ldd	r25, Y+2	; 0x02
    3598:	fc 01       	movw	r30, r24
    359a:	16 a2       	std	Z+38, r1	; 0x26
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
    359c:	89 81       	ldd	r24, Y+1	; 0x01
    359e:	9a 81       	ldd	r25, Y+2	; 0x02
    35a0:	fc 01       	movw	r30, r24
    35a2:	15 a2       	std	Z+37, r1	; 0x25
    ptmr->OSTmrPeriod      = 0;
    35a4:	89 81       	ldd	r24, Y+1	; 0x01
    35a6:	9a 81       	ldd	r25, Y+2	; 0x02
    35a8:	fc 01       	movw	r30, r24
    35aa:	11 8a       	std	Z+17, r1	; 0x11
    35ac:	12 8a       	std	Z+18, r1	; 0x12
    35ae:	13 8a       	std	Z+19, r1	; 0x13
    35b0:	14 8a       	std	Z+20, r1	; 0x14
    ptmr->OSTmrMatch       = 0;
    35b2:	89 81       	ldd	r24, Y+1	; 0x01
    35b4:	9a 81       	ldd	r25, Y+2	; 0x02
    35b6:	fc 01       	movw	r30, r24
    35b8:	11 86       	std	Z+9, r1	; 0x09
    35ba:	12 86       	std	Z+10, r1	; 0x0a
    35bc:	13 86       	std	Z+11, r1	; 0x0b
    35be:	14 86       	std	Z+12, r1	; 0x0c
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    35c0:	89 81       	ldd	r24, Y+1	; 0x01
    35c2:	9a 81       	ldd	r25, Y+2	; 0x02
    35c4:	fc 01       	movw	r30, r24
    35c6:	12 82       	std	Z+2, r1	; 0x02
    35c8:	11 82       	std	Z+1, r1	; 0x01
    ptmr->OSTmrCallbackArg = (void *)0;
    35ca:	89 81       	ldd	r24, Y+1	; 0x01
    35cc:	9a 81       	ldd	r25, Y+2	; 0x02
    35ce:	fc 01       	movw	r30, r24
    35d0:	14 82       	std	Z+4, r1	; 0x04
    35d2:	13 82       	std	Z+3, r1	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    35d4:	89 81       	ldd	r24, Y+1	; 0x01
    35d6:	9a 81       	ldd	r25, Y+2	; 0x02
    35d8:	2f e3       	ldi	r18, 0x3F	; 63
    35da:	fc 01       	movw	r30, r24
    35dc:	25 8b       	std	Z+21, r18	; 0x15
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
    35de:	89 81       	ldd	r24, Y+1	; 0x01
    35e0:	9a 81       	ldd	r25, Y+2	; 0x02
    35e2:	fc 01       	movw	r30, r24
    35e4:	16 8a       	std	Z+22, r1	; 0x16
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    35e6:	89 81       	ldd	r24, Y+1	; 0x01
    35e8:	9a 81       	ldd	r25, Y+2	; 0x02
    35ea:	fc 01       	movw	r30, r24
    35ec:	10 86       	std	Z+8, r1	; 0x08
    35ee:	17 82       	std	Z+7, r1	; 0x07
    ptmr->OSTmrNext        = OSTmrFreeList;
    35f0:	20 91 ed 04 	lds	r18, 0x04ED
    35f4:	30 91 ee 04 	lds	r19, 0x04EE
    35f8:	89 81       	ldd	r24, Y+1	; 0x01
    35fa:	9a 81       	ldd	r25, Y+2	; 0x02
    35fc:	fc 01       	movw	r30, r24
    35fe:	36 83       	std	Z+6, r19	; 0x06
    3600:	25 83       	std	Z+5, r18	; 0x05
    OSTmrFreeList          = ptmr;
    3602:	89 81       	ldd	r24, Y+1	; 0x01
    3604:	9a 81       	ldd	r25, Y+2	; 0x02
    3606:	90 93 ee 04 	sts	0x04EE, r25
    360a:	80 93 ed 04 	sts	0x04ED, r24

    OSTmrUsed--;                                       /* Update timer object statistics                              */
    360e:	80 91 17 05 	lds	r24, 0x0517
    3612:	90 91 18 05 	lds	r25, 0x0518
    3616:	01 97       	sbiw	r24, 0x01	; 1
    3618:	90 93 18 05 	sts	0x0518, r25
    361c:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree++;
    3620:	80 91 91 07 	lds	r24, 0x0791
    3624:	90 91 92 07 	lds	r25, 0x0792
    3628:	01 96       	adiw	r24, 0x01	; 1
    362a:	90 93 92 07 	sts	0x0792, r25
    362e:	80 93 91 07 	sts	0x0791, r24
}
    3632:	0f 90       	pop	r0
    3634:	0f 90       	pop	r0
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <OSTmr_Init>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
    3644:	27 97       	sbiw	r28, 0x07	; 7
    3646:	0f b6       	in	r0, 0x3f	; 63
    3648:	f8 94       	cli
    364a:	de bf       	out	0x3e, r29	; 62
    364c:	0f be       	out	0x3f, r0	; 63
    364e:	cd bf       	out	0x3d, r28	; 61
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    3650:	8a e1       	ldi	r24, 0x1A	; 26
    3652:	95 e0       	ldi	r25, 0x05	; 5
    3654:	60 e7       	ldi	r22, 0x70	; 112
    3656:	72 e0       	ldi	r23, 0x02	; 2
    3658:	0e 94 ff 09 	call	0x13fe	; 0x13fe <OS_MemClr>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
    365c:	8f ee       	ldi	r24, 0xEF	; 239
    365e:	94 e0       	ldi	r25, 0x04	; 4
    3660:	60 e2       	ldi	r22, 0x20	; 32
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	0e 94 ff 09 	call	0x13fe	; 0x13fe <OS_MemClr>

    ptmr1 = &OSTmrTbl[0];
    3668:	8a e1       	ldi	r24, 0x1A	; 26
    366a:	95 e0       	ldi	r25, 0x05	; 5
    366c:	9c 83       	std	Y+4, r25	; 0x04
    366e:	8b 83       	std	Y+3, r24	; 0x03
    ptmr2 = &OSTmrTbl[1];
    3670:	81 e4       	ldi	r24, 0x41	; 65
    3672:	95 e0       	ldi	r25, 0x05	; 5
    3674:	9a 83       	std	Y+2, r25	; 0x02
    3676:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    3678:	1e 82       	std	Y+6, r1	; 0x06
    367a:	1d 82       	std	Y+5, r1	; 0x05
    367c:	28 c0       	rjmp	.+80     	; 0x36ce <OSTmr_Init+0x92>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
    367e:	8b 81       	ldd	r24, Y+3	; 0x03
    3680:	9c 81       	ldd	r25, Y+4	; 0x04
    3682:	24 e6       	ldi	r18, 0x64	; 100
    3684:	fc 01       	movw	r30, r24
    3686:	20 83       	st	Z, r18
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
    3688:	8b 81       	ldd	r24, Y+3	; 0x03
    368a:	9c 81       	ldd	r25, Y+4	; 0x04
    368c:	fc 01       	movw	r30, r24
    368e:	16 a2       	std	Z+38, r1	; 0x26
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
    3690:	8b 81       	ldd	r24, Y+3	; 0x03
    3692:	9c 81       	ldd	r25, Y+4	; 0x04
    3694:	29 81       	ldd	r18, Y+1	; 0x01
    3696:	3a 81       	ldd	r19, Y+2	; 0x02
    3698:	fc 01       	movw	r30, r24
    369a:	36 83       	std	Z+6, r19	; 0x06
    369c:	25 83       	std	Z+5, r18	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
    369e:	8b 81       	ldd	r24, Y+3	; 0x03
    36a0:	9c 81       	ldd	r25, Y+4	; 0x04
    36a2:	2f e3       	ldi	r18, 0x3F	; 63
    36a4:	fc 01       	movw	r30, r24
    36a6:	25 8b       	std	Z+21, r18	; 0x15
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    36a8:	8b 81       	ldd	r24, Y+3	; 0x03
    36aa:	9c 81       	ldd	r25, Y+4	; 0x04
    36ac:	fc 01       	movw	r30, r24
    36ae:	16 8a       	std	Z+22, r1	; 0x16
#endif
        ptmr1++;
    36b0:	8b 81       	ldd	r24, Y+3	; 0x03
    36b2:	9c 81       	ldd	r25, Y+4	; 0x04
    36b4:	87 96       	adiw	r24, 0x27	; 39
    36b6:	9c 83       	std	Y+4, r25	; 0x04
    36b8:	8b 83       	std	Y+3, r24	; 0x03
        ptmr2++;
    36ba:	89 81       	ldd	r24, Y+1	; 0x01
    36bc:	9a 81       	ldd	r25, Y+2	; 0x02
    36be:	87 96       	adiw	r24, 0x27	; 39
    36c0:	9a 83       	std	Y+2, r25	; 0x02
    36c2:	89 83       	std	Y+1, r24	; 0x01
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    36c4:	8d 81       	ldd	r24, Y+5	; 0x05
    36c6:	9e 81       	ldd	r25, Y+6	; 0x06
    36c8:	01 96       	adiw	r24, 0x01	; 1
    36ca:	9e 83       	std	Y+6, r25	; 0x06
    36cc:	8d 83       	std	Y+5, r24	; 0x05
    36ce:	8d 81       	ldd	r24, Y+5	; 0x05
    36d0:	9e 81       	ldd	r25, Y+6	; 0x06
    36d2:	8f 30       	cpi	r24, 0x0F	; 15
    36d4:	91 05       	cpc	r25, r1
    36d6:	98 f2       	brcs	.-90     	; 0x367e <OSTmr_Init+0x42>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    36d8:	8b 81       	ldd	r24, Y+3	; 0x03
    36da:	9c 81       	ldd	r25, Y+4	; 0x04
    36dc:	24 e6       	ldi	r18, 0x64	; 100
    36de:	fc 01       	movw	r30, r24
    36e0:	20 83       	st	Z, r18
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    36e2:	8b 81       	ldd	r24, Y+3	; 0x03
    36e4:	9c 81       	ldd	r25, Y+4	; 0x04
    36e6:	fc 01       	movw	r30, r24
    36e8:	16 a2       	std	Z+38, r1	; 0x26
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
    36ea:	8b 81       	ldd	r24, Y+3	; 0x03
    36ec:	9c 81       	ldd	r25, Y+4	; 0x04
    36ee:	fc 01       	movw	r30, r24
    36f0:	16 82       	std	Z+6, r1	; 0x06
    36f2:	15 82       	std	Z+5, r1	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
    36f4:	8b 81       	ldd	r24, Y+3	; 0x03
    36f6:	9c 81       	ldd	r25, Y+4	; 0x04
    36f8:	2f e3       	ldi	r18, 0x3F	; 63
    36fa:	fc 01       	movw	r30, r24
    36fc:	25 8b       	std	Z+21, r18	; 0x15
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    36fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3700:	9c 81       	ldd	r25, Y+4	; 0x04
    3702:	fc 01       	movw	r30, r24
    3704:	16 8a       	std	Z+22, r1	; 0x16
#endif
    OSTmrTime           = 0;
    3706:	10 92 4f 08 	sts	0x084F, r1
    370a:	10 92 50 08 	sts	0x0850, r1
    370e:	10 92 51 08 	sts	0x0851, r1
    3712:	10 92 52 08 	sts	0x0852, r1
    OSTmrUsed           = 0;
    3716:	10 92 18 05 	sts	0x0518, r1
    371a:	10 92 17 05 	sts	0x0517, r1
    OSTmrFree           = OS_TMR_CFG_MAX;
    371e:	80 e1       	ldi	r24, 0x10	; 16
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	90 93 92 07 	sts	0x0792, r25
    3726:	80 93 91 07 	sts	0x0791, r24
    OSTmrFreeList       = &OSTmrTbl[0];
    372a:	8a e1       	ldi	r24, 0x1A	; 26
    372c:	95 e0       	ldi	r25, 0x05	; 5
    372e:	90 93 ee 04 	sts	0x04EE, r25
    3732:	80 93 ed 04 	sts	0x04ED, r24
    OSTmrSem            = OSSemCreate(1);
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <OSSemCreate>
    373e:	90 93 58 08 	sts	0x0858, r25
    3742:	80 93 57 08 	sts	0x0857, r24
    OSTmrSemSignal      = OSSemCreate(0);
    3746:	80 e0       	ldi	r24, 0x00	; 0
    3748:	90 e0       	ldi	r25, 0x00	; 0
    374a:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <OSSemCreate>
    374e:	90 93 11 05 	sts	0x0511, r25
    3752:	80 93 10 05 	sts	0x0510, r24

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
    3756:	80 91 57 08 	lds	r24, 0x0857
    375a:	90 91 58 08 	lds	r25, 0x0858
    375e:	4e e7       	ldi	r20, 0x7E	; 126
    3760:	53 e0       	ldi	r21, 0x03	; 3
    3762:	9e 01       	movw	r18, r28
    3764:	29 5f       	subi	r18, 0xF9	; 249
    3766:	3f 4f       	sbci	r19, 0xFF	; 255
    3768:	ba 01       	movw	r22, r20
    376a:	a9 01       	movw	r20, r18
    376c:	0e 94 f7 04 	call	0x9ee	; 0x9ee <OSEventNameSet>

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
    3770:	80 91 10 05 	lds	r24, 0x0510
    3774:	90 91 11 05 	lds	r25, 0x0511
    3778:	49 e8       	ldi	r20, 0x89	; 137
    377a:	53 e0       	ldi	r21, 0x03	; 3
    377c:	9e 01       	movw	r18, r28
    377e:	29 5f       	subi	r18, 0xF9	; 249
    3780:	3f 4f       	sbci	r19, 0xFF	; 255
    3782:	ba 01       	movw	r22, r20
    3784:	a9 01       	movw	r20, r18
    3786:	0e 94 f7 04 	call	0x9ee	; 0x9ee <OSEventNameSet>
#endif
#endif

    OSTmr_InitTask();
    378a:	0e 94 d0 1b 	call	0x37a0	; 0x37a0 <OSTmr_InitTask>
}
    378e:	27 96       	adiw	r28, 0x07	; 7
    3790:	0f b6       	in	r0, 0x3f	; 63
    3792:	f8 94       	cli
    3794:	de bf       	out	0x3e, r29	; 62
    3796:	0f be       	out	0x3f, r0	; 63
    3798:	cd bf       	out	0x3d, r28	; 61
    379a:	cf 91       	pop	r28
    379c:	df 91       	pop	r29
    379e:	08 95       	ret

000037a0 <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
    37a0:	8f 92       	push	r8
    37a2:	9f 92       	push	r9
    37a4:	af 92       	push	r10
    37a6:	bf 92       	push	r11
    37a8:	cf 92       	push	r12
    37aa:	df 92       	push	r13
    37ac:	ef 92       	push	r14
    37ae:	ff 92       	push	r15
    37b0:	0f 93       	push	r16
    37b2:	1f 93       	push	r17
    37b4:	df 93       	push	r29
    37b6:	cf 93       	push	r28
    37b8:	0f 92       	push	r0
    37ba:	cd b7       	in	r28, 0x3d	; 61
    37bc:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
    37be:	0f 92       	push	r0
    37c0:	0f 92       	push	r0
    37c2:	4d b7       	in	r20, 0x3d	; 61
    37c4:	5e b7       	in	r21, 0x3e	; 62
    37c6:	4f 5f       	subi	r20, 0xFF	; 255
    37c8:	5f 4f       	sbci	r21, 0xFF	; 255
    37ca:	82 ea       	ldi	r24, 0xA2	; 162
    37cc:	9d e1       	ldi	r25, 0x1D	; 29
    37ce:	29 e4       	ldi	r18, 0x49	; 73
    37d0:	38 e0       	ldi	r19, 0x08	; 8
    37d2:	eb e9       	ldi	r30, 0x9B	; 155
    37d4:	f7 e0       	ldi	r31, 0x07	; 7
    37d6:	63 e0       	ldi	r22, 0x03	; 3
    37d8:	70 e0       	ldi	r23, 0x00	; 0
    37da:	da 01       	movw	r26, r20
    37dc:	6d 93       	st	X+, r22
    37de:	7c 93       	st	X, r23
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	70 e0       	ldi	r23, 0x00	; 0
    37e4:	a9 01       	movw	r20, r18
    37e6:	24 e0       	ldi	r18, 0x04	; 4
    37e8:	0d ef       	ldi	r16, 0xFD	; 253
    37ea:	1f ef       	ldi	r17, 0xFF	; 255
    37ec:	7f 01       	movw	r14, r30
    37ee:	0f 2e       	mov	r0, r31
    37f0:	ff ea       	ldi	r31, 0xAF	; 175
    37f2:	af 2e       	mov	r10, r31
    37f4:	f0 e0       	ldi	r31, 0x00	; 0
    37f6:	bf 2e       	mov	r11, r31
    37f8:	f0 e0       	ldi	r31, 0x00	; 0
    37fa:	cf 2e       	mov	r12, r31
    37fc:	f0 e0       	ldi	r31, 0x00	; 0
    37fe:	df 2e       	mov	r13, r31
    3800:	f0 2d       	mov	r31, r0
    3802:	88 24       	eor	r8, r8
    3804:	99 24       	eor	r9, r9
    3806:	0e 94 b2 11 	call	0x2364	; 0x2364 <OSTaskCreateExt>
    380a:	0f 90       	pop	r0
    380c:	0f 90       	pop	r0
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
    380e:	23 e9       	ldi	r18, 0x93	; 147
    3810:	33 e0       	ldi	r19, 0x03	; 3
    3812:	84 e0       	ldi	r24, 0x04	; 4
    3814:	b9 01       	movw	r22, r18
    3816:	9e 01       	movw	r18, r28
    3818:	2f 5f       	subi	r18, 0xFF	; 255
    381a:	3f 4f       	sbci	r19, 0xFF	; 255
    381c:	a9 01       	movw	r20, r18
    381e:	0e 94 c2 12 	call	0x2584	; 0x2584 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
    3822:	0f 90       	pop	r0
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	1f 91       	pop	r17
    382a:	0f 91       	pop	r16
    382c:	ff 90       	pop	r15
    382e:	ef 90       	pop	r14
    3830:	df 90       	pop	r13
    3832:	cf 90       	pop	r12
    3834:	bf 90       	pop	r11
    3836:	af 90       	pop	r10
    3838:	9f 90       	pop	r9
    383a:	8f 90       	pop	r8
    383c:	08 95       	ret

0000383e <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
    383e:	df 93       	push	r29
    3840:	cf 93       	push	r28
    3842:	cd b7       	in	r28, 0x3d	; 61
    3844:	de b7       	in	r29, 0x3e	; 62
    3846:	29 97       	sbiw	r28, 0x09	; 9
    3848:	0f b6       	in	r0, 0x3f	; 63
    384a:	f8 94       	cli
    384c:	de bf       	out	0x3e, r29	; 62
    384e:	0f be       	out	0x3f, r0	; 63
    3850:	cd bf       	out	0x3d, r28	; 61
    3852:	98 87       	std	Y+8, r25	; 0x08
    3854:	8f 83       	std	Y+7, r24	; 0x07
    3856:	69 87       	std	Y+9, r22	; 0x09
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
    3858:	8f 81       	ldd	r24, Y+7	; 0x07
    385a:	98 85       	ldd	r25, Y+8	; 0x08
    385c:	23 e0       	ldi	r18, 0x03	; 3
    385e:	fc 01       	movw	r30, r24
    3860:	26 a3       	std	Z+38, r18	; 0x26
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
    3862:	89 85       	ldd	r24, Y+9	; 0x09
    3864:	81 30       	cpi	r24, 0x01	; 1
    3866:	d9 f4       	brne	.+54     	; 0x389e <OSTmr_Link+0x60>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    3868:	8f 81       	ldd	r24, Y+7	; 0x07
    386a:	98 85       	ldd	r25, Y+8	; 0x08
    386c:	fc 01       	movw	r30, r24
    386e:	21 89       	ldd	r18, Z+17	; 0x11
    3870:	32 89       	ldd	r19, Z+18	; 0x12
    3872:	43 89       	ldd	r20, Z+19	; 0x13
    3874:	54 89       	ldd	r21, Z+20	; 0x14
    3876:	80 91 4f 08 	lds	r24, 0x084F
    387a:	90 91 50 08 	lds	r25, 0x0850
    387e:	a0 91 51 08 	lds	r26, 0x0851
    3882:	b0 91 52 08 	lds	r27, 0x0852
    3886:	82 0f       	add	r24, r18
    3888:	93 1f       	adc	r25, r19
    388a:	a4 1f       	adc	r26, r20
    388c:	b5 1f       	adc	r27, r21
    388e:	2f 81       	ldd	r18, Y+7	; 0x07
    3890:	38 85       	ldd	r19, Y+8	; 0x08
    3892:	f9 01       	movw	r30, r18
    3894:	81 87       	std	Z+9, r24	; 0x09
    3896:	92 87       	std	Z+10, r25	; 0x0a
    3898:	a3 87       	std	Z+11, r26	; 0x0b
    389a:	b4 87       	std	Z+12, r27	; 0x0c
    389c:	40 c0       	rjmp	.+128    	; 0x391e <OSTmr_Link+0xe0>
    } else {
        if (ptmr->OSTmrDly == 0) {
    389e:	8f 81       	ldd	r24, Y+7	; 0x07
    38a0:	98 85       	ldd	r25, Y+8	; 0x08
    38a2:	fc 01       	movw	r30, r24
    38a4:	85 85       	ldd	r24, Z+13	; 0x0d
    38a6:	96 85       	ldd	r25, Z+14	; 0x0e
    38a8:	a7 85       	ldd	r26, Z+15	; 0x0f
    38aa:	b0 89       	ldd	r27, Z+16	; 0x10
    38ac:	00 97       	sbiw	r24, 0x00	; 0
    38ae:	a1 05       	cpc	r26, r1
    38b0:	b1 05       	cpc	r27, r1
    38b2:	d9 f4       	brne	.+54     	; 0x38ea <OSTmr_Link+0xac>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    38b4:	8f 81       	ldd	r24, Y+7	; 0x07
    38b6:	98 85       	ldd	r25, Y+8	; 0x08
    38b8:	fc 01       	movw	r30, r24
    38ba:	21 89       	ldd	r18, Z+17	; 0x11
    38bc:	32 89       	ldd	r19, Z+18	; 0x12
    38be:	43 89       	ldd	r20, Z+19	; 0x13
    38c0:	54 89       	ldd	r21, Z+20	; 0x14
    38c2:	80 91 4f 08 	lds	r24, 0x084F
    38c6:	90 91 50 08 	lds	r25, 0x0850
    38ca:	a0 91 51 08 	lds	r26, 0x0851
    38ce:	b0 91 52 08 	lds	r27, 0x0852
    38d2:	82 0f       	add	r24, r18
    38d4:	93 1f       	adc	r25, r19
    38d6:	a4 1f       	adc	r26, r20
    38d8:	b5 1f       	adc	r27, r21
    38da:	2f 81       	ldd	r18, Y+7	; 0x07
    38dc:	38 85       	ldd	r19, Y+8	; 0x08
    38de:	f9 01       	movw	r30, r18
    38e0:	81 87       	std	Z+9, r24	; 0x09
    38e2:	92 87       	std	Z+10, r25	; 0x0a
    38e4:	a3 87       	std	Z+11, r26	; 0x0b
    38e6:	b4 87       	std	Z+12, r27	; 0x0c
    38e8:	1a c0       	rjmp	.+52     	; 0x391e <OSTmr_Link+0xe0>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
    38ea:	8f 81       	ldd	r24, Y+7	; 0x07
    38ec:	98 85       	ldd	r25, Y+8	; 0x08
    38ee:	fc 01       	movw	r30, r24
    38f0:	25 85       	ldd	r18, Z+13	; 0x0d
    38f2:	36 85       	ldd	r19, Z+14	; 0x0e
    38f4:	47 85       	ldd	r20, Z+15	; 0x0f
    38f6:	50 89       	ldd	r21, Z+16	; 0x10
    38f8:	80 91 4f 08 	lds	r24, 0x084F
    38fc:	90 91 50 08 	lds	r25, 0x0850
    3900:	a0 91 51 08 	lds	r26, 0x0851
    3904:	b0 91 52 08 	lds	r27, 0x0852
    3908:	82 0f       	add	r24, r18
    390a:	93 1f       	adc	r25, r19
    390c:	a4 1f       	adc	r26, r20
    390e:	b5 1f       	adc	r27, r21
    3910:	2f 81       	ldd	r18, Y+7	; 0x07
    3912:	38 85       	ldd	r19, Y+8	; 0x08
    3914:	f9 01       	movw	r30, r18
    3916:	81 87       	std	Z+9, r24	; 0x09
    3918:	92 87       	std	Z+10, r25	; 0x0a
    391a:	a3 87       	std	Z+11, r26	; 0x0b
    391c:	b4 87       	std	Z+12, r27	; 0x0c
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    391e:	8f 81       	ldd	r24, Y+7	; 0x07
    3920:	98 85       	ldd	r25, Y+8	; 0x08
    3922:	fc 01       	movw	r30, r24
    3924:	81 85       	ldd	r24, Z+9	; 0x09
    3926:	92 85       	ldd	r25, Z+10	; 0x0a
    3928:	a3 85       	ldd	r26, Z+11	; 0x0b
    392a:	b4 85       	ldd	r27, Z+12	; 0x0c
    392c:	87 70       	andi	r24, 0x07	; 7
    392e:	90 70       	andi	r25, 0x00	; 0
    3930:	9a 83       	std	Y+2, r25	; 0x02
    3932:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    3934:	89 81       	ldd	r24, Y+1	; 0x01
    3936:	9a 81       	ldd	r25, Y+2	; 0x02
    3938:	88 0f       	add	r24, r24
    393a:	99 1f       	adc	r25, r25
    393c:	88 0f       	add	r24, r24
    393e:	99 1f       	adc	r25, r25
    3940:	81 51       	subi	r24, 0x11	; 17
    3942:	9b 4f       	sbci	r25, 0xFB	; 251
    3944:	9c 83       	std	Y+4, r25	; 0x04
    3946:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
    3948:	8b 81       	ldd	r24, Y+3	; 0x03
    394a:	9c 81       	ldd	r25, Y+4	; 0x04
    394c:	fc 01       	movw	r30, r24
    394e:	80 81       	ld	r24, Z
    3950:	91 81       	ldd	r25, Z+1	; 0x01
    3952:	00 97       	sbiw	r24, 0x00	; 0
    3954:	a1 f4       	brne	.+40     	; 0x397e <OSTmr_Link+0x140>
        pspoke->OSTmrFirst   = ptmr;
    3956:	8b 81       	ldd	r24, Y+3	; 0x03
    3958:	9c 81       	ldd	r25, Y+4	; 0x04
    395a:	2f 81       	ldd	r18, Y+7	; 0x07
    395c:	38 85       	ldd	r19, Y+8	; 0x08
    395e:	fc 01       	movw	r30, r24
    3960:	31 83       	std	Z+1, r19	; 0x01
    3962:	20 83       	st	Z, r18
        ptmr->OSTmrNext      = (OS_TMR *)0;
    3964:	8f 81       	ldd	r24, Y+7	; 0x07
    3966:	98 85       	ldd	r25, Y+8	; 0x08
    3968:	fc 01       	movw	r30, r24
    396a:	16 82       	std	Z+6, r1	; 0x06
    396c:	15 82       	std	Z+5, r1	; 0x05
        pspoke->OSTmrEntries = 1;
    396e:	8b 81       	ldd	r24, Y+3	; 0x03
    3970:	9c 81       	ldd	r25, Y+4	; 0x04
    3972:	21 e0       	ldi	r18, 0x01	; 1
    3974:	30 e0       	ldi	r19, 0x00	; 0
    3976:	fc 01       	movw	r30, r24
    3978:	33 83       	std	Z+3, r19	; 0x03
    397a:	22 83       	std	Z+2, r18	; 0x02
    397c:	29 c0       	rjmp	.+82     	; 0x39d0 <OSTmr_Link+0x192>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
    397e:	8b 81       	ldd	r24, Y+3	; 0x03
    3980:	9c 81       	ldd	r25, Y+4	; 0x04
    3982:	fc 01       	movw	r30, r24
    3984:	80 81       	ld	r24, Z
    3986:	91 81       	ldd	r25, Z+1	; 0x01
    3988:	9e 83       	std	Y+6, r25	; 0x06
    398a:	8d 83       	std	Y+5, r24	; 0x05
        pspoke->OSTmrFirst   = ptmr;
    398c:	8b 81       	ldd	r24, Y+3	; 0x03
    398e:	9c 81       	ldd	r25, Y+4	; 0x04
    3990:	2f 81       	ldd	r18, Y+7	; 0x07
    3992:	38 85       	ldd	r19, Y+8	; 0x08
    3994:	fc 01       	movw	r30, r24
    3996:	31 83       	std	Z+1, r19	; 0x01
    3998:	20 83       	st	Z, r18
        ptmr->OSTmrNext      = (void *)ptmr1;
    399a:	8f 81       	ldd	r24, Y+7	; 0x07
    399c:	98 85       	ldd	r25, Y+8	; 0x08
    399e:	2d 81       	ldd	r18, Y+5	; 0x05
    39a0:	3e 81       	ldd	r19, Y+6	; 0x06
    39a2:	fc 01       	movw	r30, r24
    39a4:	36 83       	std	Z+6, r19	; 0x06
    39a6:	25 83       	std	Z+5, r18	; 0x05
        ptmr1->OSTmrPrev     = (void *)ptmr;
    39a8:	8d 81       	ldd	r24, Y+5	; 0x05
    39aa:	9e 81       	ldd	r25, Y+6	; 0x06
    39ac:	2f 81       	ldd	r18, Y+7	; 0x07
    39ae:	38 85       	ldd	r19, Y+8	; 0x08
    39b0:	fc 01       	movw	r30, r24
    39b2:	30 87       	std	Z+8, r19	; 0x08
    39b4:	27 83       	std	Z+7, r18	; 0x07
        pspoke->OSTmrEntries++;
    39b6:	8b 81       	ldd	r24, Y+3	; 0x03
    39b8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ba:	fc 01       	movw	r30, r24
    39bc:	82 81       	ldd	r24, Z+2	; 0x02
    39be:	93 81       	ldd	r25, Z+3	; 0x03
    39c0:	9c 01       	movw	r18, r24
    39c2:	2f 5f       	subi	r18, 0xFF	; 255
    39c4:	3f 4f       	sbci	r19, 0xFF	; 255
    39c6:	8b 81       	ldd	r24, Y+3	; 0x03
    39c8:	9c 81       	ldd	r25, Y+4	; 0x04
    39ca:	fc 01       	movw	r30, r24
    39cc:	33 83       	std	Z+3, r19	; 0x03
    39ce:	22 83       	std	Z+2, r18	; 0x02
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
    39d0:	8f 81       	ldd	r24, Y+7	; 0x07
    39d2:	98 85       	ldd	r25, Y+8	; 0x08
    39d4:	fc 01       	movw	r30, r24
    39d6:	10 86       	std	Z+8, r1	; 0x08
    39d8:	17 82       	std	Z+7, r1	; 0x07
}
    39da:	29 96       	adiw	r28, 0x09	; 9
    39dc:	0f b6       	in	r0, 0x3f	; 63
    39de:	f8 94       	cli
    39e0:	de bf       	out	0x3e, r29	; 62
    39e2:	0f be       	out	0x3f, r0	; 63
    39e4:	cd bf       	out	0x3d, r28	; 61
    39e6:	cf 91       	pop	r28
    39e8:	df 91       	pop	r29
    39ea:	08 95       	ret

000039ec <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	2a 97       	sbiw	r28, 0x0a	; 10
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	9a 87       	std	Y+10, r25	; 0x0a
    3a02:	89 87       	std	Y+9, r24	; 0x09
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    3a04:	89 85       	ldd	r24, Y+9	; 0x09
    3a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a08:	fc 01       	movw	r30, r24
    3a0a:	81 85       	ldd	r24, Z+9	; 0x09
    3a0c:	92 85       	ldd	r25, Z+10	; 0x0a
    3a0e:	a3 85       	ldd	r26, Z+11	; 0x0b
    3a10:	b4 85       	ldd	r27, Z+12	; 0x0c
    3a12:	87 70       	andi	r24, 0x07	; 7
    3a14:	90 70       	andi	r25, 0x00	; 0
    3a16:	9a 83       	std	Y+2, r25	; 0x02
    3a18:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    3a1a:	89 81       	ldd	r24, Y+1	; 0x01
    3a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1e:	88 0f       	add	r24, r24
    3a20:	99 1f       	adc	r25, r25
    3a22:	88 0f       	add	r24, r24
    3a24:	99 1f       	adc	r25, r25
    3a26:	81 51       	subi	r24, 0x11	; 17
    3a28:	9b 4f       	sbci	r25, 0xFB	; 251
    3a2a:	9c 83       	std	Y+4, r25	; 0x04
    3a2c:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
    3a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a30:	9c 81       	ldd	r25, Y+4	; 0x04
    3a32:	fc 01       	movw	r30, r24
    3a34:	20 81       	ld	r18, Z
    3a36:	31 81       	ldd	r19, Z+1	; 0x01
    3a38:	89 85       	ldd	r24, Y+9	; 0x09
    3a3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a3c:	28 17       	cp	r18, r24
    3a3e:	39 07       	cpc	r19, r25
    3a40:	c1 f4       	brne	.+48     	; 0x3a72 <OSTmr_Unlink+0x86>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
    3a42:	89 85       	ldd	r24, Y+9	; 0x09
    3a44:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a46:	fc 01       	movw	r30, r24
    3a48:	85 81       	ldd	r24, Z+5	; 0x05
    3a4a:	96 81       	ldd	r25, Z+6	; 0x06
    3a4c:	98 87       	std	Y+8, r25	; 0x08
    3a4e:	8f 83       	std	Y+7, r24	; 0x07
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
    3a50:	8b 81       	ldd	r24, Y+3	; 0x03
    3a52:	9c 81       	ldd	r25, Y+4	; 0x04
    3a54:	2f 81       	ldd	r18, Y+7	; 0x07
    3a56:	38 85       	ldd	r19, Y+8	; 0x08
    3a58:	fc 01       	movw	r30, r24
    3a5a:	31 83       	std	Z+1, r19	; 0x01
    3a5c:	20 83       	st	Z, r18
        if (ptmr1 != (OS_TMR *)0) {
    3a5e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a60:	98 85       	ldd	r25, Y+8	; 0x08
    3a62:	00 97       	sbiw	r24, 0x00	; 0
    3a64:	39 f1       	breq	.+78     	; 0x3ab4 <OSTmr_Unlink+0xc8>
            ptmr1->OSTmrPrev = (void *)0;
    3a66:	8f 81       	ldd	r24, Y+7	; 0x07
    3a68:	98 85       	ldd	r25, Y+8	; 0x08
    3a6a:	fc 01       	movw	r30, r24
    3a6c:	10 86       	std	Z+8, r1	; 0x08
    3a6e:	17 82       	std	Z+7, r1	; 0x07
    3a70:	22 c0       	rjmp	.+68     	; 0x3ab6 <OSTmr_Unlink+0xca>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
    3a72:	89 85       	ldd	r24, Y+9	; 0x09
    3a74:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a76:	fc 01       	movw	r30, r24
    3a78:	87 81       	ldd	r24, Z+7	; 0x07
    3a7a:	90 85       	ldd	r25, Z+8	; 0x08
    3a7c:	98 87       	std	Y+8, r25	; 0x08
    3a7e:	8f 83       	std	Y+7, r24	; 0x07
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
    3a80:	89 85       	ldd	r24, Y+9	; 0x09
    3a82:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a84:	fc 01       	movw	r30, r24
    3a86:	85 81       	ldd	r24, Z+5	; 0x05
    3a88:	96 81       	ldd	r25, Z+6	; 0x06
    3a8a:	9e 83       	std	Y+6, r25	; 0x06
    3a8c:	8d 83       	std	Y+5, r24	; 0x05
        ptmr1->OSTmrNext = ptmr2;
    3a8e:	8f 81       	ldd	r24, Y+7	; 0x07
    3a90:	98 85       	ldd	r25, Y+8	; 0x08
    3a92:	2d 81       	ldd	r18, Y+5	; 0x05
    3a94:	3e 81       	ldd	r19, Y+6	; 0x06
    3a96:	fc 01       	movw	r30, r24
    3a98:	36 83       	std	Z+6, r19	; 0x06
    3a9a:	25 83       	std	Z+5, r18	; 0x05
        if (ptmr2 != (OS_TMR *)0) {
    3a9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa0:	00 97       	sbiw	r24, 0x00	; 0
    3aa2:	49 f0       	breq	.+18     	; 0x3ab6 <OSTmr_Unlink+0xca>
            ptmr2->OSTmrPrev = (void *)ptmr1;
    3aa4:	8d 81       	ldd	r24, Y+5	; 0x05
    3aa6:	9e 81       	ldd	r25, Y+6	; 0x06
    3aa8:	2f 81       	ldd	r18, Y+7	; 0x07
    3aaa:	38 85       	ldd	r19, Y+8	; 0x08
    3aac:	fc 01       	movw	r30, r24
    3aae:	30 87       	std	Z+8, r19	; 0x08
    3ab0:	27 83       	std	Z+7, r18	; 0x07
    3ab2:	01 c0       	rjmp	.+2      	; 0x3ab6 <OSTmr_Unlink+0xca>

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
        if (ptmr1 != (OS_TMR *)0) {
            ptmr1->OSTmrPrev = (void *)0;
    3ab4:	00 00       	nop
        ptmr1->OSTmrNext = ptmr2;
        if (ptmr2 != (OS_TMR *)0) {
            ptmr2->OSTmrPrev = (void *)ptmr1;
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    3ab6:	89 85       	ldd	r24, Y+9	; 0x09
    3ab8:	9a 85       	ldd	r25, Y+10	; 0x0a
    3aba:	21 e0       	ldi	r18, 0x01	; 1
    3abc:	fc 01       	movw	r30, r24
    3abe:	26 a3       	std	Z+38, r18	; 0x26
    ptmr->OSTmrNext  = (void *)0;
    3ac0:	89 85       	ldd	r24, Y+9	; 0x09
    3ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ac4:	fc 01       	movw	r30, r24
    3ac6:	16 82       	std	Z+6, r1	; 0x06
    3ac8:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev  = (void *)0;
    3aca:	89 85       	ldd	r24, Y+9	; 0x09
    3acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ace:	fc 01       	movw	r30, r24
    3ad0:	10 86       	std	Z+8, r1	; 0x08
    3ad2:	17 82       	std	Z+7, r1	; 0x07
    pspoke->OSTmrEntries--;
    3ad4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ad6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ad8:	fc 01       	movw	r30, r24
    3ada:	82 81       	ldd	r24, Z+2	; 0x02
    3adc:	93 81       	ldd	r25, Z+3	; 0x03
    3ade:	9c 01       	movw	r18, r24
    3ae0:	21 50       	subi	r18, 0x01	; 1
    3ae2:	30 40       	sbci	r19, 0x00	; 0
    3ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    3ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    3ae8:	fc 01       	movw	r30, r24
    3aea:	33 83       	std	Z+3, r19	; 0x03
    3aec:	22 83       	std	Z+2, r18	; 0x02
}
    3aee:	2a 96       	adiw	r28, 0x0a	; 10
    3af0:	0f b6       	in	r0, 0x3f	; 63
    3af2:	f8 94       	cli
    3af4:	de bf       	out	0x3e, r29	; 62
    3af6:	0f be       	out	0x3f, r0	; 63
    3af8:	cd bf       	out	0x3d, r28	; 61
    3afa:	cf 91       	pop	r28
    3afc:	df 91       	pop	r29
    3afe:	08 95       	ret

00003b00 <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
    3b00:	df 93       	push	r29
    3b02:	cf 93       	push	r28
    3b04:	0f 92       	push	r0
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
    3b0a:	80 91 57 08 	lds	r24, 0x0857
    3b0e:	90 91 58 08 	lds	r25, 0x0858
    3b12:	60 e0       	ldi	r22, 0x00	; 0
    3b14:	70 e0       	ldi	r23, 0x00	; 0
    3b16:	9e 01       	movw	r18, r28
    3b18:	2f 5f       	subi	r18, 0xFF	; 255
    3b1a:	3f 4f       	sbci	r19, 0xFF	; 255
    3b1c:	a9 01       	movw	r20, r18
    3b1e:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <OSSemPend>
    (void)err;
}
    3b22:	0f 90       	pop	r0
    3b24:	cf 91       	pop	r28
    3b26:	df 91       	pop	r29
    3b28:	08 95       	ret

00003b2a <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
    3b2a:	df 93       	push	r29
    3b2c:	cf 93       	push	r28
    3b2e:	cd b7       	in	r28, 0x3d	; 61
    3b30:	de b7       	in	r29, 0x3e	; 62
    (void)OSSemPost(OSTmrSem);
    3b32:	80 91 57 08 	lds	r24, 0x0857
    3b36:	90 91 58 08 	lds	r25, 0x0858
    3b3a:	0e 94 21 10 	call	0x2042	; 0x2042 <OSSemPost>
}
    3b3e:	cf 91       	pop	r28
    3b40:	df 91       	pop	r29
    3b42:	08 95       	ret

00003b44 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
    3b44:	df 93       	push	r29
    3b46:	cf 93       	push	r28
    3b48:	cd b7       	in	r28, 0x3d	; 61
    3b4a:	de b7       	in	r29, 0x3e	; 62
    3b4c:	2d 97       	sbiw	r28, 0x0d	; 13
    3b4e:	0f b6       	in	r0, 0x3f	; 63
    3b50:	f8 94       	cli
    3b52:	de bf       	out	0x3e, r29	; 62
    3b54:	0f be       	out	0x3f, r0	; 63
    3b56:	cd bf       	out	0x3d, r28	; 61
    3b58:	9d 87       	std	Y+13, r25	; 0x0d
    3b5a:	8c 87       	std	Y+12, r24	; 0x0c
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
    3b5c:	80 91 10 05 	lds	r24, 0x0510
    3b60:	90 91 11 05 	lds	r25, 0x0511
    3b64:	9e 01       	movw	r18, r28
    3b66:	25 5f       	subi	r18, 0xF5	; 245
    3b68:	3f 4f       	sbci	r19, 0xFF	; 255
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	70 e0       	ldi	r23, 0x00	; 0
    3b6e:	a9 01       	movw	r20, r18
    3b70:	0e 94 f9 0e 	call	0x1df2	; 0x1df2 <OSSemPend>
        OSTmr_Lock();
    3b74:	0e 94 80 1d 	call	0x3b00	; 0x3b00 <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
    3b78:	80 91 4f 08 	lds	r24, 0x084F
    3b7c:	90 91 50 08 	lds	r25, 0x0850
    3b80:	a0 91 51 08 	lds	r26, 0x0851
    3b84:	b0 91 52 08 	lds	r27, 0x0852
    3b88:	01 96       	adiw	r24, 0x01	; 1
    3b8a:	a1 1d       	adc	r26, r1
    3b8c:	b1 1d       	adc	r27, r1
    3b8e:	80 93 4f 08 	sts	0x084F, r24
    3b92:	90 93 50 08 	sts	0x0850, r25
    3b96:	a0 93 51 08 	sts	0x0851, r26
    3b9a:	b0 93 52 08 	sts	0x0852, r27
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
    3b9e:	80 91 4f 08 	lds	r24, 0x084F
    3ba2:	90 91 50 08 	lds	r25, 0x0850
    3ba6:	a0 91 51 08 	lds	r26, 0x0851
    3baa:	b0 91 52 08 	lds	r27, 0x0852
    3bae:	87 70       	andi	r24, 0x07	; 7
    3bb0:	90 70       	andi	r25, 0x00	; 0
    3bb2:	9a 83       	std	Y+2, r25	; 0x02
    3bb4:	89 83       	std	Y+1, r24	; 0x01
        pspoke = &OSTmrWheelTbl[spoke];
    3bb6:	89 81       	ldd	r24, Y+1	; 0x01
    3bb8:	9a 81       	ldd	r25, Y+2	; 0x02
    3bba:	88 0f       	add	r24, r24
    3bbc:	99 1f       	adc	r25, r25
    3bbe:	88 0f       	add	r24, r24
    3bc0:	99 1f       	adc	r25, r25
    3bc2:	81 51       	subi	r24, 0x11	; 17
    3bc4:	9b 4f       	sbci	r25, 0xFB	; 251
    3bc6:	9c 83       	std	Y+4, r25	; 0x04
    3bc8:	8b 83       	std	Y+3, r24	; 0x03
        ptmr   = pspoke->OSTmrFirst;
    3bca:	8b 81       	ldd	r24, Y+3	; 0x03
    3bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    3bce:	fc 01       	movw	r30, r24
    3bd0:	80 81       	ld	r24, Z
    3bd2:	91 81       	ldd	r25, Z+1	; 0x01
    3bd4:	9a 87       	std	Y+10, r25	; 0x0a
    3bd6:	89 87       	std	Y+9, r24	; 0x09
        while (ptmr != (OS_TMR *)0) {
    3bd8:	4b c0       	rjmp	.+150    	; 0x3c70 <OSTmr_Task+0x12c>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
    3bda:	89 85       	ldd	r24, Y+9	; 0x09
    3bdc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bde:	fc 01       	movw	r30, r24
    3be0:	85 81       	ldd	r24, Z+5	; 0x05
    3be2:	96 81       	ldd	r25, Z+6	; 0x06
    3be4:	98 87       	std	Y+8, r25	; 0x08
    3be6:	8f 83       	std	Y+7, r24	; 0x07
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
    3be8:	89 85       	ldd	r24, Y+9	; 0x09
    3bea:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bec:	fc 01       	movw	r30, r24
    3bee:	21 85       	ldd	r18, Z+9	; 0x09
    3bf0:	32 85       	ldd	r19, Z+10	; 0x0a
    3bf2:	43 85       	ldd	r20, Z+11	; 0x0b
    3bf4:	54 85       	ldd	r21, Z+12	; 0x0c
    3bf6:	80 91 4f 08 	lds	r24, 0x084F
    3bfa:	90 91 50 08 	lds	r25, 0x0850
    3bfe:	a0 91 51 08 	lds	r26, 0x0851
    3c02:	b0 91 52 08 	lds	r27, 0x0852
    3c06:	28 17       	cp	r18, r24
    3c08:	39 07       	cpc	r19, r25
    3c0a:	4a 07       	cpc	r20, r26
    3c0c:	5b 07       	cpc	r21, r27
    3c0e:	61 f5       	brne	.+88     	; 0x3c68 <OSTmr_Task+0x124>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
    3c10:	89 85       	ldd	r24, Y+9	; 0x09
    3c12:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c14:	fc 01       	movw	r30, r24
    3c16:	81 81       	ldd	r24, Z+1	; 0x01
    3c18:	92 81       	ldd	r25, Z+2	; 0x02
    3c1a:	9e 83       	std	Y+6, r25	; 0x06
    3c1c:	8d 83       	std	Y+5, r24	; 0x05
                if (pfnct != (OS_TMR_CALLBACK)0) {
    3c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    3c20:	9e 81       	ldd	r25, Y+6	; 0x06
    3c22:	00 97       	sbiw	r24, 0x00	; 0
    3c24:	61 f0       	breq	.+24     	; 0x3c3e <OSTmr_Task+0xfa>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
    3c26:	89 85       	ldd	r24, Y+9	; 0x09
    3c28:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c2a:	fc 01       	movw	r30, r24
    3c2c:	43 81       	ldd	r20, Z+3	; 0x03
    3c2e:	54 81       	ldd	r21, Z+4	; 0x04
    3c30:	89 85       	ldd	r24, Y+9	; 0x09
    3c32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c34:	2d 81       	ldd	r18, Y+5	; 0x05
    3c36:	3e 81       	ldd	r19, Y+6	; 0x06
    3c38:	ba 01       	movw	r22, r20
    3c3a:	f9 01       	movw	r30, r18
    3c3c:	19 95       	eicall
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
    3c3e:	89 85       	ldd	r24, Y+9	; 0x09
    3c40:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c42:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
    3c46:	89 85       	ldd	r24, Y+9	; 0x09
    3c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	85 a1       	ldd	r24, Z+37	; 0x25
    3c4e:	82 30       	cpi	r24, 0x02	; 2
    3c50:	31 f4       	brne	.+12     	; 0x3c5e <OSTmr_Task+0x11a>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
    3c52:	89 85       	ldd	r24, Y+9	; 0x09
    3c54:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c56:	61 e0       	ldi	r22, 0x01	; 1
    3c58:	0e 94 1f 1c 	call	0x383e	; 0x383e <OSTmr_Link>
    3c5c:	05 c0       	rjmp	.+10     	; 0x3c68 <OSTmr_Task+0x124>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
    3c5e:	89 85       	ldd	r24, Y+9	; 0x09
    3c60:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c62:	22 e0       	ldi	r18, 0x02	; 2
    3c64:	fc 01       	movw	r30, r24
    3c66:	26 a3       	std	Z+38, r18	; 0x26
                }
            }
            ptmr = ptmr_next;
    3c68:	8f 81       	ldd	r24, Y+7	; 0x07
    3c6a:	98 85       	ldd	r25, Y+8	; 0x08
    3c6c:	9a 87       	std	Y+10, r25	; 0x0a
    3c6e:	89 87       	std	Y+9, r24	; 0x09
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
    3c70:	89 85       	ldd	r24, Y+9	; 0x09
    3c72:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c74:	00 97       	sbiw	r24, 0x00	; 0
    3c76:	09 f0       	breq	.+2      	; 0x3c7a <OSTmr_Task+0x136>
    3c78:	b0 cf       	rjmp	.-160    	; 0x3bda <OSTmr_Task+0x96>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
    3c7a:	0e 94 95 1d 	call	0x3b2a	; 0x3b2a <OSTmr_Unlock>
    }
    3c7e:	6e cf       	rjmp	.-292    	; 0x3b5c <OSTmr_Task+0x18>
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3c80:	df 93       	push	r29
    3c82:	cf 93       	push	r28
    3c84:	cd b7       	in	r28, 0x3d	; 61
    3c86:	de b7       	in	r29, 0x3e	; 62
    3c88:	28 97       	sbiw	r28, 0x08	; 8
    3c8a:	0f b6       	in	r0, 0x3f	; 63
    3c8c:	f8 94       	cli
    3c8e:	de bf       	out	0x3e, r29	; 62
    3c90:	0f be       	out	0x3f, r0	; 63
    3c92:	cd bf       	out	0x3d, r28	; 61
    3c94:	9c 83       	std	Y+4, r25	; 0x04
    3c96:	8b 83       	std	Y+3, r24	; 0x03
    3c98:	7e 83       	std	Y+6, r23	; 0x06
    3c9a:	6d 83       	std	Y+5, r22	; 0x05
    3c9c:	58 87       	std	Y+8, r21	; 0x08
    3c9e:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3ca0:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3ca2:	80 91 4c 08 	lds	r24, 0x084C
    3ca6:	88 23       	and	r24, r24
    3ca8:	39 f0       	breq	.+14     	; 0x3cb8 <OSTmr_Task+0x174>
        *perr  = OS_ERR_NAME_GET_ISR;
    3caa:	8f 81       	ldd	r24, Y+7	; 0x07
    3cac:	98 85       	ldd	r25, Y+8	; 0x08
    3cae:	21 e1       	ldi	r18, 0x11	; 17
    3cb0:	fc 01       	movw	r30, r24
    3cb2:	20 83       	st	Z, r18
        return (0);
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	27 c0       	rjmp	.+78     	; 0x3d06 <OSTmr_Task+0x1c2>
    }
    switch (pevent->OSEventType) {
    3cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cba:	9c 81       	ldd	r25, Y+4	; 0x04
    3cbc:	fc 01       	movw	r30, r24
    3cbe:	80 81       	ld	r24, Z
    3cc0:	88 2f       	mov	r24, r24
    3cc2:	90 e0       	ldi	r25, 0x00	; 0
    3cc4:	01 97       	sbiw	r24, 0x01	; 1
    3cc6:	84 30       	cpi	r24, 0x04	; 4
    3cc8:	91 05       	cpc	r25, r1
    3cca:	b8 f4       	brcc	.+46     	; 0x3cfa <OSTmr_Task+0x1b6>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
    3ccc:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3cd0:	89 83       	std	Y+1, r24	; 0x01
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    3cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    3cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    3cd6:	9c 01       	movw	r18, r24
    3cd8:	28 5f       	subi	r18, 0xF8	; 248
    3cda:	3f 4f       	sbci	r19, 0xFF	; 255
    3cdc:	8d 81       	ldd	r24, Y+5	; 0x05
    3cde:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce0:	b9 01       	movw	r22, r18
    3ce2:	0e 94 66 24 	call	0x48cc	; 0x48cc <OS_SchedNew+0x4e>
    3ce6:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    3ce8:	89 81       	ldd	r24, Y+1	; 0x01
    3cea:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    3cee:	8f 81       	ldd	r24, Y+7	; 0x07
    3cf0:	98 85       	ldd	r25, Y+8	; 0x08
    3cf2:	fc 01       	movw	r30, r24
    3cf4:	10 82       	st	Z, r1
    return (len);
    3cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    3cf8:	06 c0       	rjmp	.+12     	; 0x3d06 <OSTmr_Task+0x1c2>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3cfa:	8f 81       	ldd	r24, Y+7	; 0x07
    3cfc:	98 85       	ldd	r25, Y+8	; 0x08
    3cfe:	21 e0       	ldi	r18, 0x01	; 1
    3d00:	fc 01       	movw	r30, r24
    3d02:	20 83       	st	Z, r18
             return (0);
    3d04:	80 e0       	ldi	r24, 0x00	; 0
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
    3d06:	28 96       	adiw	r28, 0x08	; 8
    3d08:	0f b6       	in	r0, 0x3f	; 63
    3d0a:	f8 94       	cli
    3d0c:	de bf       	out	0x3e, r29	; 62
    3d0e:	0f be       	out	0x3f, r0	; 63
    3d10:	cd bf       	out	0x3d, r28	; 61
    3d12:	cf 91       	pop	r28
    3d14:	df 91       	pop	r29
    3d16:	08 95       	ret
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
    3d18:	df 93       	push	r29
    3d1a:	cf 93       	push	r28
    3d1c:	cd b7       	in	r28, 0x3d	; 61
    3d1e:	de b7       	in	r29, 0x3e	; 62
    3d20:	28 97       	sbiw	r28, 0x08	; 8
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	9c 83       	std	Y+4, r25	; 0x04
    3d2e:	8b 83       	std	Y+3, r24	; 0x03
    3d30:	7e 83       	std	Y+6, r23	; 0x06
    3d32:	6d 83       	std	Y+5, r22	; 0x05
    3d34:	58 87       	std	Y+8, r21	; 0x08
    3d36:	4f 83       	std	Y+7, r20	; 0x07
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3d38:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
        *perr = OS_ERR_PNAME_NULL;
        return;
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    3d3a:	80 91 4c 08 	lds	r24, 0x084C
    3d3e:	88 23       	and	r24, r24
    3d40:	31 f0       	breq	.+12     	; 0x3d4e <OSTmr_Task+0x20a>
        *perr = OS_ERR_NAME_SET_ISR;
    3d42:	8f 81       	ldd	r24, Y+7	; 0x07
    3d44:	98 85       	ldd	r25, Y+8	; 0x08
    3d46:	22 e1       	ldi	r18, 0x12	; 18
    3d48:	fc 01       	movw	r30, r24
    3d4a:	20 83       	st	Z, r18
        return;
    3d4c:	34 c0       	rjmp	.+104    	; 0x3db6 <OSTmr_Task+0x272>
    }
    switch (pevent->OSEventType) {
    3d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    3d50:	9c 81       	ldd	r25, Y+4	; 0x04
    3d52:	fc 01       	movw	r30, r24
    3d54:	80 81       	ld	r24, Z
    3d56:	88 2f       	mov	r24, r24
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	01 97       	sbiw	r24, 0x01	; 1
    3d5c:	84 30       	cpi	r24, 0x04	; 4
    3d5e:	91 05       	cpc	r25, r1
    3d60:	60 f4       	brcc	.+24     	; 0x3d7a <OSTmr_Task+0x236>

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
    3d62:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3d66:	89 83       	std	Y+1, r24	; 0x01
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    3d68:	8d 81       	ldd	r24, Y+5	; 0x05
    3d6a:	9e 81       	ldd	r25, Y+6	; 0x06
    3d6c:	0e 94 9b 24 	call	0x4936	; 0x4936 <OS_SchedNew+0xb8>
    3d70:	8a 83       	std	Y+2, r24	; 0x02
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
    3d72:	8a 81       	ldd	r24, Y+2	; 0x02
    3d74:	80 31       	cpi	r24, 0x10	; 16
    3d76:	38 f4       	brcc	.+14     	; 0x3d86 <OSTmr_Task+0x242>
    3d78:	0f c0       	rjmp	.+30     	; 0x3d98 <OSTmr_Task+0x254>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
    3d7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3d7c:	98 85       	ldd	r25, Y+8	; 0x08
    3d7e:	21 e0       	ldi	r18, 0x01	; 1
    3d80:	fc 01       	movw	r30, r24
    3d82:	20 83       	st	Z, r18
             return;
    3d84:	18 c0       	rjmp	.+48     	; 0x3db6 <OSTmr_Task+0x272>
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
    3d86:	89 81       	ldd	r24, Y+1	; 0x01
    3d88:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
    3d8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3d8e:	98 85       	ldd	r25, Y+8	; 0x08
    3d90:	2b e0       	ldi	r18, 0x0B	; 11
    3d92:	fc 01       	movw	r30, r24
    3d94:	20 83       	st	Z, r18
        return;
    3d96:	0f c0       	rjmp	.+30     	; 0x3db6 <OSTmr_Task+0x272>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    3d98:	8b 81       	ldd	r24, Y+3	; 0x03
    3d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    3d9c:	08 96       	adiw	r24, 0x08	; 8
    3d9e:	2d 81       	ldd	r18, Y+5	; 0x05
    3da0:	3e 81       	ldd	r19, Y+6	; 0x06
    3da2:	b9 01       	movw	r22, r18
    3da4:	0e 94 66 24 	call	0x48cc	; 0x48cc <OS_SchedNew+0x4e>
    OS_EXIT_CRITICAL();
    3da8:	89 81       	ldd	r24, Y+1	; 0x01
    3daa:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    3dae:	8f 81       	ldd	r24, Y+7	; 0x07
    3db0:	98 85       	ldd	r25, Y+8	; 0x08
    3db2:	fc 01       	movw	r30, r24
    3db4:	10 82       	st	Z, r1
}
    3db6:	28 96       	adiw	r28, 0x08	; 8
    3db8:	0f b6       	in	r0, 0x3f	; 63
    3dba:	f8 94       	cli
    3dbc:	de bf       	out	0x3e, r29	; 62
    3dbe:	0f be       	out	0x3f, r0	; 63
    3dc0:	cd bf       	out	0x3d, r28	; 61
    3dc2:	cf 91       	pop	r28
    3dc4:	df 91       	pop	r29
    3dc6:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
    3dc8:	df 93       	push	r29
    3dca:	cf 93       	push	r28
    3dcc:	cd b7       	in	r28, 0x3d	; 61
    3dce:	de b7       	in	r29, 0x3e	; 62
    OSInitHookBegin();                                           /* Call port specific initialization code   */
    3dd0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
    3dd4:	0e 94 93 22 	call	0x4526	; 0x4526 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
    3dd8:	0e 94 ba 22 	call	0x4574	; 0x4574 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
    3ddc:	0e 94 37 23 	call	0x466e	; 0x466e <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
    3de0:	0e 94 33 22 	call	0x4466	; 0x4466 <OS_InitEventList>

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
    3de4:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
#endif

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
    3de8:	0e 94 c4 33 	call	0x6788	; 0x6788 <OSTmr_Free+0xb8>
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
    3dec:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
    3df0:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <OSDebugInit>
#endif
}
    3df4:	cf 91       	pop	r28
    3df6:	df 91       	pop	r29
    3df8:	08 95       	ret
*                 OSIntEnter() is always called with interrupts disabled.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
    3dfa:	df 93       	push	r29
    3dfc:	cf 93       	push	r28
    3dfe:	cd b7       	in	r28, 0x3d	; 61
    3e00:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_TRUE) {
    3e02:	80 91 12 05 	lds	r24, 0x0512
    3e06:	81 30       	cpi	r24, 0x01	; 1
    3e08:	49 f4       	brne	.+18     	; 0x3e1c <OSTmr_Task+0x2d8>
        if (OSIntNesting < 255u) {
    3e0a:	80 91 4c 08 	lds	r24, 0x084C
    3e0e:	8f 3f       	cpi	r24, 0xFF	; 255
    3e10:	29 f0       	breq	.+10     	; 0x3e1c <OSTmr_Task+0x2d8>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
    3e12:	80 91 4c 08 	lds	r24, 0x084C
    3e16:	8f 5f       	subi	r24, 0xFF	; 255
    3e18:	80 93 4c 08 	sts	0x084C, r24
        }
    }
}
    3e1c:	cf 91       	pop	r28
    3e1e:	df 91       	pop	r29
    3e20:	08 95       	ret
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
    3e22:	df 93       	push	r29
    3e24:	cf 93       	push	r28
    3e26:	0f 92       	push	r0
    3e28:	cd b7       	in	r28, 0x3d	; 61
    3e2a:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3e2c:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {
    3e2e:	80 91 12 05 	lds	r24, 0x0512
    3e32:	81 30       	cpi	r24, 0x01	; 1
    3e34:	09 f0       	breq	.+2      	; 0x3e38 <OSTmr_Task+0x2f4>
    3e36:	55 c0       	rjmp	.+170    	; 0x3ee2 <OSTmr_Task+0x39e>
        OS_ENTER_CRITICAL();
    3e38:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3e3c:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
    3e3e:	80 91 4c 08 	lds	r24, 0x084C
    3e42:	88 23       	and	r24, r24
    3e44:	29 f0       	breq	.+10     	; 0x3e50 <OSTmr_Task+0x30c>
            OSIntNesting--;
    3e46:	80 91 4c 08 	lds	r24, 0x084C
    3e4a:	81 50       	subi	r24, 0x01	; 1
    3e4c:	80 93 4c 08 	sts	0x084C, r24
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
    3e50:	80 91 4c 08 	lds	r24, 0x084C
    3e54:	88 23       	and	r24, r24
    3e56:	09 f0       	breq	.+2      	; 0x3e5a <OSTmr_Task+0x316>
    3e58:	41 c0       	rjmp	.+130    	; 0x3edc <OSTmr_Task+0x398>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
    3e5a:	80 91 0f 05 	lds	r24, 0x050F
    3e5e:	88 23       	and	r24, r24
    3e60:	e9 f5       	brne	.+122    	; 0x3edc <OSTmr_Task+0x398>
                OS_SchedNew();
    3e62:	0e 94 3f 24 	call	0x487e	; 0x487e <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
    3e66:	90 91 19 05 	lds	r25, 0x0519
    3e6a:	80 91 8a 07 	lds	r24, 0x078A
    3e6e:	98 17       	cp	r25, r24
    3e70:	a9 f1       	breq	.+106    	; 0x3edc <OSTmr_Task+0x398>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
    3e72:	80 91 19 05 	lds	r24, 0x0519
    3e76:	88 2f       	mov	r24, r24
    3e78:	90 e0       	ldi	r25, 0x00	; 0
    3e7a:	88 0f       	add	r24, r24
    3e7c:	99 1f       	adc	r25, r25
    3e7e:	80 51       	subi	r24, 0x10	; 16
    3e80:	94 4f       	sbci	r25, 0xF4	; 244
    3e82:	fc 01       	movw	r30, r24
    3e84:	80 81       	ld	r24, Z
    3e86:	91 81       	ldd	r25, Z+1	; 0x01
    3e88:	90 93 97 07 	sts	0x0797, r25
    3e8c:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
    3e90:	20 91 96 07 	lds	r18, 0x0796
    3e94:	30 91 97 07 	lds	r19, 0x0797
    3e98:	f9 01       	movw	r30, r18
    3e9a:	85 8d       	ldd	r24, Z+29	; 0x1d
    3e9c:	96 8d       	ldd	r25, Z+30	; 0x1e
    3e9e:	a7 8d       	ldd	r26, Z+31	; 0x1f
    3ea0:	b0 a1       	ldd	r27, Z+32	; 0x20
    3ea2:	01 96       	adiw	r24, 0x01	; 1
    3ea4:	a1 1d       	adc	r26, r1
    3ea6:	b1 1d       	adc	r27, r1
    3ea8:	f9 01       	movw	r30, r18
    3eaa:	85 8f       	std	Z+29, r24	; 0x1d
    3eac:	96 8f       	std	Z+30, r25	; 0x1e
    3eae:	a7 8f       	std	Z+31, r26	; 0x1f
    3eb0:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
    3eb2:	80 91 8d 07 	lds	r24, 0x078D
    3eb6:	90 91 8e 07 	lds	r25, 0x078E
    3eba:	a0 91 8f 07 	lds	r26, 0x078F
    3ebe:	b0 91 90 07 	lds	r27, 0x0790
    3ec2:	01 96       	adiw	r24, 0x01	; 1
    3ec4:	a1 1d       	adc	r26, r1
    3ec6:	b1 1d       	adc	r27, r1
    3ec8:	80 93 8d 07 	sts	0x078D, r24
    3ecc:	90 93 8e 07 	sts	0x078E, r25
    3ed0:	a0 93 8f 07 	sts	0x078F, r26
    3ed4:	b0 93 90 07 	sts	0x0790, r27
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
    3ed8:	0e 94 87 01 	call	0x30e	; 0x30e <OSIntCtxSw>
                }
            }
        }
        OS_EXIT_CRITICAL();
    3edc:	89 81       	ldd	r24, Y+1	; 0x01
    3ede:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
    3ee2:	0f 90       	pop	r0
    3ee4:	cf 91       	pop	r28
    3ee6:	df 91       	pop	r29
    3ee8:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
    3eea:	df 93       	push	r29
    3eec:	cf 93       	push	r28
    3eee:	0f 92       	push	r0
    3ef0:	cd b7       	in	r28, 0x3d	; 61
    3ef2:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    3ef4:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
    3ef6:	80 91 12 05 	lds	r24, 0x0512
    3efa:	81 30       	cpi	r24, 0x01	; 1
    3efc:	99 f4       	brne	.+38     	; 0x3f24 <OSTmr_Task+0x3e0>
        OS_ENTER_CRITICAL();
    3efe:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3f02:	89 83       	std	Y+1, r24	; 0x01
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
    3f04:	80 91 4c 08 	lds	r24, 0x084C
    3f08:	88 23       	and	r24, r24
    3f0a:	49 f4       	brne	.+18     	; 0x3f1e <OSTmr_Task+0x3da>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
    3f0c:	80 91 0f 05 	lds	r24, 0x050F
    3f10:	8f 3f       	cpi	r24, 0xFF	; 255
    3f12:	29 f0       	breq	.+10     	; 0x3f1e <OSTmr_Task+0x3da>
                OSLockNesting++;                 /* Increment lock nesting level                       */
    3f14:	80 91 0f 05 	lds	r24, 0x050F
    3f18:	8f 5f       	subi	r24, 0xFF	; 255
    3f1a:	80 93 0f 05 	sts	0x050F, r24
            }
        }
        OS_EXIT_CRITICAL();
    3f1e:	89 81       	ldd	r24, Y+1	; 0x01
    3f20:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
}
    3f24:	0f 90       	pop	r0
    3f26:	cf 91       	pop	r28
    3f28:	df 91       	pop	r29
    3f2a:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
    3f2c:	df 93       	push	r29
    3f2e:	cf 93       	push	r28
    3f30:	0f 92       	push	r0
    3f32:	cd b7       	in	r28, 0x3d	; 61
    3f34:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    3f36:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
    3f38:	80 91 12 05 	lds	r24, 0x0512
    3f3c:	81 30       	cpi	r24, 0x01	; 1
    3f3e:	29 f5       	brne	.+74     	; 0x3f8a <OSTmr_Task+0x446>
        OS_ENTER_CRITICAL();
    3f40:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3f44:	89 83       	std	Y+1, r24	; 0x01
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
    3f46:	80 91 0f 05 	lds	r24, 0x050F
    3f4a:	88 23       	and	r24, r24
    3f4c:	d9 f0       	breq	.+54     	; 0x3f84 <OSTmr_Task+0x440>
            OSLockNesting--;                               /* Decrement lock nesting level             */
    3f4e:	80 91 0f 05 	lds	r24, 0x050F
    3f52:	81 50       	subi	r24, 0x01	; 1
    3f54:	80 93 0f 05 	sts	0x050F, r24
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
    3f58:	80 91 0f 05 	lds	r24, 0x050F
    3f5c:	88 23       	and	r24, r24
    3f5e:	71 f4       	brne	.+28     	; 0x3f7c <OSTmr_Task+0x438>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
    3f60:	80 91 4c 08 	lds	r24, 0x084C
    3f64:	88 23       	and	r24, r24
    3f66:	31 f4       	brne	.+12     	; 0x3f74 <OSTmr_Task+0x430>
                    OS_EXIT_CRITICAL();
    3f68:	89 81       	ldd	r24, Y+1	; 0x01
    3f6a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                    OS_Sched();                            /* See if a HPT is ready                    */
    3f6e:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
                } else {
                    OS_EXIT_CRITICAL();
                }
            } else {
                OS_EXIT_CRITICAL();
    3f72:	0b c0       	rjmp	.+22     	; 0x3f8a <OSTmr_Task+0x446>
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
                } else {
                    OS_EXIT_CRITICAL();
    3f74:	89 81       	ldd	r24, Y+1	; 0x01
    3f76:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                }
            } else {
                OS_EXIT_CRITICAL();
    3f7a:	07 c0       	rjmp	.+14     	; 0x3f8a <OSTmr_Task+0x446>
    3f7c:	89 81       	ldd	r24, Y+1	; 0x01
    3f7e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    3f82:	03 c0       	rjmp	.+6      	; 0x3f8a <OSTmr_Task+0x446>
            }
        } else {
            OS_EXIT_CRITICAL();
    3f84:	89 81       	ldd	r24, Y+1	; 0x01
    3f86:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        }
    }
}
    3f8a:	0f 90       	pop	r0
    3f8c:	cf 91       	pop	r28
    3f8e:	df 91       	pop	r29
    3f90:	08 95       	ret
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
    3f92:	df 93       	push	r29
    3f94:	cf 93       	push	r28
    3f96:	cd b7       	in	r28, 0x3d	; 61
    3f98:	de b7       	in	r29, 0x3e	; 62
    if (OSRunning == OS_FALSE) {
    3f9a:	80 91 12 05 	lds	r24, 0x0512
    3f9e:	88 23       	and	r24, r24
    3fa0:	f9 f4       	brne	.+62     	; 0x3fe0 <OSTmr_Task+0x49c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
    3fa2:	0e 94 3f 24 	call	0x487e	; 0x487e <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
    3fa6:	80 91 19 05 	lds	r24, 0x0519
    3faa:	80 93 8a 07 	sts	0x078A, r24
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
    3fae:	80 91 19 05 	lds	r24, 0x0519
    3fb2:	88 2f       	mov	r24, r24
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	88 0f       	add	r24, r24
    3fb8:	99 1f       	adc	r25, r25
    3fba:	80 51       	subi	r24, 0x10	; 16
    3fbc:	94 4f       	sbci	r25, 0xF4	; 244
    3fbe:	fc 01       	movw	r30, r24
    3fc0:	80 81       	ld	r24, Z
    3fc2:	91 81       	ldd	r25, Z+1	; 0x01
    3fc4:	90 93 97 07 	sts	0x0797, r25
    3fc8:	80 93 96 07 	sts	0x0796, r24
        OSTCBCur      = OSTCBHighRdy;
    3fcc:	80 91 96 07 	lds	r24, 0x0796
    3fd0:	90 91 97 07 	lds	r25, 0x0797
    3fd4:	90 93 4e 08 	sts	0x084E, r25
    3fd8:	80 93 4d 08 	sts	0x084D, r24
        OSStartHighRdy();                            /* Execute target specific code to start task     */
    3fdc:	0e 94 c8 00 	call	0x190	; 0x190 <OSStartHighRdy>
    }
}
    3fe0:	cf 91       	pop	r28
    3fe2:	df 91       	pop	r29
    3fe4:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
    3fe6:	df 93       	push	r29
    3fe8:	cf 93       	push	r28
    3fea:	00 d0       	rcall	.+0      	; 0x3fec <OSTmr_Task+0x4a8>
    3fec:	cd b7       	in	r28, 0x3d	; 61
    3fee:	de b7       	in	r29, 0x3e	; 62
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    3ff0:	19 82       	std	Y+1, r1	; 0x01
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
    3ff2:	0e 94 cd 03 	call	0x79a	; 0x79a <OSTimeTickHook>
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
    3ff6:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    3ffa:	89 83       	std	Y+1, r24	; 0x01
    OSTime++;
    3ffc:	80 91 53 08 	lds	r24, 0x0853
    4000:	90 91 54 08 	lds	r25, 0x0854
    4004:	a0 91 55 08 	lds	r26, 0x0855
    4008:	b0 91 56 08 	lds	r27, 0x0856
    400c:	01 96       	adiw	r24, 0x01	; 1
    400e:	a1 1d       	adc	r26, r1
    4010:	b1 1d       	adc	r27, r1
    4012:	80 93 53 08 	sts	0x0853, r24
    4016:	90 93 54 08 	sts	0x0854, r25
    401a:	a0 93 55 08 	sts	0x0855, r26
    401e:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
    4022:	89 81       	ldd	r24, Y+1	; 0x01
    4024:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
#endif
    if (OSRunning == OS_TRUE) {
    4028:	80 91 12 05 	lds	r24, 0x0512
    402c:	81 30       	cpi	r24, 0x01	; 1
    402e:	09 f0       	breq	.+2      	; 0x4032 <OSTmr_Task+0x4ee>
    4030:	82 c0       	rjmp	.+260    	; 0x4136 <OSTmr_Task+0x5f2>
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
    4032:	80 91 8b 07 	lds	r24, 0x078B
    4036:	90 91 8c 07 	lds	r25, 0x078C
    403a:	9b 83       	std	Y+3, r25	; 0x03
    403c:	8a 83       	std	Y+2, r24	; 0x02
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    403e:	74 c0       	rjmp	.+232    	; 0x4128 <OSTmr_Task+0x5e4>
            OS_ENTER_CRITICAL();
    4040:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4044:	89 83       	std	Y+1, r24	; 0x01
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
    4046:	8a 81       	ldd	r24, Y+2	; 0x02
    4048:	9b 81       	ldd	r25, Y+3	; 0x03
    404a:	fc 01       	movw	r30, r24
    404c:	84 89       	ldd	r24, Z+20	; 0x14
    404e:	95 89       	ldd	r25, Z+21	; 0x15
    4050:	00 97       	sbiw	r24, 0x00	; 0
    4052:	09 f4       	brne	.+2      	; 0x4056 <OSTmr_Task+0x512>
    4054:	5f c0       	rjmp	.+190    	; 0x4114 <OSTmr_Task+0x5d0>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
    4056:	8a 81       	ldd	r24, Y+2	; 0x02
    4058:	9b 81       	ldd	r25, Y+3	; 0x03
    405a:	fc 01       	movw	r30, r24
    405c:	84 89       	ldd	r24, Z+20	; 0x14
    405e:	95 89       	ldd	r25, Z+21	; 0x15
    4060:	9c 01       	movw	r18, r24
    4062:	21 50       	subi	r18, 0x01	; 1
    4064:	30 40       	sbci	r19, 0x00	; 0
    4066:	8a 81       	ldd	r24, Y+2	; 0x02
    4068:	9b 81       	ldd	r25, Y+3	; 0x03
    406a:	fc 01       	movw	r30, r24
    406c:	35 8b       	std	Z+21, r19	; 0x15
    406e:	24 8b       	std	Z+20, r18	; 0x14
    4070:	8a 81       	ldd	r24, Y+2	; 0x02
    4072:	9b 81       	ldd	r25, Y+3	; 0x03
    4074:	fc 01       	movw	r30, r24
    4076:	84 89       	ldd	r24, Z+20	; 0x14
    4078:	95 89       	ldd	r25, Z+21	; 0x15
    407a:	00 97       	sbiw	r24, 0x00	; 0
    407c:	09 f0       	breq	.+2      	; 0x4080 <OSTmr_Task+0x53c>
    407e:	4a c0       	rjmp	.+148    	; 0x4114 <OSTmr_Task+0x5d0>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    4080:	8a 81       	ldd	r24, Y+2	; 0x02
    4082:	9b 81       	ldd	r25, Y+3	; 0x03
    4084:	fc 01       	movw	r30, r24
    4086:	86 89       	ldd	r24, Z+22	; 0x16
    4088:	88 2f       	mov	r24, r24
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	87 73       	andi	r24, 0x37	; 55
    408e:	90 70       	andi	r25, 0x00	; 0
    4090:	00 97       	sbiw	r24, 0x00	; 0
    4092:	81 f0       	breq	.+32     	; 0x40b4 <OSTmr_Task+0x570>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
    4094:	8a 81       	ldd	r24, Y+2	; 0x02
    4096:	9b 81       	ldd	r25, Y+3	; 0x03
    4098:	fc 01       	movw	r30, r24
    409a:	86 89       	ldd	r24, Z+22	; 0x16
    409c:	28 2f       	mov	r18, r24
    409e:	28 7c       	andi	r18, 0xC8	; 200
    40a0:	8a 81       	ldd	r24, Y+2	; 0x02
    40a2:	9b 81       	ldd	r25, Y+3	; 0x03
    40a4:	fc 01       	movw	r30, r24
    40a6:	26 8b       	std	Z+22, r18	; 0x16
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
    40a8:	8a 81       	ldd	r24, Y+2	; 0x02
    40aa:	9b 81       	ldd	r25, Y+3	; 0x03
    40ac:	21 e0       	ldi	r18, 0x01	; 1
    40ae:	fc 01       	movw	r30, r24
    40b0:	27 8b       	std	Z+23, r18	; 0x17
    40b2:	04 c0       	rjmp	.+8      	; 0x40bc <OSTmr_Task+0x578>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
    40b4:	8a 81       	ldd	r24, Y+2	; 0x02
    40b6:	9b 81       	ldd	r25, Y+3	; 0x03
    40b8:	fc 01       	movw	r30, r24
    40ba:	17 8a       	std	Z+23, r1	; 0x17
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
    40bc:	8a 81       	ldd	r24, Y+2	; 0x02
    40be:	9b 81       	ldd	r25, Y+3	; 0x03
    40c0:	fc 01       	movw	r30, r24
    40c2:	86 89       	ldd	r24, Z+22	; 0x16
    40c4:	88 2f       	mov	r24, r24
    40c6:	90 e0       	ldi	r25, 0x00	; 0
    40c8:	88 70       	andi	r24, 0x08	; 8
    40ca:	90 70       	andi	r25, 0x00	; 0
    40cc:	00 97       	sbiw	r24, 0x00	; 0
    40ce:	11 f5       	brne	.+68     	; 0x4114 <OSTmr_Task+0x5d0>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
    40d0:	8a 81       	ldd	r24, Y+2	; 0x02
    40d2:	9b 81       	ldd	r25, Y+3	; 0x03
    40d4:	fc 01       	movw	r30, r24
    40d6:	94 8d       	ldd	r25, Z+28	; 0x1c
    40d8:	80 91 98 07 	lds	r24, 0x0798
    40dc:	89 2b       	or	r24, r25
    40de:	80 93 98 07 	sts	0x0798, r24
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    40e2:	8a 81       	ldd	r24, Y+2	; 0x02
    40e4:	9b 81       	ldd	r25, Y+3	; 0x03
    40e6:	fc 01       	movw	r30, r24
    40e8:	82 8d       	ldd	r24, Z+26	; 0x1a
    40ea:	88 2f       	mov	r24, r24
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	2a 81       	ldd	r18, Y+2	; 0x02
    40f0:	3b 81       	ldd	r19, Y+3	; 0x03
    40f2:	f9 01       	movw	r30, r18
    40f4:	22 8d       	ldd	r18, Z+26	; 0x1a
    40f6:	22 2f       	mov	r18, r18
    40f8:	30 e0       	ldi	r19, 0x00	; 0
    40fa:	27 56       	subi	r18, 0x67	; 103
    40fc:	38 4f       	sbci	r19, 0xF8	; 248
    40fe:	f9 01       	movw	r30, r18
    4100:	40 81       	ld	r20, Z
    4102:	2a 81       	ldd	r18, Y+2	; 0x02
    4104:	3b 81       	ldd	r19, Y+3	; 0x03
    4106:	f9 01       	movw	r30, r18
    4108:	23 8d       	ldd	r18, Z+27	; 0x1b
    410a:	24 2b       	or	r18, r20
    410c:	87 56       	subi	r24, 0x67	; 103
    410e:	98 4f       	sbci	r25, 0xF8	; 248
    4110:	fc 01       	movw	r30, r24
    4112:	20 83       	st	Z, r18
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
    4114:	8a 81       	ldd	r24, Y+2	; 0x02
    4116:	9b 81       	ldd	r25, Y+3	; 0x03
    4118:	fc 01       	movw	r30, r24
    411a:	86 85       	ldd	r24, Z+14	; 0x0e
    411c:	97 85       	ldd	r25, Z+15	; 0x0f
    411e:	9b 83       	std	Y+3, r25	; 0x03
    4120:	8a 83       	std	Y+2, r24	; 0x02
            OS_EXIT_CRITICAL();
    4122:	89 81       	ldd	r24, Y+1	; 0x01
    4124:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
    4128:	8a 81       	ldd	r24, Y+2	; 0x02
    412a:	9b 81       	ldd	r25, Y+3	; 0x03
    412c:	fc 01       	movw	r30, r24
    412e:	80 8d       	ldd	r24, Z+24	; 0x18
    4130:	8a 30       	cpi	r24, 0x0A	; 10
    4132:	09 f0       	breq	.+2      	; 0x4136 <OSTmr_Task+0x5f2>
    4134:	85 cf       	rjmp	.-246    	; 0x4040 <OSTmr_Task+0x4fc>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
    4136:	0f 90       	pop	r0
    4138:	0f 90       	pop	r0
    413a:	0f 90       	pop	r0
    413c:	cf 91       	pop	r28
    413e:	df 91       	pop	r29
    4140:	08 95       	ret
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
    4142:	df 93       	push	r29
    4144:	cf 93       	push	r28
    4146:	cd b7       	in	r28, 0x3d	; 61
    4148:	de b7       	in	r29, 0x3e	; 62
    return (OS_VERSION);
    414a:	8e e1       	ldi	r24, 0x1E	; 30
    414c:	91 e0       	ldi	r25, 0x01	; 1
}
    414e:	cf 91       	pop	r28
    4150:	df 91       	pop	r29
    4152:	08 95       	ret
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
    4154:	df 93       	push	r29
    4156:	cf 93       	push	r28
    4158:	cd b7       	in	r28, 0x3d	; 61
    415a:	de b7       	in	r29, 0x3e	; 62
    415c:	2b 97       	sbiw	r28, 0x0b	; 11
    415e:	0f b6       	in	r0, 0x3f	; 63
    4160:	f8 94       	cli
    4162:	de bf       	out	0x3e, r29	; 62
    4164:	0f be       	out	0x3f, r0	; 63
    4166:	cd bf       	out	0x3d, r28	; 61
    4168:	9f 83       	std	Y+7, r25	; 0x07
    416a:	8e 83       	std	Y+6, r24	; 0x06
    416c:	79 87       	std	Y+9, r23	; 0x09
    416e:	68 87       	std	Y+8, r22	; 0x08
    4170:	4a 87       	std	Y+10, r20	; 0x0a
    4172:	2b 87       	std	Y+11, r18	; 0x0b
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
    4174:	8e 81       	ldd	r24, Y+6	; 0x06
    4176:	9f 81       	ldd	r25, Y+7	; 0x07
    4178:	fc 01       	movw	r30, r24
    417a:	85 81       	ldd	r24, Z+5	; 0x05
    417c:	88 2f       	mov	r24, r24
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	80 56       	subi	r24, 0x60	; 96
    4182:	9c 4f       	sbci	r25, 0xFC	; 252
    4184:	fc 01       	movw	r30, r24
    4186:	80 81       	ld	r24, Z
    4188:	8b 83       	std	Y+3, r24	; 0x03
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
    418a:	8b 81       	ldd	r24, Y+3	; 0x03
    418c:	88 2f       	mov	r24, r24
    418e:	90 e0       	ldi	r25, 0x00	; 0
    4190:	2e 81       	ldd	r18, Y+6	; 0x06
    4192:	3f 81       	ldd	r19, Y+7	; 0x07
    4194:	82 0f       	add	r24, r18
    4196:	93 1f       	adc	r25, r19
    4198:	06 96       	adiw	r24, 0x06	; 6
    419a:	fc 01       	movw	r30, r24
    419c:	80 81       	ld	r24, Z
    419e:	88 2f       	mov	r24, r24
    41a0:	90 e0       	ldi	r25, 0x00	; 0
    41a2:	80 56       	subi	r24, 0x60	; 96
    41a4:	9c 4f       	sbci	r25, 0xFC	; 252
    41a6:	fc 01       	movw	r30, r24
    41a8:	80 81       	ld	r24, Z
    41aa:	8a 83       	std	Y+2, r24	; 0x02
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
    41ac:	8b 81       	ldd	r24, Y+3	; 0x03
    41ae:	98 2f       	mov	r25, r24
    41b0:	99 0f       	add	r25, r25
    41b2:	99 0f       	add	r25, r25
    41b4:	99 0f       	add	r25, r25
    41b6:	8a 81       	ldd	r24, Y+2	; 0x02
    41b8:	89 0f       	add	r24, r25
    41ba:	89 83       	std	Y+1, r24	; 0x01
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
    41bc:	89 81       	ldd	r24, Y+1	; 0x01
    41be:	88 2f       	mov	r24, r24
    41c0:	90 e0       	ldi	r25, 0x00	; 0
    41c2:	88 0f       	add	r24, r24
    41c4:	99 1f       	adc	r25, r25
    41c6:	80 51       	subi	r24, 0x10	; 16
    41c8:	94 4f       	sbci	r25, 0xF4	; 244
    41ca:	fc 01       	movw	r30, r24
    41cc:	80 81       	ld	r24, Z
    41ce:	91 81       	ldd	r25, Z+1	; 0x01
    41d0:	9d 83       	std	Y+5, r25	; 0x05
    41d2:	8c 83       	std	Y+4, r24	; 0x04
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
    41d4:	8c 81       	ldd	r24, Y+4	; 0x04
    41d6:	9d 81       	ldd	r25, Y+5	; 0x05
    41d8:	fc 01       	movw	r30, r24
    41da:	15 8a       	std	Z+21, r1	; 0x15
    41dc:	14 8a       	std	Z+20, r1	; 0x14
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
    41de:	8c 81       	ldd	r24, Y+4	; 0x04
    41e0:	9d 81       	ldd	r25, Y+5	; 0x05
    41e2:	fc 01       	movw	r30, r24
    41e4:	86 89       	ldd	r24, Z+22	; 0x16
    41e6:	98 2f       	mov	r25, r24
    41e8:	8a 85       	ldd	r24, Y+10	; 0x0a
    41ea:	80 95       	com	r24
    41ec:	89 23       	and	r24, r25
    41ee:	28 2f       	mov	r18, r24
    41f0:	8c 81       	ldd	r24, Y+4	; 0x04
    41f2:	9d 81       	ldd	r25, Y+5	; 0x05
    41f4:	fc 01       	movw	r30, r24
    41f6:	26 8b       	std	Z+22, r18	; 0x16
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
    41f8:	8c 81       	ldd	r24, Y+4	; 0x04
    41fa:	9d 81       	ldd	r25, Y+5	; 0x05
    41fc:	2b 85       	ldd	r18, Y+11	; 0x0b
    41fe:	fc 01       	movw	r30, r24
    4200:	27 8b       	std	Z+23, r18	; 0x17
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
    4202:	8c 81       	ldd	r24, Y+4	; 0x04
    4204:	9d 81       	ldd	r25, Y+5	; 0x05
    4206:	fc 01       	movw	r30, r24
    4208:	86 89       	ldd	r24, Z+22	; 0x16
    420a:	88 2f       	mov	r24, r24
    420c:	90 e0       	ldi	r25, 0x00	; 0
    420e:	88 70       	andi	r24, 0x08	; 8
    4210:	90 70       	andi	r25, 0x00	; 0
    4212:	00 97       	sbiw	r24, 0x00	; 0
    4214:	e1 f4       	brne	.+56     	; 0x424e <OSTmr_Task+0x70a>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
    4216:	8c 81       	ldd	r24, Y+4	; 0x04
    4218:	9d 81       	ldd	r25, Y+5	; 0x05
    421a:	fc 01       	movw	r30, r24
    421c:	94 8d       	ldd	r25, Z+28	; 0x1c
    421e:	80 91 98 07 	lds	r24, 0x0798
    4222:	89 2b       	or	r24, r25
    4224:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
    4228:	8b 81       	ldd	r24, Y+3	; 0x03
    422a:	88 2f       	mov	r24, r24
    422c:	90 e0       	ldi	r25, 0x00	; 0
    422e:	2b 81       	ldd	r18, Y+3	; 0x03
    4230:	22 2f       	mov	r18, r18
    4232:	30 e0       	ldi	r19, 0x00	; 0
    4234:	27 56       	subi	r18, 0x67	; 103
    4236:	38 4f       	sbci	r19, 0xF8	; 248
    4238:	f9 01       	movw	r30, r18
    423a:	40 81       	ld	r20, Z
    423c:	2c 81       	ldd	r18, Y+4	; 0x04
    423e:	3d 81       	ldd	r19, Y+5	; 0x05
    4240:	f9 01       	movw	r30, r18
    4242:	23 8d       	ldd	r18, Z+27	; 0x1b
    4244:	24 2b       	or	r18, r20
    4246:	87 56       	subi	r24, 0x67	; 103
    4248:	98 4f       	sbci	r25, 0xF8	; 248
    424a:	fc 01       	movw	r30, r24
    424c:	20 83       	st	Z, r18
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
    424e:	8c 81       	ldd	r24, Y+4	; 0x04
    4250:	9d 81       	ldd	r25, Y+5	; 0x05
    4252:	2e 81       	ldd	r18, Y+6	; 0x06
    4254:	3f 81       	ldd	r19, Y+7	; 0x07
    4256:	b9 01       	movw	r22, r18
    4258:	0e 94 b7 21 	call	0x436e	; 0x436e <OSTmr_Task+0x82a>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
    }
#endif

    return (prio);
    425c:	89 81       	ldd	r24, Y+1	; 0x01
}
    425e:	2b 96       	adiw	r28, 0x0b	; 11
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	f8 94       	cli
    4264:	de bf       	out	0x3e, r29	; 62
    4266:	0f be       	out	0x3f, r0	; 63
    4268:	cd bf       	out	0x3d, r28	; 61
    426a:	cf 91       	pop	r28
    426c:	df 91       	pop	r29
    426e:	08 95       	ret
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
    4270:	df 93       	push	r29
    4272:	cf 93       	push	r28
    4274:	00 d0       	rcall	.+0      	; 0x4276 <OSTmr_Task+0x732>
    4276:	cd b7       	in	r28, 0x3d	; 61
    4278:	de b7       	in	r29, 0x3e	; 62
    427a:	9b 83       	std	Y+3, r25	; 0x03
    427c:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
    427e:	80 91 4d 08 	lds	r24, 0x084D
    4282:	90 91 4e 08 	lds	r25, 0x084E
    4286:	2a 81       	ldd	r18, Y+2	; 0x02
    4288:	3b 81       	ldd	r19, Y+3	; 0x03
    428a:	fc 01       	movw	r30, r24
    428c:	33 8b       	std	Z+19, r19	; 0x13
    428e:	22 8b       	std	Z+18, r18	; 0x12

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
    4290:	80 91 4d 08 	lds	r24, 0x084D
    4294:	90 91 4e 08 	lds	r25, 0x084E
    4298:	fc 01       	movw	r30, r24
    429a:	82 8d       	ldd	r24, Z+26	; 0x1a
    429c:	88 2f       	mov	r24, r24
    429e:	90 e0       	ldi	r25, 0x00	; 0
    42a0:	20 91 4d 08 	lds	r18, 0x084D
    42a4:	30 91 4e 08 	lds	r19, 0x084E
    42a8:	f9 01       	movw	r30, r18
    42aa:	22 8d       	ldd	r18, Z+26	; 0x1a
    42ac:	22 2f       	mov	r18, r18
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	4a 81       	ldd	r20, Y+2	; 0x02
    42b2:	5b 81       	ldd	r21, Y+3	; 0x03
    42b4:	24 0f       	add	r18, r20
    42b6:	35 1f       	adc	r19, r21
    42b8:	2a 5f       	subi	r18, 0xFA	; 250
    42ba:	3f 4f       	sbci	r19, 0xFF	; 255
    42bc:	f9 01       	movw	r30, r18
    42be:	40 81       	ld	r20, Z
    42c0:	20 91 4d 08 	lds	r18, 0x084D
    42c4:	30 91 4e 08 	lds	r19, 0x084E
    42c8:	f9 01       	movw	r30, r18
    42ca:	23 8d       	ldd	r18, Z+27	; 0x1b
    42cc:	42 2b       	or	r20, r18
    42ce:	2a 81       	ldd	r18, Y+2	; 0x02
    42d0:	3b 81       	ldd	r19, Y+3	; 0x03
    42d2:	82 0f       	add	r24, r18
    42d4:	93 1f       	adc	r25, r19
    42d6:	06 96       	adiw	r24, 0x06	; 6
    42d8:	fc 01       	movw	r30, r24
    42da:	40 83       	st	Z, r20
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
    42dc:	8a 81       	ldd	r24, Y+2	; 0x02
    42de:	9b 81       	ldd	r25, Y+3	; 0x03
    42e0:	fc 01       	movw	r30, r24
    42e2:	25 81       	ldd	r18, Z+5	; 0x05
    42e4:	80 91 4d 08 	lds	r24, 0x084D
    42e8:	90 91 4e 08 	lds	r25, 0x084E
    42ec:	fc 01       	movw	r30, r24
    42ee:	84 8d       	ldd	r24, Z+28	; 0x1c
    42f0:	28 2b       	or	r18, r24
    42f2:	8a 81       	ldd	r24, Y+2	; 0x02
    42f4:	9b 81       	ldd	r25, Y+3	; 0x03
    42f6:	fc 01       	movw	r30, r24
    42f8:	25 83       	std	Z+5, r18	; 0x05

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
    42fa:	80 91 4d 08 	lds	r24, 0x084D
    42fe:	90 91 4e 08 	lds	r25, 0x084E
    4302:	fc 01       	movw	r30, r24
    4304:	82 8d       	ldd	r24, Z+26	; 0x1a
    4306:	89 83       	std	Y+1, r24	; 0x01
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
    4308:	89 81       	ldd	r24, Y+1	; 0x01
    430a:	88 2f       	mov	r24, r24
    430c:	90 e0       	ldi	r25, 0x00	; 0
    430e:	29 81       	ldd	r18, Y+1	; 0x01
    4310:	22 2f       	mov	r18, r18
    4312:	30 e0       	ldi	r19, 0x00	; 0
    4314:	27 56       	subi	r18, 0x67	; 103
    4316:	38 4f       	sbci	r19, 0xF8	; 248
    4318:	f9 01       	movw	r30, r18
    431a:	20 81       	ld	r18, Z
    431c:	42 2f       	mov	r20, r18
    431e:	20 91 4d 08 	lds	r18, 0x084D
    4322:	30 91 4e 08 	lds	r19, 0x084E
    4326:	f9 01       	movw	r30, r18
    4328:	23 8d       	ldd	r18, Z+27	; 0x1b
    432a:	20 95       	com	r18
    432c:	24 23       	and	r18, r20
    432e:	87 56       	subi	r24, 0x67	; 103
    4330:	98 4f       	sbci	r25, 0xF8	; 248
    4332:	fc 01       	movw	r30, r24
    4334:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    4336:	89 81       	ldd	r24, Y+1	; 0x01
    4338:	88 2f       	mov	r24, r24
    433a:	90 e0       	ldi	r25, 0x00	; 0
    433c:	87 56       	subi	r24, 0x67	; 103
    433e:	98 4f       	sbci	r25, 0xF8	; 248
    4340:	fc 01       	movw	r30, r24
    4342:	80 81       	ld	r24, Z
    4344:	88 23       	and	r24, r24
    4346:	69 f4       	brne	.+26     	; 0x4362 <OSTmr_Task+0x81e>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
    4348:	80 91 4d 08 	lds	r24, 0x084D
    434c:	90 91 4e 08 	lds	r25, 0x084E
    4350:	fc 01       	movw	r30, r24
    4352:	84 8d       	ldd	r24, Z+28	; 0x1c
    4354:	98 2f       	mov	r25, r24
    4356:	90 95       	com	r25
    4358:	80 91 98 07 	lds	r24, 0x0798
    435c:	89 23       	and	r24, r25
    435e:	80 93 98 07 	sts	0x0798, r24
    }
}
    4362:	0f 90       	pop	r0
    4364:	0f 90       	pop	r0
    4366:	0f 90       	pop	r0
    4368:	cf 91       	pop	r28
    436a:	df 91       	pop	r29
    436c:	08 95       	ret
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
    436e:	df 93       	push	r29
    4370:	cf 93       	push	r28
    4372:	00 d0       	rcall	.+0      	; 0x4374 <OSTmr_Task+0x830>
    4374:	0f 92       	push	r0
    4376:	0f 92       	push	r0
    4378:	cd b7       	in	r28, 0x3d	; 61
    437a:	de b7       	in	r29, 0x3e	; 62
    437c:	9b 83       	std	Y+3, r25	; 0x03
    437e:	8a 83       	std	Y+2, r24	; 0x02
    4380:	7d 83       	std	Y+5, r23	; 0x05
    4382:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  y;


    y                       =  ptcb->OSTCBY;
    4384:	8a 81       	ldd	r24, Y+2	; 0x02
    4386:	9b 81       	ldd	r25, Y+3	; 0x03
    4388:	fc 01       	movw	r30, r24
    438a:	82 8d       	ldd	r24, Z+26	; 0x1a
    438c:	89 83       	std	Y+1, r24	; 0x01
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
    438e:	89 81       	ldd	r24, Y+1	; 0x01
    4390:	88 2f       	mov	r24, r24
    4392:	90 e0       	ldi	r25, 0x00	; 0
    4394:	29 81       	ldd	r18, Y+1	; 0x01
    4396:	22 2f       	mov	r18, r18
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	4c 81       	ldd	r20, Y+4	; 0x04
    439c:	5d 81       	ldd	r21, Y+5	; 0x05
    439e:	24 0f       	add	r18, r20
    43a0:	35 1f       	adc	r19, r21
    43a2:	2a 5f       	subi	r18, 0xFA	; 250
    43a4:	3f 4f       	sbci	r19, 0xFF	; 255
    43a6:	f9 01       	movw	r30, r18
    43a8:	20 81       	ld	r18, Z
    43aa:	42 2f       	mov	r20, r18
    43ac:	2a 81       	ldd	r18, Y+2	; 0x02
    43ae:	3b 81       	ldd	r19, Y+3	; 0x03
    43b0:	f9 01       	movw	r30, r18
    43b2:	23 8d       	ldd	r18, Z+27	; 0x1b
    43b4:	20 95       	com	r18
    43b6:	24 23       	and	r18, r20
    43b8:	42 2f       	mov	r20, r18
    43ba:	2c 81       	ldd	r18, Y+4	; 0x04
    43bc:	3d 81       	ldd	r19, Y+5	; 0x05
    43be:	82 0f       	add	r24, r18
    43c0:	93 1f       	adc	r25, r19
    43c2:	06 96       	adiw	r24, 0x06	; 6
    43c4:	fc 01       	movw	r30, r24
    43c6:	40 83       	st	Z, r20
    if (pevent->OSEventTbl[y] == 0) {
    43c8:	89 81       	ldd	r24, Y+1	; 0x01
    43ca:	88 2f       	mov	r24, r24
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	2c 81       	ldd	r18, Y+4	; 0x04
    43d0:	3d 81       	ldd	r19, Y+5	; 0x05
    43d2:	82 0f       	add	r24, r18
    43d4:	93 1f       	adc	r25, r19
    43d6:	06 96       	adiw	r24, 0x06	; 6
    43d8:	fc 01       	movw	r30, r24
    43da:	80 81       	ld	r24, Z
    43dc:	88 23       	and	r24, r24
    43de:	81 f4       	brne	.+32     	; 0x4400 <OSTmr_Task+0x8bc>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
    43e0:	8c 81       	ldd	r24, Y+4	; 0x04
    43e2:	9d 81       	ldd	r25, Y+5	; 0x05
    43e4:	fc 01       	movw	r30, r24
    43e6:	85 81       	ldd	r24, Z+5	; 0x05
    43e8:	28 2f       	mov	r18, r24
    43ea:	8a 81       	ldd	r24, Y+2	; 0x02
    43ec:	9b 81       	ldd	r25, Y+3	; 0x03
    43ee:	fc 01       	movw	r30, r24
    43f0:	84 8d       	ldd	r24, Z+28	; 0x1c
    43f2:	80 95       	com	r24
    43f4:	82 23       	and	r24, r18
    43f6:	28 2f       	mov	r18, r24
    43f8:	8c 81       	ldd	r24, Y+4	; 0x04
    43fa:	9d 81       	ldd	r25, Y+5	; 0x05
    43fc:	fc 01       	movw	r30, r24
    43fe:	25 83       	std	Z+5, r18	; 0x05
    }
}
    4400:	0f 90       	pop	r0
    4402:	0f 90       	pop	r0
    4404:	0f 90       	pop	r0
    4406:	0f 90       	pop	r0
    4408:	0f 90       	pop	r0
    440a:	cf 91       	pop	r28
    440c:	df 91       	pop	r29
    440e:	08 95       	ret
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
    4410:	df 93       	push	r29
    4412:	cf 93       	push	r28
    4414:	00 d0       	rcall	.+0      	; 0x4416 <OSTmr_Task+0x8d2>
    4416:	0f 92       	push	r0
    4418:	0f 92       	push	r0
    441a:	cd b7       	in	r28, 0x3d	; 61
    441c:	de b7       	in	r29, 0x3e	; 62
    441e:	9d 83       	std	Y+5, r25	; 0x05
    4420:	8c 83       	std	Y+4, r24	; 0x04
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    4422:	8c 81       	ldd	r24, Y+4	; 0x04
    4424:	9d 81       	ldd	r25, Y+5	; 0x05
    4426:	fc 01       	movw	r30, r24
    4428:	15 82       	std	Z+5, r1	; 0x05
    ptbl               = &pevent->OSEventTbl[0];
    442a:	8c 81       	ldd	r24, Y+4	; 0x04
    442c:	9d 81       	ldd	r25, Y+5	; 0x05
    442e:	06 96       	adiw	r24, 0x06	; 6
    4430:	9b 83       	std	Y+3, r25	; 0x03
    4432:	8a 83       	std	Y+2, r24	; 0x02

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    4434:	19 82       	std	Y+1, r1	; 0x01
    4436:	0c c0       	rjmp	.+24     	; 0x4450 <OSTmr_Task+0x90c>
        *ptbl++ = 0;
    4438:	8a 81       	ldd	r24, Y+2	; 0x02
    443a:	9b 81       	ldd	r25, Y+3	; 0x03
    443c:	fc 01       	movw	r30, r24
    443e:	10 82       	st	Z, r1
    4440:	8a 81       	ldd	r24, Y+2	; 0x02
    4442:	9b 81       	ldd	r25, Y+3	; 0x03
    4444:	01 96       	adiw	r24, 0x01	; 1
    4446:	9b 83       	std	Y+3, r25	; 0x03
    4448:	8a 83       	std	Y+2, r24	; 0x02


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    444a:	89 81       	ldd	r24, Y+1	; 0x01
    444c:	8f 5f       	subi	r24, 0xFF	; 255
    444e:	89 83       	std	Y+1, r24	; 0x01
    4450:	89 81       	ldd	r24, Y+1	; 0x01
    4452:	82 30       	cpi	r24, 0x02	; 2
    4454:	88 f3       	brcs	.-30     	; 0x4438 <OSTmr_Task+0x8f4>
        *ptbl++ = 0;
    }
}
    4456:	0f 90       	pop	r0
    4458:	0f 90       	pop	r0
    445a:	0f 90       	pop	r0
    445c:	0f 90       	pop	r0
    445e:	0f 90       	pop	r0
    4460:	cf 91       	pop	r28
    4462:	df 91       	pop	r29
    4464:	08 95       	ret

00004466 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
    4466:	df 93       	push	r29
    4468:	cf 93       	push	r28
    446a:	00 d0       	rcall	.+0      	; 0x446c <OS_InitEventList+0x6>
    446c:	00 d0       	rcall	.+0      	; 0x446e <OS_InitEventList+0x8>
    446e:	cd b7       	in	r28, 0x3d	; 61
    4470:	de b7       	in	r29, 0x3e	; 62
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    4472:	88 e0       	ldi	r24, 0x08	; 8
    4474:	99 e0       	ldi	r25, 0x09	; 9
    4476:	60 ef       	ldi	r22, 0xF0	; 240
    4478:	70 e0       	ldi	r23, 0x00	; 0
    447a:	0e 94 94 23 	call	0x4728	; 0x4728 <OS_InitTCBList+0xba>
    pevent1 = &OSEventTbl[0];
    447e:	88 e0       	ldi	r24, 0x08	; 8
    4480:	99 e0       	ldi	r25, 0x09	; 9
    4482:	9c 83       	std	Y+4, r25	; 0x04
    4484:	8b 83       	std	Y+3, r24	; 0x03
    pevent2 = &OSEventTbl[1];
    4486:	80 e2       	ldi	r24, 0x20	; 32
    4488:	99 e0       	ldi	r25, 0x09	; 9
    448a:	9a 83       	std	Y+2, r25	; 0x02
    448c:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    448e:	1e 82       	std	Y+6, r1	; 0x06
    4490:	1d 82       	std	Y+5, r1	; 0x05
    4492:	23 c0       	rjmp	.+70     	; 0x44da <OS_InitEventList+0x74>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4494:	8b 81       	ldd	r24, Y+3	; 0x03
    4496:	9c 81       	ldd	r25, Y+4	; 0x04
    4498:	fc 01       	movw	r30, r24
    449a:	10 82       	st	Z, r1
        pevent1->OSEventPtr     = pevent2;
    449c:	8b 81       	ldd	r24, Y+3	; 0x03
    449e:	9c 81       	ldd	r25, Y+4	; 0x04
    44a0:	29 81       	ldd	r18, Y+1	; 0x01
    44a2:	3a 81       	ldd	r19, Y+2	; 0x02
    44a4:	fc 01       	movw	r30, r24
    44a6:	32 83       	std	Z+2, r19	; 0x02
    44a8:	21 83       	std	Z+1, r18	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
    44aa:	8b 81       	ldd	r24, Y+3	; 0x03
    44ac:	9c 81       	ldd	r25, Y+4	; 0x04
    44ae:	2f e3       	ldi	r18, 0x3F	; 63
    44b0:	fc 01       	movw	r30, r24
    44b2:	20 87       	std	Z+8, r18	; 0x08
        pevent1->OSEventName[1] = OS_ASCII_NUL;
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	9c 81       	ldd	r25, Y+4	; 0x04
    44b8:	fc 01       	movw	r30, r24
    44ba:	11 86       	std	Z+9, r1	; 0x09
#endif
        pevent1++;
    44bc:	8b 81       	ldd	r24, Y+3	; 0x03
    44be:	9c 81       	ldd	r25, Y+4	; 0x04
    44c0:	48 96       	adiw	r24, 0x18	; 24
    44c2:	9c 83       	std	Y+4, r25	; 0x04
    44c4:	8b 83       	std	Y+3, r24	; 0x03
        pevent2++;
    44c6:	89 81       	ldd	r24, Y+1	; 0x01
    44c8:	9a 81       	ldd	r25, Y+2	; 0x02
    44ca:	48 96       	adiw	r24, 0x18	; 24
    44cc:	9a 83       	std	Y+2, r25	; 0x02
    44ce:	89 83       	std	Y+1, r24	; 0x01


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
    44d0:	8d 81       	ldd	r24, Y+5	; 0x05
    44d2:	9e 81       	ldd	r25, Y+6	; 0x06
    44d4:	01 96       	adiw	r24, 0x01	; 1
    44d6:	9e 83       	std	Y+6, r25	; 0x06
    44d8:	8d 83       	std	Y+5, r24	; 0x05
    44da:	8d 81       	ldd	r24, Y+5	; 0x05
    44dc:	9e 81       	ldd	r25, Y+6	; 0x06
    44de:	89 30       	cpi	r24, 0x09	; 9
    44e0:	91 05       	cpc	r25, r1
    44e2:	c0 f2       	brcs	.-80     	; 0x4494 <OS_InitEventList+0x2e>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
    44e4:	8b 81       	ldd	r24, Y+3	; 0x03
    44e6:	9c 81       	ldd	r25, Y+4	; 0x04
    44e8:	fc 01       	movw	r30, r24
    44ea:	10 82       	st	Z, r1
    pevent1->OSEventPtr             = (OS_EVENT *)0;
    44ec:	8b 81       	ldd	r24, Y+3	; 0x03
    44ee:	9c 81       	ldd	r25, Y+4	; 0x04
    44f0:	fc 01       	movw	r30, r24
    44f2:	12 82       	std	Z+2, r1	; 0x02
    44f4:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
    44f6:	8b 81       	ldd	r24, Y+3	; 0x03
    44f8:	9c 81       	ldd	r25, Y+4	; 0x04
    44fa:	2f e3       	ldi	r18, 0x3F	; 63
    44fc:	fc 01       	movw	r30, r24
    44fe:	20 87       	std	Z+8, r18	; 0x08
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
    4500:	8b 81       	ldd	r24, Y+3	; 0x03
    4502:	9c 81       	ldd	r25, Y+4	; 0x04
    4504:	fc 01       	movw	r30, r24
    4506:	11 86       	std	Z+9, r1	; 0x09
#endif
    OSEventFreeList                 = &OSEventTbl[0];
    4508:	88 e0       	ldi	r24, 0x08	; 8
    450a:	99 e0       	ldi	r25, 0x09	; 9
    450c:	90 93 4b 08 	sts	0x084B, r25
    4510:	80 93 4a 08 	sts	0x084A, r24
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
    4514:	26 96       	adiw	r28, 0x06	; 6
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	de bf       	out	0x3e, r29	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	cd bf       	out	0x3d, r28	; 61
    4520:	cf 91       	pop	r28
    4522:	df 91       	pop	r29
    4524:	08 95       	ret

00004526 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
    4526:	df 93       	push	r29
    4528:	cf 93       	push	r28
    452a:	cd b7       	in	r28, 0x3d	; 61
    452c:	de b7       	in	r29, 0x3e	; 62
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
    452e:	10 92 53 08 	sts	0x0853, r1
    4532:	10 92 54 08 	sts	0x0854, r1
    4536:	10 92 55 08 	sts	0x0855, r1
    453a:	10 92 56 08 	sts	0x0856, r1
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
    453e:	10 92 4c 08 	sts	0x084C, r1
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
    4542:	10 92 0f 05 	sts	0x050F, r1

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
    4546:	10 92 95 07 	sts	0x0795, r1

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
    454a:	10 92 12 05 	sts	0x0512, r1

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
    454e:	10 92 8d 07 	sts	0x078D, r1
    4552:	10 92 8e 07 	sts	0x078E, r1
    4556:	10 92 8f 07 	sts	0x078F, r1
    455a:	10 92 90 07 	sts	0x0790, r1
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
    455e:	10 92 13 05 	sts	0x0513, r1
    4562:	10 92 14 05 	sts	0x0514, r1
    4566:	10 92 15 05 	sts	0x0515, r1
    456a:	10 92 16 05 	sts	0x0516, r1
#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
    OSIdleCtrMax  = 0L;
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
#endif
}
    456e:	cf 91       	pop	r28
    4570:	df 91       	pop	r29
    4572:	08 95       	ret

00004574 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
    4574:	df 93       	push	r29
    4576:	cf 93       	push	r28
    4578:	00 d0       	rcall	.+0      	; 0x457a <OS_InitRdyList+0x6>
    457a:	cd b7       	in	r28, 0x3d	; 61
    457c:	de b7       	in	r29, 0x3e	; 62
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    457e:	10 92 98 07 	sts	0x0798, r1
    prdytbl       = &OSRdyTbl[0];
    4582:	89 e9       	ldi	r24, 0x99	; 153
    4584:	97 e0       	ldi	r25, 0x07	; 7
    4586:	9a 83       	std	Y+2, r25	; 0x02
    4588:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    458a:	1b 82       	std	Y+3, r1	; 0x03
    458c:	0c c0       	rjmp	.+24     	; 0x45a6 <OS_InitRdyList+0x32>
        *prdytbl++ = 0;
    458e:	89 81       	ldd	r24, Y+1	; 0x01
    4590:	9a 81       	ldd	r25, Y+2	; 0x02
    4592:	fc 01       	movw	r30, r24
    4594:	10 82       	st	Z, r1
    4596:	89 81       	ldd	r24, Y+1	; 0x01
    4598:	9a 81       	ldd	r25, Y+2	; 0x02
    459a:	01 96       	adiw	r24, 0x01	; 1
    459c:	9a 83       	std	Y+2, r25	; 0x02
    459e:	89 83       	std	Y+1, r24	; 0x01
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
    45a0:	8b 81       	ldd	r24, Y+3	; 0x03
    45a2:	8f 5f       	subi	r24, 0xFF	; 255
    45a4:	8b 83       	std	Y+3, r24	; 0x03
    45a6:	8b 81       	ldd	r24, Y+3	; 0x03
    45a8:	82 30       	cpi	r24, 0x02	; 2
    45aa:	88 f3       	brcs	.-30     	; 0x458e <OS_InitRdyList+0x1a>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
    45ac:	10 92 8a 07 	sts	0x078A, r1
    OSPrioHighRdy = 0;
    45b0:	10 92 19 05 	sts	0x0519, r1

    OSTCBHighRdy  = (OS_TCB *)0;
    45b4:	10 92 97 07 	sts	0x0797, r1
    45b8:	10 92 96 07 	sts	0x0796, r1
    OSTCBCur      = (OS_TCB *)0;
    45bc:	10 92 4e 08 	sts	0x084E, r1
    45c0:	10 92 4d 08 	sts	0x084D, r1
}
    45c4:	0f 90       	pop	r0
    45c6:	0f 90       	pop	r0
    45c8:	0f 90       	pop	r0
    45ca:	cf 91       	pop	r28
    45cc:	df 91       	pop	r29
    45ce:	08 95       	ret

000045d0 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
    45d0:	8f 92       	push	r8
    45d2:	9f 92       	push	r9
    45d4:	af 92       	push	r10
    45d6:	bf 92       	push	r11
    45d8:	cf 92       	push	r12
    45da:	df 92       	push	r13
    45dc:	ef 92       	push	r14
    45de:	ff 92       	push	r15
    45e0:	0f 93       	push	r16
    45e2:	1f 93       	push	r17
    45e4:	df 93       	push	r29
    45e6:	cf 93       	push	r28
    45e8:	0f 92       	push	r0
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
    45ee:	0f 92       	push	r0
    45f0:	0f 92       	push	r0
    45f2:	4d b7       	in	r20, 0x3d	; 61
    45f4:	5e b7       	in	r21, 0x3e	; 62
    45f6:	4f 5f       	subi	r20, 0xFF	; 255
    45f8:	5f 4f       	sbci	r21, 0xFF	; 255
    45fa:	89 eb       	ldi	r24, 0xB9	; 185
    45fc:	94 e2       	ldi	r25, 0x24	; 36
    45fe:	27 e0       	ldi	r18, 0x07	; 7
    4600:	39 e0       	ldi	r19, 0x09	; 9
    4602:	e9 e5       	ldi	r30, 0x59	; 89
    4604:	f8 e0       	ldi	r31, 0x08	; 8
    4606:	63 e0       	ldi	r22, 0x03	; 3
    4608:	70 e0       	ldi	r23, 0x00	; 0
    460a:	da 01       	movw	r26, r20
    460c:	6d 93       	st	X+, r22
    460e:	7c 93       	st	X, r23
    4610:	60 e0       	ldi	r22, 0x00	; 0
    4612:	70 e0       	ldi	r23, 0x00	; 0
    4614:	a9 01       	movw	r20, r18
    4616:	2a e0       	ldi	r18, 0x0A	; 10
    4618:	0f ef       	ldi	r16, 0xFF	; 255
    461a:	1f ef       	ldi	r17, 0xFF	; 255
    461c:	7f 01       	movw	r14, r30
    461e:	0f 2e       	mov	r0, r31
    4620:	ff ea       	ldi	r31, 0xAF	; 175
    4622:	af 2e       	mov	r10, r31
    4624:	f0 e0       	ldi	r31, 0x00	; 0
    4626:	bf 2e       	mov	r11, r31
    4628:	f0 e0       	ldi	r31, 0x00	; 0
    462a:	cf 2e       	mov	r12, r31
    462c:	f0 e0       	ldi	r31, 0x00	; 0
    462e:	df 2e       	mov	r13, r31
    4630:	f0 2d       	mov	r31, r0
    4632:	88 24       	eor	r8, r8
    4634:	99 24       	eor	r9, r9
    4636:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <OS_SchedNew+0xc32>
    463a:	0f 90       	pop	r0
    463c:	0f 90       	pop	r0
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
    463e:	20 ea       	ldi	r18, 0xA0	; 160
    4640:	34 e0       	ldi	r19, 0x04	; 4
    4642:	8a e0       	ldi	r24, 0x0A	; 10
    4644:	b9 01       	movw	r22, r18
    4646:	9e 01       	movw	r18, r28
    4648:	2f 5f       	subi	r18, 0xFF	; 255
    464a:	3f 4f       	sbci	r19, 0xFF	; 255
    464c:	a9 01       	movw	r20, r18
    464e:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <OS_SchedNew+0xe52>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
    4652:	0f 90       	pop	r0
    4654:	cf 91       	pop	r28
    4656:	df 91       	pop	r29
    4658:	1f 91       	pop	r17
    465a:	0f 91       	pop	r16
    465c:	ff 90       	pop	r15
    465e:	ef 90       	pop	r14
    4660:	df 90       	pop	r13
    4662:	cf 90       	pop	r12
    4664:	bf 90       	pop	r11
    4666:	af 90       	pop	r10
    4668:	9f 90       	pop	r9
    466a:	8f 90       	pop	r8
    466c:	08 95       	ret

0000466e <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
    466e:	df 93       	push	r29
    4670:	cf 93       	push	r28
    4672:	00 d0       	rcall	.+0      	; 0x4674 <OS_InitTCBList+0x6>
    4674:	0f 92       	push	r0
    4676:	0f 92       	push	r0
    4678:	cd b7       	in	r28, 0x3d	; 61
    467a:	de b7       	in	r29, 0x3e	; 62
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    467c:	88 ef       	ldi	r24, 0xF8	; 248
    467e:	99 e0       	ldi	r25, 0x09	; 9
    4680:	68 ef       	ldi	r22, 0xF8	; 248
    4682:	71 e0       	ldi	r23, 0x01	; 1
    4684:	0e 94 94 23 	call	0x4728	; 0x4728 <OS_InitTCBList+0xba>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    4688:	80 ef       	ldi	r24, 0xF0	; 240
    468a:	9b e0       	ldi	r25, 0x0B	; 11
    468c:	66 e1       	ldi	r22, 0x16	; 22
    468e:	70 e0       	ldi	r23, 0x00	; 0
    4690:	0e 94 94 23 	call	0x4728	; 0x4728 <OS_InitTCBList+0xba>
    ptcb1 = &OSTCBTbl[0];
    4694:	88 ef       	ldi	r24, 0xF8	; 248
    4696:	99 e0       	ldi	r25, 0x09	; 9
    4698:	9c 83       	std	Y+4, r25	; 0x04
    469a:	8b 83       	std	Y+3, r24	; 0x03
    ptcb2 = &OSTCBTbl[1];
    469c:	87 e3       	ldi	r24, 0x37	; 55
    469e:	9a e0       	ldi	r25, 0x0A	; 10
    46a0:	9a 83       	std	Y+2, r25	; 0x02
    46a2:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    46a4:	1d 82       	std	Y+5, r1	; 0x05
    46a6:	1d c0       	rjmp	.+58     	; 0x46e2 <OS_InitTCBList+0x74>
        ptcb1->OSTCBNext = ptcb2;
    46a8:	8b 81       	ldd	r24, Y+3	; 0x03
    46aa:	9c 81       	ldd	r25, Y+4	; 0x04
    46ac:	29 81       	ldd	r18, Y+1	; 0x01
    46ae:	3a 81       	ldd	r19, Y+2	; 0x02
    46b0:	fc 01       	movw	r30, r24
    46b2:	37 87       	std	Z+15, r19	; 0x0f
    46b4:	26 87       	std	Z+14, r18	; 0x0e
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
    46b6:	8b 81       	ldd	r24, Y+3	; 0x03
    46b8:	9c 81       	ldd	r25, Y+4	; 0x04
    46ba:	2f e3       	ldi	r18, 0x3F	; 63
    46bc:	fc 01       	movw	r30, r24
    46be:	27 a7       	std	Z+47, r18	; 0x2f
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    46c0:	8b 81       	ldd	r24, Y+3	; 0x03
    46c2:	9c 81       	ldd	r25, Y+4	; 0x04
    46c4:	fc 01       	movw	r30, r24
    46c6:	10 aa       	std	Z+48, r1	; 0x30
#endif
        ptcb1++;
    46c8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ca:	9c 81       	ldd	r25, Y+4	; 0x04
    46cc:	cf 96       	adiw	r24, 0x3f	; 63
    46ce:	9c 83       	std	Y+4, r25	; 0x04
    46d0:	8b 83       	std	Y+3, r24	; 0x03
        ptcb2++;
    46d2:	89 81       	ldd	r24, Y+1	; 0x01
    46d4:	9a 81       	ldd	r25, Y+2	; 0x02
    46d6:	cf 96       	adiw	r24, 0x3f	; 63
    46d8:	9a 83       	std	Y+2, r25	; 0x02
    46da:	89 83       	std	Y+1, r24	; 0x01

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
    46dc:	8d 81       	ldd	r24, Y+5	; 0x05
    46de:	8f 5f       	subi	r24, 0xFF	; 255
    46e0:	8d 83       	std	Y+5, r24	; 0x05
    46e2:	8d 81       	ldd	r24, Y+5	; 0x05
    46e4:	87 30       	cpi	r24, 0x07	; 7
    46e6:	00 f3       	brcs	.-64     	; 0x46a8 <OS_InitTCBList+0x3a>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
    46e8:	8b 81       	ldd	r24, Y+3	; 0x03
    46ea:	9c 81       	ldd	r25, Y+4	; 0x04
    46ec:	fc 01       	movw	r30, r24
    46ee:	17 86       	std	Z+15, r1	; 0x0f
    46f0:	16 86       	std	Z+14, r1	; 0x0e
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
    46f2:	8b 81       	ldd	r24, Y+3	; 0x03
    46f4:	9c 81       	ldd	r25, Y+4	; 0x04
    46f6:	2f e3       	ldi	r18, 0x3F	; 63
    46f8:	fc 01       	movw	r30, r24
    46fa:	27 a7       	std	Z+47, r18	; 0x2f
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
    46fc:	8b 81       	ldd	r24, Y+3	; 0x03
    46fe:	9c 81       	ldd	r25, Y+4	; 0x04
    4700:	fc 01       	movw	r30, r24
    4702:	10 aa       	std	Z+48, r1	; 0x30
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
    4704:	10 92 8c 07 	sts	0x078C, r1
    4708:	10 92 8b 07 	sts	0x078B, r1
    OSTCBFreeList           = &OSTCBTbl[0];
    470c:	88 ef       	ldi	r24, 0xF8	; 248
    470e:	99 e0       	ldi	r25, 0x09	; 9
    4710:	90 93 94 07 	sts	0x0794, r25
    4714:	80 93 93 07 	sts	0x0793, r24
}
    4718:	0f 90       	pop	r0
    471a:	0f 90       	pop	r0
    471c:	0f 90       	pop	r0
    471e:	0f 90       	pop	r0
    4720:	0f 90       	pop	r0
    4722:	cf 91       	pop	r28
    4724:	df 91       	pop	r29
    4726:	08 95       	ret
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    4728:	df 93       	push	r29
    472a:	cf 93       	push	r28
    472c:	00 d0       	rcall	.+0      	; 0x472e <OS_InitTCBList+0xc0>
    472e:	0f 92       	push	r0
    4730:	cd b7       	in	r28, 0x3d	; 61
    4732:	de b7       	in	r29, 0x3e	; 62
    4734:	9a 83       	std	Y+2, r25	; 0x02
    4736:	89 83       	std	Y+1, r24	; 0x01
    4738:	7c 83       	std	Y+4, r23	; 0x04
    473a:	6b 83       	std	Y+3, r22	; 0x03
    while (size > 0) {
    473c:	0e c0       	rjmp	.+28     	; 0x475a <OS_InitTCBList+0xec>
        *pdest++ = (INT8U)0;
    473e:	89 81       	ldd	r24, Y+1	; 0x01
    4740:	9a 81       	ldd	r25, Y+2	; 0x02
    4742:	fc 01       	movw	r30, r24
    4744:	10 82       	st	Z, r1
    4746:	89 81       	ldd	r24, Y+1	; 0x01
    4748:	9a 81       	ldd	r25, Y+2	; 0x02
    474a:	01 96       	adiw	r24, 0x01	; 1
    474c:	9a 83       	std	Y+2, r25	; 0x02
    474e:	89 83       	std	Y+1, r24	; 0x01
        size--;
    4750:	8b 81       	ldd	r24, Y+3	; 0x03
    4752:	9c 81       	ldd	r25, Y+4	; 0x04
    4754:	01 97       	sbiw	r24, 0x01	; 1
    4756:	9c 83       	std	Y+4, r25	; 0x04
    4758:	8b 83       	std	Y+3, r24	; 0x03
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
    475a:	8b 81       	ldd	r24, Y+3	; 0x03
    475c:	9c 81       	ldd	r25, Y+4	; 0x04
    475e:	00 97       	sbiw	r24, 0x00	; 0
    4760:	71 f7       	brne	.-36     	; 0x473e <OS_InitTCBList+0xd0>
        *pdest++ = (INT8U)0;
        size--;
    }
}
    4762:	0f 90       	pop	r0
    4764:	0f 90       	pop	r0
    4766:	0f 90       	pop	r0
    4768:	0f 90       	pop	r0
    476a:	cf 91       	pop	r28
    476c:	df 91       	pop	r29
    476e:	08 95       	ret
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    4770:	df 93       	push	r29
    4772:	cf 93       	push	r28
    4774:	00 d0       	rcall	.+0      	; 0x4776 <OS_InitTCBList+0x108>
    4776:	00 d0       	rcall	.+0      	; 0x4778 <OS_InitTCBList+0x10a>
    4778:	cd b7       	in	r28, 0x3d	; 61
    477a:	de b7       	in	r29, 0x3e	; 62
    477c:	9a 83       	std	Y+2, r25	; 0x02
    477e:	89 83       	std	Y+1, r24	; 0x01
    4780:	7c 83       	std	Y+4, r23	; 0x04
    4782:	6b 83       	std	Y+3, r22	; 0x03
    4784:	5e 83       	std	Y+6, r21	; 0x06
    4786:	4d 83       	std	Y+5, r20	; 0x05
    while (size > 0) {
    4788:	17 c0       	rjmp	.+46     	; 0x47b8 <OS_InitTCBList+0x14a>
        *pdest++ = *psrc++;
    478a:	8b 81       	ldd	r24, Y+3	; 0x03
    478c:	9c 81       	ldd	r25, Y+4	; 0x04
    478e:	fc 01       	movw	r30, r24
    4790:	20 81       	ld	r18, Z
    4792:	89 81       	ldd	r24, Y+1	; 0x01
    4794:	9a 81       	ldd	r25, Y+2	; 0x02
    4796:	fc 01       	movw	r30, r24
    4798:	20 83       	st	Z, r18
    479a:	89 81       	ldd	r24, Y+1	; 0x01
    479c:	9a 81       	ldd	r25, Y+2	; 0x02
    479e:	01 96       	adiw	r24, 0x01	; 1
    47a0:	9a 83       	std	Y+2, r25	; 0x02
    47a2:	89 83       	std	Y+1, r24	; 0x01
    47a4:	8b 81       	ldd	r24, Y+3	; 0x03
    47a6:	9c 81       	ldd	r25, Y+4	; 0x04
    47a8:	01 96       	adiw	r24, 0x01	; 1
    47aa:	9c 83       	std	Y+4, r25	; 0x04
    47ac:	8b 83       	std	Y+3, r24	; 0x03
        size--;
    47ae:	8d 81       	ldd	r24, Y+5	; 0x05
    47b0:	9e 81       	ldd	r25, Y+6	; 0x06
    47b2:	01 97       	sbiw	r24, 0x01	; 1
    47b4:	9e 83       	std	Y+6, r25	; 0x06
    47b6:	8d 83       	std	Y+5, r24	; 0x05
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
    47b8:	8d 81       	ldd	r24, Y+5	; 0x05
    47ba:	9e 81       	ldd	r25, Y+6	; 0x06
    47bc:	00 97       	sbiw	r24, 0x00	; 0
    47be:	29 f7       	brne	.-54     	; 0x478a <OS_InitTCBList+0x11c>
        *pdest++ = *psrc++;
        size--;
    }
}
    47c0:	26 96       	adiw	r28, 0x06	; 6
    47c2:	0f b6       	in	r0, 0x3f	; 63
    47c4:	f8 94       	cli
    47c6:	de bf       	out	0x3e, r29	; 62
    47c8:	0f be       	out	0x3f, r0	; 63
    47ca:	cd bf       	out	0x3d, r28	; 61
    47cc:	cf 91       	pop	r28
    47ce:	df 91       	pop	r29
    47d0:	08 95       	ret
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
    47d2:	df 93       	push	r29
    47d4:	cf 93       	push	r28
    47d6:	0f 92       	push	r0
    47d8:	cd b7       	in	r28, 0x3d	; 61
    47da:	de b7       	in	r29, 0x3e	; 62
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
    47dc:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    47de:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    47e2:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
    47e4:	80 91 4c 08 	lds	r24, 0x084C
    47e8:	88 23       	and	r24, r24
    47ea:	09 f0       	breq	.+2      	; 0x47ee <OS_InitTCBList+0x180>
    47ec:	41 c0       	rjmp	.+130    	; 0x4870 <OS_InitTCBList+0x202>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
    47ee:	80 91 0f 05 	lds	r24, 0x050F
    47f2:	88 23       	and	r24, r24
    47f4:	e9 f5       	brne	.+122    	; 0x4870 <OS_InitTCBList+0x202>
            OS_SchedNew();
    47f6:	0e 94 3f 24 	call	0x487e	; 0x487e <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
    47fa:	90 91 19 05 	lds	r25, 0x0519
    47fe:	80 91 8a 07 	lds	r24, 0x078A
    4802:	98 17       	cp	r25, r24
    4804:	a9 f1       	breq	.+106    	; 0x4870 <OS_InitTCBList+0x202>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
    4806:	80 91 19 05 	lds	r24, 0x0519
    480a:	88 2f       	mov	r24, r24
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	88 0f       	add	r24, r24
    4810:	99 1f       	adc	r25, r25
    4812:	80 51       	subi	r24, 0x10	; 16
    4814:	94 4f       	sbci	r25, 0xF4	; 244
    4816:	fc 01       	movw	r30, r24
    4818:	80 81       	ld	r24, Z
    481a:	91 81       	ldd	r25, Z+1	; 0x01
    481c:	90 93 97 07 	sts	0x0797, r25
    4820:	80 93 96 07 	sts	0x0796, r24
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
    4824:	20 91 96 07 	lds	r18, 0x0796
    4828:	30 91 97 07 	lds	r19, 0x0797
    482c:	f9 01       	movw	r30, r18
    482e:	85 8d       	ldd	r24, Z+29	; 0x1d
    4830:	96 8d       	ldd	r25, Z+30	; 0x1e
    4832:	a7 8d       	ldd	r26, Z+31	; 0x1f
    4834:	b0 a1       	ldd	r27, Z+32	; 0x20
    4836:	01 96       	adiw	r24, 0x01	; 1
    4838:	a1 1d       	adc	r26, r1
    483a:	b1 1d       	adc	r27, r1
    483c:	f9 01       	movw	r30, r18
    483e:	85 8f       	std	Z+29, r24	; 0x1d
    4840:	96 8f       	std	Z+30, r25	; 0x1e
    4842:	a7 8f       	std	Z+31, r26	; 0x1f
    4844:	b0 a3       	std	Z+32, r27	; 0x20
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
    4846:	80 91 8d 07 	lds	r24, 0x078D
    484a:	90 91 8e 07 	lds	r25, 0x078E
    484e:	a0 91 8f 07 	lds	r26, 0x078F
    4852:	b0 91 90 07 	lds	r27, 0x0790
    4856:	01 96       	adiw	r24, 0x01	; 1
    4858:	a1 1d       	adc	r26, r1
    485a:	b1 1d       	adc	r27, r1
    485c:	80 93 8d 07 	sts	0x078D, r24
    4860:	90 93 8e 07 	sts	0x078E, r25
    4864:	a0 93 8f 07 	sts	0x078F, r26
    4868:	b0 93 90 07 	sts	0x0790, r27
                OS_TASK_SW();                          /* Perform a context switch                     */
    486c:	0e 94 fd 00 	call	0x1fa	; 0x1fa <OSCtxSw>
            }
        }
    }
    OS_EXIT_CRITICAL();
    4870:	89 81       	ldd	r24, Y+1	; 0x01
    4872:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    4876:	0f 90       	pop	r0
    4878:	cf 91       	pop	r28
    487a:	df 91       	pop	r29
    487c:	08 95       	ret

0000487e <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
    487e:	df 93       	push	r29
    4880:	cf 93       	push	r28
    4882:	0f 92       	push	r0
    4884:	cd b7       	in	r28, 0x3d	; 61
    4886:	de b7       	in	r29, 0x3e	; 62
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
    4888:	80 91 98 07 	lds	r24, 0x0798
    488c:	88 2f       	mov	r24, r24
    488e:	90 e0       	ldi	r25, 0x00	; 0
    4890:	80 56       	subi	r24, 0x60	; 96
    4892:	9c 4f       	sbci	r25, 0xFC	; 252
    4894:	fc 01       	movw	r30, r24
    4896:	80 81       	ld	r24, Z
    4898:	89 83       	std	Y+1, r24	; 0x01
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
    489a:	89 81       	ldd	r24, Y+1	; 0x01
    489c:	28 2f       	mov	r18, r24
    489e:	22 0f       	add	r18, r18
    48a0:	22 0f       	add	r18, r18
    48a2:	22 0f       	add	r18, r18
    48a4:	89 81       	ldd	r24, Y+1	; 0x01
    48a6:	88 2f       	mov	r24, r24
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	87 56       	subi	r24, 0x67	; 103
    48ac:	98 4f       	sbci	r25, 0xF8	; 248
    48ae:	fc 01       	movw	r30, r24
    48b0:	80 81       	ld	r24, Z
    48b2:	88 2f       	mov	r24, r24
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	80 56       	subi	r24, 0x60	; 96
    48b8:	9c 4f       	sbci	r25, 0xFC	; 252
    48ba:	fc 01       	movw	r30, r24
    48bc:	80 81       	ld	r24, Z
    48be:	82 0f       	add	r24, r18
    48c0:	80 93 19 05 	sts	0x0519, r24
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
    48c4:	0f 90       	pop	r0
    48c6:	cf 91       	pop	r28
    48c8:	df 91       	pop	r29
    48ca:	08 95       	ret
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
    48cc:	df 93       	push	r29
    48ce:	cf 93       	push	r28
    48d0:	00 d0       	rcall	.+0      	; 0x48d2 <OS_SchedNew+0x54>
    48d2:	0f 92       	push	r0
    48d4:	0f 92       	push	r0
    48d6:	cd b7       	in	r28, 0x3d	; 61
    48d8:	de b7       	in	r29, 0x3e	; 62
    48da:	9b 83       	std	Y+3, r25	; 0x03
    48dc:	8a 83       	std	Y+2, r24	; 0x02
    48de:	7d 83       	std	Y+5, r23	; 0x05
    48e0:	6c 83       	std	Y+4, r22	; 0x04
    INT8U  len;


    len = 0;
    48e2:	19 82       	std	Y+1, r1	; 0x01
    while (*psrc != OS_ASCII_NUL) {
    48e4:	15 c0       	rjmp	.+42     	; 0x4910 <OS_SchedNew+0x92>
        *pdest++ = *psrc++;
    48e6:	8c 81       	ldd	r24, Y+4	; 0x04
    48e8:	9d 81       	ldd	r25, Y+5	; 0x05
    48ea:	fc 01       	movw	r30, r24
    48ec:	20 81       	ld	r18, Z
    48ee:	8a 81       	ldd	r24, Y+2	; 0x02
    48f0:	9b 81       	ldd	r25, Y+3	; 0x03
    48f2:	fc 01       	movw	r30, r24
    48f4:	20 83       	st	Z, r18
    48f6:	8a 81       	ldd	r24, Y+2	; 0x02
    48f8:	9b 81       	ldd	r25, Y+3	; 0x03
    48fa:	01 96       	adiw	r24, 0x01	; 1
    48fc:	9b 83       	std	Y+3, r25	; 0x03
    48fe:	8a 83       	std	Y+2, r24	; 0x02
    4900:	8c 81       	ldd	r24, Y+4	; 0x04
    4902:	9d 81       	ldd	r25, Y+5	; 0x05
    4904:	01 96       	adiw	r24, 0x01	; 1
    4906:	9d 83       	std	Y+5, r25	; 0x05
    4908:	8c 83       	std	Y+4, r24	; 0x04
        len++;
    490a:	89 81       	ldd	r24, Y+1	; 0x01
    490c:	8f 5f       	subi	r24, 0xFF	; 255
    490e:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4910:	8c 81       	ldd	r24, Y+4	; 0x04
    4912:	9d 81       	ldd	r25, Y+5	; 0x05
    4914:	fc 01       	movw	r30, r24
    4916:	80 81       	ld	r24, Z
    4918:	88 23       	and	r24, r24
    491a:	29 f7       	brne	.-54     	; 0x48e6 <OS_SchedNew+0x68>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
    491c:	8a 81       	ldd	r24, Y+2	; 0x02
    491e:	9b 81       	ldd	r25, Y+3	; 0x03
    4920:	fc 01       	movw	r30, r24
    4922:	10 82       	st	Z, r1
    return (len);
    4924:	89 81       	ldd	r24, Y+1	; 0x01
}
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	0f 90       	pop	r0
    492c:	0f 90       	pop	r0
    492e:	0f 90       	pop	r0
    4930:	cf 91       	pop	r28
    4932:	df 91       	pop	r29
    4934:	08 95       	ret
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
    4936:	df 93       	push	r29
    4938:	cf 93       	push	r28
    493a:	00 d0       	rcall	.+0      	; 0x493c <OS_SchedNew+0xbe>
    493c:	cd b7       	in	r28, 0x3d	; 61
    493e:	de b7       	in	r29, 0x3e	; 62
    4940:	9b 83       	std	Y+3, r25	; 0x03
    4942:	8a 83       	std	Y+2, r24	; 0x02
    INT8U  len;


    len = 0;
    4944:	19 82       	std	Y+1, r1	; 0x01
    while (*psrc != OS_ASCII_NUL) {
    4946:	08 c0       	rjmp	.+16     	; 0x4958 <OS_SchedNew+0xda>
        psrc++;
    4948:	8a 81       	ldd	r24, Y+2	; 0x02
    494a:	9b 81       	ldd	r25, Y+3	; 0x03
    494c:	01 96       	adiw	r24, 0x01	; 1
    494e:	9b 83       	std	Y+3, r25	; 0x03
    4950:	8a 83       	std	Y+2, r24	; 0x02
        len++;
    4952:	89 81       	ldd	r24, Y+1	; 0x01
    4954:	8f 5f       	subi	r24, 0xFF	; 255
    4956:	89 83       	std	Y+1, r24	; 0x01
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
    4958:	8a 81       	ldd	r24, Y+2	; 0x02
    495a:	9b 81       	ldd	r25, Y+3	; 0x03
    495c:	fc 01       	movw	r30, r24
    495e:	80 81       	ld	r24, Z
    4960:	88 23       	and	r24, r24
    4962:	91 f7       	brne	.-28     	; 0x4948 <OS_SchedNew+0xca>
        psrc++;
        len++;
    }
    return (len);
    4964:	89 81       	ldd	r24, Y+1	; 0x01
}
    4966:	0f 90       	pop	r0
    4968:	0f 90       	pop	r0
    496a:	0f 90       	pop	r0
    496c:	cf 91       	pop	r28
    496e:	df 91       	pop	r29
    4970:	08 95       	ret
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
    4972:	df 93       	push	r29
    4974:	cf 93       	push	r28
    4976:	00 d0       	rcall	.+0      	; 0x4978 <OS_SchedNew+0xfa>
    4978:	cd b7       	in	r28, 0x3d	; 61
    497a:	de b7       	in	r29, 0x3e	; 62
    497c:	9b 83       	std	Y+3, r25	; 0x03
    497e:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    4980:	19 82       	std	Y+1, r1	; 0x01



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
    4982:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4986:	89 83       	std	Y+1, r24	; 0x01
        OSIdleCtr++;
    4988:	80 91 13 05 	lds	r24, 0x0513
    498c:	90 91 14 05 	lds	r25, 0x0514
    4990:	a0 91 15 05 	lds	r26, 0x0515
    4994:	b0 91 16 05 	lds	r27, 0x0516
    4998:	01 96       	adiw	r24, 0x01	; 1
    499a:	a1 1d       	adc	r26, r1
    499c:	b1 1d       	adc	r27, r1
    499e:	80 93 13 05 	sts	0x0513, r24
    49a2:	90 93 14 05 	sts	0x0514, r25
    49a6:	a0 93 15 05 	sts	0x0515, r26
    49aa:	b0 93 16 05 	sts	0x0516, r27
        OS_EXIT_CRITICAL();
    49ae:	89 81       	ldd	r24, Y+1	; 0x01
    49b0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
    49b4:	0e 94 19 02 	call	0x432	; 0x432 <OSTaskIdleHook>
    }
    49b8:	e4 cf       	rjmp	.-56     	; 0x4982 <OS_SchedNew+0x104>
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
    49ba:	af 92       	push	r10
    49bc:	bf 92       	push	r11
    49be:	cf 92       	push	r12
    49c0:	df 92       	push	r13
    49c2:	ef 92       	push	r14
    49c4:	ff 92       	push	r15
    49c6:	0f 93       	push	r16
    49c8:	1f 93       	push	r17
    49ca:	df 93       	push	r29
    49cc:	cf 93       	push	r28
    49ce:	cd b7       	in	r28, 0x3d	; 61
    49d0:	de b7       	in	r29, 0x3e	; 62
    49d2:	62 97       	sbiw	r28, 0x12	; 18
    49d4:	0f b6       	in	r0, 0x3f	; 63
    49d6:	f8 94       	cli
    49d8:	de bf       	out	0x3e, r29	; 62
    49da:	0f be       	out	0x3f, r0	; 63
    49dc:	cd bf       	out	0x3d, r28	; 61
    49de:	8c 83       	std	Y+4, r24	; 0x04
    49e0:	7e 83       	std	Y+6, r23	; 0x06
    49e2:	6d 83       	std	Y+5, r22	; 0x05
    49e4:	58 87       	std	Y+8, r21	; 0x08
    49e6:	4f 83       	std	Y+7, r20	; 0x07
    49e8:	3a 87       	std	Y+10, r19	; 0x0a
    49ea:	29 87       	std	Y+9, r18	; 0x09
    49ec:	eb 86       	std	Y+11, r14	; 0x0b
    49ee:	fc 86       	std	Y+12, r15	; 0x0c
    49f0:	0d 87       	std	Y+13, r16	; 0x0d
    49f2:	1e 87       	std	Y+14, r17	; 0x0e
    49f4:	d8 8a       	std	Y+16, r13	; 0x10
    49f6:	cf 86       	std	Y+15, r12	; 0x0f
    49f8:	ba 8a       	std	Y+18, r11	; 0x12
    49fa:	a9 8a       	std	Y+17, r10	; 0x11
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    49fc:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    49fe:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4a02:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
    4a04:	80 91 93 07 	lds	r24, 0x0793
    4a08:	90 91 94 07 	lds	r25, 0x0794
    4a0c:	9b 83       	std	Y+3, r25	; 0x03
    4a0e:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb != (OS_TCB *)0) {
    4a10:	8a 81       	ldd	r24, Y+2	; 0x02
    4a12:	9b 81       	ldd	r25, Y+3	; 0x03
    4a14:	00 97       	sbiw	r24, 0x00	; 0
    4a16:	09 f4       	brne	.+2      	; 0x4a1a <OS_SchedNew+0x19c>
    4a18:	15 c1       	rjmp	.+554    	; 0x4c44 <OS_SchedNew+0x3c6>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
    4a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a1e:	fc 01       	movw	r30, r24
    4a20:	86 85       	ldd	r24, Z+14	; 0x0e
    4a22:	97 85       	ldd	r25, Z+15	; 0x0f
    4a24:	90 93 94 07 	sts	0x0794, r25
    4a28:	80 93 93 07 	sts	0x0793, r24
        OS_EXIT_CRITICAL();
    4a2c:	89 81       	ldd	r24, Y+1	; 0x01
    4a2e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
    4a32:	8a 81       	ldd	r24, Y+2	; 0x02
    4a34:	9b 81       	ldd	r25, Y+3	; 0x03
    4a36:	2d 81       	ldd	r18, Y+5	; 0x05
    4a38:	3e 81       	ldd	r19, Y+6	; 0x06
    4a3a:	fc 01       	movw	r30, r24
    4a3c:	31 83       	std	Z+1, r19	; 0x01
    4a3e:	20 83       	st	Z, r18
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
    4a40:	8a 81       	ldd	r24, Y+2	; 0x02
    4a42:	9b 81       	ldd	r25, Y+3	; 0x03
    4a44:	2c 81       	ldd	r18, Y+4	; 0x04
    4a46:	fc 01       	movw	r30, r24
    4a48:	20 8f       	std	Z+24, r18	; 0x18
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
    4a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a4c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a4e:	fc 01       	movw	r30, r24
    4a50:	16 8a       	std	Z+22, r1	; 0x16
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
    4a52:	8a 81       	ldd	r24, Y+2	; 0x02
    4a54:	9b 81       	ldd	r25, Y+3	; 0x03
    4a56:	fc 01       	movw	r30, r24
    4a58:	17 8a       	std	Z+23, r1	; 0x17
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
    4a5a:	8a 81       	ldd	r24, Y+2	; 0x02
    4a5c:	9b 81       	ldd	r25, Y+3	; 0x03
    4a5e:	fc 01       	movw	r30, r24
    4a60:	15 8a       	std	Z+21, r1	; 0x15
    4a62:	14 8a       	std	Z+20, r1	; 0x14

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
    4a64:	8a 81       	ldd	r24, Y+2	; 0x02
    4a66:	9b 81       	ldd	r25, Y+3	; 0x03
    4a68:	2f 85       	ldd	r18, Y+15	; 0x0f
    4a6a:	38 89       	ldd	r19, Y+16	; 0x10
    4a6c:	fc 01       	movw	r30, r24
    4a6e:	33 83       	std	Z+3, r19	; 0x03
    4a70:	22 83       	std	Z+2, r18	; 0x02
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
    4a72:	2a 81       	ldd	r18, Y+2	; 0x02
    4a74:	3b 81       	ldd	r19, Y+3	; 0x03
    4a76:	8b 85       	ldd	r24, Y+11	; 0x0b
    4a78:	9c 85       	ldd	r25, Y+12	; 0x0c
    4a7a:	ad 85       	ldd	r26, Y+13	; 0x0d
    4a7c:	be 85       	ldd	r27, Y+14	; 0x0e
    4a7e:	f9 01       	movw	r30, r18
    4a80:	86 83       	std	Z+6, r24	; 0x06
    4a82:	97 83       	std	Z+7, r25	; 0x07
    4a84:	a0 87       	std	Z+8, r26	; 0x08
    4a86:	b1 87       	std	Z+9, r27	; 0x09
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
    4a88:	8a 81       	ldd	r24, Y+2	; 0x02
    4a8a:	9b 81       	ldd	r25, Y+3	; 0x03
    4a8c:	2f 81       	ldd	r18, Y+7	; 0x07
    4a8e:	38 85       	ldd	r19, Y+8	; 0x08
    4a90:	fc 01       	movw	r30, r24
    4a92:	35 83       	std	Z+5, r19	; 0x05
    4a94:	24 83       	std	Z+4, r18	; 0x04
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
    4a96:	8a 81       	ldd	r24, Y+2	; 0x02
    4a98:	9b 81       	ldd	r25, Y+3	; 0x03
    4a9a:	29 89       	ldd	r18, Y+17	; 0x11
    4a9c:	3a 89       	ldd	r19, Y+18	; 0x12
    4a9e:	fc 01       	movw	r30, r24
    4aa0:	33 87       	std	Z+11, r19	; 0x0b
    4aa2:	22 87       	std	Z+10, r18	; 0x0a
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
    4aa4:	8a 81       	ldd	r24, Y+2	; 0x02
    4aa6:	9b 81       	ldd	r25, Y+3	; 0x03
    4aa8:	29 85       	ldd	r18, Y+9	; 0x09
    4aaa:	3a 85       	ldd	r19, Y+10	; 0x0a
    4aac:	fc 01       	movw	r30, r24
    4aae:	35 87       	std	Z+13, r19	; 0x0d
    4ab0:	24 87       	std	Z+12, r18	; 0x0c
#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
    4ab2:	8c 81       	ldd	r24, Y+4	; 0x04
    4ab4:	28 2f       	mov	r18, r24
    4ab6:	26 95       	lsr	r18
    4ab8:	26 95       	lsr	r18
    4aba:	26 95       	lsr	r18
    4abc:	8a 81       	ldd	r24, Y+2	; 0x02
    4abe:	9b 81       	ldd	r25, Y+3	; 0x03
    4ac0:	fc 01       	movw	r30, r24
    4ac2:	22 8f       	std	Z+26, r18	; 0x1a
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
    4ac4:	8c 81       	ldd	r24, Y+4	; 0x04
    4ac6:	28 2f       	mov	r18, r24
    4ac8:	27 70       	andi	r18, 0x07	; 7
    4aca:	8a 81       	ldd	r24, Y+2	; 0x02
    4acc:	9b 81       	ldd	r25, Y+3	; 0x03
    4ace:	fc 01       	movw	r30, r24
    4ad0:	21 8f       	std	Z+25, r18	; 0x19
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
    4ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ad4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ad6:	fc 01       	movw	r30, r24
    4ad8:	82 8d       	ldd	r24, Z+26	; 0x1a
    4ada:	28 2f       	mov	r18, r24
    4adc:	30 e0       	ldi	r19, 0x00	; 0
    4ade:	81 e0       	ldi	r24, 0x01	; 1
    4ae0:	90 e0       	ldi	r25, 0x00	; 0
    4ae2:	02 c0       	rjmp	.+4      	; 0x4ae8 <OS_SchedNew+0x26a>
    4ae4:	88 0f       	add	r24, r24
    4ae6:	99 1f       	adc	r25, r25
    4ae8:	2a 95       	dec	r18
    4aea:	e2 f7       	brpl	.-8      	; 0x4ae4 <OS_SchedNew+0x266>
    4aec:	28 2f       	mov	r18, r24
    4aee:	8a 81       	ldd	r24, Y+2	; 0x02
    4af0:	9b 81       	ldd	r25, Y+3	; 0x03
    4af2:	fc 01       	movw	r30, r24
    4af4:	24 8f       	std	Z+28, r18	; 0x1c
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
    4af6:	8a 81       	ldd	r24, Y+2	; 0x02
    4af8:	9b 81       	ldd	r25, Y+3	; 0x03
    4afa:	fc 01       	movw	r30, r24
    4afc:	81 8d       	ldd	r24, Z+25	; 0x19
    4afe:	28 2f       	mov	r18, r24
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	81 e0       	ldi	r24, 0x01	; 1
    4b04:	90 e0       	ldi	r25, 0x00	; 0
    4b06:	02 c0       	rjmp	.+4      	; 0x4b0c <OS_SchedNew+0x28e>
    4b08:	88 0f       	add	r24, r24
    4b0a:	99 1f       	adc	r25, r25
    4b0c:	2a 95       	dec	r18
    4b0e:	e2 f7       	brpl	.-8      	; 0x4b08 <OS_SchedNew+0x28a>
    4b10:	28 2f       	mov	r18, r24
    4b12:	8a 81       	ldd	r24, Y+2	; 0x02
    4b14:	9b 81       	ldd	r25, Y+3	; 0x03
    4b16:	fc 01       	movw	r30, r24
    4b18:	23 8f       	std	Z+27, r18	; 0x1b
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
    4b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1e:	fc 01       	movw	r30, r24
    4b20:	13 8a       	std	Z+19, r1	; 0x13
    4b22:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
    4b24:	8a 81       	ldd	r24, Y+2	; 0x02
    4b26:	9b 81       	ldd	r25, Y+3	; 0x03
    4b28:	fc 01       	movw	r30, r24
    4b2a:	15 8e       	std	Z+29, r1	; 0x1d
    4b2c:	16 8e       	std	Z+30, r1	; 0x1e
    4b2e:	17 8e       	std	Z+31, r1	; 0x1f
    4b30:	10 a2       	std	Z+32, r1	; 0x20
        ptcb->OSTCBCyclesStart = 0L;
    4b32:	8a 81       	ldd	r24, Y+2	; 0x02
    4b34:	9b 81       	ldd	r25, Y+3	; 0x03
    4b36:	fc 01       	movw	r30, r24
    4b38:	15 a2       	std	Z+37, r1	; 0x25
    4b3a:	16 a2       	std	Z+38, r1	; 0x26
    4b3c:	17 a2       	std	Z+39, r1	; 0x27
    4b3e:	10 a6       	std	Z+40, r1	; 0x28
        ptcb->OSTCBCyclesTot   = 0L;
    4b40:	8a 81       	ldd	r24, Y+2	; 0x02
    4b42:	9b 81       	ldd	r25, Y+3	; 0x03
    4b44:	fc 01       	movw	r30, r24
    4b46:	11 a2       	std	Z+33, r1	; 0x21
    4b48:	12 a2       	std	Z+34, r1	; 0x22
    4b4a:	13 a2       	std	Z+35, r1	; 0x23
    4b4c:	14 a2       	std	Z+36, r1	; 0x24
        ptcb->OSTCBStkBase     = (OS_STK *)0;
    4b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    4b50:	9b 81       	ldd	r25, Y+3	; 0x03
    4b52:	fc 01       	movw	r30, r24
    4b54:	12 a6       	std	Z+42, r1	; 0x2a
    4b56:	11 a6       	std	Z+41, r1	; 0x29
        ptcb->OSTCBStkUsed     = 0L;
    4b58:	8a 81       	ldd	r24, Y+2	; 0x02
    4b5a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b5c:	fc 01       	movw	r30, r24
    4b5e:	13 a6       	std	Z+43, r1	; 0x2b
    4b60:	14 a6       	std	Z+44, r1	; 0x2c
    4b62:	15 a6       	std	Z+45, r1	; 0x2d
    4b64:	16 a6       	std	Z+46, r1	; 0x2e
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
    4b66:	8a 81       	ldd	r24, Y+2	; 0x02
    4b68:	9b 81       	ldd	r25, Y+3	; 0x03
    4b6a:	2f e3       	ldi	r18, 0x3F	; 63
    4b6c:	fc 01       	movw	r30, r24
    4b6e:	27 a7       	std	Z+47, r18	; 0x2f
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
    4b70:	8a 81       	ldd	r24, Y+2	; 0x02
    4b72:	9b 81       	ldd	r25, Y+3	; 0x03
    4b74:	fc 01       	movw	r30, r24
    4b76:	10 aa       	std	Z+48, r1	; 0x30
#endif

        OSTCBInitHook(ptcb);
    4b78:	8a 81       	ldd	r24, Y+2	; 0x02
    4b7a:	9b 81       	ldd	r25, Y+3	; 0x03
    4b7c:	0e 94 bc 03 	call	0x778	; 0x778 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
    4b80:	8a 81       	ldd	r24, Y+2	; 0x02
    4b82:	9b 81       	ldd	r25, Y+3	; 0x03
    4b84:	0e 94 f7 01 	call	0x3ee	; 0x3ee <OSTaskCreateHook>

        OS_ENTER_CRITICAL();
    4b88:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4b8c:	89 83       	std	Y+1, r24	; 0x01
        OSTCBPrioTbl[prio] = ptcb;
    4b8e:	8c 81       	ldd	r24, Y+4	; 0x04
    4b90:	88 2f       	mov	r24, r24
    4b92:	90 e0       	ldi	r25, 0x00	; 0
    4b94:	88 0f       	add	r24, r24
    4b96:	99 1f       	adc	r25, r25
    4b98:	80 51       	subi	r24, 0x10	; 16
    4b9a:	94 4f       	sbci	r25, 0xF4	; 244
    4b9c:	2a 81       	ldd	r18, Y+2	; 0x02
    4b9e:	3b 81       	ldd	r19, Y+3	; 0x03
    4ba0:	fc 01       	movw	r30, r24
    4ba2:	31 83       	std	Z+1, r19	; 0x01
    4ba4:	20 83       	st	Z, r18
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
    4ba6:	20 91 8b 07 	lds	r18, 0x078B
    4baa:	30 91 8c 07 	lds	r19, 0x078C
    4bae:	8a 81       	ldd	r24, Y+2	; 0x02
    4bb0:	9b 81       	ldd	r25, Y+3	; 0x03
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	37 87       	std	Z+15, r19	; 0x0f
    4bb6:	26 87       	std	Z+14, r18	; 0x0e
        ptcb->OSTCBPrev    = (OS_TCB *)0;
    4bb8:	8a 81       	ldd	r24, Y+2	; 0x02
    4bba:	9b 81       	ldd	r25, Y+3	; 0x03
    4bbc:	fc 01       	movw	r30, r24
    4bbe:	11 8a       	std	Z+17, r1	; 0x11
    4bc0:	10 8a       	std	Z+16, r1	; 0x10
        if (OSTCBList != (OS_TCB *)0) {
    4bc2:	80 91 8b 07 	lds	r24, 0x078B
    4bc6:	90 91 8c 07 	lds	r25, 0x078C
    4bca:	00 97       	sbiw	r24, 0x00	; 0
    4bcc:	49 f0       	breq	.+18     	; 0x4be0 <OS_SchedNew+0x362>
            OSTCBList->OSTCBPrev = ptcb;
    4bce:	80 91 8b 07 	lds	r24, 0x078B
    4bd2:	90 91 8c 07 	lds	r25, 0x078C
    4bd6:	2a 81       	ldd	r18, Y+2	; 0x02
    4bd8:	3b 81       	ldd	r19, Y+3	; 0x03
    4bda:	fc 01       	movw	r30, r24
    4bdc:	31 8b       	std	Z+17, r19	; 0x11
    4bde:	20 8b       	std	Z+16, r18	; 0x10
        }
        OSTCBList               = ptcb;
    4be0:	8a 81       	ldd	r24, Y+2	; 0x02
    4be2:	9b 81       	ldd	r25, Y+3	; 0x03
    4be4:	90 93 8c 07 	sts	0x078C, r25
    4be8:	80 93 8b 07 	sts	0x078B, r24
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
    4bec:	8a 81       	ldd	r24, Y+2	; 0x02
    4bee:	9b 81       	ldd	r25, Y+3	; 0x03
    4bf0:	fc 01       	movw	r30, r24
    4bf2:	94 8d       	ldd	r25, Z+28	; 0x1c
    4bf4:	80 91 98 07 	lds	r24, 0x0798
    4bf8:	89 2b       	or	r24, r25
    4bfa:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    4bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    4c00:	9b 81       	ldd	r25, Y+3	; 0x03
    4c02:	fc 01       	movw	r30, r24
    4c04:	82 8d       	ldd	r24, Z+26	; 0x1a
    4c06:	88 2f       	mov	r24, r24
    4c08:	90 e0       	ldi	r25, 0x00	; 0
    4c0a:	2a 81       	ldd	r18, Y+2	; 0x02
    4c0c:	3b 81       	ldd	r19, Y+3	; 0x03
    4c0e:	f9 01       	movw	r30, r18
    4c10:	22 8d       	ldd	r18, Z+26	; 0x1a
    4c12:	22 2f       	mov	r18, r18
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	27 56       	subi	r18, 0x67	; 103
    4c18:	38 4f       	sbci	r19, 0xF8	; 248
    4c1a:	f9 01       	movw	r30, r18
    4c1c:	40 81       	ld	r20, Z
    4c1e:	2a 81       	ldd	r18, Y+2	; 0x02
    4c20:	3b 81       	ldd	r19, Y+3	; 0x03
    4c22:	f9 01       	movw	r30, r18
    4c24:	23 8d       	ldd	r18, Z+27	; 0x1b
    4c26:	24 2b       	or	r18, r20
    4c28:	87 56       	subi	r24, 0x67	; 103
    4c2a:	98 4f       	sbci	r25, 0xF8	; 248
    4c2c:	fc 01       	movw	r30, r24
    4c2e:	20 83       	st	Z, r18
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
    4c30:	80 91 95 07 	lds	r24, 0x0795
    4c34:	8f 5f       	subi	r24, 0xFF	; 255
    4c36:	80 93 95 07 	sts	0x0795, r24
        OS_EXIT_CRITICAL();
    4c3a:	89 81       	ldd	r24, Y+1	; 0x01
    4c3c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	04 c0       	rjmp	.+8      	; 0x4c4c <OS_SchedNew+0x3ce>
    }
    OS_EXIT_CRITICAL();
    4c44:	89 81       	ldd	r24, Y+1	; 0x01
    4c46:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NO_MORE_TCB);
    4c4a:	82 e4       	ldi	r24, 0x42	; 66
}
    4c4c:	62 96       	adiw	r28, 0x12	; 18
    4c4e:	0f b6       	in	r0, 0x3f	; 63
    4c50:	f8 94       	cli
    4c52:	de bf       	out	0x3e, r29	; 62
    4c54:	0f be       	out	0x3f, r0	; 63
    4c56:	cd bf       	out	0x3d, r28	; 61
    4c58:	cf 91       	pop	r28
    4c5a:	df 91       	pop	r29
    4c5c:	1f 91       	pop	r17
    4c5e:	0f 91       	pop	r16
    4c60:	ff 90       	pop	r15
    4c62:	ef 90       	pop	r14
    4c64:	df 90       	pop	r13
    4c66:	cf 90       	pop	r12
    4c68:	bf 90       	pop	r11
    4c6a:	af 90       	pop	r10
    4c6c:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
    4c6e:	df 93       	push	r29
    4c70:	cf 93       	push	r28
    4c72:	00 d0       	rcall	.+0      	; 0x4c74 <OS_SchedNew+0x3f6>
    4c74:	0f 92       	push	r0
    4c76:	0f 92       	push	r0
    4c78:	cd b7       	in	r28, 0x3d	; 61
    4c7a:	de b7       	in	r29, 0x3e	; 62
    4c7c:	9d 83       	std	Y+5, r25	; 0x05
    4c7e:	8c 83       	std	Y+4, r24	; 0x04
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4c80:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    4c82:	8c 81       	ldd	r24, Y+4	; 0x04
    4c84:	9d 81       	ldd	r25, Y+5	; 0x05
    4c86:	fc 01       	movw	r30, r24
    4c88:	80 81       	ld	r24, Z
    4c8a:	83 30       	cpi	r24, 0x03	; 3
    4c8c:	19 f0       	breq	.+6      	; 0x4c94 <OS_SchedNew+0x416>
        return (0);
    4c8e:	80 e0       	ldi	r24, 0x00	; 0
    4c90:	90 e0       	ldi	r25, 0x00	; 0
    4c92:	20 c0       	rjmp	.+64     	; 0x4cd4 <OS_SchedNew+0x456>
    }
    OS_ENTER_CRITICAL();
    4c94:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4c98:	89 83       	std	Y+1, r24	; 0x01
    cnt = pevent->OSEventCnt;
    4c9a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c9c:	9d 81       	ldd	r25, Y+5	; 0x05
    4c9e:	fc 01       	movw	r30, r24
    4ca0:	83 81       	ldd	r24, Z+3	; 0x03
    4ca2:	94 81       	ldd	r25, Z+4	; 0x04
    4ca4:	9b 83       	std	Y+3, r25	; 0x03
    4ca6:	8a 83       	std	Y+2, r24	; 0x02
    if (cnt > 0) {                                    /* See if resource is available                  */
    4ca8:	8a 81       	ldd	r24, Y+2	; 0x02
    4caa:	9b 81       	ldd	r25, Y+3	; 0x03
    4cac:	00 97       	sbiw	r24, 0x00	; 0
    4cae:	69 f0       	breq	.+26     	; 0x4cca <OS_SchedNew+0x44c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
    4cb0:	8c 81       	ldd	r24, Y+4	; 0x04
    4cb2:	9d 81       	ldd	r25, Y+5	; 0x05
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	83 81       	ldd	r24, Z+3	; 0x03
    4cb8:	94 81       	ldd	r25, Z+4	; 0x04
    4cba:	9c 01       	movw	r18, r24
    4cbc:	21 50       	subi	r18, 0x01	; 1
    4cbe:	30 40       	sbci	r19, 0x00	; 0
    4cc0:	8c 81       	ldd	r24, Y+4	; 0x04
    4cc2:	9d 81       	ldd	r25, Y+5	; 0x05
    4cc4:	fc 01       	movw	r30, r24
    4cc6:	34 83       	std	Z+4, r19	; 0x04
    4cc8:	23 83       	std	Z+3, r18	; 0x03
    }
    OS_EXIT_CRITICAL();
    4cca:	89 81       	ldd	r24, Y+1	; 0x01
    4ccc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (cnt);                                     /* Return semaphore count                        */
    4cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    4cd2:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4cd4:	0f 90       	pop	r0
    4cd6:	0f 90       	pop	r0
    4cd8:	0f 90       	pop	r0
    4cda:	0f 90       	pop	r0
    4cdc:	0f 90       	pop	r0
    4cde:	cf 91       	pop	r28
    4ce0:	df 91       	pop	r29
    4ce2:	08 95       	ret
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
    4ce4:	df 93       	push	r29
    4ce6:	cf 93       	push	r28
    4ce8:	00 d0       	rcall	.+0      	; 0x4cea <OS_SchedNew+0x46c>
    4cea:	0f 92       	push	r0
    4cec:	0f 92       	push	r0
    4cee:	cd b7       	in	r28, 0x3d	; 61
    4cf0:	de b7       	in	r29, 0x3e	; 62
    4cf2:	9d 83       	std	Y+5, r25	; 0x05
    4cf4:	8c 83       	std	Y+4, r24	; 0x04
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4cf6:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4cf8:	80 91 4c 08 	lds	r24, 0x084C
    4cfc:	88 23       	and	r24, r24
    4cfe:	19 f0       	breq	.+6      	; 0x4d06 <OS_SchedNew+0x488>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
    4d00:	80 e0       	ldi	r24, 0x00	; 0
    4d02:	90 e0       	ldi	r25, 0x00	; 0
    4d04:	41 c0       	rjmp	.+130    	; 0x4d88 <OS_SchedNew+0x50a>
    }
    OS_ENTER_CRITICAL();
    4d06:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4d0a:	89 83       	std	Y+1, r24	; 0x01
    pevent = OSEventFreeList;                              /* Get next free event control block        */
    4d0c:	80 91 4a 08 	lds	r24, 0x084A
    4d10:	90 91 4b 08 	lds	r25, 0x084B
    4d14:	9b 83       	std	Y+3, r25	; 0x03
    4d16:	8a 83       	std	Y+2, r24	; 0x02
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
    4d18:	80 91 4a 08 	lds	r24, 0x084A
    4d1c:	90 91 4b 08 	lds	r25, 0x084B
    4d20:	00 97       	sbiw	r24, 0x00	; 0
    4d22:	59 f0       	breq	.+22     	; 0x4d3a <OS_SchedNew+0x4bc>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
    4d24:	80 91 4a 08 	lds	r24, 0x084A
    4d28:	90 91 4b 08 	lds	r25, 0x084B
    4d2c:	fc 01       	movw	r30, r24
    4d2e:	81 81       	ldd	r24, Z+1	; 0x01
    4d30:	92 81       	ldd	r25, Z+2	; 0x02
    4d32:	90 93 4b 08 	sts	0x084B, r25
    4d36:	80 93 4a 08 	sts	0x084A, r24
    }
    OS_EXIT_CRITICAL();
    4d3a:	89 81       	ldd	r24, Y+1	; 0x01
    4d3c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
    4d40:	8a 81       	ldd	r24, Y+2	; 0x02
    4d42:	9b 81       	ldd	r25, Y+3	; 0x03
    4d44:	00 97       	sbiw	r24, 0x00	; 0
    4d46:	f1 f0       	breq	.+60     	; 0x4d84 <OS_SchedNew+0x506>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
    4d48:	8a 81       	ldd	r24, Y+2	; 0x02
    4d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    4d4c:	23 e0       	ldi	r18, 0x03	; 3
    4d4e:	fc 01       	movw	r30, r24
    4d50:	20 83       	st	Z, r18
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
    4d52:	8a 81       	ldd	r24, Y+2	; 0x02
    4d54:	9b 81       	ldd	r25, Y+3	; 0x03
    4d56:	2c 81       	ldd	r18, Y+4	; 0x04
    4d58:	3d 81       	ldd	r19, Y+5	; 0x05
    4d5a:	fc 01       	movw	r30, r24
    4d5c:	34 83       	std	Z+4, r19	; 0x04
    4d5e:	23 83       	std	Z+3, r18	; 0x03
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
    4d60:	8a 81       	ldd	r24, Y+2	; 0x02
    4d62:	9b 81       	ldd	r25, Y+3	; 0x03
    4d64:	fc 01       	movw	r30, r24
    4d66:	12 82       	std	Z+2, r1	; 0x02
    4d68:	11 82       	std	Z+1, r1	; 0x01
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
    4d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    4d6c:	9b 81       	ldd	r25, Y+3	; 0x03
    4d6e:	2f e3       	ldi	r18, 0x3F	; 63
    4d70:	fc 01       	movw	r30, r24
    4d72:	20 87       	std	Z+8, r18	; 0x08
        pevent->OSEventName[1] = OS_ASCII_NUL;
    4d74:	8a 81       	ldd	r24, Y+2	; 0x02
    4d76:	9b 81       	ldd	r25, Y+3	; 0x03
    4d78:	fc 01       	movw	r30, r24
    4d7a:	11 86       	std	Z+9, r1	; 0x09
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
    4d7c:	8a 81       	ldd	r24, Y+2	; 0x02
    4d7e:	9b 81       	ldd	r25, Y+3	; 0x03
    4d80:	0e 94 08 22 	call	0x4410	; 0x4410 <OSTmr_Task+0x8cc>
    }
    return (pevent);
    4d84:	8a 81       	ldd	r24, Y+2	; 0x02
    4d86:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4d88:	0f 90       	pop	r0
    4d8a:	0f 90       	pop	r0
    4d8c:	0f 90       	pop	r0
    4d8e:	0f 90       	pop	r0
    4d90:	0f 90       	pop	r0
    4d92:	cf 91       	pop	r28
    4d94:	df 91       	pop	r29
    4d96:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    4d98:	df 93       	push	r29
    4d9a:	cf 93       	push	r28
    4d9c:	cd b7       	in	r28, 0x3d	; 61
    4d9e:	de b7       	in	r29, 0x3e	; 62
    4da0:	29 97       	sbiw	r28, 0x09	; 9
    4da2:	0f b6       	in	r0, 0x3f	; 63
    4da4:	f8 94       	cli
    4da6:	de bf       	out	0x3e, r29	; 62
    4da8:	0f be       	out	0x3f, r0	; 63
    4daa:	cd bf       	out	0x3d, r28	; 61
    4dac:	9e 83       	std	Y+6, r25	; 0x06
    4dae:	8d 83       	std	Y+5, r24	; 0x05
    4db0:	6f 83       	std	Y+7, r22	; 0x07
    4db2:	59 87       	std	Y+9, r21	; 0x09
    4db4:	48 87       	std	Y+8, r20	; 0x08
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    4db6:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
        *perr = OS_ERR_PEVENT_NULL;
        return (pevent);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    4db8:	8d 81       	ldd	r24, Y+5	; 0x05
    4dba:	9e 81       	ldd	r25, Y+6	; 0x06
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	80 81       	ld	r24, Z
    4dc0:	83 30       	cpi	r24, 0x03	; 3
    4dc2:	41 f0       	breq	.+16     	; 0x4dd4 <OS_SchedNew+0x556>
        *perr = OS_ERR_EVENT_TYPE;
    4dc4:	88 85       	ldd	r24, Y+8	; 0x08
    4dc6:	99 85       	ldd	r25, Y+9	; 0x09
    4dc8:	21 e0       	ldi	r18, 0x01	; 1
    4dca:	fc 01       	movw	r30, r24
    4dcc:	20 83       	st	Z, r18
        return (pevent);
    4dce:	8d 81       	ldd	r24, Y+5	; 0x05
    4dd0:	9e 81       	ldd	r25, Y+6	; 0x06
    4dd2:	ac c0       	rjmp	.+344    	; 0x4f2c <OS_SchedNew+0x6ae>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
    4dd4:	80 91 4c 08 	lds	r24, 0x084C
    4dd8:	88 23       	and	r24, r24
    4dda:	41 f0       	breq	.+16     	; 0x4dec <OS_SchedNew+0x56e>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
    4ddc:	88 85       	ldd	r24, Y+8	; 0x08
    4dde:	99 85       	ldd	r25, Y+9	; 0x09
    4de0:	2f e0       	ldi	r18, 0x0F	; 15
    4de2:	fc 01       	movw	r30, r24
    4de4:	20 83       	st	Z, r18
        return (pevent);
    4de6:	8d 81       	ldd	r24, Y+5	; 0x05
    4de8:	9e 81       	ldd	r25, Y+6	; 0x06
    4dea:	a0 c0       	rjmp	.+320    	; 0x4f2c <OS_SchedNew+0x6ae>
    }
    OS_ENTER_CRITICAL();
    4dec:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4df0:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
    4df2:	8d 81       	ldd	r24, Y+5	; 0x05
    4df4:	9e 81       	ldd	r25, Y+6	; 0x06
    4df6:	fc 01       	movw	r30, r24
    4df8:	85 81       	ldd	r24, Z+5	; 0x05
    4dfa:	88 23       	and	r24, r24
    4dfc:	19 f0       	breq	.+6      	; 0x4e04 <OS_SchedNew+0x586>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
    4e00:	8c 83       	std	Y+4, r24	; 0x04
    4e02:	01 c0       	rjmp	.+2      	; 0x4e06 <OS_SchedNew+0x588>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
    4e04:	1c 82       	std	Y+4, r1	; 0x04
    }
    switch (opt) {
    4e06:	8f 81       	ldd	r24, Y+7	; 0x07
    4e08:	88 2f       	mov	r24, r24
    4e0a:	90 e0       	ldi	r25, 0x00	; 0
    4e0c:	00 97       	sbiw	r24, 0x00	; 0
    4e0e:	29 f0       	breq	.+10     	; 0x4e1a <OS_SchedNew+0x59c>
    4e10:	81 30       	cpi	r24, 0x01	; 1
    4e12:	91 05       	cpc	r25, r1
    4e14:	09 f4       	brne	.+2      	; 0x4e18 <OS_SchedNew+0x59a>
    4e16:	45 c0       	rjmp	.+138    	; 0x4ea2 <OS_SchedNew+0x624>
    4e18:	7b c0       	rjmp	.+246    	; 0x4f10 <OS_SchedNew+0x692>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
    4e1a:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1c:	88 23       	and	r24, r24
    4e1e:	59 f5       	brne	.+86     	; 0x4e76 <OS_SchedNew+0x5f8>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
    4e20:	8d 81       	ldd	r24, Y+5	; 0x05
    4e22:	9e 81       	ldd	r25, Y+6	; 0x06
    4e24:	2f e3       	ldi	r18, 0x3F	; 63
    4e26:	fc 01       	movw	r30, r24
    4e28:	20 87       	std	Z+8, r18	; 0x08
                 pevent->OSEventName[1] = OS_ASCII_NUL;
    4e2a:	8d 81       	ldd	r24, Y+5	; 0x05
    4e2c:	9e 81       	ldd	r25, Y+6	; 0x06
    4e2e:	fc 01       	movw	r30, r24
    4e30:	11 86       	std	Z+9, r1	; 0x09
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4e32:	8d 81       	ldd	r24, Y+5	; 0x05
    4e34:	9e 81       	ldd	r25, Y+6	; 0x06
    4e36:	fc 01       	movw	r30, r24
    4e38:	10 82       	st	Z, r1
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
    4e3a:	20 91 4a 08 	lds	r18, 0x084A
    4e3e:	30 91 4b 08 	lds	r19, 0x084B
    4e42:	8d 81       	ldd	r24, Y+5	; 0x05
    4e44:	9e 81       	ldd	r25, Y+6	; 0x06
    4e46:	fc 01       	movw	r30, r24
    4e48:	32 83       	std	Z+2, r19	; 0x02
    4e4a:	21 83       	std	Z+1, r18	; 0x01
                 pevent->OSEventCnt     = 0;
    4e4c:	8d 81       	ldd	r24, Y+5	; 0x05
    4e4e:	9e 81       	ldd	r25, Y+6	; 0x06
    4e50:	fc 01       	movw	r30, r24
    4e52:	14 82       	std	Z+4, r1	; 0x04
    4e54:	13 82       	std	Z+3, r1	; 0x03
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
    4e56:	8d 81       	ldd	r24, Y+5	; 0x05
    4e58:	9e 81       	ldd	r25, Y+6	; 0x06
    4e5a:	90 93 4b 08 	sts	0x084B, r25
    4e5e:	80 93 4a 08 	sts	0x084A, r24
                 OS_EXIT_CRITICAL();
    4e62:	89 81       	ldd	r24, Y+1	; 0x01
    4e64:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_NONE;
    4e68:	88 85       	ldd	r24, Y+8	; 0x08
    4e6a:	99 85       	ldd	r25, Y+9	; 0x09
    4e6c:	fc 01       	movw	r30, r24
    4e6e:	10 82       	st	Z, r1
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
    4e70:	1b 82       	std	Y+3, r1	; 0x03
    4e72:	1a 82       	std	Y+2, r1	; 0x02
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
    4e74:	59 c0       	rjmp	.+178    	; 0x4f28 <OS_SchedNew+0x6aa>
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
    4e76:	89 81       	ldd	r24, Y+1	; 0x01
    4e78:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                 *perr                  = OS_ERR_TASK_WAITING;
    4e7c:	88 85       	ldd	r24, Y+8	; 0x08
    4e7e:	99 85       	ldd	r25, Y+9	; 0x09
    4e80:	29 e4       	ldi	r18, 0x49	; 73
    4e82:	fc 01       	movw	r30, r24
    4e84:	20 83       	st	Z, r18
                 pevent_return          = pevent;
    4e86:	8d 81       	ldd	r24, Y+5	; 0x05
    4e88:	9e 81       	ldd	r25, Y+6	; 0x06
    4e8a:	9b 83       	std	Y+3, r25	; 0x03
    4e8c:	8a 83       	std	Y+2, r24	; 0x02
             }
             break;
    4e8e:	4c c0       	rjmp	.+152    	; 0x4f28 <OS_SchedNew+0x6aa>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    4e90:	8d 81       	ldd	r24, Y+5	; 0x05
    4e92:	9e 81       	ldd	r25, Y+6	; 0x06
    4e94:	60 e0       	ldi	r22, 0x00	; 0
    4e96:	70 e0       	ldi	r23, 0x00	; 0
    4e98:	41 e0       	ldi	r20, 0x01	; 1
    4e9a:	20 e0       	ldi	r18, 0x00	; 0
    4e9c:	0e 94 aa 20 	call	0x4154	; 0x4154 <OSTmr_Task+0x610>
    4ea0:	01 c0       	rjmp	.+2      	; 0x4ea4 <OS_SchedNew+0x626>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
    4ea2:	00 00       	nop
    4ea4:	8d 81       	ldd	r24, Y+5	; 0x05
    4ea6:	9e 81       	ldd	r25, Y+6	; 0x06
    4ea8:	fc 01       	movw	r30, r24
    4eaa:	85 81       	ldd	r24, Z+5	; 0x05
    4eac:	88 23       	and	r24, r24
    4eae:	81 f7       	brne	.-32     	; 0x4e90 <OS_SchedNew+0x612>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
    4eb0:	8d 81       	ldd	r24, Y+5	; 0x05
    4eb2:	9e 81       	ldd	r25, Y+6	; 0x06
    4eb4:	2f e3       	ldi	r18, 0x3F	; 63
    4eb6:	fc 01       	movw	r30, r24
    4eb8:	20 87       	std	Z+8, r18	; 0x08
             pevent->OSEventName[1] = OS_ASCII_NUL;
    4eba:	8d 81       	ldd	r24, Y+5	; 0x05
    4ebc:	9e 81       	ldd	r25, Y+6	; 0x06
    4ebe:	fc 01       	movw	r30, r24
    4ec0:	11 86       	std	Z+9, r1	; 0x09
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
    4ec2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ec4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ec6:	fc 01       	movw	r30, r24
    4ec8:	10 82       	st	Z, r1
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
    4eca:	20 91 4a 08 	lds	r18, 0x084A
    4ece:	30 91 4b 08 	lds	r19, 0x084B
    4ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    4ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    4ed6:	fc 01       	movw	r30, r24
    4ed8:	32 83       	std	Z+2, r19	; 0x02
    4eda:	21 83       	std	Z+1, r18	; 0x01
             pevent->OSEventCnt     = 0;
    4edc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ede:	9e 81       	ldd	r25, Y+6	; 0x06
    4ee0:	fc 01       	movw	r30, r24
    4ee2:	14 82       	std	Z+4, r1	; 0x04
    4ee4:	13 82       	std	Z+3, r1	; 0x03
             OSEventFreeList        = pevent;              /* Get next free event control block        */
    4ee6:	8d 81       	ldd	r24, Y+5	; 0x05
    4ee8:	9e 81       	ldd	r25, Y+6	; 0x06
    4eea:	90 93 4b 08 	sts	0x084B, r25
    4eee:	80 93 4a 08 	sts	0x084A, r24
             OS_EXIT_CRITICAL();
    4ef2:	89 81       	ldd	r24, Y+1	; 0x01
    4ef4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
    4ef8:	8c 81       	ldd	r24, Y+4	; 0x04
    4efa:	81 30       	cpi	r24, 0x01	; 1
    4efc:	11 f4       	brne	.+4      	; 0x4f02 <OS_SchedNew+0x684>
                 OS_Sched();                               /* Find highest priority task ready to run  */
    4efe:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
             }
             *perr                  = OS_ERR_NONE;
    4f02:	88 85       	ldd	r24, Y+8	; 0x08
    4f04:	99 85       	ldd	r25, Y+9	; 0x09
    4f06:	fc 01       	movw	r30, r24
    4f08:	10 82       	st	Z, r1
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
    4f0a:	1b 82       	std	Y+3, r1	; 0x03
    4f0c:	1a 82       	std	Y+2, r1	; 0x02
             break;
    4f0e:	0c c0       	rjmp	.+24     	; 0x4f28 <OS_SchedNew+0x6aa>

        default:
             OS_EXIT_CRITICAL();
    4f10:	89 81       	ldd	r24, Y+1	; 0x01
    4f12:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
             *perr                  = OS_ERR_INVALID_OPT;
    4f16:	88 85       	ldd	r24, Y+8	; 0x08
    4f18:	99 85       	ldd	r25, Y+9	; 0x09
    4f1a:	27 e0       	ldi	r18, 0x07	; 7
    4f1c:	fc 01       	movw	r30, r24
    4f1e:	20 83       	st	Z, r18
             pevent_return          = pevent;
    4f20:	8d 81       	ldd	r24, Y+5	; 0x05
    4f22:	9e 81       	ldd	r25, Y+6	; 0x06
    4f24:	9b 83       	std	Y+3, r25	; 0x03
    4f26:	8a 83       	std	Y+2, r24	; 0x02
             break;
    }
    return (pevent_return);
    4f28:	8a 81       	ldd	r24, Y+2	; 0x02
    4f2a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    4f2c:	29 96       	adiw	r28, 0x09	; 9
    4f2e:	0f b6       	in	r0, 0x3f	; 63
    4f30:	f8 94       	cli
    4f32:	de bf       	out	0x3e, r29	; 62
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	cd bf       	out	0x3d, r28	; 61
    4f38:	cf 91       	pop	r28
    4f3a:	df 91       	pop	r29
    4f3c:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
    4f3e:	df 93       	push	r29
    4f40:	cf 93       	push	r28
    4f42:	cd b7       	in	r28, 0x3d	; 61
    4f44:	de b7       	in	r29, 0x3e	; 62
    4f46:	27 97       	sbiw	r28, 0x07	; 7
    4f48:	0f b6       	in	r0, 0x3f	; 63
    4f4a:	f8 94       	cli
    4f4c:	de bf       	out	0x3e, r29	; 62
    4f4e:	0f be       	out	0x3f, r0	; 63
    4f50:	cd bf       	out	0x3d, r28	; 61
    4f52:	9b 83       	std	Y+3, r25	; 0x03
    4f54:	8a 83       	std	Y+2, r24	; 0x02
    4f56:	7d 83       	std	Y+5, r23	; 0x05
    4f58:	6c 83       	std	Y+4, r22	; 0x04
    4f5a:	5f 83       	std	Y+7, r21	; 0x07
    4f5c:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    4f5e:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    4f60:	8a 81       	ldd	r24, Y+2	; 0x02
    4f62:	9b 81       	ldd	r25, Y+3	; 0x03
    4f64:	fc 01       	movw	r30, r24
    4f66:	80 81       	ld	r24, Z
    4f68:	83 30       	cpi	r24, 0x03	; 3
    4f6a:	31 f0       	breq	.+12     	; 0x4f78 <OS_SchedNew+0x6fa>
        *perr = OS_ERR_EVENT_TYPE;
    4f6c:	8e 81       	ldd	r24, Y+6	; 0x06
    4f6e:	9f 81       	ldd	r25, Y+7	; 0x07
    4f70:	21 e0       	ldi	r18, 0x01	; 1
    4f72:	fc 01       	movw	r30, r24
    4f74:	20 83       	st	Z, r18
        return;
    4f76:	98 c0       	rjmp	.+304    	; 0x50a8 <OS_SchedNew+0x82a>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
    4f78:	80 91 4c 08 	lds	r24, 0x084C
    4f7c:	88 23       	and	r24, r24
    4f7e:	31 f0       	breq	.+12     	; 0x4f8c <OS_SchedNew+0x70e>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
    4f80:	8e 81       	ldd	r24, Y+6	; 0x06
    4f82:	9f 81       	ldd	r25, Y+7	; 0x07
    4f84:	22 e0       	ldi	r18, 0x02	; 2
    4f86:	fc 01       	movw	r30, r24
    4f88:	20 83       	st	Z, r18
        return;
    4f8a:	8e c0       	rjmp	.+284    	; 0x50a8 <OS_SchedNew+0x82a>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
    4f8c:	80 91 0f 05 	lds	r24, 0x050F
    4f90:	88 23       	and	r24, r24
    4f92:	31 f0       	breq	.+12     	; 0x4fa0 <OS_SchedNew+0x722>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
    4f94:	8e 81       	ldd	r24, Y+6	; 0x06
    4f96:	9f 81       	ldd	r25, Y+7	; 0x07
    4f98:	2d e0       	ldi	r18, 0x0D	; 13
    4f9a:	fc 01       	movw	r30, r24
    4f9c:	20 83       	st	Z, r18
        return;
    4f9e:	84 c0       	rjmp	.+264    	; 0x50a8 <OS_SchedNew+0x82a>
    }
    OS_ENTER_CRITICAL();
    4fa0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    4fa4:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
    4fa6:	8a 81       	ldd	r24, Y+2	; 0x02
    4fa8:	9b 81       	ldd	r25, Y+3	; 0x03
    4faa:	fc 01       	movw	r30, r24
    4fac:	83 81       	ldd	r24, Z+3	; 0x03
    4fae:	94 81       	ldd	r25, Z+4	; 0x04
    4fb0:	00 97       	sbiw	r24, 0x00	; 0
    4fb2:	a9 f0       	breq	.+42     	; 0x4fde <OS_SchedNew+0x760>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
    4fb4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fb6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fb8:	fc 01       	movw	r30, r24
    4fba:	83 81       	ldd	r24, Z+3	; 0x03
    4fbc:	94 81       	ldd	r25, Z+4	; 0x04
    4fbe:	9c 01       	movw	r18, r24
    4fc0:	21 50       	subi	r18, 0x01	; 1
    4fc2:	30 40       	sbci	r19, 0x00	; 0
    4fc4:	8a 81       	ldd	r24, Y+2	; 0x02
    4fc6:	9b 81       	ldd	r25, Y+3	; 0x03
    4fc8:	fc 01       	movw	r30, r24
    4fca:	34 83       	std	Z+4, r19	; 0x04
    4fcc:	23 83       	std	Z+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    4fce:	89 81       	ldd	r24, Y+1	; 0x01
    4fd0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_NONE;
    4fd4:	8e 81       	ldd	r24, Y+6	; 0x06
    4fd6:	9f 81       	ldd	r25, Y+7	; 0x07
    4fd8:	fc 01       	movw	r30, r24
    4fda:	10 82       	st	Z, r1
        return;
    4fdc:	65 c0       	rjmp	.+202    	; 0x50a8 <OS_SchedNew+0x82a>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
    4fde:	80 91 4d 08 	lds	r24, 0x084D
    4fe2:	90 91 4e 08 	lds	r25, 0x084E
    4fe6:	20 91 4d 08 	lds	r18, 0x084D
    4fea:	30 91 4e 08 	lds	r19, 0x084E
    4fee:	f9 01       	movw	r30, r18
    4ff0:	26 89       	ldd	r18, Z+22	; 0x16
    4ff2:	21 60       	ori	r18, 0x01	; 1
    4ff4:	fc 01       	movw	r30, r24
    4ff6:	26 8b       	std	Z+22, r18	; 0x16
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
    4ff8:	80 91 4d 08 	lds	r24, 0x084D
    4ffc:	90 91 4e 08 	lds	r25, 0x084E
    5000:	fc 01       	movw	r30, r24
    5002:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
    5004:	80 91 4d 08 	lds	r24, 0x084D
    5008:	90 91 4e 08 	lds	r25, 0x084E
    500c:	2c 81       	ldd	r18, Y+4	; 0x04
    500e:	3d 81       	ldd	r19, Y+5	; 0x05
    5010:	fc 01       	movw	r30, r24
    5012:	35 8b       	std	Z+21, r19	; 0x15
    5014:	24 8b       	std	Z+20, r18	; 0x14
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
    5016:	8a 81       	ldd	r24, Y+2	; 0x02
    5018:	9b 81       	ldd	r25, Y+3	; 0x03
    501a:	0e 94 38 21 	call	0x4270	; 0x4270 <OSTmr_Task+0x72c>
    OS_EXIT_CRITICAL();
    501e:	89 81       	ldd	r24, Y+1	; 0x01
    5020:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    OS_Sched();                                       /* Find next highest priority task ready         */
    5024:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
    OS_ENTER_CRITICAL();
    5028:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    502c:	89 83       	std	Y+1, r24	; 0x01
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
    502e:	80 91 4d 08 	lds	r24, 0x084D
    5032:	90 91 4e 08 	lds	r25, 0x084E
    5036:	fc 01       	movw	r30, r24
    5038:	87 89       	ldd	r24, Z+23	; 0x17
    503a:	88 2f       	mov	r24, r24
    503c:	90 e0       	ldi	r25, 0x00	; 0
    503e:	00 97       	sbiw	r24, 0x00	; 0
    5040:	21 f0       	breq	.+8      	; 0x504a <OS_SchedNew+0x7cc>
    5042:	82 30       	cpi	r24, 0x02	; 2
    5044:	91 05       	cpc	r25, r1
    5046:	31 f0       	breq	.+12     	; 0x5054 <OS_SchedNew+0x7d6>
    5048:	0b c0       	rjmp	.+22     	; 0x5060 <OS_SchedNew+0x7e2>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
    504a:	8e 81       	ldd	r24, Y+6	; 0x06
    504c:	9f 81       	ldd	r25, Y+7	; 0x07
    504e:	fc 01       	movw	r30, r24
    5050:	10 82       	st	Z, r1
             break;
    5052:	14 c0       	rjmp	.+40     	; 0x507c <OS_SchedNew+0x7fe>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
    5054:	8e 81       	ldd	r24, Y+6	; 0x06
    5056:	9f 81       	ldd	r25, Y+7	; 0x07
    5058:	2e e0       	ldi	r18, 0x0E	; 14
    505a:	fc 01       	movw	r30, r24
    505c:	20 83       	st	Z, r18
             break;
    505e:	0e c0       	rjmp	.+28     	; 0x507c <OS_SchedNew+0x7fe>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
    5060:	80 91 4d 08 	lds	r24, 0x084D
    5064:	90 91 4e 08 	lds	r25, 0x084E
    5068:	2a 81       	ldd	r18, Y+2	; 0x02
    506a:	3b 81       	ldd	r19, Y+3	; 0x03
    506c:	b9 01       	movw	r22, r18
    506e:	0e 94 b7 21 	call	0x436e	; 0x436e <OSTmr_Task+0x82a>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
    5072:	8e 81       	ldd	r24, Y+6	; 0x06
    5074:	9f 81       	ldd	r25, Y+7	; 0x07
    5076:	2a e0       	ldi	r18, 0x0A	; 10
    5078:	fc 01       	movw	r30, r24
    507a:	20 83       	st	Z, r18
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
    507c:	80 91 4d 08 	lds	r24, 0x084D
    5080:	90 91 4e 08 	lds	r25, 0x084E
    5084:	fc 01       	movw	r30, r24
    5086:	16 8a       	std	Z+22, r1	; 0x16
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
    5088:	80 91 4d 08 	lds	r24, 0x084D
    508c:	90 91 4e 08 	lds	r25, 0x084E
    5090:	fc 01       	movw	r30, r24
    5092:	17 8a       	std	Z+23, r1	; 0x17
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
    5094:	80 91 4d 08 	lds	r24, 0x084D
    5098:	90 91 4e 08 	lds	r25, 0x084E
    509c:	fc 01       	movw	r30, r24
    509e:	13 8a       	std	Z+19, r1	; 0x13
    50a0:	12 8a       	std	Z+18, r1	; 0x12
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
    50a2:	89 81       	ldd	r24, Y+1	; 0x01
    50a4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    50a8:	27 96       	adiw	r28, 0x07	; 7
    50aa:	0f b6       	in	r0, 0x3f	; 63
    50ac:	f8 94       	cli
    50ae:	de bf       	out	0x3e, r29	; 62
    50b0:	0f be       	out	0x3f, r0	; 63
    50b2:	cd bf       	out	0x3d, r28	; 61
    50b4:	cf 91       	pop	r28
    50b6:	df 91       	pop	r29
    50b8:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
    50ba:	df 93       	push	r29
    50bc:	cf 93       	push	r28
    50be:	cd b7       	in	r28, 0x3d	; 61
    50c0:	de b7       	in	r29, 0x3e	; 62
    50c2:	27 97       	sbiw	r28, 0x07	; 7
    50c4:	0f b6       	in	r0, 0x3f	; 63
    50c6:	f8 94       	cli
    50c8:	de bf       	out	0x3e, r29	; 62
    50ca:	0f be       	out	0x3f, r0	; 63
    50cc:	cd bf       	out	0x3d, r28	; 61
    50ce:	9c 83       	std	Y+4, r25	; 0x04
    50d0:	8b 83       	std	Y+3, r24	; 0x03
    50d2:	6d 83       	std	Y+5, r22	; 0x05
    50d4:	5f 83       	std	Y+7, r21	; 0x07
    50d6:	4e 83       	std	Y+6, r20	; 0x06
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    50d8:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return (0);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    50da:	8b 81       	ldd	r24, Y+3	; 0x03
    50dc:	9c 81       	ldd	r25, Y+4	; 0x04
    50de:	fc 01       	movw	r30, r24
    50e0:	80 81       	ld	r24, Z
    50e2:	83 30       	cpi	r24, 0x03	; 3
    50e4:	39 f0       	breq	.+14     	; 0x50f4 <OS_SchedNew+0x876>
        *perr = OS_ERR_EVENT_TYPE;
    50e6:	8e 81       	ldd	r24, Y+6	; 0x06
    50e8:	9f 81       	ldd	r25, Y+7	; 0x07
    50ea:	21 e0       	ldi	r18, 0x01	; 1
    50ec:	fc 01       	movw	r30, r24
    50ee:	20 83       	st	Z, r18
        return (0);
    50f0:	80 e0       	ldi	r24, 0x00	; 0
    50f2:	44 c0       	rjmp	.+136    	; 0x517c <OS_SchedNew+0x8fe>
    }
    OS_ENTER_CRITICAL();
    50f4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    50f8:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
    50fa:	8b 81       	ldd	r24, Y+3	; 0x03
    50fc:	9c 81       	ldd	r25, Y+4	; 0x04
    50fe:	fc 01       	movw	r30, r24
    5100:	85 81       	ldd	r24, Z+5	; 0x05
    5102:	88 23       	and	r24, r24
    5104:	99 f1       	breq	.+102    	; 0x516c <OS_SchedNew+0x8ee>
        nbr_tasks = 0;
    5106:	1a 82       	std	Y+2, r1	; 0x02
        switch (opt) {
    5108:	8d 81       	ldd	r24, Y+5	; 0x05
    510a:	88 2f       	mov	r24, r24
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	81 30       	cpi	r24, 0x01	; 1
    5110:	91 05       	cpc	r25, r1
    5112:	69 f0       	breq	.+26     	; 0x512e <OS_SchedNew+0x8b0>
    5114:	14 c0       	rjmp	.+40     	; 0x513e <OS_SchedNew+0x8c0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    5116:	8b 81       	ldd	r24, Y+3	; 0x03
    5118:	9c 81       	ldd	r25, Y+4	; 0x04
    511a:	60 e0       	ldi	r22, 0x00	; 0
    511c:	70 e0       	ldi	r23, 0x00	; 0
    511e:	41 e0       	ldi	r20, 0x01	; 1
    5120:	22 e0       	ldi	r18, 0x02	; 2
    5122:	0e 94 aa 20 	call	0x4154	; 0x4154 <OSTmr_Task+0x610>
                     nbr_tasks++;
    5126:	8a 81       	ldd	r24, Y+2	; 0x02
    5128:	8f 5f       	subi	r24, 0xFF	; 255
    512a:	8a 83       	std	Y+2, r24	; 0x02
    512c:	01 c0       	rjmp	.+2      	; 0x5130 <OS_SchedNew+0x8b2>
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
    512e:	00 00       	nop
    5130:	8b 81       	ldd	r24, Y+3	; 0x03
    5132:	9c 81       	ldd	r25, Y+4	; 0x04
    5134:	fc 01       	movw	r30, r24
    5136:	85 81       	ldd	r24, Z+5	; 0x05
    5138:	88 23       	and	r24, r24
    513a:	69 f7       	brne	.-38     	; 0x5116 <OS_SchedNew+0x898>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
    513c:	0b c0       	rjmp	.+22     	; 0x5154 <OS_SchedNew+0x8d6>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
    513e:	8b 81       	ldd	r24, Y+3	; 0x03
    5140:	9c 81       	ldd	r25, Y+4	; 0x04
    5142:	60 e0       	ldi	r22, 0x00	; 0
    5144:	70 e0       	ldi	r23, 0x00	; 0
    5146:	41 e0       	ldi	r20, 0x01	; 1
    5148:	22 e0       	ldi	r18, 0x02	; 2
    514a:	0e 94 aa 20 	call	0x4154	; 0x4154 <OSTmr_Task+0x610>
                 nbr_tasks++;
    514e:	8a 81       	ldd	r24, Y+2	; 0x02
    5150:	8f 5f       	subi	r24, 0xFF	; 255
    5152:	8a 83       	std	Y+2, r24	; 0x02
                 break;
        }
        OS_EXIT_CRITICAL();
    5154:	89 81       	ldd	r24, Y+1	; 0x01
    5156:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    515a:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
        *perr = OS_ERR_PEND_ABORT;
    515e:	8e 81       	ldd	r24, Y+6	; 0x06
    5160:	9f 81       	ldd	r25, Y+7	; 0x07
    5162:	2e e0       	ldi	r18, 0x0E	; 14
    5164:	fc 01       	movw	r30, r24
    5166:	20 83       	st	Z, r18
        return (nbr_tasks);
    5168:	8a 81       	ldd	r24, Y+2	; 0x02
    516a:	08 c0       	rjmp	.+16     	; 0x517c <OS_SchedNew+0x8fe>
    }
    OS_EXIT_CRITICAL();
    516c:	89 81       	ldd	r24, Y+1	; 0x01
    516e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    5172:	8e 81       	ldd	r24, Y+6	; 0x06
    5174:	9f 81       	ldd	r25, Y+7	; 0x07
    5176:	fc 01       	movw	r30, r24
    5178:	10 82       	st	Z, r1
    return (0);                                       /* No tasks waiting on semaphore                 */
    517a:	80 e0       	ldi	r24, 0x00	; 0
}
    517c:	27 96       	adiw	r28, 0x07	; 7
    517e:	0f b6       	in	r0, 0x3f	; 63
    5180:	f8 94       	cli
    5182:	de bf       	out	0x3e, r29	; 62
    5184:	0f be       	out	0x3f, r0	; 63
    5186:	cd bf       	out	0x3d, r28	; 61
    5188:	cf 91       	pop	r28
    518a:	df 91       	pop	r29
    518c:	08 95       	ret
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
    518e:	df 93       	push	r29
    5190:	cf 93       	push	r28
    5192:	00 d0       	rcall	.+0      	; 0x5194 <OS_SchedNew+0x916>
    5194:	cd b7       	in	r28, 0x3d	; 61
    5196:	de b7       	in	r29, 0x3e	; 62
    5198:	9b 83       	std	Y+3, r25	; 0x03
    519a:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    519c:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        return (OS_ERR_PEVENT_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    519e:	8a 81       	ldd	r24, Y+2	; 0x02
    51a0:	9b 81       	ldd	r25, Y+3	; 0x03
    51a2:	fc 01       	movw	r30, r24
    51a4:	80 81       	ld	r24, Z
    51a6:	83 30       	cpi	r24, 0x03	; 3
    51a8:	11 f0       	breq	.+4      	; 0x51ae <OS_SchedNew+0x930>
        return (OS_ERR_EVENT_TYPE);
    51aa:	81 e0       	ldi	r24, 0x01	; 1
    51ac:	37 c0       	rjmp	.+110    	; 0x521c <OS_SchedNew+0x99e>
    }
    OS_ENTER_CRITICAL();
    51ae:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    51b2:	89 83       	std	Y+1, r24	; 0x01
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
    51b4:	8a 81       	ldd	r24, Y+2	; 0x02
    51b6:	9b 81       	ldd	r25, Y+3	; 0x03
    51b8:	fc 01       	movw	r30, r24
    51ba:	85 81       	ldd	r24, Z+5	; 0x05
    51bc:	88 23       	and	r24, r24
    51be:	79 f0       	breq	.+30     	; 0x51de <OS_SchedNew+0x960>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
    51c0:	8a 81       	ldd	r24, Y+2	; 0x02
    51c2:	9b 81       	ldd	r25, Y+3	; 0x03
    51c4:	60 e0       	ldi	r22, 0x00	; 0
    51c6:	70 e0       	ldi	r23, 0x00	; 0
    51c8:	41 e0       	ldi	r20, 0x01	; 1
    51ca:	20 e0       	ldi	r18, 0x00	; 0
    51cc:	0e 94 aa 20 	call	0x4154	; 0x4154 <OSTmr_Task+0x610>
        OS_EXIT_CRITICAL();
    51d0:	89 81       	ldd	r24, Y+1	; 0x01
    51d2:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                   /* Find HPT ready to run                         */
    51d6:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
        return (OS_ERR_NONE);
    51da:	80 e0       	ldi	r24, 0x00	; 0
    51dc:	1f c0       	rjmp	.+62     	; 0x521c <OS_SchedNew+0x99e>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
    51de:	8a 81       	ldd	r24, Y+2	; 0x02
    51e0:	9b 81       	ldd	r25, Y+3	; 0x03
    51e2:	fc 01       	movw	r30, r24
    51e4:	83 81       	ldd	r24, Z+3	; 0x03
    51e6:	94 81       	ldd	r25, Z+4	; 0x04
    51e8:	ff ef       	ldi	r31, 0xFF	; 255
    51ea:	8f 3f       	cpi	r24, 0xFF	; 255
    51ec:	9f 07       	cpc	r25, r31
    51ee:	91 f0       	breq	.+36     	; 0x5214 <OS_SchedNew+0x996>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
    51f0:	8a 81       	ldd	r24, Y+2	; 0x02
    51f2:	9b 81       	ldd	r25, Y+3	; 0x03
    51f4:	fc 01       	movw	r30, r24
    51f6:	83 81       	ldd	r24, Z+3	; 0x03
    51f8:	94 81       	ldd	r25, Z+4	; 0x04
    51fa:	9c 01       	movw	r18, r24
    51fc:	2f 5f       	subi	r18, 0xFF	; 255
    51fe:	3f 4f       	sbci	r19, 0xFF	; 255
    5200:	8a 81       	ldd	r24, Y+2	; 0x02
    5202:	9b 81       	ldd	r25, Y+3	; 0x03
    5204:	fc 01       	movw	r30, r24
    5206:	34 83       	std	Z+4, r19	; 0x04
    5208:	23 83       	std	Z+3, r18	; 0x03
        OS_EXIT_CRITICAL();
    520a:	89 81       	ldd	r24, Y+1	; 0x01
    520c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_NONE);
    5210:	80 e0       	ldi	r24, 0x00	; 0
    5212:	04 c0       	rjmp	.+8      	; 0x521c <OS_SchedNew+0x99e>
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    5214:	89 81       	ldd	r24, Y+1	; 0x01
    5216:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_SEM_OVF);
    521a:	82 e3       	ldi	r24, 0x32	; 50
}
    521c:	0f 90       	pop	r0
    521e:	0f 90       	pop	r0
    5220:	0f 90       	pop	r0
    5222:	cf 91       	pop	r28
    5224:	df 91       	pop	r29
    5226:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
    5228:	df 93       	push	r29
    522a:	cf 93       	push	r28
    522c:	cd b7       	in	r28, 0x3d	; 61
    522e:	de b7       	in	r29, 0x3e	; 62
    5230:	2a 97       	sbiw	r28, 0x0a	; 10
    5232:	0f b6       	in	r0, 0x3f	; 63
    5234:	f8 94       	cli
    5236:	de bf       	out	0x3e, r29	; 62
    5238:	0f be       	out	0x3f, r0	; 63
    523a:	cd bf       	out	0x3d, r28	; 61
    523c:	98 87       	std	Y+8, r25	; 0x08
    523e:	8f 83       	std	Y+7, r24	; 0x07
    5240:	7a 87       	std	Y+10, r23	; 0x0a
    5242:	69 87       	std	Y+9, r22	; 0x09
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
    5244:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
    5246:	8f 81       	ldd	r24, Y+7	; 0x07
    5248:	98 85       	ldd	r25, Y+8	; 0x08
    524a:	fc 01       	movw	r30, r24
    524c:	80 81       	ld	r24, Z
    524e:	83 30       	cpi	r24, 0x03	; 3
    5250:	11 f0       	breq	.+4      	; 0x5256 <OS_SchedNew+0x9d8>
        return (OS_ERR_EVENT_TYPE);
    5252:	81 e0       	ldi	r24, 0x01	; 1
    5254:	3d c0       	rjmp	.+122    	; 0x52d0 <OS_SchedNew+0xa52>
    }
    OS_ENTER_CRITICAL();
    5256:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    525a:	89 83       	std	Y+1, r24	; 0x01
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    525c:	8f 81       	ldd	r24, Y+7	; 0x07
    525e:	98 85       	ldd	r25, Y+8	; 0x08
    5260:	fc 01       	movw	r30, r24
    5262:	25 81       	ldd	r18, Z+5	; 0x05
    5264:	89 85       	ldd	r24, Y+9	; 0x09
    5266:	9a 85       	ldd	r25, Y+10	; 0x0a
    5268:	fc 01       	movw	r30, r24
    526a:	24 83       	std	Z+4, r18	; 0x04
    psrc                   = &pevent->OSEventTbl[0];
    526c:	8f 81       	ldd	r24, Y+7	; 0x07
    526e:	98 85       	ldd	r25, Y+8	; 0x08
    5270:	06 96       	adiw	r24, 0x06	; 6
    5272:	9e 83       	std	Y+6, r25	; 0x06
    5274:	8d 83       	std	Y+5, r24	; 0x05
    pdest                  = &p_sem_data->OSEventTbl[0];
    5276:	89 85       	ldd	r24, Y+9	; 0x09
    5278:	9a 85       	ldd	r25, Y+10	; 0x0a
    527a:	02 96       	adiw	r24, 0x02	; 2
    527c:	9c 83       	std	Y+4, r25	; 0x04
    527e:	8b 83       	std	Y+3, r24	; 0x03
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    5280:	1a 82       	std	Y+2, r1	; 0x02
    5282:	15 c0       	rjmp	.+42     	; 0x52ae <OS_SchedNew+0xa30>
        *pdest++ = *psrc++;
    5284:	8d 81       	ldd	r24, Y+5	; 0x05
    5286:	9e 81       	ldd	r25, Y+6	; 0x06
    5288:	fc 01       	movw	r30, r24
    528a:	20 81       	ld	r18, Z
    528c:	8b 81       	ldd	r24, Y+3	; 0x03
    528e:	9c 81       	ldd	r25, Y+4	; 0x04
    5290:	fc 01       	movw	r30, r24
    5292:	20 83       	st	Z, r18
    5294:	8b 81       	ldd	r24, Y+3	; 0x03
    5296:	9c 81       	ldd	r25, Y+4	; 0x04
    5298:	01 96       	adiw	r24, 0x01	; 1
    529a:	9c 83       	std	Y+4, r25	; 0x04
    529c:	8b 83       	std	Y+3, r24	; 0x03
    529e:	8d 81       	ldd	r24, Y+5	; 0x05
    52a0:	9e 81       	ldd	r25, Y+6	; 0x06
    52a2:	01 96       	adiw	r24, 0x01	; 1
    52a4:	9e 83       	std	Y+6, r25	; 0x06
    52a6:	8d 83       	std	Y+5, r24	; 0x05
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
    52a8:	8a 81       	ldd	r24, Y+2	; 0x02
    52aa:	8f 5f       	subi	r24, 0xFF	; 255
    52ac:	8a 83       	std	Y+2, r24	; 0x02
    52ae:	8a 81       	ldd	r24, Y+2	; 0x02
    52b0:	82 30       	cpi	r24, 0x02	; 2
    52b2:	40 f3       	brcs	.-48     	; 0x5284 <OS_SchedNew+0xa06>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
    52b4:	8f 81       	ldd	r24, Y+7	; 0x07
    52b6:	98 85       	ldd	r25, Y+8	; 0x08
    52b8:	fc 01       	movw	r30, r24
    52ba:	23 81       	ldd	r18, Z+3	; 0x03
    52bc:	34 81       	ldd	r19, Z+4	; 0x04
    52be:	89 85       	ldd	r24, Y+9	; 0x09
    52c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    52c2:	fc 01       	movw	r30, r24
    52c4:	31 83       	std	Z+1, r19	; 0x01
    52c6:	20 83       	st	Z, r18
    OS_EXIT_CRITICAL();
    52c8:	89 81       	ldd	r24, Y+1	; 0x01
    52ca:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    52ce:	80 e0       	ldi	r24, 0x00	; 0
}
    52d0:	2a 96       	adiw	r28, 0x0a	; 10
    52d2:	0f b6       	in	r0, 0x3f	; 63
    52d4:	f8 94       	cli
    52d6:	de bf       	out	0x3e, r29	; 62
    52d8:	0f be       	out	0x3f, r0	; 63
    52da:	cd bf       	out	0x3d, r28	; 61
    52dc:	cf 91       	pop	r28
    52de:	df 91       	pop	r29
    52e0:	08 95       	ret
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
    52e2:	df 93       	push	r29
    52e4:	cf 93       	push	r28
    52e6:	cd b7       	in	r28, 0x3d	; 61
    52e8:	de b7       	in	r29, 0x3e	; 62
    52ea:	27 97       	sbiw	r28, 0x07	; 7
    52ec:	0f b6       	in	r0, 0x3f	; 63
    52ee:	f8 94       	cli
    52f0:	de bf       	out	0x3e, r29	; 62
    52f2:	0f be       	out	0x3f, r0	; 63
    52f4:	cd bf       	out	0x3d, r28	; 61
    52f6:	9b 83       	std	Y+3, r25	; 0x03
    52f8:	8a 83       	std	Y+2, r24	; 0x02
    52fa:	7d 83       	std	Y+5, r23	; 0x05
    52fc:	6c 83       	std	Y+4, r22	; 0x04
    52fe:	5f 83       	std	Y+7, r21	; 0x07
    5300:	4e 83       	std	Y+6, r20	; 0x06
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5302:	19 82       	std	Y+1, r1	; 0x01
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
        *perr = OS_ERR_PEVENT_NULL;
        return;
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
    5304:	8a 81       	ldd	r24, Y+2	; 0x02
    5306:	9b 81       	ldd	r25, Y+3	; 0x03
    5308:	fc 01       	movw	r30, r24
    530a:	80 81       	ld	r24, Z
    530c:	83 30       	cpi	r24, 0x03	; 3
    530e:	31 f0       	breq	.+12     	; 0x531c <OS_SchedNew+0xa9e>
        *perr = OS_ERR_EVENT_TYPE;
    5310:	8e 81       	ldd	r24, Y+6	; 0x06
    5312:	9f 81       	ldd	r25, Y+7	; 0x07
    5314:	21 e0       	ldi	r18, 0x01	; 1
    5316:	fc 01       	movw	r30, r24
    5318:	20 83       	st	Z, r18
        return;
    531a:	2c c0       	rjmp	.+88     	; 0x5374 <OS_SchedNew+0xaf6>
    }
    OS_ENTER_CRITICAL();
    531c:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5320:	89 83       	std	Y+1, r24	; 0x01
    *perr = OS_ERR_NONE;
    5322:	8e 81       	ldd	r24, Y+6	; 0x06
    5324:	9f 81       	ldd	r25, Y+7	; 0x07
    5326:	fc 01       	movw	r30, r24
    5328:	10 82       	st	Z, r1
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
    532a:	8a 81       	ldd	r24, Y+2	; 0x02
    532c:	9b 81       	ldd	r25, Y+3	; 0x03
    532e:	fc 01       	movw	r30, r24
    5330:	83 81       	ldd	r24, Z+3	; 0x03
    5332:	94 81       	ldd	r25, Z+4	; 0x04
    5334:	00 97       	sbiw	r24, 0x00	; 0
    5336:	41 f0       	breq	.+16     	; 0x5348 <OS_SchedNew+0xaca>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
    5338:	8a 81       	ldd	r24, Y+2	; 0x02
    533a:	9b 81       	ldd	r25, Y+3	; 0x03
    533c:	2c 81       	ldd	r18, Y+4	; 0x04
    533e:	3d 81       	ldd	r19, Y+5	; 0x05
    5340:	fc 01       	movw	r30, r24
    5342:	34 83       	std	Z+4, r19	; 0x04
    5344:	23 83       	std	Z+3, r18	; 0x03
    5346:	13 c0       	rjmp	.+38     	; 0x536e <OS_SchedNew+0xaf0>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
    5348:	8a 81       	ldd	r24, Y+2	; 0x02
    534a:	9b 81       	ldd	r25, Y+3	; 0x03
    534c:	fc 01       	movw	r30, r24
    534e:	85 81       	ldd	r24, Z+5	; 0x05
    5350:	88 23       	and	r24, r24
    5352:	41 f4       	brne	.+16     	; 0x5364 <OS_SchedNew+0xae6>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
    5354:	8a 81       	ldd	r24, Y+2	; 0x02
    5356:	9b 81       	ldd	r25, Y+3	; 0x03
    5358:	2c 81       	ldd	r18, Y+4	; 0x04
    535a:	3d 81       	ldd	r19, Y+5	; 0x05
    535c:	fc 01       	movw	r30, r24
    535e:	34 83       	std	Z+4, r19	; 0x04
    5360:	23 83       	std	Z+3, r18	; 0x03
    5362:	05 c0       	rjmp	.+10     	; 0x536e <OS_SchedNew+0xaf0>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
    5364:	8e 81       	ldd	r24, Y+6	; 0x06
    5366:	9f 81       	ldd	r25, Y+7	; 0x07
    5368:	29 e4       	ldi	r18, 0x49	; 73
    536a:	fc 01       	movw	r30, r24
    536c:	20 83       	st	Z, r18
        }
    }
    OS_EXIT_CRITICAL();
    536e:	89 81       	ldd	r24, Y+1	; 0x01
    5370:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    5374:	27 96       	adiw	r28, 0x07	; 7
    5376:	0f b6       	in	r0, 0x3f	; 63
    5378:	f8 94       	cli
    537a:	de bf       	out	0x3e, r29	; 62
    537c:	0f be       	out	0x3f, r0	; 63
    537e:	cd bf       	out	0x3d, r28	; 61
    5380:	cf 91       	pop	r28
    5382:	df 91       	pop	r29
    5384:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
    5386:	af 92       	push	r10
    5388:	bf 92       	push	r11
    538a:	cf 92       	push	r12
    538c:	df 92       	push	r13
    538e:	ef 92       	push	r14
    5390:	ff 92       	push	r15
    5392:	0f 93       	push	r16
    5394:	1f 93       	push	r17
    5396:	df 93       	push	r29
    5398:	cf 93       	push	r28
    539a:	cd b7       	in	r28, 0x3d	; 61
    539c:	de b7       	in	r29, 0x3e	; 62
    539e:	2b 97       	sbiw	r28, 0x0b	; 11
    53a0:	0f b6       	in	r0, 0x3f	; 63
    53a2:	f8 94       	cli
    53a4:	de bf       	out	0x3e, r29	; 62
    53a6:	0f be       	out	0x3f, r0	; 63
    53a8:	cd bf       	out	0x3d, r28	; 61
    53aa:	9e 83       	std	Y+6, r25	; 0x06
    53ac:	8d 83       	std	Y+5, r24	; 0x05
    53ae:	78 87       	std	Y+8, r23	; 0x08
    53b0:	6f 83       	std	Y+7, r22	; 0x07
    53b2:	5a 87       	std	Y+10, r21	; 0x0a
    53b4:	49 87       	std	Y+9, r20	; 0x09
    53b6:	2b 87       	std	Y+11, r18	; 0x0b
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    53b8:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    53ba:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    53be:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    53c0:	80 91 4c 08 	lds	r24, 0x084C
    53c4:	88 23       	and	r24, r24
    53c6:	29 f0       	breq	.+10     	; 0x53d2 <OS_SchedNew+0xb54>
        OS_EXIT_CRITICAL();
    53c8:	89 81       	ldd	r24, Y+1	; 0x01
    53ca:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    53ce:	8c e3       	ldi	r24, 0x3C	; 60
    53d0:	5e c0       	rjmp	.+188    	; 0x548e <OS_SchedNew+0xc10>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    53d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    53d4:	88 2f       	mov	r24, r24
    53d6:	90 e0       	ldi	r25, 0x00	; 0
    53d8:	88 0f       	add	r24, r24
    53da:	99 1f       	adc	r25, r25
    53dc:	80 51       	subi	r24, 0x10	; 16
    53de:	94 4f       	sbci	r25, 0xF4	; 244
    53e0:	fc 01       	movw	r30, r24
    53e2:	80 81       	ld	r24, Z
    53e4:	91 81       	ldd	r25, Z+1	; 0x01
    53e6:	00 97       	sbiw	r24, 0x00	; 0
    53e8:	09 f0       	breq	.+2      	; 0x53ec <OS_SchedNew+0xb6e>
    53ea:	4d c0       	rjmp	.+154    	; 0x5486 <OS_SchedNew+0xc08>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    53ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    53ee:	88 2f       	mov	r24, r24
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	88 0f       	add	r24, r24
    53f4:	99 1f       	adc	r25, r25
    53f6:	80 51       	subi	r24, 0x10	; 16
    53f8:	94 4f       	sbci	r25, 0xF4	; 244
    53fa:	21 e0       	ldi	r18, 0x01	; 1
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	fc 01       	movw	r30, r24
    5400:	31 83       	std	Z+1, r19	; 0x01
    5402:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    5404:	89 81       	ldd	r24, Y+1	; 0x01
    5406:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
    540a:	8d 81       	ldd	r24, Y+5	; 0x05
    540c:	9e 81       	ldd	r25, Y+6	; 0x06
    540e:	4f 81       	ldd	r20, Y+7	; 0x07
    5410:	58 85       	ldd	r21, Y+8	; 0x08
    5412:	29 85       	ldd	r18, Y+9	; 0x09
    5414:	3a 85       	ldd	r19, Y+10	; 0x0a
    5416:	ba 01       	movw	r22, r20
    5418:	a9 01       	movw	r20, r18
    541a:	20 e0       	ldi	r18, 0x00	; 0
    541c:	30 e0       	ldi	r19, 0x00	; 0
    541e:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    5422:	9c 83       	std	Y+4, r25	; 0x04
    5424:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
    5426:	2b 81       	ldd	r18, Y+3	; 0x03
    5428:	3c 81       	ldd	r19, Y+4	; 0x04
    542a:	8b 85       	ldd	r24, Y+11	; 0x0b
    542c:	b9 01       	movw	r22, r18
    542e:	40 e0       	ldi	r20, 0x00	; 0
    5430:	50 e0       	ldi	r21, 0x00	; 0
    5432:	20 e0       	ldi	r18, 0x00	; 0
    5434:	30 e0       	ldi	r19, 0x00	; 0
    5436:	ee 24       	eor	r14, r14
    5438:	ff 24       	eor	r15, r15
    543a:	87 01       	movw	r16, r14
    543c:	cc 24       	eor	r12, r12
    543e:	dd 24       	eor	r13, r13
    5440:	aa 24       	eor	r10, r10
    5442:	bb 24       	eor	r11, r11
    5444:	0e 94 dd 24 	call	0x49ba	; 0x49ba <OS_SchedNew+0x13c>
    5448:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    544a:	8a 81       	ldd	r24, Y+2	; 0x02
    544c:	88 23       	and	r24, r24
    544e:	39 f4       	brne	.+14     	; 0x545e <OS_SchedNew+0xbe0>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
    5450:	80 91 12 05 	lds	r24, 0x0512
    5454:	81 30       	cpi	r24, 0x01	; 1
    5456:	a1 f4       	brne	.+40     	; 0x5480 <OS_SchedNew+0xc02>
                OS_Sched();
    5458:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
    545c:	12 c0       	rjmp	.+36     	; 0x5482 <OS_SchedNew+0xc04>
            }
        } else {
            OS_ENTER_CRITICAL();
    545e:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5462:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
    5464:	8b 85       	ldd	r24, Y+11	; 0x0b
    5466:	88 2f       	mov	r24, r24
    5468:	90 e0       	ldi	r25, 0x00	; 0
    546a:	88 0f       	add	r24, r24
    546c:	99 1f       	adc	r25, r25
    546e:	80 51       	subi	r24, 0x10	; 16
    5470:	94 4f       	sbci	r25, 0xF4	; 244
    5472:	fc 01       	movw	r30, r24
    5474:	11 82       	std	Z+1, r1	; 0x01
    5476:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    5478:	89 81       	ldd	r24, Y+1	; 0x01
    547a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    547e:	01 c0       	rjmp	.+2      	; 0x5482 <OS_SchedNew+0xc04>
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
        if (err == OS_ERR_NONE) {
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
                OS_Sched();
    5480:	00 00       	nop
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
            OS_EXIT_CRITICAL();
        }
        return (err);
    5482:	8a 81       	ldd	r24, Y+2	; 0x02
    5484:	04 c0       	rjmp	.+8      	; 0x548e <OS_SchedNew+0xc10>
    }
    OS_EXIT_CRITICAL();
    5486:	89 81       	ldd	r24, Y+1	; 0x01
    5488:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    548c:	88 e2       	ldi	r24, 0x28	; 40
}
    548e:	2b 96       	adiw	r28, 0x0b	; 11
    5490:	0f b6       	in	r0, 0x3f	; 63
    5492:	f8 94       	cli
    5494:	de bf       	out	0x3e, r29	; 62
    5496:	0f be       	out	0x3f, r0	; 63
    5498:	cd bf       	out	0x3d, r28	; 61
    549a:	cf 91       	pop	r28
    549c:	df 91       	pop	r29
    549e:	1f 91       	pop	r17
    54a0:	0f 91       	pop	r16
    54a2:	ff 90       	pop	r15
    54a4:	ef 90       	pop	r14
    54a6:	df 90       	pop	r13
    54a8:	cf 90       	pop	r12
    54aa:	bf 90       	pop	r11
    54ac:	af 90       	pop	r10
    54ae:	08 95       	ret
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
    54b0:	8f 92       	push	r8
    54b2:	9f 92       	push	r9
    54b4:	af 92       	push	r10
    54b6:	bf 92       	push	r11
    54b8:	cf 92       	push	r12
    54ba:	df 92       	push	r13
    54bc:	ef 92       	push	r14
    54be:	ff 92       	push	r15
    54c0:	0f 93       	push	r16
    54c2:	1f 93       	push	r17
    54c4:	df 93       	push	r29
    54c6:	cf 93       	push	r28
    54c8:	cd b7       	in	r28, 0x3d	; 61
    54ca:	de b7       	in	r29, 0x3e	; 62
    54cc:	65 97       	sbiw	r28, 0x15	; 21
    54ce:	0f b6       	in	r0, 0x3f	; 63
    54d0:	f8 94       	cli
    54d2:	de bf       	out	0x3e, r29	; 62
    54d4:	0f be       	out	0x3f, r0	; 63
    54d6:	cd bf       	out	0x3d, r28	; 61
    54d8:	9e 83       	std	Y+6, r25	; 0x06
    54da:	8d 83       	std	Y+5, r24	; 0x05
    54dc:	78 87       	std	Y+8, r23	; 0x08
    54de:	6f 83       	std	Y+7, r22	; 0x07
    54e0:	5a 87       	std	Y+10, r21	; 0x0a
    54e2:	49 87       	std	Y+9, r20	; 0x09
    54e4:	2b 87       	std	Y+11, r18	; 0x0b
    54e6:	1d 87       	std	Y+13, r17	; 0x0d
    54e8:	0c 87       	std	Y+12, r16	; 0x0c
    54ea:	ff 86       	std	Y+15, r15	; 0x0f
    54ec:	ee 86       	std	Y+14, r14	; 0x0e
    54ee:	a8 8a       	std	Y+16, r10	; 0x10
    54f0:	b9 8a       	std	Y+17, r11	; 0x11
    54f2:	ca 8a       	std	Y+18, r12	; 0x12
    54f4:	db 8a       	std	Y+19, r13	; 0x13
    54f6:	9d 8a       	std	Y+21, r9	; 0x15
    54f8:	8c 8a       	std	Y+20, r8	; 0x14
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
    54fa:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    54fc:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5500:	89 83       	std	Y+1, r24	; 0x01
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
    5502:	80 91 4c 08 	lds	r24, 0x084C
    5506:	88 23       	and	r24, r24
    5508:	29 f0       	breq	.+10     	; 0x5514 <OS_SchedNew+0xc96>
        OS_EXIT_CRITICAL();
    550a:	89 81       	ldd	r24, Y+1	; 0x01
    550c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_CREATE_ISR);
    5510:	8c e3       	ldi	r24, 0x3C	; 60
    5512:	5e c0       	rjmp	.+188    	; 0x55d0 <OS_SchedNew+0xd52>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
    5514:	8b 85       	ldd	r24, Y+11	; 0x0b
    5516:	88 2f       	mov	r24, r24
    5518:	90 e0       	ldi	r25, 0x00	; 0
    551a:	88 0f       	add	r24, r24
    551c:	99 1f       	adc	r25, r25
    551e:	80 51       	subi	r24, 0x10	; 16
    5520:	94 4f       	sbci	r25, 0xF4	; 244
    5522:	fc 01       	movw	r30, r24
    5524:	80 81       	ld	r24, Z
    5526:	91 81       	ldd	r25, Z+1	; 0x01
    5528:	00 97       	sbiw	r24, 0x00	; 0
    552a:	09 f0       	breq	.+2      	; 0x552e <OS_SchedNew+0xcb0>
    552c:	4d c0       	rjmp	.+154    	; 0x55c8 <OS_SchedNew+0xd4a>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
    552e:	8b 85       	ldd	r24, Y+11	; 0x0b
    5530:	88 2f       	mov	r24, r24
    5532:	90 e0       	ldi	r25, 0x00	; 0
    5534:	88 0f       	add	r24, r24
    5536:	99 1f       	adc	r25, r25
    5538:	80 51       	subi	r24, 0x10	; 16
    553a:	94 4f       	sbci	r25, 0xF4	; 244
    553c:	21 e0       	ldi	r18, 0x01	; 1
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	fc 01       	movw	r30, r24
    5542:	31 83       	std	Z+1, r19	; 0x01
    5544:	20 83       	st	Z, r18
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
    5546:	89 81       	ldd	r24, Y+1	; 0x01
    5548:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
    554c:	8d 81       	ldd	r24, Y+5	; 0x05
    554e:	9e 81       	ldd	r25, Y+6	; 0x06
    5550:	6f 81       	ldd	r22, Y+7	; 0x07
    5552:	78 85       	ldd	r23, Y+8	; 0x08
    5554:	49 85       	ldd	r20, Y+9	; 0x09
    5556:	5a 85       	ldd	r21, Y+10	; 0x0a
    5558:	2d a1       	ldd	r18, Y+37	; 0x25
    555a:	3e a1       	ldd	r19, Y+38	; 0x26
    555c:	0e 94 2b 02 	call	0x456	; 0x456 <OSTaskStkInit>
    5560:	9c 83       	std	Y+4, r25	; 0x04
    5562:	8b 83       	std	Y+3, r24	; 0x03
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
    5564:	6b 81       	ldd	r22, Y+3	; 0x03
    5566:	7c 81       	ldd	r23, Y+4	; 0x04
    5568:	4e 85       	ldd	r20, Y+14	; 0x0e
    556a:	5f 85       	ldd	r21, Y+15	; 0x0f
    556c:	2c 85       	ldd	r18, Y+12	; 0x0c
    556e:	3d 85       	ldd	r19, Y+13	; 0x0d
    5570:	e8 88       	ldd	r14, Y+16	; 0x10
    5572:	f9 88       	ldd	r15, Y+17	; 0x11
    5574:	0a 89       	ldd	r16, Y+18	; 0x12
    5576:	1b 89       	ldd	r17, Y+19	; 0x13
    5578:	ac 89       	ldd	r26, Y+20	; 0x14
    557a:	bd 89       	ldd	r27, Y+21	; 0x15
    557c:	ed a1       	ldd	r30, Y+37	; 0x25
    557e:	fe a1       	ldd	r31, Y+38	; 0x26
    5580:	8b 85       	ldd	r24, Y+11	; 0x0b
    5582:	6d 01       	movw	r12, r26
    5584:	5f 01       	movw	r10, r30
    5586:	0e 94 dd 24 	call	0x49ba	; 0x49ba <OS_SchedNew+0x13c>
    558a:	8a 83       	std	Y+2, r24	; 0x02
        if (err == OS_ERR_NONE) {
    558c:	8a 81       	ldd	r24, Y+2	; 0x02
    558e:	88 23       	and	r24, r24
    5590:	39 f4       	brne	.+14     	; 0x55a0 <OS_SchedNew+0xd22>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
    5592:	80 91 12 05 	lds	r24, 0x0512
    5596:	81 30       	cpi	r24, 0x01	; 1
    5598:	a1 f4       	brne	.+40     	; 0x55c2 <OS_SchedNew+0xd44>
                OS_Sched();
    559a:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
    559e:	12 c0       	rjmp	.+36     	; 0x55c4 <OS_SchedNew+0xd46>
            }
        } else {
            OS_ENTER_CRITICAL();
    55a0:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    55a4:	89 83       	std	Y+1, r24	; 0x01
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
    55a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    55a8:	88 2f       	mov	r24, r24
    55aa:	90 e0       	ldi	r25, 0x00	; 0
    55ac:	88 0f       	add	r24, r24
    55ae:	99 1f       	adc	r25, r25
    55b0:	80 51       	subi	r24, 0x10	; 16
    55b2:	94 4f       	sbci	r25, 0xF4	; 244
    55b4:	fc 01       	movw	r30, r24
    55b6:	11 82       	std	Z+1, r1	; 0x01
    55b8:	10 82       	st	Z, r1
            OS_EXIT_CRITICAL();
    55ba:	89 81       	ldd	r24, Y+1	; 0x01
    55bc:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    55c0:	01 c0       	rjmp	.+2      	; 0x55c4 <OS_SchedNew+0xd46>

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
        if (err == OS_ERR_NONE) {
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
                OS_Sched();
    55c2:	00 00       	nop
        } else {
            OS_ENTER_CRITICAL();
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
            OS_EXIT_CRITICAL();
        }
        return (err);
    55c4:	8a 81       	ldd	r24, Y+2	; 0x02
    55c6:	04 c0       	rjmp	.+8      	; 0x55d0 <OS_SchedNew+0xd52>
    }
    OS_EXIT_CRITICAL();
    55c8:	89 81       	ldd	r24, Y+1	; 0x01
    55ca:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_PRIO_EXIST);
    55ce:	88 e2       	ldi	r24, 0x28	; 40
}
    55d0:	65 96       	adiw	r28, 0x15	; 21
    55d2:	0f b6       	in	r0, 0x3f	; 63
    55d4:	f8 94       	cli
    55d6:	de bf       	out	0x3e, r29	; 62
    55d8:	0f be       	out	0x3f, r0	; 63
    55da:	cd bf       	out	0x3d, r28	; 61
    55dc:	cf 91       	pop	r28
    55de:	df 91       	pop	r29
    55e0:	1f 91       	pop	r17
    55e2:	0f 91       	pop	r16
    55e4:	ff 90       	pop	r15
    55e6:	ef 90       	pop	r14
    55e8:	df 90       	pop	r13
    55ea:	cf 90       	pop	r12
    55ec:	bf 90       	pop	r11
    55ee:	af 90       	pop	r10
    55f0:	9f 90       	pop	r9
    55f2:	8f 90       	pop	r8
    55f4:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
    55f6:	df 93       	push	r29
    55f8:	cf 93       	push	r28
    55fa:	cd b7       	in	r28, 0x3d	; 61
    55fc:	de b7       	in	r29, 0x3e	; 62
    55fe:	29 97       	sbiw	r28, 0x09	; 9
    5600:	0f b6       	in	r0, 0x3f	; 63
    5602:	f8 94       	cli
    5604:	de bf       	out	0x3e, r29	; 62
    5606:	0f be       	out	0x3f, r0	; 63
    5608:	cd bf       	out	0x3d, r28	; 61
    560a:	8d 83       	std	Y+5, r24	; 0x05
    560c:	7f 83       	std	Y+7, r23	; 0x07
    560e:	6e 83       	std	Y+6, r22	; 0x06
    5610:	59 87       	std	Y+9, r21	; 0x09
    5612:	48 87       	std	Y+8, r20	; 0x08
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
    5614:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
        return (0);
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
    5616:	80 91 4c 08 	lds	r24, 0x084C
    561a:	88 23       	and	r24, r24
    561c:	39 f0       	breq	.+14     	; 0x562c <OS_SchedNew+0xdae>
        *perr = OS_ERR_NAME_GET_ISR;
    561e:	88 85       	ldd	r24, Y+8	; 0x08
    5620:	99 85       	ldd	r25, Y+9	; 0x09
    5622:	21 e1       	ldi	r18, 0x11	; 17
    5624:	fc 01       	movw	r30, r24
    5626:	20 83       	st	Z, r18
        return (0);
    5628:	80 e0       	ldi	r24, 0x00	; 0
    562a:	49 c0       	rjmp	.+146    	; 0x56be <OS_SchedNew+0xe40>
    }
    OS_ENTER_CRITICAL();
    562c:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5630:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
    5632:	8d 81       	ldd	r24, Y+5	; 0x05
    5634:	8f 3f       	cpi	r24, 0xFF	; 255
    5636:	39 f4       	brne	.+14     	; 0x5646 <OS_SchedNew+0xdc8>
        prio = OSTCBCur->OSTCBPrio;
    5638:	80 91 4d 08 	lds	r24, 0x084D
    563c:	90 91 4e 08 	lds	r25, 0x084E
    5640:	fc 01       	movw	r30, r24
    5642:	80 8d       	ldd	r24, Z+24	; 0x18
    5644:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    5646:	8d 81       	ldd	r24, Y+5	; 0x05
    5648:	88 2f       	mov	r24, r24
    564a:	90 e0       	ldi	r25, 0x00	; 0
    564c:	88 0f       	add	r24, r24
    564e:	99 1f       	adc	r25, r25
    5650:	80 51       	subi	r24, 0x10	; 16
    5652:	94 4f       	sbci	r25, 0xF4	; 244
    5654:	fc 01       	movw	r30, r24
    5656:	80 81       	ld	r24, Z
    5658:	91 81       	ldd	r25, Z+1	; 0x01
    565a:	9c 83       	std	Y+4, r25	; 0x04
    565c:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
    565e:	8b 81       	ldd	r24, Y+3	; 0x03
    5660:	9c 81       	ldd	r25, Y+4	; 0x04
    5662:	00 97       	sbiw	r24, 0x00	; 0
    5664:	51 f4       	brne	.+20     	; 0x567a <OS_SchedNew+0xdfc>
        OS_EXIT_CRITICAL();                              /* No                                         */
    5666:	89 81       	ldd	r24, Y+1	; 0x01
    5668:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    566c:	88 85       	ldd	r24, Y+8	; 0x08
    566e:	99 85       	ldd	r25, Y+9	; 0x09
    5670:	23 e4       	ldi	r18, 0x43	; 67
    5672:	fc 01       	movw	r30, r24
    5674:	20 83       	st	Z, r18
        return (0);
    5676:	80 e0       	ldi	r24, 0x00	; 0
    5678:	22 c0       	rjmp	.+68     	; 0x56be <OS_SchedNew+0xe40>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
    567a:	8b 81       	ldd	r24, Y+3	; 0x03
    567c:	9c 81       	ldd	r25, Y+4	; 0x04
    567e:	81 30       	cpi	r24, 0x01	; 1
    5680:	91 05       	cpc	r25, r1
    5682:	51 f4       	brne	.+20     	; 0x5698 <OS_SchedNew+0xe1a>
        OS_EXIT_CRITICAL();                              /* Yes                                        */
    5684:	89 81       	ldd	r24, Y+1	; 0x01
    5686:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    568a:	88 85       	ldd	r24, Y+8	; 0x08
    568c:	99 85       	ldd	r25, Y+9	; 0x09
    568e:	23 e4       	ldi	r18, 0x43	; 67
    5690:	fc 01       	movw	r30, r24
    5692:	20 83       	st	Z, r18
        return (0);
    5694:	80 e0       	ldi	r24, 0x00	; 0
    5696:	13 c0       	rjmp	.+38     	; 0x56be <OS_SchedNew+0xe40>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
    5698:	8b 81       	ldd	r24, Y+3	; 0x03
    569a:	9c 81       	ldd	r25, Y+4	; 0x04
    569c:	9c 01       	movw	r18, r24
    569e:	21 5d       	subi	r18, 0xD1	; 209
    56a0:	3f 4f       	sbci	r19, 0xFF	; 255
    56a2:	8e 81       	ldd	r24, Y+6	; 0x06
    56a4:	9f 81       	ldd	r25, Y+7	; 0x07
    56a6:	b9 01       	movw	r22, r18
    56a8:	0e 94 66 24 	call	0x48cc	; 0x48cc <OS_SchedNew+0x4e>
    56ac:	8a 83       	std	Y+2, r24	; 0x02
    OS_EXIT_CRITICAL();
    56ae:	89 81       	ldd	r24, Y+1	; 0x01
    56b0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    56b4:	88 85       	ldd	r24, Y+8	; 0x08
    56b6:	99 85       	ldd	r25, Y+9	; 0x09
    56b8:	fc 01       	movw	r30, r24
    56ba:	10 82       	st	Z, r1
    return (len);
    56bc:	8a 81       	ldd	r24, Y+2	; 0x02
}
    56be:	29 96       	adiw	r28, 0x09	; 9
    56c0:	0f b6       	in	r0, 0x3f	; 63
    56c2:	f8 94       	cli
    56c4:	de bf       	out	0x3e, r29	; 62
    56c6:	0f be       	out	0x3f, r0	; 63
    56c8:	cd bf       	out	0x3d, r28	; 61
    56ca:	cf 91       	pop	r28
    56cc:	df 91       	pop	r29
    56ce:	08 95       	ret
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
    56d0:	df 93       	push	r29
    56d2:	cf 93       	push	r28
    56d4:	cd b7       	in	r28, 0x3d	; 61
    56d6:	de b7       	in	r29, 0x3e	; 62
    56d8:	29 97       	sbiw	r28, 0x09	; 9
    56da:	0f b6       	in	r0, 0x3f	; 63
    56dc:	f8 94       	cli
    56de:	de bf       	out	0x3e, r29	; 62
    56e0:	0f be       	out	0x3f, r0	; 63
    56e2:	cd bf       	out	0x3d, r28	; 61
    56e4:	8d 83       	std	Y+5, r24	; 0x05
    56e6:	7f 83       	std	Y+7, r23	; 0x07
    56e8:	6e 83       	std	Y+6, r22	; 0x06
    56ea:	59 87       	std	Y+9, r21	; 0x09
    56ec:	48 87       	std	Y+8, r20	; 0x08
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    56ee:	19 82       	std	Y+1, r1	; 0x01
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
        return;
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
    56f0:	80 91 4c 08 	lds	r24, 0x084C
    56f4:	88 23       	and	r24, r24
    56f6:	31 f0       	breq	.+12     	; 0x5704 <OS_SchedNew+0xe86>
        *perr = OS_ERR_NAME_SET_ISR;
    56f8:	88 85       	ldd	r24, Y+8	; 0x08
    56fa:	99 85       	ldd	r25, Y+9	; 0x09
    56fc:	22 e1       	ldi	r18, 0x12	; 18
    56fe:	fc 01       	movw	r30, r24
    5700:	20 83       	st	Z, r18
        return;
    5702:	54 c0       	rjmp	.+168    	; 0x57ac <OS_SchedNew+0xf2e>
    }
    OS_ENTER_CRITICAL();
    5704:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5708:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
    570a:	8d 81       	ldd	r24, Y+5	; 0x05
    570c:	8f 3f       	cpi	r24, 0xFF	; 255
    570e:	39 f4       	brne	.+14     	; 0x571e <OS_SchedNew+0xea0>
        prio = OSTCBCur->OSTCBPrio;
    5710:	80 91 4d 08 	lds	r24, 0x084D
    5714:	90 91 4e 08 	lds	r25, 0x084E
    5718:	fc 01       	movw	r30, r24
    571a:	80 8d       	ldd	r24, Z+24	; 0x18
    571c:	8d 83       	std	Y+5, r24	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    571e:	8d 81       	ldd	r24, Y+5	; 0x05
    5720:	88 2f       	mov	r24, r24
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	88 0f       	add	r24, r24
    5726:	99 1f       	adc	r25, r25
    5728:	80 51       	subi	r24, 0x10	; 16
    572a:	94 4f       	sbci	r25, 0xF4	; 244
    572c:	fc 01       	movw	r30, r24
    572e:	80 81       	ld	r24, Z
    5730:	91 81       	ldd	r25, Z+1	; 0x01
    5732:	9b 83       	std	Y+3, r25	; 0x03
    5734:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
    5736:	8a 81       	ldd	r24, Y+2	; 0x02
    5738:	9b 81       	ldd	r25, Y+3	; 0x03
    573a:	00 97       	sbiw	r24, 0x00	; 0
    573c:	49 f4       	brne	.+18     	; 0x5750 <OS_SchedNew+0xed2>
        OS_EXIT_CRITICAL();                          /* No                                             */
    573e:	89 81       	ldd	r24, Y+1	; 0x01
    5740:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    5744:	88 85       	ldd	r24, Y+8	; 0x08
    5746:	99 85       	ldd	r25, Y+9	; 0x09
    5748:	23 e4       	ldi	r18, 0x43	; 67
    574a:	fc 01       	movw	r30, r24
    574c:	20 83       	st	Z, r18
        return;
    574e:	2e c0       	rjmp	.+92     	; 0x57ac <OS_SchedNew+0xf2e>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
    5750:	8a 81       	ldd	r24, Y+2	; 0x02
    5752:	9b 81       	ldd	r25, Y+3	; 0x03
    5754:	81 30       	cpi	r24, 0x01	; 1
    5756:	91 05       	cpc	r25, r1
    5758:	49 f4       	brne	.+18     	; 0x576c <OS_SchedNew+0xeee>
        OS_EXIT_CRITICAL();                          /* Yes                                            */
    575a:	89 81       	ldd	r24, Y+1	; 0x01
    575c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NOT_EXIST;
    5760:	88 85       	ldd	r24, Y+8	; 0x08
    5762:	99 85       	ldd	r25, Y+9	; 0x09
    5764:	23 e4       	ldi	r18, 0x43	; 67
    5766:	fc 01       	movw	r30, r24
    5768:	20 83       	st	Z, r18
        return;
    576a:	20 c0       	rjmp	.+64     	; 0x57ac <OS_SchedNew+0xf2e>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
    576c:	8e 81       	ldd	r24, Y+6	; 0x06
    576e:	9f 81       	ldd	r25, Y+7	; 0x07
    5770:	0e 94 9b 24 	call	0x4936	; 0x4936 <OS_SchedNew+0xb8>
    5774:	8c 83       	std	Y+4, r24	; 0x04
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
    5776:	8c 81       	ldd	r24, Y+4	; 0x04
    5778:	80 31       	cpi	r24, 0x10	; 16
    577a:	48 f0       	brcs	.+18     	; 0x578e <OS_SchedNew+0xf10>
        OS_EXIT_CRITICAL();
    577c:	89 81       	ldd	r24, Y+1	; 0x01
    577e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
    5782:	88 85       	ldd	r24, Y+8	; 0x08
    5784:	99 85       	ldd	r25, Y+9	; 0x09
    5786:	21 e4       	ldi	r18, 0x41	; 65
    5788:	fc 01       	movw	r30, r24
    578a:	20 83       	st	Z, r18
        return;
    578c:	0f c0       	rjmp	.+30     	; 0x57ac <OS_SchedNew+0xf2e>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    578e:	8a 81       	ldd	r24, Y+2	; 0x02
    5790:	9b 81       	ldd	r25, Y+3	; 0x03
    5792:	8f 96       	adiw	r24, 0x2f	; 47
    5794:	2e 81       	ldd	r18, Y+6	; 0x06
    5796:	3f 81       	ldd	r19, Y+7	; 0x07
    5798:	b9 01       	movw	r22, r18
    579a:	0e 94 66 24 	call	0x48cc	; 0x48cc <OS_SchedNew+0x4e>
    OS_EXIT_CRITICAL();
    579e:	89 81       	ldd	r24, Y+1	; 0x01
    57a0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    *perr = OS_ERR_NONE;
    57a4:	88 85       	ldd	r24, Y+8	; 0x08
    57a6:	99 85       	ldd	r25, Y+9	; 0x09
    57a8:	fc 01       	movw	r30, r24
    57aa:	10 82       	st	Z, r1
}
    57ac:	29 96       	adiw	r28, 0x09	; 9
    57ae:	0f b6       	in	r0, 0x3f	; 63
    57b0:	f8 94       	cli
    57b2:	de bf       	out	0x3e, r29	; 62
    57b4:	0f be       	out	0x3f, r0	; 63
    57b6:	cd bf       	out	0x3d, r28	; 61
    57b8:	cf 91       	pop	r28
    57ba:	df 91       	pop	r29
    57bc:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
    57be:	df 93       	push	r29
    57c0:	cf 93       	push	r28
    57c2:	00 d0       	rcall	.+0      	; 0x57c4 <OS_SchedNew+0xf46>
    57c4:	0f 92       	push	r0
    57c6:	cd b7       	in	r28, 0x3d	; 61
    57c8:	de b7       	in	r29, 0x3e	; 62
    57ca:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
    57cc:	19 82       	std	Y+1, r1	; 0x01
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
        return (OS_ERR_PRIO_INVALID);
    }
#endif
    OS_ENTER_CRITICAL();
    57ce:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    57d2:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];
    57d4:	8c 81       	ldd	r24, Y+4	; 0x04
    57d6:	88 2f       	mov	r24, r24
    57d8:	90 e0       	ldi	r25, 0x00	; 0
    57da:	88 0f       	add	r24, r24
    57dc:	99 1f       	adc	r25, r25
    57de:	80 51       	subi	r24, 0x10	; 16
    57e0:	94 4f       	sbci	r25, 0xF4	; 244
    57e2:	fc 01       	movw	r30, r24
    57e4:	80 81       	ld	r24, Z
    57e6:	91 81       	ldd	r25, Z+1	; 0x01
    57e8:	9b 83       	std	Y+3, r25	; 0x03
    57ea:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
    57ec:	8a 81       	ldd	r24, Y+2	; 0x02
    57ee:	9b 81       	ldd	r25, Y+3	; 0x03
    57f0:	00 97       	sbiw	r24, 0x00	; 0
    57f2:	29 f4       	brne	.+10     	; 0x57fe <OS_SchedNew+0xf80>
        OS_EXIT_CRITICAL();
    57f4:	89 81       	ldd	r24, Y+1	; 0x01
    57f6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_RESUME_PRIO);
    57fa:	86 e4       	ldi	r24, 0x46	; 70
    57fc:	67 c0       	rjmp	.+206    	; 0x58cc <OS_SchedNew+0x104e>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
    57fe:	8a 81       	ldd	r24, Y+2	; 0x02
    5800:	9b 81       	ldd	r25, Y+3	; 0x03
    5802:	81 30       	cpi	r24, 0x01	; 1
    5804:	91 05       	cpc	r25, r1
    5806:	29 f4       	brne	.+10     	; 0x5812 <OS_SchedNew+0xf94>
        OS_EXIT_CRITICAL();
    5808:	89 81       	ldd	r24, Y+1	; 0x01
    580a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    580e:	83 e4       	ldi	r24, 0x43	; 67
    5810:	5d c0       	rjmp	.+186    	; 0x58cc <OS_SchedNew+0x104e>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
    5812:	8a 81       	ldd	r24, Y+2	; 0x02
    5814:	9b 81       	ldd	r25, Y+3	; 0x03
    5816:	fc 01       	movw	r30, r24
    5818:	86 89       	ldd	r24, Z+22	; 0x16
    581a:	88 2f       	mov	r24, r24
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	88 70       	andi	r24, 0x08	; 8
    5820:	90 70       	andi	r25, 0x00	; 0
    5822:	00 97       	sbiw	r24, 0x00	; 0
    5824:	09 f4       	brne	.+2      	; 0x5828 <OS_SchedNew+0xfaa>
    5826:	4e c0       	rjmp	.+156    	; 0x58c4 <OS_SchedNew+0x1046>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
    5828:	8a 81       	ldd	r24, Y+2	; 0x02
    582a:	9b 81       	ldd	r25, Y+3	; 0x03
    582c:	fc 01       	movw	r30, r24
    582e:	86 89       	ldd	r24, Z+22	; 0x16
    5830:	28 2f       	mov	r18, r24
    5832:	27 7f       	andi	r18, 0xF7	; 247
    5834:	8a 81       	ldd	r24, Y+2	; 0x02
    5836:	9b 81       	ldd	r25, Y+3	; 0x03
    5838:	fc 01       	movw	r30, r24
    583a:	26 8b       	std	Z+22, r18	; 0x16
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
    583c:	8a 81       	ldd	r24, Y+2	; 0x02
    583e:	9b 81       	ldd	r25, Y+3	; 0x03
    5840:	fc 01       	movw	r30, r24
    5842:	86 89       	ldd	r24, Z+22	; 0x16
    5844:	88 23       	and	r24, r24
    5846:	b9 f5       	brne	.+110    	; 0x58b6 <OS_SchedNew+0x1038>
            if (ptcb->OSTCBDly == 0) {
    5848:	8a 81       	ldd	r24, Y+2	; 0x02
    584a:	9b 81       	ldd	r25, Y+3	; 0x03
    584c:	fc 01       	movw	r30, r24
    584e:	84 89       	ldd	r24, Z+20	; 0x14
    5850:	95 89       	ldd	r25, Z+21	; 0x15
    5852:	00 97       	sbiw	r24, 0x00	; 0
    5854:	61 f5       	brne	.+88     	; 0x58ae <OS_SchedNew+0x1030>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
    5856:	8a 81       	ldd	r24, Y+2	; 0x02
    5858:	9b 81       	ldd	r25, Y+3	; 0x03
    585a:	fc 01       	movw	r30, r24
    585c:	94 8d       	ldd	r25, Z+28	; 0x1c
    585e:	80 91 98 07 	lds	r24, 0x0798
    5862:	89 2b       	or	r24, r25
    5864:	80 93 98 07 	sts	0x0798, r24
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5868:	8a 81       	ldd	r24, Y+2	; 0x02
    586a:	9b 81       	ldd	r25, Y+3	; 0x03
    586c:	fc 01       	movw	r30, r24
    586e:	82 8d       	ldd	r24, Z+26	; 0x1a
    5870:	88 2f       	mov	r24, r24
    5872:	90 e0       	ldi	r25, 0x00	; 0
    5874:	2a 81       	ldd	r18, Y+2	; 0x02
    5876:	3b 81       	ldd	r19, Y+3	; 0x03
    5878:	f9 01       	movw	r30, r18
    587a:	22 8d       	ldd	r18, Z+26	; 0x1a
    587c:	22 2f       	mov	r18, r18
    587e:	30 e0       	ldi	r19, 0x00	; 0
    5880:	27 56       	subi	r18, 0x67	; 103
    5882:	38 4f       	sbci	r19, 0xF8	; 248
    5884:	f9 01       	movw	r30, r18
    5886:	40 81       	ld	r20, Z
    5888:	2a 81       	ldd	r18, Y+2	; 0x02
    588a:	3b 81       	ldd	r19, Y+3	; 0x03
    588c:	f9 01       	movw	r30, r18
    588e:	23 8d       	ldd	r18, Z+27	; 0x1b
    5890:	24 2b       	or	r18, r20
    5892:	87 56       	subi	r24, 0x67	; 103
    5894:	98 4f       	sbci	r25, 0xF8	; 248
    5896:	fc 01       	movw	r30, r24
    5898:	20 83       	st	Z, r18
                OS_EXIT_CRITICAL();
    589a:	89 81       	ldd	r24, Y+1	; 0x01
    589c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
                if (OSRunning == OS_TRUE) {
    58a0:	80 91 12 05 	lds	r24, 0x0512
    58a4:	81 30       	cpi	r24, 0x01	; 1
    58a6:	59 f4       	brne	.+22     	; 0x58be <OS_SchedNew+0x1040>
                    OS_Sched();                               /* Find new highest priority task        */
    58a8:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
                }
            } else {
                OS_EXIT_CRITICAL();
    58ac:	09 c0       	rjmp	.+18     	; 0x58c0 <OS_SchedNew+0x1042>
    58ae:	89 81       	ldd	r24, Y+1	; 0x01
    58b0:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    58b4:	05 c0       	rjmp	.+10     	; 0x58c0 <OS_SchedNew+0x1042>
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
    58b6:	89 81       	ldd	r24, Y+1	; 0x01
    58b8:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    58bc:	01 c0       	rjmp	.+2      	; 0x58c0 <OS_SchedNew+0x1042>
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
                    OS_Sched();                               /* Find new highest priority task        */
                }
            } else {
                OS_EXIT_CRITICAL();
    58be:	00 00       	nop
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
    58c0:	80 e0       	ldi	r24, 0x00	; 0
    58c2:	04 c0       	rjmp	.+8      	; 0x58cc <OS_SchedNew+0x104e>
    }
    OS_EXIT_CRITICAL();
    58c4:	89 81       	ldd	r24, Y+1	; 0x01
    58c6:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_TASK_NOT_SUSPENDED);
    58ca:	84 e4       	ldi	r24, 0x44	; 68
}
    58cc:	0f 90       	pop	r0
    58ce:	0f 90       	pop	r0
    58d0:	0f 90       	pop	r0
    58d2:	0f 90       	pop	r0
    58d4:	cf 91       	pop	r28
    58d6:	df 91       	pop	r29
    58d8:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
    58da:	df 93       	push	r29
    58dc:	cf 93       	push	r28
    58de:	00 d0       	rcall	.+0      	; 0x58e0 <OS_SchedNew+0x1062>
    58e0:	00 d0       	rcall	.+0      	; 0x58e2 <OS_SchedNew+0x1064>
    58e2:	cd b7       	in	r28, 0x3d	; 61
    58e4:	de b7       	in	r29, 0x3e	; 62
    58e6:	8e 83       	std	Y+6, r24	; 0x06
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    58e8:	19 82       	std	Y+1, r1	; 0x01
        if (prio != OS_PRIO_SELF) {
            return (OS_ERR_PRIO_INVALID);
        }
    }
#endif
    OS_ENTER_CRITICAL();
    58ea:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    58ee:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
    58f0:	8e 81       	ldd	r24, Y+6	; 0x06
    58f2:	8f 3f       	cpi	r24, 0xFF	; 255
    58f4:	51 f4       	brne	.+20     	; 0x590a <OS_SchedNew+0x108c>
        prio = OSTCBCur->OSTCBPrio;
    58f6:	80 91 4d 08 	lds	r24, 0x084D
    58fa:	90 91 4e 08 	lds	r25, 0x084E
    58fe:	fc 01       	movw	r30, r24
    5900:	80 8d       	ldd	r24, Z+24	; 0x18
    5902:	8e 83       	std	Y+6, r24	; 0x06
        self = OS_TRUE;
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	8d 83       	std	Y+5, r24	; 0x05
    5908:	0d c0       	rjmp	.+26     	; 0x5924 <OS_SchedNew+0x10a6>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
    590a:	80 91 4d 08 	lds	r24, 0x084D
    590e:	90 91 4e 08 	lds	r25, 0x084E
    5912:	fc 01       	movw	r30, r24
    5914:	90 8d       	ldd	r25, Z+24	; 0x18
    5916:	8e 81       	ldd	r24, Y+6	; 0x06
    5918:	98 17       	cp	r25, r24
    591a:	19 f4       	brne	.+6      	; 0x5922 <OS_SchedNew+0x10a4>
        self = OS_TRUE;
    591c:	81 e0       	ldi	r24, 0x01	; 1
    591e:	8d 83       	std	Y+5, r24	; 0x05
    5920:	01 c0       	rjmp	.+2      	; 0x5924 <OS_SchedNew+0x10a6>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
    5922:	1d 82       	std	Y+5, r1	; 0x05
    }
    ptcb = OSTCBPrioTbl[prio];
    5924:	8e 81       	ldd	r24, Y+6	; 0x06
    5926:	88 2f       	mov	r24, r24
    5928:	90 e0       	ldi	r25, 0x00	; 0
    592a:	88 0f       	add	r24, r24
    592c:	99 1f       	adc	r25, r25
    592e:	80 51       	subi	r24, 0x10	; 16
    5930:	94 4f       	sbci	r25, 0xF4	; 244
    5932:	fc 01       	movw	r30, r24
    5934:	80 81       	ld	r24, Z
    5936:	91 81       	ldd	r25, Z+1	; 0x01
    5938:	9c 83       	std	Y+4, r25	; 0x04
    593a:	8b 83       	std	Y+3, r24	; 0x03
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
    593c:	8b 81       	ldd	r24, Y+3	; 0x03
    593e:	9c 81       	ldd	r25, Y+4	; 0x04
    5940:	00 97       	sbiw	r24, 0x00	; 0
    5942:	29 f4       	brne	.+10     	; 0x594e <OS_SchedNew+0x10d0>
        OS_EXIT_CRITICAL();
    5944:	89 81       	ldd	r24, Y+1	; 0x01
    5946:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_SUSPEND_PRIO);
    594a:	88 e4       	ldi	r24, 0x48	; 72
    594c:	4b c0       	rjmp	.+150    	; 0x59e4 <OS_SchedNew+0x1166>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
    594e:	8b 81       	ldd	r24, Y+3	; 0x03
    5950:	9c 81       	ldd	r25, Y+4	; 0x04
    5952:	81 30       	cpi	r24, 0x01	; 1
    5954:	91 05       	cpc	r25, r1
    5956:	29 f4       	brne	.+10     	; 0x5962 <OS_SchedNew+0x10e4>
        OS_EXIT_CRITICAL();
    5958:	89 81       	ldd	r24, Y+1	; 0x01
    595a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    595e:	83 e4       	ldi	r24, 0x43	; 67
    5960:	41 c0       	rjmp	.+130    	; 0x59e4 <OS_SchedNew+0x1166>
    }
    y            = ptcb->OSTCBY;
    5962:	8b 81       	ldd	r24, Y+3	; 0x03
    5964:	9c 81       	ldd	r25, Y+4	; 0x04
    5966:	fc 01       	movw	r30, r24
    5968:	82 8d       	ldd	r24, Z+26	; 0x1a
    596a:	8a 83       	std	Y+2, r24	; 0x02
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
    596c:	8a 81       	ldd	r24, Y+2	; 0x02
    596e:	88 2f       	mov	r24, r24
    5970:	90 e0       	ldi	r25, 0x00	; 0
    5972:	2a 81       	ldd	r18, Y+2	; 0x02
    5974:	22 2f       	mov	r18, r18
    5976:	30 e0       	ldi	r19, 0x00	; 0
    5978:	27 56       	subi	r18, 0x67	; 103
    597a:	38 4f       	sbci	r19, 0xF8	; 248
    597c:	f9 01       	movw	r30, r18
    597e:	20 81       	ld	r18, Z
    5980:	42 2f       	mov	r20, r18
    5982:	2b 81       	ldd	r18, Y+3	; 0x03
    5984:	3c 81       	ldd	r19, Y+4	; 0x04
    5986:	f9 01       	movw	r30, r18
    5988:	23 8d       	ldd	r18, Z+27	; 0x1b
    598a:	20 95       	com	r18
    598c:	24 23       	and	r18, r20
    598e:	87 56       	subi	r24, 0x67	; 103
    5990:	98 4f       	sbci	r25, 0xF8	; 248
    5992:	fc 01       	movw	r30, r24
    5994:	20 83       	st	Z, r18
    if (OSRdyTbl[y] == 0) {
    5996:	8a 81       	ldd	r24, Y+2	; 0x02
    5998:	88 2f       	mov	r24, r24
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	87 56       	subi	r24, 0x67	; 103
    599e:	98 4f       	sbci	r25, 0xF8	; 248
    59a0:	fc 01       	movw	r30, r24
    59a2:	80 81       	ld	r24, Z
    59a4:	88 23       	and	r24, r24
    59a6:	59 f4       	brne	.+22     	; 0x59be <OS_SchedNew+0x1140>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
    59a8:	8b 81       	ldd	r24, Y+3	; 0x03
    59aa:	9c 81       	ldd	r25, Y+4	; 0x04
    59ac:	fc 01       	movw	r30, r24
    59ae:	84 8d       	ldd	r24, Z+28	; 0x1c
    59b0:	98 2f       	mov	r25, r24
    59b2:	90 95       	com	r25
    59b4:	80 91 98 07 	lds	r24, 0x0798
    59b8:	89 23       	and	r24, r25
    59ba:	80 93 98 07 	sts	0x0798, r24
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
    59be:	8b 81       	ldd	r24, Y+3	; 0x03
    59c0:	9c 81       	ldd	r25, Y+4	; 0x04
    59c2:	fc 01       	movw	r30, r24
    59c4:	86 89       	ldd	r24, Z+22	; 0x16
    59c6:	28 2f       	mov	r18, r24
    59c8:	28 60       	ori	r18, 0x08	; 8
    59ca:	8b 81       	ldd	r24, Y+3	; 0x03
    59cc:	9c 81       	ldd	r25, Y+4	; 0x04
    59ce:	fc 01       	movw	r30, r24
    59d0:	26 8b       	std	Z+22, r18	; 0x16
    OS_EXIT_CRITICAL();
    59d2:	89 81       	ldd	r24, Y+1	; 0x01
    59d4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
    59d8:	8d 81       	ldd	r24, Y+5	; 0x05
    59da:	81 30       	cpi	r24, 0x01	; 1
    59dc:	11 f4       	brne	.+4      	; 0x59e2 <OS_SchedNew+0x1164>
        OS_Sched();                                             /* Find new highest priority task      */
    59de:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
    }
    return (OS_ERR_NONE);
    59e2:	80 e0       	ldi	r24, 0x00	; 0
}
    59e4:	26 96       	adiw	r28, 0x06	; 6
    59e6:	0f b6       	in	r0, 0x3f	; 63
    59e8:	f8 94       	cli
    59ea:	de bf       	out	0x3e, r29	; 62
    59ec:	0f be       	out	0x3f, r0	; 63
    59ee:	cd bf       	out	0x3d, r28	; 61
    59f0:	cf 91       	pop	r28
    59f2:	df 91       	pop	r29
    59f4:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
    59f6:	df 93       	push	r29
    59f8:	cf 93       	push	r28
    59fa:	00 d0       	rcall	.+0      	; 0x59fc <OS_SchedNew+0x117e>
    59fc:	00 d0       	rcall	.+0      	; 0x59fe <OS_SchedNew+0x1180>
    59fe:	cd b7       	in	r28, 0x3d	; 61
    5a00:	de b7       	in	r29, 0x3e	; 62
    5a02:	8c 83       	std	Y+4, r24	; 0x04
    5a04:	7e 83       	std	Y+6, r23	; 0x06
    5a06:	6d 83       	std	Y+5, r22	; 0x05
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a08:	19 82       	std	Y+1, r1	; 0x01
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
        return (OS_ERR_PDATA_NULL);
    }
#endif
    OS_ENTER_CRITICAL();
    5a0a:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5a0e:	89 83       	std	Y+1, r24	; 0x01
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
    5a10:	8c 81       	ldd	r24, Y+4	; 0x04
    5a12:	8f 3f       	cpi	r24, 0xFF	; 255
    5a14:	39 f4       	brne	.+14     	; 0x5a24 <OS_SchedNew+0x11a6>
        prio = OSTCBCur->OSTCBPrio;
    5a16:	80 91 4d 08 	lds	r24, 0x084D
    5a1a:	90 91 4e 08 	lds	r25, 0x084E
    5a1e:	fc 01       	movw	r30, r24
    5a20:	80 8d       	ldd	r24, Z+24	; 0x18
    5a22:	8c 83       	std	Y+4, r24	; 0x04
    }
    ptcb = OSTCBPrioTbl[prio];
    5a24:	8c 81       	ldd	r24, Y+4	; 0x04
    5a26:	88 2f       	mov	r24, r24
    5a28:	90 e0       	ldi	r25, 0x00	; 0
    5a2a:	88 0f       	add	r24, r24
    5a2c:	99 1f       	adc	r25, r25
    5a2e:	80 51       	subi	r24, 0x10	; 16
    5a30:	94 4f       	sbci	r25, 0xF4	; 244
    5a32:	fc 01       	movw	r30, r24
    5a34:	80 81       	ld	r24, Z
    5a36:	91 81       	ldd	r25, Z+1	; 0x01
    5a38:	9b 83       	std	Y+3, r25	; 0x03
    5a3a:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
    5a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a3e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a40:	00 97       	sbiw	r24, 0x00	; 0
    5a42:	29 f4       	brne	.+10     	; 0x5a4e <OS_SchedNew+0x11d0>
        OS_EXIT_CRITICAL();
    5a44:	89 81       	ldd	r24, Y+1	; 0x01
    5a46:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_PRIO);
    5a4a:	89 e2       	ldi	r24, 0x29	; 41
    5a4c:	17 c0       	rjmp	.+46     	; 0x5a7c <OS_SchedNew+0x11fe>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
    5a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5a50:	9b 81       	ldd	r25, Y+3	; 0x03
    5a52:	81 30       	cpi	r24, 0x01	; 1
    5a54:	91 05       	cpc	r25, r1
    5a56:	29 f4       	brne	.+10     	; 0x5a62 <OS_SchedNew+0x11e4>
        OS_EXIT_CRITICAL();
    5a58:	89 81       	ldd	r24, Y+1	; 0x01
    5a5a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);
    5a5e:	83 e4       	ldi	r24, 0x43	; 67
    5a60:	0d c0       	rjmp	.+26     	; 0x5a7c <OS_SchedNew+0x11fe>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
    5a62:	8d 81       	ldd	r24, Y+5	; 0x05
    5a64:	9e 81       	ldd	r25, Y+6	; 0x06
    5a66:	2a 81       	ldd	r18, Y+2	; 0x02
    5a68:	3b 81       	ldd	r19, Y+3	; 0x03
    5a6a:	b9 01       	movw	r22, r18
    5a6c:	4f e3       	ldi	r20, 0x3F	; 63
    5a6e:	50 e0       	ldi	r21, 0x00	; 0
    5a70:	0e 94 b8 23 	call	0x4770	; 0x4770 <OS_InitTCBList+0x102>
    OS_EXIT_CRITICAL();
    5a74:	89 81       	ldd	r24, Y+1	; 0x01
    5a76:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (OS_ERR_NONE);
    5a7a:	80 e0       	ldi	r24, 0x00	; 0
}
    5a7c:	26 96       	adiw	r28, 0x06	; 6
    5a7e:	0f b6       	in	r0, 0x3f	; 63
    5a80:	f8 94       	cli
    5a82:	de bf       	out	0x3e, r29	; 62
    5a84:	0f be       	out	0x3f, r0	; 63
    5a86:	cd bf       	out	0x3d, r28	; 61
    5a88:	cf 91       	pop	r28
    5a8a:	df 91       	pop	r29
    5a8c:	08 95       	ret
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
    5a8e:	df 93       	push	r29
    5a90:	cf 93       	push	r28
    5a92:	00 d0       	rcall	.+0      	; 0x5a94 <OS_SchedNew+0x1216>
    5a94:	0f 92       	push	r0
    5a96:	cd b7       	in	r28, 0x3d	; 61
    5a98:	de b7       	in	r29, 0x3e	; 62
    5a9a:	9c 83       	std	Y+4, r25	; 0x04
    5a9c:	8b 83       	std	Y+3, r24	; 0x03
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5a9e:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5aa0:	80 91 4c 08 	lds	r24, 0x084C
    5aa4:	88 23       	and	r24, r24
    5aa6:	09 f0       	breq	.+2      	; 0x5aaa <OS_SchedNew+0x122c>
    5aa8:	4b c0       	rjmp	.+150    	; 0x5b40 <OS_SchedNew+0x12c2>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
    5aaa:	8b 81       	ldd	r24, Y+3	; 0x03
    5aac:	9c 81       	ldd	r25, Y+4	; 0x04
    5aae:	00 97       	sbiw	r24, 0x00	; 0
    5ab0:	09 f4       	brne	.+2      	; 0x5ab4 <OS_SchedNew+0x1236>
    5ab2:	47 c0       	rjmp	.+142    	; 0x5b42 <OS_SchedNew+0x12c4>
        OS_ENTER_CRITICAL();
    5ab4:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5ab8:	89 83       	std	Y+1, r24	; 0x01
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
    5aba:	80 91 4d 08 	lds	r24, 0x084D
    5abe:	90 91 4e 08 	lds	r25, 0x084E
    5ac2:	fc 01       	movw	r30, r24
    5ac4:	82 8d       	ldd	r24, Z+26	; 0x1a
    5ac6:	8a 83       	std	Y+2, r24	; 0x02
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
    5ac8:	8a 81       	ldd	r24, Y+2	; 0x02
    5aca:	88 2f       	mov	r24, r24
    5acc:	90 e0       	ldi	r25, 0x00	; 0
    5ace:	2a 81       	ldd	r18, Y+2	; 0x02
    5ad0:	22 2f       	mov	r18, r18
    5ad2:	30 e0       	ldi	r19, 0x00	; 0
    5ad4:	27 56       	subi	r18, 0x67	; 103
    5ad6:	38 4f       	sbci	r19, 0xF8	; 248
    5ad8:	f9 01       	movw	r30, r18
    5ada:	20 81       	ld	r18, Z
    5adc:	42 2f       	mov	r20, r18
    5ade:	20 91 4d 08 	lds	r18, 0x084D
    5ae2:	30 91 4e 08 	lds	r19, 0x084E
    5ae6:	f9 01       	movw	r30, r18
    5ae8:	23 8d       	ldd	r18, Z+27	; 0x1b
    5aea:	20 95       	com	r18
    5aec:	24 23       	and	r18, r20
    5aee:	87 56       	subi	r24, 0x67	; 103
    5af0:	98 4f       	sbci	r25, 0xF8	; 248
    5af2:	fc 01       	movw	r30, r24
    5af4:	20 83       	st	Z, r18
        if (OSRdyTbl[y] == 0) {
    5af6:	8a 81       	ldd	r24, Y+2	; 0x02
    5af8:	88 2f       	mov	r24, r24
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	87 56       	subi	r24, 0x67	; 103
    5afe:	98 4f       	sbci	r25, 0xF8	; 248
    5b00:	fc 01       	movw	r30, r24
    5b02:	80 81       	ld	r24, Z
    5b04:	88 23       	and	r24, r24
    5b06:	69 f4       	brne	.+26     	; 0x5b22 <OS_SchedNew+0x12a4>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
    5b08:	80 91 4d 08 	lds	r24, 0x084D
    5b0c:	90 91 4e 08 	lds	r25, 0x084E
    5b10:	fc 01       	movw	r30, r24
    5b12:	84 8d       	ldd	r24, Z+28	; 0x1c
    5b14:	98 2f       	mov	r25, r24
    5b16:	90 95       	com	r25
    5b18:	80 91 98 07 	lds	r24, 0x0798
    5b1c:	89 23       	and	r24, r25
    5b1e:	80 93 98 07 	sts	0x0798, r24
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
    5b22:	80 91 4d 08 	lds	r24, 0x084D
    5b26:	90 91 4e 08 	lds	r25, 0x084E
    5b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    5b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    5b2e:	fc 01       	movw	r30, r24
    5b30:	35 8b       	std	Z+21, r19	; 0x15
    5b32:	24 8b       	std	Z+20, r18	; 0x14
        OS_EXIT_CRITICAL();
    5b34:	89 81       	ldd	r24, Y+1	; 0x01
    5b36:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                              /* Find next task to run!                             */
    5b3a:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
    5b3e:	01 c0       	rjmp	.+2      	; 0x5b42 <OS_SchedNew+0x12c4>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
    5b40:	00 00       	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
    5b42:	0f 90       	pop	r0
    5b44:	0f 90       	pop	r0
    5b46:	0f 90       	pop	r0
    5b48:	0f 90       	pop	r0
    5b4a:	cf 91       	pop	r28
    5b4c:	df 91       	pop	r29
    5b4e:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
    5b50:	ef 92       	push	r14
    5b52:	ff 92       	push	r15
    5b54:	0f 93       	push	r16
    5b56:	1f 93       	push	r17
    5b58:	df 93       	push	r29
    5b5a:	cf 93       	push	r28
    5b5c:	cd b7       	in	r28, 0x3d	; 61
    5b5e:	de b7       	in	r29, 0x3e	; 62
    5b60:	2b 97       	sbiw	r28, 0x0b	; 11
    5b62:	0f b6       	in	r0, 0x3f	; 63
    5b64:	f8 94       	cli
    5b66:	de bf       	out	0x3e, r29	; 62
    5b68:	0f be       	out	0x3f, r0	; 63
    5b6a:	cd bf       	out	0x3d, r28	; 61
    5b6c:	8f 83       	std	Y+7, r24	; 0x07
    5b6e:	68 87       	std	Y+8, r22	; 0x08
    5b70:	49 87       	std	Y+9, r20	; 0x09
    5b72:	3b 87       	std	Y+11, r19	; 0x0b
    5b74:	2a 87       	std	Y+10, r18	; 0x0a
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
    5b76:	80 91 4c 08 	lds	r24, 0x084C
    5b7a:	88 23       	and	r24, r24
    5b7c:	11 f0       	breq	.+4      	; 0x5b82 <OS_SchedNew+0x1304>
        return (OS_ERR_TIME_DLY_ISR);
    5b7e:	85 e5       	ldi	r24, 0x55	; 85
    5b80:	86 c0       	rjmp	.+268    	; 0x5c8e <OS_SchedNew+0x1410>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    5b82:	8f 81       	ldd	r24, Y+7	; 0x07
    5b84:	88 2f       	mov	r24, r24
    5b86:	90 e0       	ldi	r25, 0x00	; 0
    5b88:	a0 e0       	ldi	r26, 0x00	; 0
    5b8a:	b0 e0       	ldi	r27, 0x00	; 0
    5b8c:	20 e1       	ldi	r18, 0x10	; 16
    5b8e:	3e e0       	ldi	r19, 0x0E	; 14
    5b90:	40 e0       	ldi	r20, 0x00	; 0
    5b92:	50 e0       	ldi	r21, 0x00	; 0
    5b94:	bc 01       	movw	r22, r24
    5b96:	cd 01       	movw	r24, r26
    5b98:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    5b9c:	7b 01       	movw	r14, r22
    5b9e:	8c 01       	movw	r16, r24
    5ba0:	88 85       	ldd	r24, Y+8	; 0x08
    5ba2:	88 2f       	mov	r24, r24
    5ba4:	90 e0       	ldi	r25, 0x00	; 0
    5ba6:	a0 e0       	ldi	r26, 0x00	; 0
    5ba8:	b0 e0       	ldi	r27, 0x00	; 0
    5baa:	2c e3       	ldi	r18, 0x3C	; 60
    5bac:	30 e0       	ldi	r19, 0x00	; 0
    5bae:	40 e0       	ldi	r20, 0x00	; 0
    5bb0:	50 e0       	ldi	r21, 0x00	; 0
    5bb2:	bc 01       	movw	r22, r24
    5bb4:	cd 01       	movw	r24, r26
    5bb6:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    5bba:	dc 01       	movw	r26, r24
    5bbc:	cb 01       	movw	r24, r22
    5bbe:	a8 01       	movw	r20, r16
    5bc0:	97 01       	movw	r18, r14
    5bc2:	28 0f       	add	r18, r24
    5bc4:	39 1f       	adc	r19, r25
    5bc6:	4a 1f       	adc	r20, r26
    5bc8:	5b 1f       	adc	r21, r27
    5bca:	89 85       	ldd	r24, Y+9	; 0x09
    5bcc:	88 2f       	mov	r24, r24
    5bce:	90 e0       	ldi	r25, 0x00	; 0
    5bd0:	a0 e0       	ldi	r26, 0x00	; 0
    5bd2:	b0 e0       	ldi	r27, 0x00	; 0
    5bd4:	82 0f       	add	r24, r18
    5bd6:	93 1f       	adc	r25, r19
    5bd8:	a4 1f       	adc	r26, r20
    5bda:	b5 1f       	adc	r27, r21
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    5bdc:	24 e6       	ldi	r18, 0x64	; 100
    5bde:	30 e0       	ldi	r19, 0x00	; 0
    5be0:	40 e0       	ldi	r20, 0x00	; 0
    5be2:	50 e0       	ldi	r21, 0x00	; 0
    5be4:	bc 01       	movw	r22, r24
    5be6:	cd 01       	movw	r24, r26
    5be8:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    5bec:	7b 01       	movw	r14, r22
    5bee:	8c 01       	movw	r16, r24
    5bf0:	8a 85       	ldd	r24, Y+10	; 0x0a
    5bf2:	9b 85       	ldd	r25, Y+11	; 0x0b
    5bf4:	cc 01       	movw	r24, r24
    5bf6:	a0 e0       	ldi	r26, 0x00	; 0
    5bf8:	b0 e0       	ldi	r27, 0x00	; 0
    5bfa:	24 e6       	ldi	r18, 0x64	; 100
    5bfc:	30 e0       	ldi	r19, 0x00	; 0
    5bfe:	40 e0       	ldi	r20, 0x00	; 0
    5c00:	50 e0       	ldi	r21, 0x00	; 0
    5c02:	bc 01       	movw	r22, r24
    5c04:	cd 01       	movw	r24, r26
    5c06:	0e 94 53 40 	call	0x80a6	; 0x80a6 <__mulsi3>
    5c0a:	dc 01       	movw	r26, r24
    5c0c:	cb 01       	movw	r24, r22
    5c0e:	8c 50       	subi	r24, 0x0C	; 12
    5c10:	9e 4f       	sbci	r25, 0xFE	; 254
    5c12:	af 4f       	sbci	r26, 0xFF	; 255
    5c14:	bf 4f       	sbci	r27, 0xFF	; 255
    5c16:	28 ee       	ldi	r18, 0xE8	; 232
    5c18:	33 e0       	ldi	r19, 0x03	; 3
    5c1a:	40 e0       	ldi	r20, 0x00	; 0
    5c1c:	50 e0       	ldi	r21, 0x00	; 0
    5c1e:	bc 01       	movw	r22, r24
    5c20:	cd 01       	movw	r24, r26
    5c22:	0e 94 85 40 	call	0x810a	; 0x810a <__udivmodsi4>
    5c26:	da 01       	movw	r26, r20
    5c28:	c9 01       	movw	r24, r18
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
    5c2a:	8e 0d       	add	r24, r14
    5c2c:	9f 1d       	adc	r25, r15
    5c2e:	a0 1f       	adc	r26, r16
    5c30:	b1 1f       	adc	r27, r17
    5c32:	8b 83       	std	Y+3, r24	; 0x03
    5c34:	9c 83       	std	Y+4, r25	; 0x04
    5c36:	ad 83       	std	Y+5, r26	; 0x05
    5c38:	be 83       	std	Y+6, r27	; 0x06
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    5c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    5c3c:	9c 81       	ldd	r25, Y+4	; 0x04
    5c3e:	ad 81       	ldd	r26, Y+5	; 0x05
    5c40:	be 81       	ldd	r27, Y+6	; 0x06
    5c42:	cd 01       	movw	r24, r26
    5c44:	aa 27       	eor	r26, r26
    5c46:	bb 27       	eor	r27, r27
    5c48:	9a 83       	std	Y+2, r25	; 0x02
    5c4a:	89 83       	std	Y+1, r24	; 0x01
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    5c4c:	8b 81       	ldd	r24, Y+3	; 0x03
    5c4e:	9c 81       	ldd	r25, Y+4	; 0x04
    5c50:	ad 81       	ldd	r26, Y+5	; 0x05
    5c52:	be 81       	ldd	r27, Y+6	; 0x06
    5c54:	a0 70       	andi	r26, 0x00	; 0
    5c56:	b0 70       	andi	r27, 0x00	; 0
    5c58:	8b 83       	std	Y+3, r24	; 0x03
    5c5a:	9c 83       	std	Y+4, r25	; 0x04
    5c5c:	ad 83       	std	Y+5, r26	; 0x05
    5c5e:	be 83       	std	Y+6, r27	; 0x06
    OSTimeDly((INT16U)ticks);
    5c60:	8b 81       	ldd	r24, Y+3	; 0x03
    5c62:	9c 81       	ldd	r25, Y+4	; 0x04
    5c64:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <OS_SchedNew+0x1210>
    while (loops > 0) {
    5c68:	0d c0       	rjmp	.+26     	; 0x5c84 <OS_SchedNew+0x1406>
        OSTimeDly((INT16U)32768u);
    5c6a:	80 e0       	ldi	r24, 0x00	; 0
    5c6c:	90 e8       	ldi	r25, 0x80	; 128
    5c6e:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <OS_SchedNew+0x1210>
        OSTimeDly((INT16U)32768u);
    5c72:	80 e0       	ldi	r24, 0x00	; 0
    5c74:	90 e8       	ldi	r25, 0x80	; 128
    5c76:	0e 94 47 2d 	call	0x5a8e	; 0x5a8e <OS_SchedNew+0x1210>
        loops--;
    5c7a:	89 81       	ldd	r24, Y+1	; 0x01
    5c7c:	9a 81       	ldd	r25, Y+2	; 0x02
    5c7e:	01 97       	sbiw	r24, 0x01	; 1
    5c80:	9a 83       	std	Y+2, r25	; 0x02
    5c82:	89 83       	std	Y+1, r24	; 0x01
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
    5c84:	89 81       	ldd	r24, Y+1	; 0x01
    5c86:	9a 81       	ldd	r25, Y+2	; 0x02
    5c88:	00 97       	sbiw	r24, 0x00	; 0
    5c8a:	79 f7       	brne	.-34     	; 0x5c6a <OS_SchedNew+0x13ec>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
    5c8c:	80 e0       	ldi	r24, 0x00	; 0
}
    5c8e:	2b 96       	adiw	r28, 0x0b	; 11
    5c90:	0f b6       	in	r0, 0x3f	; 63
    5c92:	f8 94       	cli
    5c94:	de bf       	out	0x3e, r29	; 62
    5c96:	0f be       	out	0x3f, r0	; 63
    5c98:	cd bf       	out	0x3d, r28	; 61
    5c9a:	cf 91       	pop	r28
    5c9c:	df 91       	pop	r29
    5c9e:	1f 91       	pop	r17
    5ca0:	0f 91       	pop	r16
    5ca2:	ff 90       	pop	r15
    5ca4:	ef 90       	pop	r14
    5ca6:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
    5ca8:	df 93       	push	r29
    5caa:	cf 93       	push	r28
    5cac:	00 d0       	rcall	.+0      	; 0x5cae <OS_SchedNew+0x1430>
    5cae:	0f 92       	push	r0
    5cb0:	cd b7       	in	r28, 0x3d	; 61
    5cb2:	de b7       	in	r29, 0x3e	; 62
    5cb4:	8c 83       	std	Y+4, r24	; 0x04
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
    5cb6:	19 82       	std	Y+1, r1	; 0x01
#endif



    if (prio >= OS_LOWEST_PRIO) {
    5cb8:	8c 81       	ldd	r24, Y+4	; 0x04
    5cba:	8a 30       	cpi	r24, 0x0A	; 10
    5cbc:	10 f0       	brcs	.+4      	; 0x5cc2 <OS_SchedNew+0x1444>
        return (OS_ERR_PRIO_INVALID);
    5cbe:	8a e2       	ldi	r24, 0x2A	; 42
    5cc0:	87 c0       	rjmp	.+270    	; 0x5dd0 <OS_SchedNew+0x1552>
    }
    OS_ENTER_CRITICAL();
    5cc2:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5cc6:	89 83       	std	Y+1, r24	; 0x01
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
    5cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    5cca:	88 2f       	mov	r24, r24
    5ccc:	90 e0       	ldi	r25, 0x00	; 0
    5cce:	88 0f       	add	r24, r24
    5cd0:	99 1f       	adc	r25, r25
    5cd2:	80 51       	subi	r24, 0x10	; 16
    5cd4:	94 4f       	sbci	r25, 0xF4	; 244
    5cd6:	fc 01       	movw	r30, r24
    5cd8:	80 81       	ld	r24, Z
    5cda:	91 81       	ldd	r25, Z+1	; 0x01
    5cdc:	9b 83       	std	Y+3, r25	; 0x03
    5cde:	8a 83       	std	Y+2, r24	; 0x02
    if (ptcb == (OS_TCB *)0) {
    5ce0:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce2:	9b 81       	ldd	r25, Y+3	; 0x03
    5ce4:	00 97       	sbiw	r24, 0x00	; 0
    5ce6:	29 f4       	brne	.+10     	; 0x5cf2 <OS_SchedNew+0x1474>
        OS_EXIT_CRITICAL();
    5ce8:	89 81       	ldd	r24, Y+1	; 0x01
    5cea:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    5cee:	83 e4       	ldi	r24, 0x43	; 67
    5cf0:	6f c0       	rjmp	.+222    	; 0x5dd0 <OS_SchedNew+0x1552>
    }
    if (ptcb == OS_TCB_RESERVED) {
    5cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    5cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    5cf6:	81 30       	cpi	r24, 0x01	; 1
    5cf8:	91 05       	cpc	r25, r1
    5cfa:	29 f4       	brne	.+10     	; 0x5d06 <OS_SchedNew+0x1488>
        OS_EXIT_CRITICAL();
    5cfc:	89 81       	ldd	r24, Y+1	; 0x01
    5cfe:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
    5d02:	83 e4       	ldi	r24, 0x43	; 67
    5d04:	65 c0       	rjmp	.+202    	; 0x5dd0 <OS_SchedNew+0x1552>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
    5d06:	8a 81       	ldd	r24, Y+2	; 0x02
    5d08:	9b 81       	ldd	r25, Y+3	; 0x03
    5d0a:	fc 01       	movw	r30, r24
    5d0c:	84 89       	ldd	r24, Z+20	; 0x14
    5d0e:	95 89       	ldd	r25, Z+21	; 0x15
    5d10:	00 97       	sbiw	r24, 0x00	; 0
    5d12:	29 f4       	brne	.+10     	; 0x5d1e <OS_SchedNew+0x14a0>
        OS_EXIT_CRITICAL();
    5d14:	89 81       	ldd	r24, Y+1	; 0x01
    5d16:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
    5d1a:	80 e5       	ldi	r24, 0x50	; 80
    5d1c:	59 c0       	rjmp	.+178    	; 0x5dd0 <OS_SchedNew+0x1552>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
    5d1e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d20:	9b 81       	ldd	r25, Y+3	; 0x03
    5d22:	fc 01       	movw	r30, r24
    5d24:	15 8a       	std	Z+21, r1	; 0x15
    5d26:	14 8a       	std	Z+20, r1	; 0x14
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
    5d28:	8a 81       	ldd	r24, Y+2	; 0x02
    5d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    5d2c:	fc 01       	movw	r30, r24
    5d2e:	86 89       	ldd	r24, Z+22	; 0x16
    5d30:	88 2f       	mov	r24, r24
    5d32:	90 e0       	ldi	r25, 0x00	; 0
    5d34:	87 73       	andi	r24, 0x37	; 55
    5d36:	90 70       	andi	r25, 0x00	; 0
    5d38:	00 97       	sbiw	r24, 0x00	; 0
    5d3a:	81 f0       	breq	.+32     	; 0x5d5c <OS_SchedNew+0x14de>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
    5d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    5d40:	fc 01       	movw	r30, r24
    5d42:	86 89       	ldd	r24, Z+22	; 0x16
    5d44:	28 2f       	mov	r18, r24
    5d46:	28 7c       	andi	r18, 0xC8	; 200
    5d48:	8a 81       	ldd	r24, Y+2	; 0x02
    5d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    5d4c:	fc 01       	movw	r30, r24
    5d4e:	26 8b       	std	Z+22, r18	; 0x16
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
    5d50:	8a 81       	ldd	r24, Y+2	; 0x02
    5d52:	9b 81       	ldd	r25, Y+3	; 0x03
    5d54:	21 e0       	ldi	r18, 0x01	; 1
    5d56:	fc 01       	movw	r30, r24
    5d58:	27 8b       	std	Z+23, r18	; 0x17
    5d5a:	04 c0       	rjmp	.+8      	; 0x5d64 <OS_SchedNew+0x14e6>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
    5d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d5e:	9b 81       	ldd	r25, Y+3	; 0x03
    5d60:	fc 01       	movw	r30, r24
    5d62:	17 8a       	std	Z+23, r1	; 0x17
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
    5d64:	8a 81       	ldd	r24, Y+2	; 0x02
    5d66:	9b 81       	ldd	r25, Y+3	; 0x03
    5d68:	fc 01       	movw	r30, r24
    5d6a:	86 89       	ldd	r24, Z+22	; 0x16
    5d6c:	88 2f       	mov	r24, r24
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	88 70       	andi	r24, 0x08	; 8
    5d72:	90 70       	andi	r25, 0x00	; 0
    5d74:	00 97       	sbiw	r24, 0x00	; 0
    5d76:	41 f5       	brne	.+80     	; 0x5dc8 <OS_SchedNew+0x154a>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
    5d78:	8a 81       	ldd	r24, Y+2	; 0x02
    5d7a:	9b 81       	ldd	r25, Y+3	; 0x03
    5d7c:	fc 01       	movw	r30, r24
    5d7e:	94 8d       	ldd	r25, Z+28	; 0x1c
    5d80:	80 91 98 07 	lds	r24, 0x0798
    5d84:	89 2b       	or	r24, r25
    5d86:	80 93 98 07 	sts	0x0798, r24
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
    5d8a:	8a 81       	ldd	r24, Y+2	; 0x02
    5d8c:	9b 81       	ldd	r25, Y+3	; 0x03
    5d8e:	fc 01       	movw	r30, r24
    5d90:	82 8d       	ldd	r24, Z+26	; 0x1a
    5d92:	88 2f       	mov	r24, r24
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	2a 81       	ldd	r18, Y+2	; 0x02
    5d98:	3b 81       	ldd	r19, Y+3	; 0x03
    5d9a:	f9 01       	movw	r30, r18
    5d9c:	22 8d       	ldd	r18, Z+26	; 0x1a
    5d9e:	22 2f       	mov	r18, r18
    5da0:	30 e0       	ldi	r19, 0x00	; 0
    5da2:	27 56       	subi	r18, 0x67	; 103
    5da4:	38 4f       	sbci	r19, 0xF8	; 248
    5da6:	f9 01       	movw	r30, r18
    5da8:	40 81       	ld	r20, Z
    5daa:	2a 81       	ldd	r18, Y+2	; 0x02
    5dac:	3b 81       	ldd	r19, Y+3	; 0x03
    5dae:	f9 01       	movw	r30, r18
    5db0:	23 8d       	ldd	r18, Z+27	; 0x1b
    5db2:	24 2b       	or	r18, r20
    5db4:	87 56       	subi	r24, 0x67	; 103
    5db6:	98 4f       	sbci	r25, 0xF8	; 248
    5db8:	fc 01       	movw	r30, r24
    5dba:	20 83       	st	Z, r18
        OS_EXIT_CRITICAL();
    5dbc:	89 81       	ldd	r24, Y+1	; 0x01
    5dbe:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
        OS_Sched();                                            /* See if this is new highest priority  */
    5dc2:	0e 94 e9 23 	call	0x47d2	; 0x47d2 <OS_InitTCBList+0x164>
    5dc6:	03 c0       	rjmp	.+6      	; 0x5dce <OS_SchedNew+0x1550>
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    5dc8:	89 81       	ldd	r24, Y+1	; 0x01
    5dca:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    }
    return (OS_ERR_NONE);
    5dce:	80 e0       	ldi	r24, 0x00	; 0
}
    5dd0:	0f 90       	pop	r0
    5dd2:	0f 90       	pop	r0
    5dd4:	0f 90       	pop	r0
    5dd6:	0f 90       	pop	r0
    5dd8:	cf 91       	pop	r28
    5dda:	df 91       	pop	r29
    5ddc:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
    5dde:	df 93       	push	r29
    5de0:	cf 93       	push	r28
    5de2:	00 d0       	rcall	.+0      	; 0x5de4 <OS_SchedNew+0x1566>
    5de4:	0f 92       	push	r0
    5de6:	0f 92       	push	r0
    5de8:	cd b7       	in	r28, 0x3d	; 61
    5dea:	de b7       	in	r29, 0x3e	; 62
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5dec:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    5dee:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5df2:	89 83       	std	Y+1, r24	; 0x01
    ticks = OSTime;
    5df4:	80 91 53 08 	lds	r24, 0x0853
    5df8:	90 91 54 08 	lds	r25, 0x0854
    5dfc:	a0 91 55 08 	lds	r26, 0x0855
    5e00:	b0 91 56 08 	lds	r27, 0x0856
    5e04:	8a 83       	std	Y+2, r24	; 0x02
    5e06:	9b 83       	std	Y+3, r25	; 0x03
    5e08:	ac 83       	std	Y+4, r26	; 0x04
    5e0a:	bd 83       	std	Y+5, r27	; 0x05
    OS_EXIT_CRITICAL();
    5e0c:	89 81       	ldd	r24, Y+1	; 0x01
    5e0e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
    return (ticks);
    5e12:	8a 81       	ldd	r24, Y+2	; 0x02
    5e14:	9b 81       	ldd	r25, Y+3	; 0x03
    5e16:	ac 81       	ldd	r26, Y+4	; 0x04
    5e18:	bd 81       	ldd	r27, Y+5	; 0x05
}
    5e1a:	bc 01       	movw	r22, r24
    5e1c:	cd 01       	movw	r24, r26
    5e1e:	0f 90       	pop	r0
    5e20:	0f 90       	pop	r0
    5e22:	0f 90       	pop	r0
    5e24:	0f 90       	pop	r0
    5e26:	0f 90       	pop	r0
    5e28:	cf 91       	pop	r28
    5e2a:	df 91       	pop	r29
    5e2c:	08 95       	ret
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
    5e2e:	df 93       	push	r29
    5e30:	cf 93       	push	r28
    5e32:	00 d0       	rcall	.+0      	; 0x5e34 <OS_SchedNew+0x15b6>
    5e34:	0f 92       	push	r0
    5e36:	0f 92       	push	r0
    5e38:	cd b7       	in	r28, 0x3d	; 61
    5e3a:	de b7       	in	r29, 0x3e	; 62
    5e3c:	6a 83       	std	Y+2, r22	; 0x02
    5e3e:	7b 83       	std	Y+3, r23	; 0x03
    5e40:	8c 83       	std	Y+4, r24	; 0x04
    5e42:	9d 83       	std	Y+5, r25	; 0x05
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
    5e44:	19 82       	std	Y+1, r1	; 0x01
#endif



    OS_ENTER_CRITICAL();
    5e46:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    5e4a:	89 83       	std	Y+1, r24	; 0x01
    OSTime = ticks;
    5e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    5e50:	ac 81       	ldd	r26, Y+4	; 0x04
    5e52:	bd 81       	ldd	r27, Y+5	; 0x05
    5e54:	80 93 53 08 	sts	0x0853, r24
    5e58:	90 93 54 08 	sts	0x0854, r25
    5e5c:	a0 93 55 08 	sts	0x0855, r26
    5e60:	b0 93 56 08 	sts	0x0856, r27
    OS_EXIT_CRITICAL();
    5e64:	89 81       	ldd	r24, Y+1	; 0x01
    5e66:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    5e6a:	0f 90       	pop	r0
    5e6c:	0f 90       	pop	r0
    5e6e:	0f 90       	pop	r0
    5e70:	0f 90       	pop	r0
    5e72:	0f 90       	pop	r0
    5e74:	cf 91       	pop	r28
    5e76:	df 91       	pop	r29
    5e78:	08 95       	ret
                      INT8U            opt,
                      OS_TMR_CALLBACK  callback,
                      void            *callback_arg,
                      INT8U           *pname,
                      INT8U           *perr)
{
    5e7a:	8f 92       	push	r8
    5e7c:	9f 92       	push	r9
    5e7e:	af 92       	push	r10
    5e80:	bf 92       	push	r11
    5e82:	cf 92       	push	r12
    5e84:	df 92       	push	r13
    5e86:	ef 92       	push	r14
    5e88:	ff 92       	push	r15
    5e8a:	0f 93       	push	r16
    5e8c:	df 93       	push	r29
    5e8e:	cf 93       	push	r28
    5e90:	cd b7       	in	r28, 0x3d	; 61
    5e92:	de b7       	in	r29, 0x3e	; 62
    5e94:	64 97       	sbiw	r28, 0x14	; 20
    5e96:	0f b6       	in	r0, 0x3f	; 63
    5e98:	f8 94       	cli
    5e9a:	de bf       	out	0x3e, r29	; 62
    5e9c:	0f be       	out	0x3f, r0	; 63
    5e9e:	cd bf       	out	0x3d, r28	; 61
    5ea0:	6c 83       	std	Y+4, r22	; 0x04
    5ea2:	7d 83       	std	Y+5, r23	; 0x05
    5ea4:	8e 83       	std	Y+6, r24	; 0x06
    5ea6:	9f 83       	std	Y+7, r25	; 0x07
    5ea8:	28 87       	std	Y+8, r18	; 0x08
    5eaa:	39 87       	std	Y+9, r19	; 0x09
    5eac:	4a 87       	std	Y+10, r20	; 0x0a
    5eae:	5b 87       	std	Y+11, r21	; 0x0b
    5eb0:	0c 87       	std	Y+12, r16	; 0x0c
    5eb2:	fe 86       	std	Y+14, r15	; 0x0e
    5eb4:	ed 86       	std	Y+13, r14	; 0x0d
    5eb6:	d8 8a       	std	Y+16, r13	; 0x10
    5eb8:	cf 86       	std	Y+15, r12	; 0x0f
    5eba:	ba 8a       	std	Y+18, r11	; 0x12
    5ebc:	a9 8a       	std	Y+17, r10	; 0x11
    5ebe:	9c 8a       	std	Y+20, r9	; 0x14
    5ec0:	8b 8a       	std	Y+19, r8	; 0x13
        default:
             *perr = OS_ERR_TMR_INVALID_OPT;
             return ((OS_TMR *)0);
    }
#endif
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    5ec2:	80 91 4c 08 	lds	r24, 0x084C
    5ec6:	88 23       	and	r24, r24
    5ec8:	41 f0       	breq	.+16     	; 0x5eda <OS_SchedNew+0x165c>
        *perr  = OS_ERR_TMR_ISR;
    5eca:	8b 89       	ldd	r24, Y+19	; 0x13
    5ecc:	9c 89       	ldd	r25, Y+20	; 0x14
    5ece:	2b e8       	ldi	r18, 0x8B	; 139
    5ed0:	fc 01       	movw	r30, r24
    5ed2:	20 83       	st	Z, r18
        return ((OS_TMR *)0);
    5ed4:	80 e0       	ldi	r24, 0x00	; 0
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	72 c0       	rjmp	.+228    	; 0x5fbe <OS_SchedNew+0x1740>
    }
    OSTmr_Lock();
    5eda:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
    ptmr = OSTmr_Alloc();                                   /* Obtain a timer from the free pool                      */
    5ede:	0e 94 27 33 	call	0x664e	; 0x664e <OSTmr_Alloc>
    5ee2:	9b 83       	std	Y+3, r25	; 0x03
    5ee4:	8a 83       	std	Y+2, r24	; 0x02
    if (ptmr == (OS_TMR *)0) {
    5ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    5ee8:	9b 81       	ldd	r25, Y+3	; 0x03
    5eea:	00 97       	sbiw	r24, 0x00	; 0
    5eec:	51 f4       	brne	.+20     	; 0x5f02 <OS_SchedNew+0x1684>
        OSTmr_Unlock();
    5eee:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
        *perr = OS_ERR_TMR_NON_AVAIL;
    5ef2:	8b 89       	ldd	r24, Y+19	; 0x13
    5ef4:	9c 89       	ldd	r25, Y+20	; 0x14
    5ef6:	26 e8       	ldi	r18, 0x86	; 134
    5ef8:	fc 01       	movw	r30, r24
    5efa:	20 83       	st	Z, r18
        return ((OS_TMR *)0);
    5efc:	80 e0       	ldi	r24, 0x00	; 0
    5efe:	90 e0       	ldi	r25, 0x00	; 0
    5f00:	5e c0       	rjmp	.+188    	; 0x5fbe <OS_SchedNew+0x1740>
    }
    ptmr->OSTmrState       = OS_TMR_STATE_STOPPED;          /* Indicate that timer is not running yet                 */
    5f02:	8a 81       	ldd	r24, Y+2	; 0x02
    5f04:	9b 81       	ldd	r25, Y+3	; 0x03
    5f06:	21 e0       	ldi	r18, 0x01	; 1
    5f08:	fc 01       	movw	r30, r24
    5f0a:	26 a3       	std	Z+38, r18	; 0x26
    ptmr->OSTmrDly         = dly;
    5f0c:	2a 81       	ldd	r18, Y+2	; 0x02
    5f0e:	3b 81       	ldd	r19, Y+3	; 0x03
    5f10:	8c 81       	ldd	r24, Y+4	; 0x04
    5f12:	9d 81       	ldd	r25, Y+5	; 0x05
    5f14:	ae 81       	ldd	r26, Y+6	; 0x06
    5f16:	bf 81       	ldd	r27, Y+7	; 0x07
    5f18:	f9 01       	movw	r30, r18
    5f1a:	85 87       	std	Z+13, r24	; 0x0d
    5f1c:	96 87       	std	Z+14, r25	; 0x0e
    5f1e:	a7 87       	std	Z+15, r26	; 0x0f
    5f20:	b0 8b       	std	Z+16, r27	; 0x10
    ptmr->OSTmrPeriod      = period;
    5f22:	2a 81       	ldd	r18, Y+2	; 0x02
    5f24:	3b 81       	ldd	r19, Y+3	; 0x03
    5f26:	88 85       	ldd	r24, Y+8	; 0x08
    5f28:	99 85       	ldd	r25, Y+9	; 0x09
    5f2a:	aa 85       	ldd	r26, Y+10	; 0x0a
    5f2c:	bb 85       	ldd	r27, Y+11	; 0x0b
    5f2e:	f9 01       	movw	r30, r18
    5f30:	81 8b       	std	Z+17, r24	; 0x11
    5f32:	92 8b       	std	Z+18, r25	; 0x12
    5f34:	a3 8b       	std	Z+19, r26	; 0x13
    5f36:	b4 8b       	std	Z+20, r27	; 0x14
    ptmr->OSTmrOpt         = opt;
    5f38:	8a 81       	ldd	r24, Y+2	; 0x02
    5f3a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f3c:	2c 85       	ldd	r18, Y+12	; 0x0c
    5f3e:	fc 01       	movw	r30, r24
    5f40:	25 a3       	std	Z+37, r18	; 0x25
    ptmr->OSTmrCallback    = callback;
    5f42:	8a 81       	ldd	r24, Y+2	; 0x02
    5f44:	9b 81       	ldd	r25, Y+3	; 0x03
    5f46:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f48:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f4a:	fc 01       	movw	r30, r24
    5f4c:	32 83       	std	Z+2, r19	; 0x02
    5f4e:	21 83       	std	Z+1, r18	; 0x01
    ptmr->OSTmrCallbackArg = callback_arg;
    5f50:	8a 81       	ldd	r24, Y+2	; 0x02
    5f52:	9b 81       	ldd	r25, Y+3	; 0x03
    5f54:	2f 85       	ldd	r18, Y+15	; 0x0f
    5f56:	38 89       	ldd	r19, Y+16	; 0x10
    5f58:	fc 01       	movw	r30, r24
    5f5a:	34 83       	std	Z+4, r19	; 0x04
    5f5c:	23 83       	std	Z+3, r18	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 0
    if (pname !=(INT8U *)0) {
    5f5e:	89 89       	ldd	r24, Y+17	; 0x11
    5f60:	9a 89       	ldd	r25, Y+18	; 0x12
    5f62:	00 97       	sbiw	r24, 0x00	; 0
    5f64:	21 f1       	breq	.+72     	; 0x5fae <OS_SchedNew+0x1730>
        len = OS_StrLen(pname);                             /* Copy timer name                                        */
    5f66:	89 89       	ldd	r24, Y+17	; 0x11
    5f68:	9a 89       	ldd	r25, Y+18	; 0x12
    5f6a:	0e 94 9b 24 	call	0x4936	; 0x4936 <OS_SchedNew+0xb8>
    5f6e:	89 83       	std	Y+1, r24	; 0x01
        if (len < OS_TMR_CFG_NAME_SIZE) {
    5f70:	89 81       	ldd	r24, Y+1	; 0x01
    5f72:	80 31       	cpi	r24, 0x10	; 16
    5f74:	48 f4       	brcc	.+18     	; 0x5f88 <OS_SchedNew+0x170a>
            (void)OS_StrCopy(ptmr->OSTmrName, pname);
    5f76:	8a 81       	ldd	r24, Y+2	; 0x02
    5f78:	9b 81       	ldd	r25, Y+3	; 0x03
    5f7a:	45 96       	adiw	r24, 0x15	; 21
    5f7c:	29 89       	ldd	r18, Y+17	; 0x11
    5f7e:	3a 89       	ldd	r19, Y+18	; 0x12
    5f80:	b9 01       	movw	r22, r18
    5f82:	0e 94 66 24 	call	0x48cc	; 0x48cc <OS_SchedNew+0x4e>
    5f86:	13 c0       	rjmp	.+38     	; 0x5fae <OS_SchedNew+0x1730>
        } else {
#if OS_TMR_CFG_NAME_SIZE > 1
            ptmr->OSTmrName[0] = '#';                       /* Invalid size specified                                 */
    5f88:	8a 81       	ldd	r24, Y+2	; 0x02
    5f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    5f8c:	23 e2       	ldi	r18, 0x23	; 35
    5f8e:	fc 01       	movw	r30, r24
    5f90:	25 8b       	std	Z+21, r18	; 0x15
            ptmr->OSTmrName[1] = OS_ASCII_NUL;
    5f92:	8a 81       	ldd	r24, Y+2	; 0x02
    5f94:	9b 81       	ldd	r25, Y+3	; 0x03
    5f96:	fc 01       	movw	r30, r24
    5f98:	16 8a       	std	Z+22, r1	; 0x16
#endif
            *perr              = OS_ERR_TMR_NAME_TOO_LONG;
    5f9a:	8b 89       	ldd	r24, Y+19	; 0x13
    5f9c:	9c 89       	ldd	r25, Y+20	; 0x14
    5f9e:	2c e8       	ldi	r18, 0x8C	; 140
    5fa0:	fc 01       	movw	r30, r24
    5fa2:	20 83       	st	Z, r18
            OSTmr_Unlock();
    5fa4:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
            return (ptmr);
    5fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    5faa:	9b 81       	ldd	r25, Y+3	; 0x03
    5fac:	08 c0       	rjmp	.+16     	; 0x5fbe <OS_SchedNew+0x1740>
        }
    }
#endif
    OSTmr_Unlock();
    5fae:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
    *perr = OS_ERR_NONE;
    5fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    5fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    5fb6:	fc 01       	movw	r30, r24
    5fb8:	10 82       	st	Z, r1
    return (ptmr);
    5fba:	8a 81       	ldd	r24, Y+2	; 0x02
    5fbc:	9b 81       	ldd	r25, Y+3	; 0x03
}
    5fbe:	64 96       	adiw	r28, 0x14	; 20
    5fc0:	0f b6       	in	r0, 0x3f	; 63
    5fc2:	f8 94       	cli
    5fc4:	de bf       	out	0x3e, r29	; 62
    5fc6:	0f be       	out	0x3f, r0	; 63
    5fc8:	cd bf       	out	0x3d, r28	; 61
    5fca:	cf 91       	pop	r28
    5fcc:	df 91       	pop	r29
    5fce:	0f 91       	pop	r16
    5fd0:	ff 90       	pop	r15
    5fd2:	ef 90       	pop	r14
    5fd4:	df 90       	pop	r13
    5fd6:	cf 90       	pop	r12
    5fd8:	bf 90       	pop	r11
    5fda:	af 90       	pop	r10
    5fdc:	9f 90       	pop	r9
    5fde:	8f 90       	pop	r8
    5fe0:	08 95       	ret
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrDel (OS_TMR  *ptmr,
                   INT8U   *perr)
{
    5fe2:	df 93       	push	r29
    5fe4:	cf 93       	push	r28
    5fe6:	00 d0       	rcall	.+0      	; 0x5fe8 <OS_SchedNew+0x176a>
    5fe8:	0f 92       	push	r0
    5fea:	cd b7       	in	r28, 0x3d	; 61
    5fec:	de b7       	in	r29, 0x3e	; 62
    5fee:	9a 83       	std	Y+2, r25	; 0x02
    5ff0:	89 83       	std	Y+1, r24	; 0x01
    5ff2:	7c 83       	std	Y+4, r23	; 0x04
    5ff4:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    5ff6:	89 81       	ldd	r24, Y+1	; 0x01
    5ff8:	9a 81       	ldd	r25, Y+2	; 0x02
    5ffa:	fc 01       	movw	r30, r24
    5ffc:	80 81       	ld	r24, Z
    5ffe:	84 36       	cpi	r24, 0x64	; 100
    6000:	39 f0       	breq	.+14     	; 0x6010 <OS_SchedNew+0x1792>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    6002:	8b 81       	ldd	r24, Y+3	; 0x03
    6004:	9c 81       	ldd	r25, Y+4	; 0x04
    6006:	29 e8       	ldi	r18, 0x89	; 137
    6008:	fc 01       	movw	r30, r24
    600a:	20 83       	st	Z, r18
        return (OS_FALSE);
    600c:	80 e0       	ldi	r24, 0x00	; 0
    600e:	4c c0       	rjmp	.+152    	; 0x60a8 <OS_SchedNew+0x182a>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    6010:	80 91 4c 08 	lds	r24, 0x084C
    6014:	88 23       	and	r24, r24
    6016:	39 f0       	breq	.+14     	; 0x6026 <OS_SchedNew+0x17a8>
        *perr  = OS_ERR_TMR_ISR;
    6018:	8b 81       	ldd	r24, Y+3	; 0x03
    601a:	9c 81       	ldd	r25, Y+4	; 0x04
    601c:	2b e8       	ldi	r18, 0x8B	; 139
    601e:	fc 01       	movw	r30, r24
    6020:	20 83       	st	Z, r18
        return (OS_FALSE);
    6022:	80 e0       	ldi	r24, 0x00	; 0
    6024:	41 c0       	rjmp	.+130    	; 0x60a8 <OS_SchedNew+0x182a>
    }
    OSTmr_Lock();
    6026:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    602a:	89 81       	ldd	r24, Y+1	; 0x01
    602c:	9a 81       	ldd	r25, Y+2	; 0x02
    602e:	fc 01       	movw	r30, r24
    6030:	86 a1       	ldd	r24, Z+38	; 0x26
    6032:	88 2f       	mov	r24, r24
    6034:	90 e0       	ldi	r25, 0x00	; 0
    6036:	83 30       	cpi	r24, 0x03	; 3
    6038:	91 05       	cpc	r25, r1
    603a:	34 f4       	brge	.+12     	; 0x6048 <OS_SchedNew+0x17ca>
    603c:	81 30       	cpi	r24, 0x01	; 1
    603e:	91 05       	cpc	r25, r1
    6040:	b4 f4       	brge	.+44     	; 0x606e <OS_SchedNew+0x17f0>
    6042:	00 97       	sbiw	r24, 0x00	; 0
    6044:	01 f1       	breq	.+64     	; 0x6086 <OS_SchedNew+0x1808>
    6046:	28 c0       	rjmp	.+80     	; 0x6098 <OS_SchedNew+0x181a>
    6048:	83 30       	cpi	r24, 0x03	; 3
    604a:	91 05       	cpc	r25, r1
    604c:	29 f5       	brne	.+74     	; 0x6098 <OS_SchedNew+0x181a>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                            /* Remove from current wheel spoke                        */
    604e:	89 81       	ldd	r24, Y+1	; 0x01
    6050:	9a 81       	ldd	r25, Y+2	; 0x02
    6052:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <OSTmr_Unlink>
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    6056:	89 81       	ldd	r24, Y+1	; 0x01
    6058:	9a 81       	ldd	r25, Y+2	; 0x02
    605a:	0e 94 68 33 	call	0x66d0	; 0x66d0 <OSTmr_Free>
             OSTmr_Unlock();
    605e:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    6062:	8b 81       	ldd	r24, Y+3	; 0x03
    6064:	9c 81       	ldd	r25, Y+4	; 0x04
    6066:	fc 01       	movw	r30, r24
    6068:	10 82       	st	Z, r1
             return (OS_TRUE);
    606a:	81 e0       	ldi	r24, 0x01	; 1
    606c:	1d c0       	rjmp	.+58     	; 0x60a8 <OS_SchedNew+0x182a>

        case OS_TMR_STATE_STOPPED:                          /* Timer has not started or ...                           */
        case OS_TMR_STATE_COMPLETED:                        /* ... timer has completed the ONE-SHOT time              */
             OSTmr_Free(ptmr);                              /* Return timer to free list of timers                    */
    606e:	89 81       	ldd	r24, Y+1	; 0x01
    6070:	9a 81       	ldd	r25, Y+2	; 0x02
    6072:	0e 94 68 33 	call	0x66d0	; 0x66d0 <OSTmr_Free>
             OSTmr_Unlock();
    6076:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    607a:	8b 81       	ldd	r24, Y+3	; 0x03
    607c:	9c 81       	ldd	r25, Y+4	; 0x04
    607e:	fc 01       	movw	r30, r24
    6080:	10 82       	st	Z, r1
             return (OS_TRUE);
    6082:	81 e0       	ldi	r24, 0x01	; 1
    6084:	11 c0       	rjmp	.+34     	; 0x60a8 <OS_SchedNew+0x182a>

        case OS_TMR_STATE_UNUSED:                           /* Already deleted                                        */
             OSTmr_Unlock();
    6086:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    608a:	8b 81       	ldd	r24, Y+3	; 0x03
    608c:	9c 81       	ldd	r25, Y+4	; 0x04
    608e:	27 e8       	ldi	r18, 0x87	; 135
    6090:	fc 01       	movw	r30, r24
    6092:	20 83       	st	Z, r18
             return (OS_FALSE);
    6094:	80 e0       	ldi	r24, 0x00	; 0
    6096:	08 c0       	rjmp	.+16     	; 0x60a8 <OS_SchedNew+0x182a>

        default:
             OSTmr_Unlock();
    6098:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    609c:	8b 81       	ldd	r24, Y+3	; 0x03
    609e:	9c 81       	ldd	r25, Y+4	; 0x04
    60a0:	2d e8       	ldi	r18, 0x8D	; 141
    60a2:	fc 01       	movw	r30, r24
    60a4:	20 83       	st	Z, r18
             return (OS_FALSE);
    60a6:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    60a8:	0f 90       	pop	r0
    60aa:	0f 90       	pop	r0
    60ac:	0f 90       	pop	r0
    60ae:	0f 90       	pop	r0
    60b0:	cf 91       	pop	r28
    60b2:	df 91       	pop	r29
    60b4:	08 95       	ret

#if OS_TMR_EN > 0 && OS_TMR_CFG_NAME_SIZE > 0
INT8U  OSTmrNameGet (OS_TMR  *ptmr,
                     INT8U   *pdest,
                     INT8U   *perr)
{
    60b6:	df 93       	push	r29
    60b8:	cf 93       	push	r28
    60ba:	cd b7       	in	r28, 0x3d	; 61
    60bc:	de b7       	in	r29, 0x3e	; 62
    60be:	27 97       	sbiw	r28, 0x07	; 7
    60c0:	0f b6       	in	r0, 0x3f	; 63
    60c2:	f8 94       	cli
    60c4:	de bf       	out	0x3e, r29	; 62
    60c6:	0f be       	out	0x3f, r0	; 63
    60c8:	cd bf       	out	0x3d, r28	; 61
    60ca:	9b 83       	std	Y+3, r25	; 0x03
    60cc:	8a 83       	std	Y+2, r24	; 0x02
    60ce:	7d 83       	std	Y+5, r23	; 0x05
    60d0:	6c 83       	std	Y+4, r22	; 0x04
    60d2:	5f 83       	std	Y+7, r21	; 0x07
    60d4:	4e 83       	std	Y+6, r20	; 0x06
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    60d6:	8a 81       	ldd	r24, Y+2	; 0x02
    60d8:	9b 81       	ldd	r25, Y+3	; 0x03
    60da:	fc 01       	movw	r30, r24
    60dc:	80 81       	ld	r24, Z
    60de:	84 36       	cpi	r24, 0x64	; 100
    60e0:	39 f0       	breq	.+14     	; 0x60f0 <OS_SchedNew+0x1872>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    60e2:	8e 81       	ldd	r24, Y+6	; 0x06
    60e4:	9f 81       	ldd	r25, Y+7	; 0x07
    60e6:	29 e8       	ldi	r18, 0x89	; 137
    60e8:	fc 01       	movw	r30, r24
    60ea:	20 83       	st	Z, r18
        return (0);
    60ec:	80 e0       	ldi	r24, 0x00	; 0
    60ee:	3e c0       	rjmp	.+124    	; 0x616c <OS_SchedNew+0x18ee>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    60f0:	80 91 4c 08 	lds	r24, 0x084C
    60f4:	88 23       	and	r24, r24
    60f6:	39 f0       	breq	.+14     	; 0x6106 <OS_SchedNew+0x1888>
        *perr = OS_ERR_NAME_GET_ISR;
    60f8:	8e 81       	ldd	r24, Y+6	; 0x06
    60fa:	9f 81       	ldd	r25, Y+7	; 0x07
    60fc:	21 e1       	ldi	r18, 0x11	; 17
    60fe:	fc 01       	movw	r30, r24
    6100:	20 83       	st	Z, r18
        return (0);
    6102:	80 e0       	ldi	r24, 0x00	; 0
    6104:	33 c0       	rjmp	.+102    	; 0x616c <OS_SchedNew+0x18ee>
    }
    OSTmr_Lock();
    6106:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    610a:	8a 81       	ldd	r24, Y+2	; 0x02
    610c:	9b 81       	ldd	r25, Y+3	; 0x03
    610e:	fc 01       	movw	r30, r24
    6110:	86 a1       	ldd	r24, Z+38	; 0x26
    6112:	88 2f       	mov	r24, r24
    6114:	90 e0       	ldi	r25, 0x00	; 0
    6116:	00 97       	sbiw	r24, 0x00	; 0
    6118:	c1 f0       	breq	.+48     	; 0x614a <OS_SchedNew+0x18cc>
    611a:	99 23       	and	r25, r25
    611c:	fc f0       	brlt	.+62     	; 0x615c <OS_SchedNew+0x18de>
    611e:	84 30       	cpi	r24, 0x04	; 4
    6120:	91 05       	cpc	r25, r1
    6122:	e4 f4       	brge	.+56     	; 0x615c <OS_SchedNew+0x18de>
        case OS_TMR_STATE_RUNNING:
        case OS_TMR_STATE_STOPPED:
        case OS_TMR_STATE_COMPLETED:
             len   = OS_StrCopy(pdest, ptmr->OSTmrName);
    6124:	8a 81       	ldd	r24, Y+2	; 0x02
    6126:	9b 81       	ldd	r25, Y+3	; 0x03
    6128:	9c 01       	movw	r18, r24
    612a:	2b 5e       	subi	r18, 0xEB	; 235
    612c:	3f 4f       	sbci	r19, 0xFF	; 255
    612e:	8c 81       	ldd	r24, Y+4	; 0x04
    6130:	9d 81       	ldd	r25, Y+5	; 0x05
    6132:	b9 01       	movw	r22, r18
    6134:	0e 94 66 24 	call	0x48cc	; 0x48cc <OS_SchedNew+0x4e>
    6138:	89 83       	std	Y+1, r24	; 0x01
             OSTmr_Unlock();
    613a:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    613e:	8e 81       	ldd	r24, Y+6	; 0x06
    6140:	9f 81       	ldd	r25, Y+7	; 0x07
    6142:	fc 01       	movw	r30, r24
    6144:	10 82       	st	Z, r1
             return (len);
    6146:	89 81       	ldd	r24, Y+1	; 0x01
    6148:	11 c0       	rjmp	.+34     	; 0x616c <OS_SchedNew+0x18ee>

        case OS_TMR_STATE_UNUSED:                      /* Timer is not allocated                                      */
             OSTmr_Unlock();
    614a:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    614e:	8e 81       	ldd	r24, Y+6	; 0x06
    6150:	9f 81       	ldd	r25, Y+7	; 0x07
    6152:	27 e8       	ldi	r18, 0x87	; 135
    6154:	fc 01       	movw	r30, r24
    6156:	20 83       	st	Z, r18
             return (0);
    6158:	80 e0       	ldi	r24, 0x00	; 0
    615a:	08 c0       	rjmp	.+16     	; 0x616c <OS_SchedNew+0x18ee>

        default:
             OSTmr_Unlock();
    615c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    6160:	8e 81       	ldd	r24, Y+6	; 0x06
    6162:	9f 81       	ldd	r25, Y+7	; 0x07
    6164:	2d e8       	ldi	r18, 0x8D	; 141
    6166:	fc 01       	movw	r30, r24
    6168:	20 83       	st	Z, r18
             return (0);
    616a:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    616c:	27 96       	adiw	r28, 0x07	; 7
    616e:	0f b6       	in	r0, 0x3f	; 63
    6170:	f8 94       	cli
    6172:	de bf       	out	0x3e, r29	; 62
    6174:	0f be       	out	0x3f, r0	; 63
    6176:	cd bf       	out	0x3d, r28	; 61
    6178:	cf 91       	pop	r28
    617a:	df 91       	pop	r29
    617c:	08 95       	ret
*/

#if OS_TMR_EN > 0
INT32U  OSTmrRemainGet (OS_TMR  *ptmr,
                        INT8U   *perr)
{
    617e:	ef 92       	push	r14
    6180:	ff 92       	push	r15
    6182:	0f 93       	push	r16
    6184:	1f 93       	push	r17
    6186:	df 93       	push	r29
    6188:	cf 93       	push	r28
    618a:	cd b7       	in	r28, 0x3d	; 61
    618c:	de b7       	in	r29, 0x3e	; 62
    618e:	28 97       	sbiw	r28, 0x08	; 8
    6190:	0f b6       	in	r0, 0x3f	; 63
    6192:	f8 94       	cli
    6194:	de bf       	out	0x3e, r29	; 62
    6196:	0f be       	out	0x3f, r0	; 63
    6198:	cd bf       	out	0x3d, r28	; 61
    619a:	9e 83       	std	Y+6, r25	; 0x06
    619c:	8d 83       	std	Y+5, r24	; 0x05
    619e:	78 87       	std	Y+8, r23	; 0x08
    61a0:	6f 83       	std	Y+7, r22	; 0x07
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    61a2:	8d 81       	ldd	r24, Y+5	; 0x05
    61a4:	9e 81       	ldd	r25, Y+6	; 0x06
    61a6:	fc 01       	movw	r30, r24
    61a8:	80 81       	ld	r24, Z
    61aa:	84 36       	cpi	r24, 0x64	; 100
    61ac:	51 f0       	breq	.+20     	; 0x61c2 <OS_SchedNew+0x1944>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    61ae:	8f 81       	ldd	r24, Y+7	; 0x07
    61b0:	98 85       	ldd	r25, Y+8	; 0x08
    61b2:	29 e8       	ldi	r18, 0x89	; 137
    61b4:	fc 01       	movw	r30, r24
    61b6:	20 83       	st	Z, r18
        return (0);
    61b8:	80 e0       	ldi	r24, 0x00	; 0
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	a0 e0       	ldi	r26, 0x00	; 0
    61be:	b0 e0       	ldi	r27, 0x00	; 0
    61c0:	b8 c0       	rjmp	.+368    	; 0x6332 <OS_SchedNew+0x1ab4>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    61c2:	80 91 4c 08 	lds	r24, 0x084C
    61c6:	88 23       	and	r24, r24
    61c8:	51 f0       	breq	.+20     	; 0x61de <OS_SchedNew+0x1960>
        *perr = OS_ERR_TMR_ISR;
    61ca:	8f 81       	ldd	r24, Y+7	; 0x07
    61cc:	98 85       	ldd	r25, Y+8	; 0x08
    61ce:	2b e8       	ldi	r18, 0x8B	; 139
    61d0:	fc 01       	movw	r30, r24
    61d2:	20 83       	st	Z, r18
        return (0);
    61d4:	80 e0       	ldi	r24, 0x00	; 0
    61d6:	90 e0       	ldi	r25, 0x00	; 0
    61d8:	a0 e0       	ldi	r26, 0x00	; 0
    61da:	b0 e0       	ldi	r27, 0x00	; 0
    61dc:	aa c0       	rjmp	.+340    	; 0x6332 <OS_SchedNew+0x1ab4>
    }
    OSTmr_Lock();
    61de:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    61e2:	8d 81       	ldd	r24, Y+5	; 0x05
    61e4:	9e 81       	ldd	r25, Y+6	; 0x06
    61e6:	fc 01       	movw	r30, r24
    61e8:	86 a1       	ldd	r24, Z+38	; 0x26
    61ea:	88 2f       	mov	r24, r24
    61ec:	90 e0       	ldi	r25, 0x00	; 0
    61ee:	81 30       	cpi	r24, 0x01	; 1
    61f0:	91 05       	cpc	r25, r1
    61f2:	a9 f1       	breq	.+106    	; 0x625e <OS_SchedNew+0x19e0>
    61f4:	82 30       	cpi	r24, 0x02	; 2
    61f6:	91 05       	cpc	r25, r1
    61f8:	24 f4       	brge	.+8      	; 0x6202 <OS_SchedNew+0x1984>
    61fa:	00 97       	sbiw	r24, 0x00	; 0
    61fc:	09 f4       	brne	.+2      	; 0x6200 <OS_SchedNew+0x1982>
    61fe:	82 c0       	rjmp	.+260    	; 0x6304 <OS_SchedNew+0x1a86>
    6200:	8d c0       	rjmp	.+282    	; 0x631c <OS_SchedNew+0x1a9e>
    6202:	82 30       	cpi	r24, 0x02	; 2
    6204:	91 05       	cpc	r25, r1
    6206:	09 f4       	brne	.+2      	; 0x620a <OS_SchedNew+0x198c>
    6208:	72 c0       	rjmp	.+228    	; 0x62ee <OS_SchedNew+0x1a70>
    620a:	83 30       	cpi	r24, 0x03	; 3
    620c:	91 05       	cpc	r25, r1
    620e:	09 f0       	breq	.+2      	; 0x6212 <OS_SchedNew+0x1994>
    6210:	85 c0       	rjmp	.+266    	; 0x631c <OS_SchedNew+0x1a9e>
        case OS_TMR_STATE_RUNNING:
             remain = ptmr->OSTmrMatch - OSTmrTime;    /* Determine how much time is left to timeout                  */
    6212:	8d 81       	ldd	r24, Y+5	; 0x05
    6214:	9e 81       	ldd	r25, Y+6	; 0x06
    6216:	fc 01       	movw	r30, r24
    6218:	21 85       	ldd	r18, Z+9	; 0x09
    621a:	32 85       	ldd	r19, Z+10	; 0x0a
    621c:	43 85       	ldd	r20, Z+11	; 0x0b
    621e:	54 85       	ldd	r21, Z+12	; 0x0c
    6220:	80 91 4f 08 	lds	r24, 0x084F
    6224:	90 91 50 08 	lds	r25, 0x0850
    6228:	a0 91 51 08 	lds	r26, 0x0851
    622c:	b0 91 52 08 	lds	r27, 0x0852
    6230:	79 01       	movw	r14, r18
    6232:	8a 01       	movw	r16, r20
    6234:	e8 1a       	sub	r14, r24
    6236:	f9 0a       	sbc	r15, r25
    6238:	0a 0b       	sbc	r16, r26
    623a:	1b 0b       	sbc	r17, r27
    623c:	d8 01       	movw	r26, r16
    623e:	c7 01       	movw	r24, r14
    6240:	89 83       	std	Y+1, r24	; 0x01
    6242:	9a 83       	std	Y+2, r25	; 0x02
    6244:	ab 83       	std	Y+3, r26	; 0x03
    6246:	bc 83       	std	Y+4, r27	; 0x04
             OSTmr_Unlock();
    6248:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr  = OS_ERR_NONE;
    624c:	8f 81       	ldd	r24, Y+7	; 0x07
    624e:	98 85       	ldd	r25, Y+8	; 0x08
    6250:	fc 01       	movw	r30, r24
    6252:	10 82       	st	Z, r1
             return (remain);
    6254:	89 81       	ldd	r24, Y+1	; 0x01
    6256:	9a 81       	ldd	r25, Y+2	; 0x02
    6258:	ab 81       	ldd	r26, Y+3	; 0x03
    625a:	bc 81       	ldd	r27, Y+4	; 0x04
    625c:	6a c0       	rjmp	.+212    	; 0x6332 <OS_SchedNew+0x1ab4>

        case OS_TMR_STATE_STOPPED:                     /* It's assumed that the timer has not started yet             */
             switch (ptmr->OSTmrOpt) {
    625e:	8d 81       	ldd	r24, Y+5	; 0x05
    6260:	9e 81       	ldd	r25, Y+6	; 0x06
    6262:	fc 01       	movw	r30, r24
    6264:	85 a1       	ldd	r24, Z+37	; 0x25
    6266:	88 2f       	mov	r24, r24
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	82 30       	cpi	r24, 0x02	; 2
    626c:	91 05       	cpc	r25, r1
    626e:	49 f5       	brne	.+82     	; 0x62c2 <OS_SchedNew+0x1a44>
                 case OS_TMR_OPT_PERIODIC:
                      if (ptmr->OSTmrDly == 0) {
    6270:	8d 81       	ldd	r24, Y+5	; 0x05
    6272:	9e 81       	ldd	r25, Y+6	; 0x06
    6274:	fc 01       	movw	r30, r24
    6276:	85 85       	ldd	r24, Z+13	; 0x0d
    6278:	96 85       	ldd	r25, Z+14	; 0x0e
    627a:	a7 85       	ldd	r26, Z+15	; 0x0f
    627c:	b0 89       	ldd	r27, Z+16	; 0x10
    627e:	00 97       	sbiw	r24, 0x00	; 0
    6280:	a1 05       	cpc	r26, r1
    6282:	b1 05       	cpc	r27, r1
    6284:	61 f4       	brne	.+24     	; 0x629e <OS_SchedNew+0x1a20>
                          remain = ptmr->OSTmrPeriod;
    6286:	8d 81       	ldd	r24, Y+5	; 0x05
    6288:	9e 81       	ldd	r25, Y+6	; 0x06
    628a:	fc 01       	movw	r30, r24
    628c:	81 89       	ldd	r24, Z+17	; 0x11
    628e:	92 89       	ldd	r25, Z+18	; 0x12
    6290:	a3 89       	ldd	r26, Z+19	; 0x13
    6292:	b4 89       	ldd	r27, Z+20	; 0x14
    6294:	89 83       	std	Y+1, r24	; 0x01
    6296:	9a 83       	std	Y+2, r25	; 0x02
    6298:	ab 83       	std	Y+3, r26	; 0x03
    629a:	bc 83       	std	Y+4, r27	; 0x04
    629c:	0b c0       	rjmp	.+22     	; 0x62b4 <OS_SchedNew+0x1a36>
                      } else {
                          remain = ptmr->OSTmrDly;
    629e:	8d 81       	ldd	r24, Y+5	; 0x05
    62a0:	9e 81       	ldd	r25, Y+6	; 0x06
    62a2:	fc 01       	movw	r30, r24
    62a4:	85 85       	ldd	r24, Z+13	; 0x0d
    62a6:	96 85       	ldd	r25, Z+14	; 0x0e
    62a8:	a7 85       	ldd	r26, Z+15	; 0x0f
    62aa:	b0 89       	ldd	r27, Z+16	; 0x10
    62ac:	89 83       	std	Y+1, r24	; 0x01
    62ae:	9a 83       	std	Y+2, r25	; 0x02
    62b0:	ab 83       	std	Y+3, r26	; 0x03
    62b2:	bc 83       	std	Y+4, r27	; 0x04
                      }
                      OSTmr_Unlock();
    62b4:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    62b8:	8f 81       	ldd	r24, Y+7	; 0x07
    62ba:	98 85       	ldd	r25, Y+8	; 0x08
    62bc:	fc 01       	movw	r30, r24
    62be:	10 82       	st	Z, r1
                      break;
    62c0:	11 c0       	rjmp	.+34     	; 0x62e4 <OS_SchedNew+0x1a66>

                 case OS_TMR_OPT_ONE_SHOT:
                 default:
                      remain = ptmr->OSTmrDly;
    62c2:	8d 81       	ldd	r24, Y+5	; 0x05
    62c4:	9e 81       	ldd	r25, Y+6	; 0x06
    62c6:	fc 01       	movw	r30, r24
    62c8:	85 85       	ldd	r24, Z+13	; 0x0d
    62ca:	96 85       	ldd	r25, Z+14	; 0x0e
    62cc:	a7 85       	ldd	r26, Z+15	; 0x0f
    62ce:	b0 89       	ldd	r27, Z+16	; 0x10
    62d0:	89 83       	std	Y+1, r24	; 0x01
    62d2:	9a 83       	std	Y+2, r25	; 0x02
    62d4:	ab 83       	std	Y+3, r26	; 0x03
    62d6:	bc 83       	std	Y+4, r27	; 0x04
                      OSTmr_Unlock();
    62d8:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
                      *perr  = OS_ERR_NONE;
    62dc:	8f 81       	ldd	r24, Y+7	; 0x07
    62de:	98 85       	ldd	r25, Y+8	; 0x08
    62e0:	fc 01       	movw	r30, r24
    62e2:	10 82       	st	Z, r1
                      break;
             }
             return (remain);
    62e4:	89 81       	ldd	r24, Y+1	; 0x01
    62e6:	9a 81       	ldd	r25, Y+2	; 0x02
    62e8:	ab 81       	ldd	r26, Y+3	; 0x03
    62ea:	bc 81       	ldd	r27, Y+4	; 0x04
    62ec:	22 c0       	rjmp	.+68     	; 0x6332 <OS_SchedNew+0x1ab4>

        case OS_TMR_STATE_COMPLETED:                   /* Only ONE-SHOT that timed out can be in this state           */
             OSTmr_Unlock();
    62ee:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    62f2:	8f 81       	ldd	r24, Y+7	; 0x07
    62f4:	98 85       	ldd	r25, Y+8	; 0x08
    62f6:	fc 01       	movw	r30, r24
    62f8:	10 82       	st	Z, r1
             return (0);
    62fa:	80 e0       	ldi	r24, 0x00	; 0
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	a0 e0       	ldi	r26, 0x00	; 0
    6300:	b0 e0       	ldi	r27, 0x00	; 0
    6302:	17 c0       	rjmp	.+46     	; 0x6332 <OS_SchedNew+0x1ab4>

        case OS_TMR_STATE_UNUSED:
             OSTmr_Unlock();
    6304:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    6308:	8f 81       	ldd	r24, Y+7	; 0x07
    630a:	98 85       	ldd	r25, Y+8	; 0x08
    630c:	27 e8       	ldi	r18, 0x87	; 135
    630e:	fc 01       	movw	r30, r24
    6310:	20 83       	st	Z, r18
             return (0);
    6312:	80 e0       	ldi	r24, 0x00	; 0
    6314:	90 e0       	ldi	r25, 0x00	; 0
    6316:	a0 e0       	ldi	r26, 0x00	; 0
    6318:	b0 e0       	ldi	r27, 0x00	; 0
    631a:	0b c0       	rjmp	.+22     	; 0x6332 <OS_SchedNew+0x1ab4>

        default:
             OSTmr_Unlock();
    631c:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    6320:	8f 81       	ldd	r24, Y+7	; 0x07
    6322:	98 85       	ldd	r25, Y+8	; 0x08
    6324:	2d e8       	ldi	r18, 0x8D	; 141
    6326:	fc 01       	movw	r30, r24
    6328:	20 83       	st	Z, r18
             return (0);
    632a:	80 e0       	ldi	r24, 0x00	; 0
    632c:	90 e0       	ldi	r25, 0x00	; 0
    632e:	a0 e0       	ldi	r26, 0x00	; 0
    6330:	b0 e0       	ldi	r27, 0x00	; 0
    }
}
    6332:	bc 01       	movw	r22, r24
    6334:	cd 01       	movw	r24, r26
    6336:	28 96       	adiw	r28, 0x08	; 8
    6338:	0f b6       	in	r0, 0x3f	; 63
    633a:	f8 94       	cli
    633c:	de bf       	out	0x3e, r29	; 62
    633e:	0f be       	out	0x3f, r0	; 63
    6340:	cd bf       	out	0x3d, r28	; 61
    6342:	cf 91       	pop	r28
    6344:	df 91       	pop	r29
    6346:	1f 91       	pop	r17
    6348:	0f 91       	pop	r16
    634a:	ff 90       	pop	r15
    634c:	ef 90       	pop	r14
    634e:	08 95       	ret
*/

#if OS_TMR_EN > 0
INT8U  OSTmrStateGet (OS_TMR  *ptmr,
                      INT8U   *perr)
{
    6350:	df 93       	push	r29
    6352:	cf 93       	push	r28
    6354:	00 d0       	rcall	.+0      	; 0x6356 <OS_SchedNew+0x1ad8>
    6356:	0f 92       	push	r0
    6358:	0f 92       	push	r0
    635a:	cd b7       	in	r28, 0x3d	; 61
    635c:	de b7       	in	r29, 0x3e	; 62
    635e:	9b 83       	std	Y+3, r25	; 0x03
    6360:	8a 83       	std	Y+2, r24	; 0x02
    6362:	7d 83       	std	Y+5, r23	; 0x05
    6364:	6c 83       	std	Y+4, r22	; 0x04
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (0);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {              /* Validate timer structure                                    */
    6366:	8a 81       	ldd	r24, Y+2	; 0x02
    6368:	9b 81       	ldd	r25, Y+3	; 0x03
    636a:	fc 01       	movw	r30, r24
    636c:	80 81       	ld	r24, Z
    636e:	84 36       	cpi	r24, 0x64	; 100
    6370:	39 f0       	breq	.+14     	; 0x6380 <OS_SchedNew+0x1b02>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    6372:	8c 81       	ldd	r24, Y+4	; 0x04
    6374:	9d 81       	ldd	r25, Y+5	; 0x05
    6376:	29 e8       	ldi	r18, 0x89	; 137
    6378:	fc 01       	movw	r30, r24
    637a:	20 83       	st	Z, r18
        return (0);
    637c:	80 e0       	ldi	r24, 0x00	; 0
    637e:	26 c0       	rjmp	.+76     	; 0x63cc <OS_SchedNew+0x1b4e>
    }
    if (OSIntNesting > 0) {                            /* See if trying to call from an ISR                           */
    6380:	80 91 4c 08 	lds	r24, 0x084C
    6384:	88 23       	and	r24, r24
    6386:	39 f0       	breq	.+14     	; 0x6396 <OS_SchedNew+0x1b18>
        *perr = OS_ERR_TMR_ISR;
    6388:	8c 81       	ldd	r24, Y+4	; 0x04
    638a:	9d 81       	ldd	r25, Y+5	; 0x05
    638c:	2b e8       	ldi	r18, 0x8B	; 139
    638e:	fc 01       	movw	r30, r24
    6390:	20 83       	st	Z, r18
        return (0);
    6392:	80 e0       	ldi	r24, 0x00	; 0
    6394:	1b c0       	rjmp	.+54     	; 0x63cc <OS_SchedNew+0x1b4e>
    }
    OSTmr_Lock();
    6396:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
    state = ptmr->OSTmrState;
    639a:	8a 81       	ldd	r24, Y+2	; 0x02
    639c:	9b 81       	ldd	r25, Y+3	; 0x03
    639e:	fc 01       	movw	r30, r24
    63a0:	86 a1       	ldd	r24, Z+38	; 0x26
    63a2:	89 83       	std	Y+1, r24	; 0x01
    switch (state) {
    63a4:	89 81       	ldd	r24, Y+1	; 0x01
    63a6:	88 2f       	mov	r24, r24
    63a8:	90 e0       	ldi	r25, 0x00	; 0
    63aa:	00 96       	adiw	r24, 0x00	; 0
    63ac:	84 30       	cpi	r24, 0x04	; 4
    63ae:	91 05       	cpc	r25, r1
    63b0:	28 f4       	brcc	.+10     	; 0x63bc <OS_SchedNew+0x1b3e>
        case OS_TMR_STATE_UNUSED:   
        case OS_TMR_STATE_STOPPED:  
        case OS_TMR_STATE_COMPLETED:
        case OS_TMR_STATE_RUNNING:  
             *perr = OS_ERR_NONE;
    63b2:	8c 81       	ldd	r24, Y+4	; 0x04
    63b4:	9d 81       	ldd	r25, Y+5	; 0x05
    63b6:	fc 01       	movw	r30, r24
    63b8:	10 82       	st	Z, r1
             break;
    63ba:	05 c0       	rjmp	.+10     	; 0x63c6 <OS_SchedNew+0x1b48>
             
        default:
             *perr = OS_ERR_TMR_INVALID_STATE;
    63bc:	8c 81       	ldd	r24, Y+4	; 0x04
    63be:	9d 81       	ldd	r25, Y+5	; 0x05
    63c0:	2d e8       	ldi	r18, 0x8D	; 141
    63c2:	fc 01       	movw	r30, r24
    63c4:	20 83       	st	Z, r18
             break;
    }
    OSTmr_Unlock();
    63c6:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
    return (state);
    63ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    63cc:	0f 90       	pop	r0
    63ce:	0f 90       	pop	r0
    63d0:	0f 90       	pop	r0
    63d2:	0f 90       	pop	r0
    63d4:	0f 90       	pop	r0
    63d6:	cf 91       	pop	r28
    63d8:	df 91       	pop	r29
    63da:	08 95       	ret
*/

#if OS_TMR_EN > 0
BOOLEAN  OSTmrStart (OS_TMR   *ptmr,
                     INT8U    *perr)
{
    63dc:	df 93       	push	r29
    63de:	cf 93       	push	r28
    63e0:	00 d0       	rcall	.+0      	; 0x63e2 <OS_SchedNew+0x1b64>
    63e2:	0f 92       	push	r0
    63e4:	cd b7       	in	r28, 0x3d	; 61
    63e6:	de b7       	in	r29, 0x3e	; 62
    63e8:	9a 83       	std	Y+2, r25	; 0x02
    63ea:	89 83       	std	Y+1, r24	; 0x01
    63ec:	7c 83       	std	Y+4, r23	; 0x04
    63ee:	6b 83       	std	Y+3, r22	; 0x03
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                   /* Validate timer structure                               */
    63f0:	89 81       	ldd	r24, Y+1	; 0x01
    63f2:	9a 81       	ldd	r25, Y+2	; 0x02
    63f4:	fc 01       	movw	r30, r24
    63f6:	80 81       	ld	r24, Z
    63f8:	84 36       	cpi	r24, 0x64	; 100
    63fa:	39 f0       	breq	.+14     	; 0x640a <OS_SchedNew+0x1b8c>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    63fc:	8b 81       	ldd	r24, Y+3	; 0x03
    63fe:	9c 81       	ldd	r25, Y+4	; 0x04
    6400:	29 e8       	ldi	r18, 0x89	; 137
    6402:	fc 01       	movw	r30, r24
    6404:	20 83       	st	Z, r18
        return (OS_FALSE);
    6406:	80 e0       	ldi	r24, 0x00	; 0
    6408:	4e c0       	rjmp	.+156    	; 0x64a6 <OS_SchedNew+0x1c28>
    }
    if (OSIntNesting > 0) {                                 /* See if trying to call from an ISR                      */
    640a:	80 91 4c 08 	lds	r24, 0x084C
    640e:	88 23       	and	r24, r24
    6410:	39 f0       	breq	.+14     	; 0x6420 <OS_SchedNew+0x1ba2>
        *perr  = OS_ERR_TMR_ISR;
    6412:	8b 81       	ldd	r24, Y+3	; 0x03
    6414:	9c 81       	ldd	r25, Y+4	; 0x04
    6416:	2b e8       	ldi	r18, 0x8B	; 139
    6418:	fc 01       	movw	r30, r24
    641a:	20 83       	st	Z, r18
        return (OS_FALSE);
    641c:	80 e0       	ldi	r24, 0x00	; 0
    641e:	43 c0       	rjmp	.+134    	; 0x64a6 <OS_SchedNew+0x1c28>
    }
    OSTmr_Lock();
    6420:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    6424:	89 81       	ldd	r24, Y+1	; 0x01
    6426:	9a 81       	ldd	r25, Y+2	; 0x02
    6428:	fc 01       	movw	r30, r24
    642a:	86 a1       	ldd	r24, Z+38	; 0x26
    642c:	88 2f       	mov	r24, r24
    642e:	90 e0       	ldi	r25, 0x00	; 0
    6430:	83 30       	cpi	r24, 0x03	; 3
    6432:	91 05       	cpc	r25, r1
    6434:	34 f4       	brge	.+12     	; 0x6442 <OS_SchedNew+0x1bc4>
    6436:	81 30       	cpi	r24, 0x01	; 1
    6438:	91 05       	cpc	r25, r1
    643a:	bc f4       	brge	.+46     	; 0x646a <OS_SchedNew+0x1bec>
    643c:	00 97       	sbiw	r24, 0x00	; 0
    643e:	11 f1       	breq	.+68     	; 0x6484 <OS_SchedNew+0x1c06>
    6440:	2a c0       	rjmp	.+84     	; 0x6496 <OS_SchedNew+0x1c18>
    6442:	83 30       	cpi	r24, 0x03	; 3
    6444:	91 05       	cpc	r25, r1
    6446:	39 f5       	brne	.+78     	; 0x6496 <OS_SchedNew+0x1c18>
        case OS_TMR_STATE_RUNNING:                          /* Restart the timer                                      */
             OSTmr_Unlink(ptmr);                            /* ... Stop the timer                                     */
    6448:	89 81       	ldd	r24, Y+1	; 0x01
    644a:	9a 81       	ldd	r25, Y+2	; 0x02
    644c:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <OSTmr_Unlink>
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    6450:	89 81       	ldd	r24, Y+1	; 0x01
    6452:	9a 81       	ldd	r25, Y+2	; 0x02
    6454:	60 e0       	ldi	r22, 0x00	; 0
    6456:	0e 94 c5 34 	call	0x698a	; 0x698a <OSTmr_Link>
             OSTmr_Unlock();
    645a:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    645e:	8b 81       	ldd	r24, Y+3	; 0x03
    6460:	9c 81       	ldd	r25, Y+4	; 0x04
    6462:	fc 01       	movw	r30, r24
    6464:	10 82       	st	Z, r1
             return (OS_TRUE);
    6466:	81 e0       	ldi	r24, 0x01	; 1
    6468:	1e c0       	rjmp	.+60     	; 0x64a6 <OS_SchedNew+0x1c28>

        case OS_TMR_STATE_STOPPED:                          /* Start the timer                                        */
        case OS_TMR_STATE_COMPLETED:
             OSTmr_Link(ptmr, OS_TMR_LINK_DLY);             /* ... Link timer to timer wheel                          */
    646a:	89 81       	ldd	r24, Y+1	; 0x01
    646c:	9a 81       	ldd	r25, Y+2	; 0x02
    646e:	60 e0       	ldi	r22, 0x00	; 0
    6470:	0e 94 c5 34 	call	0x698a	; 0x698a <OSTmr_Link>
             OSTmr_Unlock();
    6474:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_NONE;
    6478:	8b 81       	ldd	r24, Y+3	; 0x03
    647a:	9c 81       	ldd	r25, Y+4	; 0x04
    647c:	fc 01       	movw	r30, r24
    647e:	10 82       	st	Z, r1
             return (OS_TRUE);
    6480:	81 e0       	ldi	r24, 0x01	; 1
    6482:	11 c0       	rjmp	.+34     	; 0x64a6 <OS_SchedNew+0x1c28>

        case OS_TMR_STATE_UNUSED:                           /* Timer not created                                      */
             OSTmr_Unlock();
    6484:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    6488:	8b 81       	ldd	r24, Y+3	; 0x03
    648a:	9c 81       	ldd	r25, Y+4	; 0x04
    648c:	27 e8       	ldi	r18, 0x87	; 135
    648e:	fc 01       	movw	r30, r24
    6490:	20 83       	st	Z, r18
             return (OS_FALSE);
    6492:	80 e0       	ldi	r24, 0x00	; 0
    6494:	08 c0       	rjmp	.+16     	; 0x64a6 <OS_SchedNew+0x1c28>

        default:
             OSTmr_Unlock();
    6496:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    649a:	8b 81       	ldd	r24, Y+3	; 0x03
    649c:	9c 81       	ldd	r25, Y+4	; 0x04
    649e:	2d e8       	ldi	r18, 0x8D	; 141
    64a0:	fc 01       	movw	r30, r24
    64a2:	20 83       	st	Z, r18
             return (OS_FALSE);
    64a4:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    64a6:	0f 90       	pop	r0
    64a8:	0f 90       	pop	r0
    64aa:	0f 90       	pop	r0
    64ac:	0f 90       	pop	r0
    64ae:	cf 91       	pop	r28
    64b0:	df 91       	pop	r29
    64b2:	08 95       	ret
#if OS_TMR_EN > 0
BOOLEAN  OSTmrStop (OS_TMR  *ptmr,
                    INT8U    opt,
                    void    *callback_arg,
                    INT8U   *perr)
{
    64b4:	df 93       	push	r29
    64b6:	cf 93       	push	r28
    64b8:	cd b7       	in	r28, 0x3d	; 61
    64ba:	de b7       	in	r29, 0x3e	; 62
    64bc:	29 97       	sbiw	r28, 0x09	; 9
    64be:	0f b6       	in	r0, 0x3f	; 63
    64c0:	f8 94       	cli
    64c2:	de bf       	out	0x3e, r29	; 62
    64c4:	0f be       	out	0x3f, r0	; 63
    64c6:	cd bf       	out	0x3d, r28	; 61
    64c8:	9c 83       	std	Y+4, r25	; 0x04
    64ca:	8b 83       	std	Y+3, r24	; 0x03
    64cc:	6d 83       	std	Y+5, r22	; 0x05
    64ce:	5f 83       	std	Y+7, r21	; 0x07
    64d0:	4e 83       	std	Y+6, r20	; 0x06
    64d2:	39 87       	std	Y+9, r19	; 0x09
    64d4:	28 87       	std	Y+8, r18	; 0x08
    if (ptmr == (OS_TMR *)0) {
        *perr = OS_ERR_TMR_INVALID;
        return (OS_FALSE);
    }
#endif
    if (ptmr->OSTmrType != OS_TMR_TYPE) {                         /* Validate timer structure                         */
    64d6:	8b 81       	ldd	r24, Y+3	; 0x03
    64d8:	9c 81       	ldd	r25, Y+4	; 0x04
    64da:	fc 01       	movw	r30, r24
    64dc:	80 81       	ld	r24, Z
    64de:	84 36       	cpi	r24, 0x64	; 100
    64e0:	39 f0       	breq	.+14     	; 0x64f0 <OS_SchedNew+0x1c72>
        *perr = OS_ERR_TMR_INVALID_TYPE;
    64e2:	88 85       	ldd	r24, Y+8	; 0x08
    64e4:	99 85       	ldd	r25, Y+9	; 0x09
    64e6:	29 e8       	ldi	r18, 0x89	; 137
    64e8:	fc 01       	movw	r30, r24
    64ea:	20 83       	st	Z, r18
        return (OS_FALSE);
    64ec:	80 e0       	ldi	r24, 0x00	; 0
    64ee:	95 c0       	rjmp	.+298    	; 0x661a <OS_SchedNew+0x1d9c>
    }
    if (OSIntNesting > 0) {                                       /* See if trying to call from an ISR                */
    64f0:	80 91 4c 08 	lds	r24, 0x084C
    64f4:	88 23       	and	r24, r24
    64f6:	39 f0       	breq	.+14     	; 0x6506 <OS_SchedNew+0x1c88>
        *perr  = OS_ERR_TMR_ISR;
    64f8:	88 85       	ldd	r24, Y+8	; 0x08
    64fa:	99 85       	ldd	r25, Y+9	; 0x09
    64fc:	2b e8       	ldi	r18, 0x8B	; 139
    64fe:	fc 01       	movw	r30, r24
    6500:	20 83       	st	Z, r18
        return (OS_FALSE);
    6502:	80 e0       	ldi	r24, 0x00	; 0
    6504:	8a c0       	rjmp	.+276    	; 0x661a <OS_SchedNew+0x1d9c>
    }
    OSTmr_Lock();
    6506:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
    switch (ptmr->OSTmrState) {
    650a:	8b 81       	ldd	r24, Y+3	; 0x03
    650c:	9c 81       	ldd	r25, Y+4	; 0x04
    650e:	fc 01       	movw	r30, r24
    6510:	86 a1       	ldd	r24, Z+38	; 0x26
    6512:	88 2f       	mov	r24, r24
    6514:	90 e0       	ldi	r25, 0x00	; 0
    6516:	83 30       	cpi	r24, 0x03	; 3
    6518:	91 05       	cpc	r25, r1
    651a:	44 f4       	brge	.+16     	; 0x652c <OS_SchedNew+0x1cae>
    651c:	81 30       	cpi	r24, 0x01	; 1
    651e:	91 05       	cpc	r25, r1
    6520:	0c f0       	brlt	.+2      	; 0x6524 <OS_SchedNew+0x1ca6>
    6522:	61 c0       	rjmp	.+194    	; 0x65e6 <OS_SchedNew+0x1d68>
    6524:	00 97       	sbiw	r24, 0x00	; 0
    6526:	09 f4       	brne	.+2      	; 0x652a <OS_SchedNew+0x1cac>
    6528:	67 c0       	rjmp	.+206    	; 0x65f8 <OS_SchedNew+0x1d7a>
    652a:	6f c0       	rjmp	.+222    	; 0x660a <OS_SchedNew+0x1d8c>
    652c:	83 30       	cpi	r24, 0x03	; 3
    652e:	91 05       	cpc	r25, r1
    6530:	09 f0       	breq	.+2      	; 0x6534 <OS_SchedNew+0x1cb6>
    6532:	6b c0       	rjmp	.+214    	; 0x660a <OS_SchedNew+0x1d8c>
        case OS_TMR_STATE_RUNNING:
             OSTmr_Unlink(ptmr);                                  /* Remove from current wheel spoke                  */
    6534:	8b 81       	ldd	r24, Y+3	; 0x03
    6536:	9c 81       	ldd	r25, Y+4	; 0x04
    6538:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <OSTmr_Unlink>
             *perr = OS_ERR_NONE;
    653c:	88 85       	ldd	r24, Y+8	; 0x08
    653e:	99 85       	ldd	r25, Y+9	; 0x09
    6540:	fc 01       	movw	r30, r24
    6542:	10 82       	st	Z, r1
             switch (opt) {
    6544:	8d 81       	ldd	r24, Y+5	; 0x05
    6546:	88 2f       	mov	r24, r24
    6548:	90 e0       	ldi	r25, 0x00	; 0
    654a:	83 30       	cpi	r24, 0x03	; 3
    654c:	91 05       	cpc	r25, r1
    654e:	39 f0       	breq	.+14     	; 0x655e <OS_SchedNew+0x1ce0>
    6550:	84 30       	cpi	r24, 0x04	; 4
    6552:	91 05       	cpc	r25, r1
    6554:	11 f1       	breq	.+68     	; 0x659a <OS_SchedNew+0x1d1c>
    6556:	00 97       	sbiw	r24, 0x00	; 0
    6558:	09 f4       	brne	.+2      	; 0x655c <OS_SchedNew+0x1cde>
    655a:	40 c0       	rjmp	.+128    	; 0x65dc <OS_SchedNew+0x1d5e>
    655c:	39 c0       	rjmp	.+114    	; 0x65d0 <OS_SchedNew+0x1d52>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    655e:	8b 81       	ldd	r24, Y+3	; 0x03
    6560:	9c 81       	ldd	r25, Y+4	; 0x04
    6562:	fc 01       	movw	r30, r24
    6564:	81 81       	ldd	r24, Z+1	; 0x01
    6566:	92 81       	ldd	r25, Z+2	; 0x02
    6568:	9a 83       	std	Y+2, r25	; 0x02
    656a:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    656c:	89 81       	ldd	r24, Y+1	; 0x01
    656e:	9a 81       	ldd	r25, Y+2	; 0x02
    6570:	00 97       	sbiw	r24, 0x00	; 0
    6572:	69 f0       	breq	.+26     	; 0x658e <OS_SchedNew+0x1d10>
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
    6574:	8b 81       	ldd	r24, Y+3	; 0x03
    6576:	9c 81       	ldd	r25, Y+4	; 0x04
    6578:	fc 01       	movw	r30, r24
    657a:	43 81       	ldd	r20, Z+3	; 0x03
    657c:	54 81       	ldd	r21, Z+4	; 0x04
    657e:	8b 81       	ldd	r24, Y+3	; 0x03
    6580:	9c 81       	ldd	r25, Y+4	; 0x04
    6582:	29 81       	ldd	r18, Y+1	; 0x01
    6584:	3a 81       	ldd	r19, Y+2	; 0x02
    6586:	ba 01       	movw	r22, r20
    6588:	f9 01       	movw	r30, r18
    658a:	19 95       	eicall
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    658c:	28 c0       	rjmp	.+80     	; 0x65de <OS_SchedNew+0x1d60>
                 case OS_TMR_OPT_CALLBACK:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);  /* Use callback arg when timer was created */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    658e:	88 85       	ldd	r24, Y+8	; 0x08
    6590:	99 85       	ldd	r25, Y+9	; 0x09
    6592:	2f e8       	ldi	r18, 0x8F	; 143
    6594:	fc 01       	movw	r30, r24
    6596:	20 83       	st	Z, r18
                      }
                      break;
    6598:	22 c0       	rjmp	.+68     	; 0x65de <OS_SchedNew+0x1d60>

                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
    659a:	8b 81       	ldd	r24, Y+3	; 0x03
    659c:	9c 81       	ldd	r25, Y+4	; 0x04
    659e:	fc 01       	movw	r30, r24
    65a0:	81 81       	ldd	r24, Z+1	; 0x01
    65a2:	92 81       	ldd	r25, Z+2	; 0x02
    65a4:	9a 83       	std	Y+2, r25	; 0x02
    65a6:	89 83       	std	Y+1, r24	; 0x01
                      if (pfnct != (OS_TMR_CALLBACK)0) {
    65a8:	89 81       	ldd	r24, Y+1	; 0x01
    65aa:	9a 81       	ldd	r25, Y+2	; 0x02
    65ac:	00 97       	sbiw	r24, 0x00	; 0
    65ae:	51 f0       	breq	.+20     	; 0x65c4 <OS_SchedNew+0x1d46>
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
    65b0:	8b 81       	ldd	r24, Y+3	; 0x03
    65b2:	9c 81       	ldd	r25, Y+4	; 0x04
    65b4:	4e 81       	ldd	r20, Y+6	; 0x06
    65b6:	5f 81       	ldd	r21, Y+7	; 0x07
    65b8:	29 81       	ldd	r18, Y+1	; 0x01
    65ba:	3a 81       	ldd	r19, Y+2	; 0x02
    65bc:	ba 01       	movw	r22, r20
    65be:	f9 01       	movw	r30, r18
    65c0:	19 95       	eicall
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;
    65c2:	0d c0       	rjmp	.+26     	; 0x65de <OS_SchedNew+0x1d60>
                 case OS_TMR_OPT_CALLBACK_ARG:
                      pfnct = ptmr->OSTmrCallback;                /* Execute callback function if available ...       */
                      if (pfnct != (OS_TMR_CALLBACK)0) {
                          (*pfnct)((void *)ptmr, callback_arg);   /* ... using the 'callback_arg' provided in call    */
                      } else {
                          *perr = OS_ERR_TMR_NO_CALLBACK;
    65c4:	88 85       	ldd	r24, Y+8	; 0x08
    65c6:	99 85       	ldd	r25, Y+9	; 0x09
    65c8:	2f e8       	ldi	r18, 0x8F	; 143
    65ca:	fc 01       	movw	r30, r24
    65cc:	20 83       	st	Z, r18
                      }
                      break;
    65ce:	07 c0       	rjmp	.+14     	; 0x65de <OS_SchedNew+0x1d60>

                 case OS_TMR_OPT_NONE:
                      break;

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
    65d0:	88 85       	ldd	r24, Y+8	; 0x08
    65d2:	99 85       	ldd	r25, Y+9	; 0x09
    65d4:	24 e8       	ldi	r18, 0x84	; 132
    65d6:	fc 01       	movw	r30, r24
    65d8:	20 83       	st	Z, r18
    65da:	01 c0       	rjmp	.+2      	; 0x65de <OS_SchedNew+0x1d60>
                          *perr = OS_ERR_TMR_NO_CALLBACK;
                      }
                      break;

                 case OS_TMR_OPT_NONE:
                      break;
    65dc:	00 00       	nop

                 default:
                     *perr = OS_ERR_TMR_INVALID_OPT;
                     break;
             }
             OSTmr_Unlock();
    65de:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             return (OS_TRUE);
    65e2:	81 e0       	ldi	r24, 0x01	; 1
    65e4:	1a c0       	rjmp	.+52     	; 0x661a <OS_SchedNew+0x1d9c>

        case OS_TMR_STATE_COMPLETED:                              /* Timer has already completed the ONE-SHOT or ...  */
        case OS_TMR_STATE_STOPPED:                                /* ... timer has not started yet.                   */
             OSTmr_Unlock();
    65e6:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_STOPPED;
    65ea:	88 85       	ldd	r24, Y+8	; 0x08
    65ec:	99 85       	ldd	r25, Y+9	; 0x09
    65ee:	2e e8       	ldi	r18, 0x8E	; 142
    65f0:	fc 01       	movw	r30, r24
    65f2:	20 83       	st	Z, r18
             return (OS_TRUE);
    65f4:	81 e0       	ldi	r24, 0x01	; 1
    65f6:	11 c0       	rjmp	.+34     	; 0x661a <OS_SchedNew+0x1d9c>

        case OS_TMR_STATE_UNUSED:                                 /* Timer was not created                            */
             OSTmr_Unlock();
    65f8:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INACTIVE;
    65fc:	88 85       	ldd	r24, Y+8	; 0x08
    65fe:	99 85       	ldd	r25, Y+9	; 0x09
    6600:	27 e8       	ldi	r18, 0x87	; 135
    6602:	fc 01       	movw	r30, r24
    6604:	20 83       	st	Z, r18
             return (OS_FALSE);
    6606:	80 e0       	ldi	r24, 0x00	; 0
    6608:	08 c0       	rjmp	.+16     	; 0x661a <OS_SchedNew+0x1d9c>

        default:
             OSTmr_Unlock();
    660a:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
             *perr = OS_ERR_TMR_INVALID_STATE;
    660e:	88 85       	ldd	r24, Y+8	; 0x08
    6610:	99 85       	ldd	r25, Y+9	; 0x09
    6612:	2d e8       	ldi	r18, 0x8D	; 141
    6614:	fc 01       	movw	r30, r24
    6616:	20 83       	st	Z, r18
             return (OS_FALSE);
    6618:	80 e0       	ldi	r24, 0x00	; 0
    }
}
    661a:	29 96       	adiw	r28, 0x09	; 9
    661c:	0f b6       	in	r0, 0x3f	; 63
    661e:	f8 94       	cli
    6620:	de bf       	out	0x3e, r29	; 62
    6622:	0f be       	out	0x3f, r0	; 63
    6624:	cd bf       	out	0x3d, r28	; 61
    6626:	cf 91       	pop	r28
    6628:	df 91       	pop	r29
    662a:	08 95       	ret
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
INT8U  OSTmrSignal (void)
{
    662c:	df 93       	push	r29
    662e:	cf 93       	push	r28
    6630:	0f 92       	push	r0
    6632:	cd b7       	in	r28, 0x3d	; 61
    6634:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    err = OSSemPost(OSTmrSemSignal);
    6636:	80 91 10 05 	lds	r24, 0x0510
    663a:	90 91 11 05 	lds	r25, 0x0511
    663e:	0e 94 c7 28 	call	0x518e	; 0x518e <OS_SchedNew+0x910>
    6642:	89 83       	std	Y+1, r24	; 0x01
    return (err);
    6644:	89 81       	ldd	r24, Y+1	; 0x01
}
    6646:	0f 90       	pop	r0
    6648:	cf 91       	pop	r28
    664a:	df 91       	pop	r29
    664c:	08 95       	ret

0000664e <OSTmr_Alloc>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  OS_TMR  *OSTmr_Alloc (void)
{
    664e:	df 93       	push	r29
    6650:	cf 93       	push	r28
    6652:	0f 92       	push	r0
    6654:	0f 92       	push	r0
    6656:	cd b7       	in	r28, 0x3d	; 61
    6658:	de b7       	in	r29, 0x3e	; 62
    OS_TMR *ptmr;


    if (OSTmrFreeList == (OS_TMR *)0) {
    665a:	80 91 ed 04 	lds	r24, 0x04ED
    665e:	90 91 ee 04 	lds	r25, 0x04EE
    6662:	00 97       	sbiw	r24, 0x00	; 0
    6664:	19 f4       	brne	.+6      	; 0x666c <OSTmr_Alloc+0x1e>
        return ((OS_TMR *)0);
    6666:	80 e0       	ldi	r24, 0x00	; 0
    6668:	90 e0       	ldi	r25, 0x00	; 0
    666a:	2d c0       	rjmp	.+90     	; 0x66c6 <OSTmr_Alloc+0x78>
    }
    ptmr            = (OS_TMR *)OSTmrFreeList;
    666c:	80 91 ed 04 	lds	r24, 0x04ED
    6670:	90 91 ee 04 	lds	r25, 0x04EE
    6674:	9a 83       	std	Y+2, r25	; 0x02
    6676:	89 83       	std	Y+1, r24	; 0x01
    OSTmrFreeList   = (OS_TMR *)ptmr->OSTmrNext;
    6678:	89 81       	ldd	r24, Y+1	; 0x01
    667a:	9a 81       	ldd	r25, Y+2	; 0x02
    667c:	fc 01       	movw	r30, r24
    667e:	85 81       	ldd	r24, Z+5	; 0x05
    6680:	96 81       	ldd	r25, Z+6	; 0x06
    6682:	90 93 ee 04 	sts	0x04EE, r25
    6686:	80 93 ed 04 	sts	0x04ED, r24
    ptmr->OSTmrNext = (OS_TCB *)0;
    668a:	89 81       	ldd	r24, Y+1	; 0x01
    668c:	9a 81       	ldd	r25, Y+2	; 0x02
    668e:	fc 01       	movw	r30, r24
    6690:	16 82       	std	Z+6, r1	; 0x06
    6692:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev = (OS_TCB *)0;
    6694:	89 81       	ldd	r24, Y+1	; 0x01
    6696:	9a 81       	ldd	r25, Y+2	; 0x02
    6698:	fc 01       	movw	r30, r24
    669a:	10 86       	std	Z+8, r1	; 0x08
    669c:	17 82       	std	Z+7, r1	; 0x07
    OSTmrUsed++;
    669e:	80 91 17 05 	lds	r24, 0x0517
    66a2:	90 91 18 05 	lds	r25, 0x0518
    66a6:	01 96       	adiw	r24, 0x01	; 1
    66a8:	90 93 18 05 	sts	0x0518, r25
    66ac:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree--;
    66b0:	80 91 91 07 	lds	r24, 0x0791
    66b4:	90 91 92 07 	lds	r25, 0x0792
    66b8:	01 97       	sbiw	r24, 0x01	; 1
    66ba:	90 93 92 07 	sts	0x0792, r25
    66be:	80 93 91 07 	sts	0x0791, r24
    return (ptmr);
    66c2:	89 81       	ldd	r24, Y+1	; 0x01
    66c4:	9a 81       	ldd	r25, Y+2	; 0x02
}
    66c6:	0f 90       	pop	r0
    66c8:	0f 90       	pop	r0
    66ca:	cf 91       	pop	r28
    66cc:	df 91       	pop	r29
    66ce:	08 95       	ret

000066d0 <OSTmr_Free>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Free (OS_TMR *ptmr)
{
    66d0:	df 93       	push	r29
    66d2:	cf 93       	push	r28
    66d4:	0f 92       	push	r0
    66d6:	0f 92       	push	r0
    66d8:	cd b7       	in	r28, 0x3d	; 61
    66da:	de b7       	in	r29, 0x3e	; 62
    66dc:	9a 83       	std	Y+2, r25	; 0x02
    66de:	89 83       	std	Y+1, r24	; 0x01
    ptmr->OSTmrState       = OS_TMR_STATE_UNUSED;      /* Clear timer object fields                                   */
    66e0:	89 81       	ldd	r24, Y+1	; 0x01
    66e2:	9a 81       	ldd	r25, Y+2	; 0x02
    66e4:	fc 01       	movw	r30, r24
    66e6:	16 a2       	std	Z+38, r1	; 0x26
    ptmr->OSTmrOpt         = OS_TMR_OPT_NONE;
    66e8:	89 81       	ldd	r24, Y+1	; 0x01
    66ea:	9a 81       	ldd	r25, Y+2	; 0x02
    66ec:	fc 01       	movw	r30, r24
    66ee:	15 a2       	std	Z+37, r1	; 0x25
    ptmr->OSTmrPeriod      = 0;
    66f0:	89 81       	ldd	r24, Y+1	; 0x01
    66f2:	9a 81       	ldd	r25, Y+2	; 0x02
    66f4:	fc 01       	movw	r30, r24
    66f6:	11 8a       	std	Z+17, r1	; 0x11
    66f8:	12 8a       	std	Z+18, r1	; 0x12
    66fa:	13 8a       	std	Z+19, r1	; 0x13
    66fc:	14 8a       	std	Z+20, r1	; 0x14
    ptmr->OSTmrMatch       = 0;
    66fe:	89 81       	ldd	r24, Y+1	; 0x01
    6700:	9a 81       	ldd	r25, Y+2	; 0x02
    6702:	fc 01       	movw	r30, r24
    6704:	11 86       	std	Z+9, r1	; 0x09
    6706:	12 86       	std	Z+10, r1	; 0x0a
    6708:	13 86       	std	Z+11, r1	; 0x0b
    670a:	14 86       	std	Z+12, r1	; 0x0c
    ptmr->OSTmrCallback    = (OS_TMR_CALLBACK)0;
    670c:	89 81       	ldd	r24, Y+1	; 0x01
    670e:	9a 81       	ldd	r25, Y+2	; 0x02
    6710:	fc 01       	movw	r30, r24
    6712:	12 82       	std	Z+2, r1	; 0x02
    6714:	11 82       	std	Z+1, r1	; 0x01
    ptmr->OSTmrCallbackArg = (void *)0;
    6716:	89 81       	ldd	r24, Y+1	; 0x01
    6718:	9a 81       	ldd	r25, Y+2	; 0x02
    671a:	fc 01       	movw	r30, r24
    671c:	14 82       	std	Z+4, r1	; 0x04
    671e:	13 82       	std	Z+3, r1	; 0x03
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr->OSTmrName[0]     = '?';                      /* Unknown name                                                */
    6720:	89 81       	ldd	r24, Y+1	; 0x01
    6722:	9a 81       	ldd	r25, Y+2	; 0x02
    6724:	2f e3       	ldi	r18, 0x3F	; 63
    6726:	fc 01       	movw	r30, r24
    6728:	25 8b       	std	Z+21, r18	; 0x15
    ptmr->OSTmrName[1]     = OS_ASCII_NUL;
    672a:	89 81       	ldd	r24, Y+1	; 0x01
    672c:	9a 81       	ldd	r25, Y+2	; 0x02
    672e:	fc 01       	movw	r30, r24
    6730:	16 8a       	std	Z+22, r1	; 0x16
#endif

    ptmr->OSTmrPrev        = (OS_TCB *)0;              /* Chain timer to free list                                    */
    6732:	89 81       	ldd	r24, Y+1	; 0x01
    6734:	9a 81       	ldd	r25, Y+2	; 0x02
    6736:	fc 01       	movw	r30, r24
    6738:	10 86       	std	Z+8, r1	; 0x08
    673a:	17 82       	std	Z+7, r1	; 0x07
    ptmr->OSTmrNext        = OSTmrFreeList;
    673c:	20 91 ed 04 	lds	r18, 0x04ED
    6740:	30 91 ee 04 	lds	r19, 0x04EE
    6744:	89 81       	ldd	r24, Y+1	; 0x01
    6746:	9a 81       	ldd	r25, Y+2	; 0x02
    6748:	fc 01       	movw	r30, r24
    674a:	36 83       	std	Z+6, r19	; 0x06
    674c:	25 83       	std	Z+5, r18	; 0x05
    OSTmrFreeList          = ptmr;
    674e:	89 81       	ldd	r24, Y+1	; 0x01
    6750:	9a 81       	ldd	r25, Y+2	; 0x02
    6752:	90 93 ee 04 	sts	0x04EE, r25
    6756:	80 93 ed 04 	sts	0x04ED, r24

    OSTmrUsed--;                                       /* Update timer object statistics                              */
    675a:	80 91 17 05 	lds	r24, 0x0517
    675e:	90 91 18 05 	lds	r25, 0x0518
    6762:	01 97       	sbiw	r24, 0x01	; 1
    6764:	90 93 18 05 	sts	0x0518, r25
    6768:	80 93 17 05 	sts	0x0517, r24
    OSTmrFree++;
    676c:	80 91 91 07 	lds	r24, 0x0791
    6770:	90 91 92 07 	lds	r25, 0x0792
    6774:	01 96       	adiw	r24, 0x01	; 1
    6776:	90 93 92 07 	sts	0x0792, r25
    677a:	80 93 91 07 	sts	0x0791, r24
}
    677e:	0f 90       	pop	r0
    6780:	0f 90       	pop	r0
    6782:	cf 91       	pop	r28
    6784:	df 91       	pop	r29
    6786:	08 95       	ret
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
void  OSTmr_Init (void)
{
    6788:	df 93       	push	r29
    678a:	cf 93       	push	r28
    678c:	cd b7       	in	r28, 0x3d	; 61
    678e:	de b7       	in	r29, 0x3e	; 62
    6790:	27 97       	sbiw	r28, 0x07	; 7
    6792:	0f b6       	in	r0, 0x3f	; 63
    6794:	f8 94       	cli
    6796:	de bf       	out	0x3e, r29	; 62
    6798:	0f be       	out	0x3f, r0	; 63
    679a:	cd bf       	out	0x3d, r28	; 61
    INT16U   i;
    OS_TMR  *ptmr1;
    OS_TMR  *ptmr2;


    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    679c:	8a e1       	ldi	r24, 0x1A	; 26
    679e:	95 e0       	ldi	r25, 0x05	; 5
    67a0:	60 e7       	ldi	r22, 0x70	; 112
    67a2:	72 e0       	ldi	r23, 0x02	; 2
    67a4:	0e 94 94 23 	call	0x4728	; 0x4728 <OS_InitTCBList+0xba>
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */
    67a8:	8f ee       	ldi	r24, 0xEF	; 239
    67aa:	94 e0       	ldi	r25, 0x04	; 4
    67ac:	60 e2       	ldi	r22, 0x20	; 32
    67ae:	70 e0       	ldi	r23, 0x00	; 0
    67b0:	0e 94 94 23 	call	0x4728	; 0x4728 <OS_InitTCBList+0xba>

    ptmr1 = &OSTmrTbl[0];
    67b4:	8a e1       	ldi	r24, 0x1A	; 26
    67b6:	95 e0       	ldi	r25, 0x05	; 5
    67b8:	9c 83       	std	Y+4, r25	; 0x04
    67ba:	8b 83       	std	Y+3, r24	; 0x03
    ptmr2 = &OSTmrTbl[1];
    67bc:	81 e4       	ldi	r24, 0x41	; 65
    67be:	95 e0       	ldi	r25, 0x05	; 5
    67c0:	9a 83       	std	Y+2, r25	; 0x02
    67c2:	89 83       	std	Y+1, r24	; 0x01
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    67c4:	1e 82       	std	Y+6, r1	; 0x06
    67c6:	1d 82       	std	Y+5, r1	; 0x05
    67c8:	28 c0       	rjmp	.+80     	; 0x681a <OSTmr_Free+0x14a>
        ptmr1->OSTmrType    = OS_TMR_TYPE;
    67ca:	8b 81       	ldd	r24, Y+3	; 0x03
    67cc:	9c 81       	ldd	r25, Y+4	; 0x04
    67ce:	24 e6       	ldi	r18, 0x64	; 100
    67d0:	fc 01       	movw	r30, r24
    67d2:	20 83       	st	Z, r18
        ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                      /* Indicate that timer is inactive            */
    67d4:	8b 81       	ldd	r24, Y+3	; 0x03
    67d6:	9c 81       	ldd	r25, Y+4	; 0x04
    67d8:	fc 01       	movw	r30, r24
    67da:	16 a2       	std	Z+38, r1	; 0x26
        ptmr1->OSTmrNext    = (void *)ptmr2;                            /* Link to next timer                         */
    67dc:	8b 81       	ldd	r24, Y+3	; 0x03
    67de:	9c 81       	ldd	r25, Y+4	; 0x04
    67e0:	29 81       	ldd	r18, Y+1	; 0x01
    67e2:	3a 81       	ldd	r19, Y+2	; 0x02
    67e4:	fc 01       	movw	r30, r24
    67e6:	36 83       	std	Z+6, r19	; 0x06
    67e8:	25 83       	std	Z+5, r18	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
        ptmr1->OSTmrName[0] = '?';                                      /* Unknown name                               */
    67ea:	8b 81       	ldd	r24, Y+3	; 0x03
    67ec:	9c 81       	ldd	r25, Y+4	; 0x04
    67ee:	2f e3       	ldi	r18, 0x3F	; 63
    67f0:	fc 01       	movw	r30, r24
    67f2:	25 8b       	std	Z+21, r18	; 0x15
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    67f4:	8b 81       	ldd	r24, Y+3	; 0x03
    67f6:	9c 81       	ldd	r25, Y+4	; 0x04
    67f8:	fc 01       	movw	r30, r24
    67fa:	16 8a       	std	Z+22, r1	; 0x16
#endif
        ptmr1++;
    67fc:	8b 81       	ldd	r24, Y+3	; 0x03
    67fe:	9c 81       	ldd	r25, Y+4	; 0x04
    6800:	87 96       	adiw	r24, 0x27	; 39
    6802:	9c 83       	std	Y+4, r25	; 0x04
    6804:	8b 83       	std	Y+3, r24	; 0x03
        ptmr2++;
    6806:	89 81       	ldd	r24, Y+1	; 0x01
    6808:	9a 81       	ldd	r25, Y+2	; 0x02
    680a:	87 96       	adiw	r24, 0x27	; 39
    680c:	9a 83       	std	Y+2, r25	; 0x02
    680e:	89 83       	std	Y+1, r24	; 0x01
    OS_MemClr((INT8U *)&OSTmrTbl[0],      sizeof(OSTmrTbl));            /* Clear all the TMRs                         */
    OS_MemClr((INT8U *)&OSTmrWheelTbl[0], sizeof(OSTmrWheelTbl));       /* Clear the timer wheel                      */

    ptmr1 = &OSTmrTbl[0];
    ptmr2 = &OSTmrTbl[1];
    for (i = 0; i < (OS_TMR_CFG_MAX - 1); i++) {                        /* Init. list of free TMRs                    */
    6810:	8d 81       	ldd	r24, Y+5	; 0x05
    6812:	9e 81       	ldd	r25, Y+6	; 0x06
    6814:	01 96       	adiw	r24, 0x01	; 1
    6816:	9e 83       	std	Y+6, r25	; 0x06
    6818:	8d 83       	std	Y+5, r24	; 0x05
    681a:	8d 81       	ldd	r24, Y+5	; 0x05
    681c:	9e 81       	ldd	r25, Y+6	; 0x06
    681e:	8f 30       	cpi	r24, 0x0F	; 15
    6820:	91 05       	cpc	r25, r1
    6822:	98 f2       	brcs	.-90     	; 0x67ca <OSTmr_Free+0xfa>
        ptmr1->OSTmrName[1] = OS_ASCII_NUL;
#endif
        ptmr1++;
        ptmr2++;
    }
    ptmr1->OSTmrType    = OS_TMR_TYPE;
    6824:	8b 81       	ldd	r24, Y+3	; 0x03
    6826:	9c 81       	ldd	r25, Y+4	; 0x04
    6828:	24 e6       	ldi	r18, 0x64	; 100
    682a:	fc 01       	movw	r30, r24
    682c:	20 83       	st	Z, r18
    ptmr1->OSTmrState   = OS_TMR_STATE_UNUSED;                          /* Indicate that timer is inactive            */
    682e:	8b 81       	ldd	r24, Y+3	; 0x03
    6830:	9c 81       	ldd	r25, Y+4	; 0x04
    6832:	fc 01       	movw	r30, r24
    6834:	16 a2       	std	Z+38, r1	; 0x26
    ptmr1->OSTmrNext    = (void *)0;                                    /* Last OS_TMR                                */
    6836:	8b 81       	ldd	r24, Y+3	; 0x03
    6838:	9c 81       	ldd	r25, Y+4	; 0x04
    683a:	fc 01       	movw	r30, r24
    683c:	16 82       	std	Z+6, r1	; 0x06
    683e:	15 82       	std	Z+5, r1	; 0x05
#if OS_TMR_CFG_NAME_SIZE > 1
    ptmr1->OSTmrName[0] = '?';                                          /* Unknown name                               */
    6840:	8b 81       	ldd	r24, Y+3	; 0x03
    6842:	9c 81       	ldd	r25, Y+4	; 0x04
    6844:	2f e3       	ldi	r18, 0x3F	; 63
    6846:	fc 01       	movw	r30, r24
    6848:	25 8b       	std	Z+21, r18	; 0x15
    ptmr1->OSTmrName[1] = OS_ASCII_NUL;
    684a:	8b 81       	ldd	r24, Y+3	; 0x03
    684c:	9c 81       	ldd	r25, Y+4	; 0x04
    684e:	fc 01       	movw	r30, r24
    6850:	16 8a       	std	Z+22, r1	; 0x16
#endif
    OSTmrTime           = 0;
    6852:	10 92 4f 08 	sts	0x084F, r1
    6856:	10 92 50 08 	sts	0x0850, r1
    685a:	10 92 51 08 	sts	0x0851, r1
    685e:	10 92 52 08 	sts	0x0852, r1
    OSTmrUsed           = 0;
    6862:	10 92 18 05 	sts	0x0518, r1
    6866:	10 92 17 05 	sts	0x0517, r1
    OSTmrFree           = OS_TMR_CFG_MAX;
    686a:	80 e1       	ldi	r24, 0x10	; 16
    686c:	90 e0       	ldi	r25, 0x00	; 0
    686e:	90 93 92 07 	sts	0x0792, r25
    6872:	80 93 91 07 	sts	0x0791, r24
    OSTmrFreeList       = &OSTmrTbl[0];
    6876:	8a e1       	ldi	r24, 0x1A	; 26
    6878:	95 e0       	ldi	r25, 0x05	; 5
    687a:	90 93 ee 04 	sts	0x04EE, r25
    687e:	80 93 ed 04 	sts	0x04ED, r24
    OSTmrSem            = OSSemCreate(1);
    6882:	81 e0       	ldi	r24, 0x01	; 1
    6884:	90 e0       	ldi	r25, 0x00	; 0
    6886:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <OS_SchedNew+0x466>
    688a:	90 93 58 08 	sts	0x0858, r25
    688e:	80 93 57 08 	sts	0x0857, r24
    OSTmrSemSignal      = OSSemCreate(0);
    6892:	80 e0       	ldi	r24, 0x00	; 0
    6894:	90 e0       	ldi	r25, 0x00	; 0
    6896:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <OS_SchedNew+0x466>
    689a:	90 93 11 05 	sts	0x0511, r25
    689e:	80 93 10 05 	sts	0x0510, r24

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSem,       (INT8U *)"uC/OS-II TmrLock",   &err);/* Assign names to semaphores                 */
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSem,       (INT8U *)"OS-TmrLock",         &err);
    68a2:	80 91 57 08 	lds	r24, 0x0857
    68a6:	90 91 58 08 	lds	r25, 0x0858
    68aa:	4e ea       	ldi	r20, 0xAE	; 174
    68ac:	54 e0       	ldi	r21, 0x04	; 4
    68ae:	9e 01       	movw	r18, r28
    68b0:	29 5f       	subi	r18, 0xF9	; 249
    68b2:	3f 4f       	sbci	r19, 0xFF	; 255
    68b4:	ba 01       	movw	r22, r20
    68b6:	a9 01       	movw	r20, r18
    68b8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <OSTmr_Task+0x1d4>

#if OS_EVENT_NAME_SIZE > 18
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"uC/OS-II TmrSignal", &err);
#else
#if OS_EVENT_NAME_SIZE > 10
    OSEventNameSet(OSTmrSemSignal, (INT8U *)"OS-TmrSig",          &err);
    68bc:	80 91 10 05 	lds	r24, 0x0510
    68c0:	90 91 11 05 	lds	r25, 0x0511
    68c4:	49 eb       	ldi	r20, 0xB9	; 185
    68c6:	54 e0       	ldi	r21, 0x04	; 4
    68c8:	9e 01       	movw	r18, r28
    68ca:	29 5f       	subi	r18, 0xF9	; 249
    68cc:	3f 4f       	sbci	r19, 0xFF	; 255
    68ce:	ba 01       	movw	r22, r20
    68d0:	a9 01       	movw	r20, r18
    68d2:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <OSTmr_Task+0x1d4>
#endif
#endif

    OSTmr_InitTask();
    68d6:	0e 94 76 34 	call	0x68ec	; 0x68ec <OSTmr_InitTask>
}
    68da:	27 96       	adiw	r28, 0x07	; 7
    68dc:	0f b6       	in	r0, 0x3f	; 63
    68de:	f8 94       	cli
    68e0:	de bf       	out	0x3e, r29	; 62
    68e2:	0f be       	out	0x3f, r0	; 63
    68e4:	cd bf       	out	0x3d, r28	; 61
    68e6:	cf 91       	pop	r28
    68e8:	df 91       	pop	r29
    68ea:	08 95       	ret

000068ec <OSTmr_InitTask>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_InitTask (void)
{
    68ec:	8f 92       	push	r8
    68ee:	9f 92       	push	r9
    68f0:	af 92       	push	r10
    68f2:	bf 92       	push	r11
    68f4:	cf 92       	push	r12
    68f6:	df 92       	push	r13
    68f8:	ef 92       	push	r14
    68fa:	ff 92       	push	r15
    68fc:	0f 93       	push	r16
    68fe:	1f 93       	push	r17
    6900:	df 93       	push	r29
    6902:	cf 93       	push	r28
    6904:	0f 92       	push	r0
    6906:	cd b7       	in	r28, 0x3d	; 61
    6908:	de b7       	in	r29, 0x3e	; 62
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OSTmr_Task,
    690a:	0f 92       	push	r0
    690c:	0f 92       	push	r0
    690e:	4d b7       	in	r20, 0x3d	; 61
    6910:	5e b7       	in	r21, 0x3e	; 62
    6912:	4f 5f       	subi	r20, 0xFF	; 255
    6914:	5f 4f       	sbci	r21, 0xFF	; 255
    6916:	88 e4       	ldi	r24, 0x48	; 72
    6918:	96 e3       	ldi	r25, 0x36	; 54
    691a:	29 e4       	ldi	r18, 0x49	; 73
    691c:	38 e0       	ldi	r19, 0x08	; 8
    691e:	eb e9       	ldi	r30, 0x9B	; 155
    6920:	f7 e0       	ldi	r31, 0x07	; 7
    6922:	63 e0       	ldi	r22, 0x03	; 3
    6924:	70 e0       	ldi	r23, 0x00	; 0
    6926:	da 01       	movw	r26, r20
    6928:	6d 93       	st	X+, r22
    692a:	7c 93       	st	X, r23
    692c:	60 e0       	ldi	r22, 0x00	; 0
    692e:	70 e0       	ldi	r23, 0x00	; 0
    6930:	a9 01       	movw	r20, r18
    6932:	24 e0       	ldi	r18, 0x04	; 4
    6934:	0d ef       	ldi	r16, 0xFD	; 253
    6936:	1f ef       	ldi	r17, 0xFF	; 255
    6938:	7f 01       	movw	r14, r30
    693a:	0f 2e       	mov	r0, r31
    693c:	ff ea       	ldi	r31, 0xAF	; 175
    693e:	af 2e       	mov	r10, r31
    6940:	f0 e0       	ldi	r31, 0x00	; 0
    6942:	bf 2e       	mov	r11, r31
    6944:	f0 e0       	ldi	r31, 0x00	; 0
    6946:	cf 2e       	mov	r12, r31
    6948:	f0 e0       	ldi	r31, 0x00	; 0
    694a:	df 2e       	mov	r13, r31
    694c:	f0 2d       	mov	r31, r0
    694e:	88 24       	eor	r8, r8
    6950:	99 24       	eor	r9, r9
    6952:	0e 94 58 2a 	call	0x54b0	; 0x54b0 <OS_SchedNew+0xc32>
    6956:	0f 90       	pop	r0
    6958:	0f 90       	pop	r0
                       OS_TASK_TMR_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 12
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"uC/OS-II Tmr", &err);
    695a:	23 ec       	ldi	r18, 0xC3	; 195
    695c:	34 e0       	ldi	r19, 0x04	; 4
    695e:	84 e0       	ldi	r24, 0x04	; 4
    6960:	b9 01       	movw	r22, r18
    6962:	9e 01       	movw	r18, r28
    6964:	2f 5f       	subi	r18, 0xFF	; 255
    6966:	3f 4f       	sbci	r19, 0xFF	; 255
    6968:	a9 01       	movw	r20, r18
    696a:	0e 94 68 2b 	call	0x56d0	; 0x56d0 <OS_SchedNew+0xe52>
#else
#if OS_TASK_NAME_SIZE > 6
    OSTaskNameSet(OS_TASK_TMR_PRIO, (INT8U *)"OS-Tmr", &err);
#endif
#endif
}
    696e:	0f 90       	pop	r0
    6970:	cf 91       	pop	r28
    6972:	df 91       	pop	r29
    6974:	1f 91       	pop	r17
    6976:	0f 91       	pop	r16
    6978:	ff 90       	pop	r15
    697a:	ef 90       	pop	r14
    697c:	df 90       	pop	r13
    697e:	cf 90       	pop	r12
    6980:	bf 90       	pop	r11
    6982:	af 90       	pop	r10
    6984:	9f 90       	pop	r9
    6986:	8f 90       	pop	r8
    6988:	08 95       	ret

0000698a <OSTmr_Link>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Link (OS_TMR *ptmr, INT8U type)
{
    698a:	df 93       	push	r29
    698c:	cf 93       	push	r28
    698e:	cd b7       	in	r28, 0x3d	; 61
    6990:	de b7       	in	r29, 0x3e	; 62
    6992:	29 97       	sbiw	r28, 0x09	; 9
    6994:	0f b6       	in	r0, 0x3f	; 63
    6996:	f8 94       	cli
    6998:	de bf       	out	0x3e, r29	; 62
    699a:	0f be       	out	0x3f, r0	; 63
    699c:	cd bf       	out	0x3d, r28	; 61
    699e:	98 87       	std	Y+8, r25	; 0x08
    69a0:	8f 83       	std	Y+7, r24	; 0x07
    69a2:	69 87       	std	Y+9, r22	; 0x09
    OS_TMR       *ptmr1;
    OS_TMR_WHEEL *pspoke;
    INT16U        spoke;


    ptmr->OSTmrState = OS_TMR_STATE_RUNNING;
    69a4:	8f 81       	ldd	r24, Y+7	; 0x07
    69a6:	98 85       	ldd	r25, Y+8	; 0x08
    69a8:	23 e0       	ldi	r18, 0x03	; 3
    69aa:	fc 01       	movw	r30, r24
    69ac:	26 a3       	std	Z+38, r18	; 0x26
    if (type == OS_TMR_LINK_PERIODIC) {                            /* Determine when timer will expire                */
    69ae:	89 85       	ldd	r24, Y+9	; 0x09
    69b0:	81 30       	cpi	r24, 0x01	; 1
    69b2:	d9 f4       	brne	.+54     	; 0x69ea <OSTmr_Link+0x60>
        ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    69b4:	8f 81       	ldd	r24, Y+7	; 0x07
    69b6:	98 85       	ldd	r25, Y+8	; 0x08
    69b8:	fc 01       	movw	r30, r24
    69ba:	21 89       	ldd	r18, Z+17	; 0x11
    69bc:	32 89       	ldd	r19, Z+18	; 0x12
    69be:	43 89       	ldd	r20, Z+19	; 0x13
    69c0:	54 89       	ldd	r21, Z+20	; 0x14
    69c2:	80 91 4f 08 	lds	r24, 0x084F
    69c6:	90 91 50 08 	lds	r25, 0x0850
    69ca:	a0 91 51 08 	lds	r26, 0x0851
    69ce:	b0 91 52 08 	lds	r27, 0x0852
    69d2:	82 0f       	add	r24, r18
    69d4:	93 1f       	adc	r25, r19
    69d6:	a4 1f       	adc	r26, r20
    69d8:	b5 1f       	adc	r27, r21
    69da:	2f 81       	ldd	r18, Y+7	; 0x07
    69dc:	38 85       	ldd	r19, Y+8	; 0x08
    69de:	f9 01       	movw	r30, r18
    69e0:	81 87       	std	Z+9, r24	; 0x09
    69e2:	92 87       	std	Z+10, r25	; 0x0a
    69e4:	a3 87       	std	Z+11, r26	; 0x0b
    69e6:	b4 87       	std	Z+12, r27	; 0x0c
    69e8:	40 c0       	rjmp	.+128    	; 0x6a6a <OSTmr_Link+0xe0>
    } else {
        if (ptmr->OSTmrDly == 0) {
    69ea:	8f 81       	ldd	r24, Y+7	; 0x07
    69ec:	98 85       	ldd	r25, Y+8	; 0x08
    69ee:	fc 01       	movw	r30, r24
    69f0:	85 85       	ldd	r24, Z+13	; 0x0d
    69f2:	96 85       	ldd	r25, Z+14	; 0x0e
    69f4:	a7 85       	ldd	r26, Z+15	; 0x0f
    69f6:	b0 89       	ldd	r27, Z+16	; 0x10
    69f8:	00 97       	sbiw	r24, 0x00	; 0
    69fa:	a1 05       	cpc	r26, r1
    69fc:	b1 05       	cpc	r27, r1
    69fe:	d9 f4       	brne	.+54     	; 0x6a36 <OSTmr_Link+0xac>
            ptmr->OSTmrMatch = ptmr->OSTmrPeriod + OSTmrTime;
    6a00:	8f 81       	ldd	r24, Y+7	; 0x07
    6a02:	98 85       	ldd	r25, Y+8	; 0x08
    6a04:	fc 01       	movw	r30, r24
    6a06:	21 89       	ldd	r18, Z+17	; 0x11
    6a08:	32 89       	ldd	r19, Z+18	; 0x12
    6a0a:	43 89       	ldd	r20, Z+19	; 0x13
    6a0c:	54 89       	ldd	r21, Z+20	; 0x14
    6a0e:	80 91 4f 08 	lds	r24, 0x084F
    6a12:	90 91 50 08 	lds	r25, 0x0850
    6a16:	a0 91 51 08 	lds	r26, 0x0851
    6a1a:	b0 91 52 08 	lds	r27, 0x0852
    6a1e:	82 0f       	add	r24, r18
    6a20:	93 1f       	adc	r25, r19
    6a22:	a4 1f       	adc	r26, r20
    6a24:	b5 1f       	adc	r27, r21
    6a26:	2f 81       	ldd	r18, Y+7	; 0x07
    6a28:	38 85       	ldd	r19, Y+8	; 0x08
    6a2a:	f9 01       	movw	r30, r18
    6a2c:	81 87       	std	Z+9, r24	; 0x09
    6a2e:	92 87       	std	Z+10, r25	; 0x0a
    6a30:	a3 87       	std	Z+11, r26	; 0x0b
    6a32:	b4 87       	std	Z+12, r27	; 0x0c
    6a34:	1a c0       	rjmp	.+52     	; 0x6a6a <OSTmr_Link+0xe0>
        } else {
            ptmr->OSTmrMatch = ptmr->OSTmrDly    + OSTmrTime;
    6a36:	8f 81       	ldd	r24, Y+7	; 0x07
    6a38:	98 85       	ldd	r25, Y+8	; 0x08
    6a3a:	fc 01       	movw	r30, r24
    6a3c:	25 85       	ldd	r18, Z+13	; 0x0d
    6a3e:	36 85       	ldd	r19, Z+14	; 0x0e
    6a40:	47 85       	ldd	r20, Z+15	; 0x0f
    6a42:	50 89       	ldd	r21, Z+16	; 0x10
    6a44:	80 91 4f 08 	lds	r24, 0x084F
    6a48:	90 91 50 08 	lds	r25, 0x0850
    6a4c:	a0 91 51 08 	lds	r26, 0x0851
    6a50:	b0 91 52 08 	lds	r27, 0x0852
    6a54:	82 0f       	add	r24, r18
    6a56:	93 1f       	adc	r25, r19
    6a58:	a4 1f       	adc	r26, r20
    6a5a:	b5 1f       	adc	r27, r21
    6a5c:	2f 81       	ldd	r18, Y+7	; 0x07
    6a5e:	38 85       	ldd	r19, Y+8	; 0x08
    6a60:	f9 01       	movw	r30, r18
    6a62:	81 87       	std	Z+9, r24	; 0x09
    6a64:	92 87       	std	Z+10, r25	; 0x0a
    6a66:	a3 87       	std	Z+11, r26	; 0x0b
    6a68:	b4 87       	std	Z+12, r27	; 0x0c
        }
    }
    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    6a6a:	8f 81       	ldd	r24, Y+7	; 0x07
    6a6c:	98 85       	ldd	r25, Y+8	; 0x08
    6a6e:	fc 01       	movw	r30, r24
    6a70:	81 85       	ldd	r24, Z+9	; 0x09
    6a72:	92 85       	ldd	r25, Z+10	; 0x0a
    6a74:	a3 85       	ldd	r26, Z+11	; 0x0b
    6a76:	b4 85       	ldd	r27, Z+12	; 0x0c
    6a78:	87 70       	andi	r24, 0x07	; 7
    6a7a:	90 70       	andi	r25, 0x00	; 0
    6a7c:	9a 83       	std	Y+2, r25	; 0x02
    6a7e:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    6a80:	89 81       	ldd	r24, Y+1	; 0x01
    6a82:	9a 81       	ldd	r25, Y+2	; 0x02
    6a84:	88 0f       	add	r24, r24
    6a86:	99 1f       	adc	r25, r25
    6a88:	88 0f       	add	r24, r24
    6a8a:	99 1f       	adc	r25, r25
    6a8c:	81 51       	subi	r24, 0x11	; 17
    6a8e:	9b 4f       	sbci	r25, 0xFB	; 251
    6a90:	9c 83       	std	Y+4, r25	; 0x04
    6a92:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == (OS_TMR *)0) {                       /* Link into timer wheel                           */
    6a94:	8b 81       	ldd	r24, Y+3	; 0x03
    6a96:	9c 81       	ldd	r25, Y+4	; 0x04
    6a98:	fc 01       	movw	r30, r24
    6a9a:	80 81       	ld	r24, Z
    6a9c:	91 81       	ldd	r25, Z+1	; 0x01
    6a9e:	00 97       	sbiw	r24, 0x00	; 0
    6aa0:	a1 f4       	brne	.+40     	; 0x6aca <OSTmr_Link+0x140>
        pspoke->OSTmrFirst   = ptmr;
    6aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    6aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    6aa6:	2f 81       	ldd	r18, Y+7	; 0x07
    6aa8:	38 85       	ldd	r19, Y+8	; 0x08
    6aaa:	fc 01       	movw	r30, r24
    6aac:	31 83       	std	Z+1, r19	; 0x01
    6aae:	20 83       	st	Z, r18
        ptmr->OSTmrNext      = (OS_TMR *)0;
    6ab0:	8f 81       	ldd	r24, Y+7	; 0x07
    6ab2:	98 85       	ldd	r25, Y+8	; 0x08
    6ab4:	fc 01       	movw	r30, r24
    6ab6:	16 82       	std	Z+6, r1	; 0x06
    6ab8:	15 82       	std	Z+5, r1	; 0x05
        pspoke->OSTmrEntries = 1;
    6aba:	8b 81       	ldd	r24, Y+3	; 0x03
    6abc:	9c 81       	ldd	r25, Y+4	; 0x04
    6abe:	21 e0       	ldi	r18, 0x01	; 1
    6ac0:	30 e0       	ldi	r19, 0x00	; 0
    6ac2:	fc 01       	movw	r30, r24
    6ac4:	33 83       	std	Z+3, r19	; 0x03
    6ac6:	22 83       	std	Z+2, r18	; 0x02
    6ac8:	29 c0       	rjmp	.+82     	; 0x6b1c <OSTmr_Link+0x192>
    } else {
        ptmr1                = pspoke->OSTmrFirst;                 /* Point to first timer in the spoke               */
    6aca:	8b 81       	ldd	r24, Y+3	; 0x03
    6acc:	9c 81       	ldd	r25, Y+4	; 0x04
    6ace:	fc 01       	movw	r30, r24
    6ad0:	80 81       	ld	r24, Z
    6ad2:	91 81       	ldd	r25, Z+1	; 0x01
    6ad4:	9e 83       	std	Y+6, r25	; 0x06
    6ad6:	8d 83       	std	Y+5, r24	; 0x05
        pspoke->OSTmrFirst   = ptmr;
    6ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    6ada:	9c 81       	ldd	r25, Y+4	; 0x04
    6adc:	2f 81       	ldd	r18, Y+7	; 0x07
    6ade:	38 85       	ldd	r19, Y+8	; 0x08
    6ae0:	fc 01       	movw	r30, r24
    6ae2:	31 83       	std	Z+1, r19	; 0x01
    6ae4:	20 83       	st	Z, r18
        ptmr->OSTmrNext      = (void *)ptmr1;
    6ae6:	8f 81       	ldd	r24, Y+7	; 0x07
    6ae8:	98 85       	ldd	r25, Y+8	; 0x08
    6aea:	2d 81       	ldd	r18, Y+5	; 0x05
    6aec:	3e 81       	ldd	r19, Y+6	; 0x06
    6aee:	fc 01       	movw	r30, r24
    6af0:	36 83       	std	Z+6, r19	; 0x06
    6af2:	25 83       	std	Z+5, r18	; 0x05
        ptmr1->OSTmrPrev     = (void *)ptmr;
    6af4:	8d 81       	ldd	r24, Y+5	; 0x05
    6af6:	9e 81       	ldd	r25, Y+6	; 0x06
    6af8:	2f 81       	ldd	r18, Y+7	; 0x07
    6afa:	38 85       	ldd	r19, Y+8	; 0x08
    6afc:	fc 01       	movw	r30, r24
    6afe:	30 87       	std	Z+8, r19	; 0x08
    6b00:	27 83       	std	Z+7, r18	; 0x07
        pspoke->OSTmrEntries++;
    6b02:	8b 81       	ldd	r24, Y+3	; 0x03
    6b04:	9c 81       	ldd	r25, Y+4	; 0x04
    6b06:	fc 01       	movw	r30, r24
    6b08:	82 81       	ldd	r24, Z+2	; 0x02
    6b0a:	93 81       	ldd	r25, Z+3	; 0x03
    6b0c:	9c 01       	movw	r18, r24
    6b0e:	2f 5f       	subi	r18, 0xFF	; 255
    6b10:	3f 4f       	sbci	r19, 0xFF	; 255
    6b12:	8b 81       	ldd	r24, Y+3	; 0x03
    6b14:	9c 81       	ldd	r25, Y+4	; 0x04
    6b16:	fc 01       	movw	r30, r24
    6b18:	33 83       	std	Z+3, r19	; 0x03
    6b1a:	22 83       	std	Z+2, r18	; 0x02
    }
    ptmr->OSTmrPrev = (void *)0;                                   /* Timer always inserted as first node in list     */
    6b1c:	8f 81       	ldd	r24, Y+7	; 0x07
    6b1e:	98 85       	ldd	r25, Y+8	; 0x08
    6b20:	fc 01       	movw	r30, r24
    6b22:	10 86       	std	Z+8, r1	; 0x08
    6b24:	17 82       	std	Z+7, r1	; 0x07
}
    6b26:	29 96       	adiw	r28, 0x09	; 9
    6b28:	0f b6       	in	r0, 0x3f	; 63
    6b2a:	f8 94       	cli
    6b2c:	de bf       	out	0x3e, r29	; 62
    6b2e:	0f be       	out	0x3f, r0	; 63
    6b30:	cd bf       	out	0x3d, r28	; 61
    6b32:	cf 91       	pop	r28
    6b34:	df 91       	pop	r29
    6b36:	08 95       	ret

00006b38 <OSTmr_Unlink>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Unlink (OS_TMR *ptmr)
{
    6b38:	df 93       	push	r29
    6b3a:	cf 93       	push	r28
    6b3c:	cd b7       	in	r28, 0x3d	; 61
    6b3e:	de b7       	in	r29, 0x3e	; 62
    6b40:	2a 97       	sbiw	r28, 0x0a	; 10
    6b42:	0f b6       	in	r0, 0x3f	; 63
    6b44:	f8 94       	cli
    6b46:	de bf       	out	0x3e, r29	; 62
    6b48:	0f be       	out	0x3f, r0	; 63
    6b4a:	cd bf       	out	0x3d, r28	; 61
    6b4c:	9a 87       	std	Y+10, r25	; 0x0a
    6b4e:	89 87       	std	Y+9, r24	; 0x09
    OS_TMR        *ptmr2;
    OS_TMR_WHEEL  *pspoke;
    INT16U         spoke;


    spoke  = (INT16U)(ptmr->OSTmrMatch % OS_TMR_CFG_WHEEL_SIZE);
    6b50:	89 85       	ldd	r24, Y+9	; 0x09
    6b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b54:	fc 01       	movw	r30, r24
    6b56:	81 85       	ldd	r24, Z+9	; 0x09
    6b58:	92 85       	ldd	r25, Z+10	; 0x0a
    6b5a:	a3 85       	ldd	r26, Z+11	; 0x0b
    6b5c:	b4 85       	ldd	r27, Z+12	; 0x0c
    6b5e:	87 70       	andi	r24, 0x07	; 7
    6b60:	90 70       	andi	r25, 0x00	; 0
    6b62:	9a 83       	std	Y+2, r25	; 0x02
    6b64:	89 83       	std	Y+1, r24	; 0x01
    pspoke = &OSTmrWheelTbl[spoke];
    6b66:	89 81       	ldd	r24, Y+1	; 0x01
    6b68:	9a 81       	ldd	r25, Y+2	; 0x02
    6b6a:	88 0f       	add	r24, r24
    6b6c:	99 1f       	adc	r25, r25
    6b6e:	88 0f       	add	r24, r24
    6b70:	99 1f       	adc	r25, r25
    6b72:	81 51       	subi	r24, 0x11	; 17
    6b74:	9b 4f       	sbci	r25, 0xFB	; 251
    6b76:	9c 83       	std	Y+4, r25	; 0x04
    6b78:	8b 83       	std	Y+3, r24	; 0x03

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
    6b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    6b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    6b7e:	fc 01       	movw	r30, r24
    6b80:	20 81       	ld	r18, Z
    6b82:	31 81       	ldd	r19, Z+1	; 0x01
    6b84:	89 85       	ldd	r24, Y+9	; 0x09
    6b86:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b88:	28 17       	cp	r18, r24
    6b8a:	39 07       	cpc	r19, r25
    6b8c:	c1 f4       	brne	.+48     	; 0x6bbe <OSTmr_Unlink+0x86>
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
    6b8e:	89 85       	ldd	r24, Y+9	; 0x09
    6b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    6b92:	fc 01       	movw	r30, r24
    6b94:	85 81       	ldd	r24, Z+5	; 0x05
    6b96:	96 81       	ldd	r25, Z+6	; 0x06
    6b98:	98 87       	std	Y+8, r25	; 0x08
    6b9a:	8f 83       	std	Y+7, r24	; 0x07
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
    6b9c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b9e:	9c 81       	ldd	r25, Y+4	; 0x04
    6ba0:	2f 81       	ldd	r18, Y+7	; 0x07
    6ba2:	38 85       	ldd	r19, Y+8	; 0x08
    6ba4:	fc 01       	movw	r30, r24
    6ba6:	31 83       	std	Z+1, r19	; 0x01
    6ba8:	20 83       	st	Z, r18
        if (ptmr1 != (OS_TMR *)0) {
    6baa:	8f 81       	ldd	r24, Y+7	; 0x07
    6bac:	98 85       	ldd	r25, Y+8	; 0x08
    6bae:	00 97       	sbiw	r24, 0x00	; 0
    6bb0:	39 f1       	breq	.+78     	; 0x6c00 <OSTmr_Unlink+0xc8>
            ptmr1->OSTmrPrev = (void *)0;
    6bb2:	8f 81       	ldd	r24, Y+7	; 0x07
    6bb4:	98 85       	ldd	r25, Y+8	; 0x08
    6bb6:	fc 01       	movw	r30, r24
    6bb8:	10 86       	std	Z+8, r1	; 0x08
    6bba:	17 82       	std	Z+7, r1	; 0x07
    6bbc:	22 c0       	rjmp	.+68     	; 0x6c02 <OSTmr_Unlink+0xca>
        }
    } else {
        ptmr1            = (OS_TMR *)ptmr->OSTmrPrev;       /* Remove timer from somewhere in the list                */
    6bbe:	89 85       	ldd	r24, Y+9	; 0x09
    6bc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bc2:	fc 01       	movw	r30, r24
    6bc4:	87 81       	ldd	r24, Z+7	; 0x07
    6bc6:	90 85       	ldd	r25, Z+8	; 0x08
    6bc8:	98 87       	std	Y+8, r25	; 0x08
    6bca:	8f 83       	std	Y+7, r24	; 0x07
        ptmr2            = (OS_TMR *)ptmr->OSTmrNext;
    6bcc:	89 85       	ldd	r24, Y+9	; 0x09
    6bce:	9a 85       	ldd	r25, Y+10	; 0x0a
    6bd0:	fc 01       	movw	r30, r24
    6bd2:	85 81       	ldd	r24, Z+5	; 0x05
    6bd4:	96 81       	ldd	r25, Z+6	; 0x06
    6bd6:	9e 83       	std	Y+6, r25	; 0x06
    6bd8:	8d 83       	std	Y+5, r24	; 0x05
        ptmr1->OSTmrNext = ptmr2;
    6bda:	8f 81       	ldd	r24, Y+7	; 0x07
    6bdc:	98 85       	ldd	r25, Y+8	; 0x08
    6bde:	2d 81       	ldd	r18, Y+5	; 0x05
    6be0:	3e 81       	ldd	r19, Y+6	; 0x06
    6be2:	fc 01       	movw	r30, r24
    6be4:	36 83       	std	Z+6, r19	; 0x06
    6be6:	25 83       	std	Z+5, r18	; 0x05
        if (ptmr2 != (OS_TMR *)0) {
    6be8:	8d 81       	ldd	r24, Y+5	; 0x05
    6bea:	9e 81       	ldd	r25, Y+6	; 0x06
    6bec:	00 97       	sbiw	r24, 0x00	; 0
    6bee:	49 f0       	breq	.+18     	; 0x6c02 <OSTmr_Unlink+0xca>
            ptmr2->OSTmrPrev = (void *)ptmr1;
    6bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    6bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    6bf4:	2f 81       	ldd	r18, Y+7	; 0x07
    6bf6:	38 85       	ldd	r19, Y+8	; 0x08
    6bf8:	fc 01       	movw	r30, r24
    6bfa:	30 87       	std	Z+8, r19	; 0x08
    6bfc:	27 83       	std	Z+7, r18	; 0x07
    6bfe:	01 c0       	rjmp	.+2      	; 0x6c02 <OSTmr_Unlink+0xca>

    if (pspoke->OSTmrFirst == ptmr) {                       /* See if timer to remove is at the beginning of list     */
        ptmr1              = (OS_TMR *)ptmr->OSTmrNext;
        pspoke->OSTmrFirst = (OS_TMR *)ptmr1;
        if (ptmr1 != (OS_TMR *)0) {
            ptmr1->OSTmrPrev = (void *)0;
    6c00:	00 00       	nop
        ptmr1->OSTmrNext = ptmr2;
        if (ptmr2 != (OS_TMR *)0) {
            ptmr2->OSTmrPrev = (void *)ptmr1;
        }
    }
    ptmr->OSTmrState = OS_TMR_STATE_STOPPED;
    6c02:	89 85       	ldd	r24, Y+9	; 0x09
    6c04:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c06:	21 e0       	ldi	r18, 0x01	; 1
    6c08:	fc 01       	movw	r30, r24
    6c0a:	26 a3       	std	Z+38, r18	; 0x26
    ptmr->OSTmrNext  = (void *)0;
    6c0c:	89 85       	ldd	r24, Y+9	; 0x09
    6c0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c10:	fc 01       	movw	r30, r24
    6c12:	16 82       	std	Z+6, r1	; 0x06
    6c14:	15 82       	std	Z+5, r1	; 0x05
    ptmr->OSTmrPrev  = (void *)0;
    6c16:	89 85       	ldd	r24, Y+9	; 0x09
    6c18:	9a 85       	ldd	r25, Y+10	; 0x0a
    6c1a:	fc 01       	movw	r30, r24
    6c1c:	10 86       	std	Z+8, r1	; 0x08
    6c1e:	17 82       	std	Z+7, r1	; 0x07
    pspoke->OSTmrEntries--;
    6c20:	8b 81       	ldd	r24, Y+3	; 0x03
    6c22:	9c 81       	ldd	r25, Y+4	; 0x04
    6c24:	fc 01       	movw	r30, r24
    6c26:	82 81       	ldd	r24, Z+2	; 0x02
    6c28:	93 81       	ldd	r25, Z+3	; 0x03
    6c2a:	9c 01       	movw	r18, r24
    6c2c:	21 50       	subi	r18, 0x01	; 1
    6c2e:	30 40       	sbci	r19, 0x00	; 0
    6c30:	8b 81       	ldd	r24, Y+3	; 0x03
    6c32:	9c 81       	ldd	r25, Y+4	; 0x04
    6c34:	fc 01       	movw	r30, r24
    6c36:	33 83       	std	Z+3, r19	; 0x03
    6c38:	22 83       	std	Z+2, r18	; 0x02
}
    6c3a:	2a 96       	adiw	r28, 0x0a	; 10
    6c3c:	0f b6       	in	r0, 0x3f	; 63
    6c3e:	f8 94       	cli
    6c40:	de bf       	out	0x3e, r29	; 62
    6c42:	0f be       	out	0x3f, r0	; 63
    6c44:	cd bf       	out	0x3d, r28	; 61
    6c46:	cf 91       	pop	r28
    6c48:	df 91       	pop	r29
    6c4a:	08 95       	ret

00006c4c <OSTmr_Lock>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Lock (void)
{
    6c4c:	df 93       	push	r29
    6c4e:	cf 93       	push	r28
    6c50:	0f 92       	push	r0
    6c52:	cd b7       	in	r28, 0x3d	; 61
    6c54:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;


    OSSemPend(OSTmrSem, 0, &err);
    6c56:	80 91 57 08 	lds	r24, 0x0857
    6c5a:	90 91 58 08 	lds	r25, 0x0858
    6c5e:	60 e0       	ldi	r22, 0x00	; 0
    6c60:	70 e0       	ldi	r23, 0x00	; 0
    6c62:	9e 01       	movw	r18, r28
    6c64:	2f 5f       	subi	r18, 0xFF	; 255
    6c66:	3f 4f       	sbci	r19, 0xFF	; 255
    6c68:	a9 01       	movw	r20, r18
    6c6a:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <OS_SchedNew+0x6c0>
    (void)err;
}
    6c6e:	0f 90       	pop	r0
    6c70:	cf 91       	pop	r28
    6c72:	df 91       	pop	r29
    6c74:	08 95       	ret

00006c76 <OSTmr_Unlock>:



#if OS_TMR_EN > 0
static  void  OSTmr_Unlock (void)
{
    6c76:	df 93       	push	r29
    6c78:	cf 93       	push	r28
    6c7a:	cd b7       	in	r28, 0x3d	; 61
    6c7c:	de b7       	in	r29, 0x3e	; 62
    (void)OSSemPost(OSTmrSem);
    6c7e:	80 91 57 08 	lds	r24, 0x0857
    6c82:	90 91 58 08 	lds	r25, 0x0858
    6c86:	0e 94 c7 28 	call	0x518e	; 0x518e <OS_SchedNew+0x910>
}
    6c8a:	cf 91       	pop	r28
    6c8c:	df 91       	pop	r29
    6c8e:	08 95       	ret

00006c90 <OSTmr_Task>:
************************************************************************************************************************
*/

#if OS_TMR_EN > 0
static  void  OSTmr_Task (void *p_arg)
{
    6c90:	df 93       	push	r29
    6c92:	cf 93       	push	r28
    6c94:	cd b7       	in	r28, 0x3d	; 61
    6c96:	de b7       	in	r29, 0x3e	; 62
    6c98:	2d 97       	sbiw	r28, 0x0d	; 13
    6c9a:	0f b6       	in	r0, 0x3f	; 63
    6c9c:	f8 94       	cli
    6c9e:	de bf       	out	0x3e, r29	; 62
    6ca0:	0f be       	out	0x3f, r0	; 63
    6ca2:	cd bf       	out	0x3d, r28	; 61
    6ca4:	9d 87       	std	Y+13, r25	; 0x0d
    6ca6:	8c 87       	std	Y+12, r24	; 0x0c
    INT16U           spoke;


    (void)p_arg;                                                 /* Not using 'p_arg', prevent compiler warning       */
    for (;;) {
        OSSemPend(OSTmrSemSignal, 0, &err);                      /* Wait for signal indicating time to update timers  */
    6ca8:	80 91 10 05 	lds	r24, 0x0510
    6cac:	90 91 11 05 	lds	r25, 0x0511
    6cb0:	9e 01       	movw	r18, r28
    6cb2:	25 5f       	subi	r18, 0xF5	; 245
    6cb4:	3f 4f       	sbci	r19, 0xFF	; 255
    6cb6:	60 e0       	ldi	r22, 0x00	; 0
    6cb8:	70 e0       	ldi	r23, 0x00	; 0
    6cba:	a9 01       	movw	r20, r18
    6cbc:	0e 94 9f 27 	call	0x4f3e	; 0x4f3e <OS_SchedNew+0x6c0>
        OSTmr_Lock();
    6cc0:	0e 94 26 36 	call	0x6c4c	; 0x6c4c <OSTmr_Lock>
        OSTmrTime++;                                             /* Increment the current time                        */
    6cc4:	80 91 4f 08 	lds	r24, 0x084F
    6cc8:	90 91 50 08 	lds	r25, 0x0850
    6ccc:	a0 91 51 08 	lds	r26, 0x0851
    6cd0:	b0 91 52 08 	lds	r27, 0x0852
    6cd4:	01 96       	adiw	r24, 0x01	; 1
    6cd6:	a1 1d       	adc	r26, r1
    6cd8:	b1 1d       	adc	r27, r1
    6cda:	80 93 4f 08 	sts	0x084F, r24
    6cde:	90 93 50 08 	sts	0x0850, r25
    6ce2:	a0 93 51 08 	sts	0x0851, r26
    6ce6:	b0 93 52 08 	sts	0x0852, r27
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
    6cea:	80 91 4f 08 	lds	r24, 0x084F
    6cee:	90 91 50 08 	lds	r25, 0x0850
    6cf2:	a0 91 51 08 	lds	r26, 0x0851
    6cf6:	b0 91 52 08 	lds	r27, 0x0852
    6cfa:	87 70       	andi	r24, 0x07	; 7
    6cfc:	90 70       	andi	r25, 0x00	; 0
    6cfe:	9a 83       	std	Y+2, r25	; 0x02
    6d00:	89 83       	std	Y+1, r24	; 0x01
        pspoke = &OSTmrWheelTbl[spoke];
    6d02:	89 81       	ldd	r24, Y+1	; 0x01
    6d04:	9a 81       	ldd	r25, Y+2	; 0x02
    6d06:	88 0f       	add	r24, r24
    6d08:	99 1f       	adc	r25, r25
    6d0a:	88 0f       	add	r24, r24
    6d0c:	99 1f       	adc	r25, r25
    6d0e:	81 51       	subi	r24, 0x11	; 17
    6d10:	9b 4f       	sbci	r25, 0xFB	; 251
    6d12:	9c 83       	std	Y+4, r25	; 0x04
    6d14:	8b 83       	std	Y+3, r24	; 0x03
        ptmr   = pspoke->OSTmrFirst;
    6d16:	8b 81       	ldd	r24, Y+3	; 0x03
    6d18:	9c 81       	ldd	r25, Y+4	; 0x04
    6d1a:	fc 01       	movw	r30, r24
    6d1c:	80 81       	ld	r24, Z
    6d1e:	91 81       	ldd	r25, Z+1	; 0x01
    6d20:	9a 87       	std	Y+10, r25	; 0x0a
    6d22:	89 87       	std	Y+9, r24	; 0x09
        while (ptmr != (OS_TMR *)0) {
    6d24:	4b c0       	rjmp	.+150    	; 0x6dbc <OSTmr_Task+0x12c>
            ptmr_next = (OS_TMR *)ptmr->OSTmrNext;               /* Point to next timer to update because current ... */
    6d26:	89 85       	ldd	r24, Y+9	; 0x09
    6d28:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d2a:	fc 01       	movw	r30, r24
    6d2c:	85 81       	ldd	r24, Z+5	; 0x05
    6d2e:	96 81       	ldd	r25, Z+6	; 0x06
    6d30:	98 87       	std	Y+8, r25	; 0x08
    6d32:	8f 83       	std	Y+7, r24	; 0x07
                                                                 /* ... timer could get unlinked from the wheel.      */
            if (OSTmrTime == ptmr->OSTmrMatch) {                 /* Process each timer that expires                   */
    6d34:	89 85       	ldd	r24, Y+9	; 0x09
    6d36:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d38:	fc 01       	movw	r30, r24
    6d3a:	21 85       	ldd	r18, Z+9	; 0x09
    6d3c:	32 85       	ldd	r19, Z+10	; 0x0a
    6d3e:	43 85       	ldd	r20, Z+11	; 0x0b
    6d40:	54 85       	ldd	r21, Z+12	; 0x0c
    6d42:	80 91 4f 08 	lds	r24, 0x084F
    6d46:	90 91 50 08 	lds	r25, 0x0850
    6d4a:	a0 91 51 08 	lds	r26, 0x0851
    6d4e:	b0 91 52 08 	lds	r27, 0x0852
    6d52:	28 17       	cp	r18, r24
    6d54:	39 07       	cpc	r19, r25
    6d56:	4a 07       	cpc	r20, r26
    6d58:	5b 07       	cpc	r21, r27
    6d5a:	61 f5       	brne	.+88     	; 0x6db4 <OSTmr_Task+0x124>
                pfnct = ptmr->OSTmrCallback;                     /* Execute callback function if available            */
    6d5c:	89 85       	ldd	r24, Y+9	; 0x09
    6d5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d60:	fc 01       	movw	r30, r24
    6d62:	81 81       	ldd	r24, Z+1	; 0x01
    6d64:	92 81       	ldd	r25, Z+2	; 0x02
    6d66:	9e 83       	std	Y+6, r25	; 0x06
    6d68:	8d 83       	std	Y+5, r24	; 0x05
                if (pfnct != (OS_TMR_CALLBACK)0) {
    6d6a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d6c:	9e 81       	ldd	r25, Y+6	; 0x06
    6d6e:	00 97       	sbiw	r24, 0x00	; 0
    6d70:	61 f0       	breq	.+24     	; 0x6d8a <OSTmr_Task+0xfa>
                    (*pfnct)((void *)ptmr, ptmr->OSTmrCallbackArg);
    6d72:	89 85       	ldd	r24, Y+9	; 0x09
    6d74:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d76:	fc 01       	movw	r30, r24
    6d78:	43 81       	ldd	r20, Z+3	; 0x03
    6d7a:	54 81       	ldd	r21, Z+4	; 0x04
    6d7c:	89 85       	ldd	r24, Y+9	; 0x09
    6d7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d80:	2d 81       	ldd	r18, Y+5	; 0x05
    6d82:	3e 81       	ldd	r19, Y+6	; 0x06
    6d84:	ba 01       	movw	r22, r20
    6d86:	f9 01       	movw	r30, r18
    6d88:	19 95       	eicall
                }
                OSTmr_Unlink(ptmr);                              /* Remove from current wheel spoke                   */
    6d8a:	89 85       	ldd	r24, Y+9	; 0x09
    6d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d8e:	0e 94 9c 35 	call	0x6b38	; 0x6b38 <OSTmr_Unlink>
                if (ptmr->OSTmrOpt == OS_TMR_OPT_PERIODIC) {
    6d92:	89 85       	ldd	r24, Y+9	; 0x09
    6d94:	9a 85       	ldd	r25, Y+10	; 0x0a
    6d96:	fc 01       	movw	r30, r24
    6d98:	85 a1       	ldd	r24, Z+37	; 0x25
    6d9a:	82 30       	cpi	r24, 0x02	; 2
    6d9c:	31 f4       	brne	.+12     	; 0x6daa <OSTmr_Task+0x11a>
                    OSTmr_Link(ptmr, OS_TMR_LINK_PERIODIC);      /* Recalculate new position of timer in wheel        */
    6d9e:	89 85       	ldd	r24, Y+9	; 0x09
    6da0:	9a 85       	ldd	r25, Y+10	; 0x0a
    6da2:	61 e0       	ldi	r22, 0x01	; 1
    6da4:	0e 94 c5 34 	call	0x698a	; 0x698a <OSTmr_Link>
    6da8:	05 c0       	rjmp	.+10     	; 0x6db4 <OSTmr_Task+0x124>
                } else {
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
    6daa:	89 85       	ldd	r24, Y+9	; 0x09
    6dac:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dae:	22 e0       	ldi	r18, 0x02	; 2
    6db0:	fc 01       	movw	r30, r24
    6db2:	26 a3       	std	Z+38, r18	; 0x26
                }
            }
            ptmr = ptmr_next;
    6db4:	8f 81       	ldd	r24, Y+7	; 0x07
    6db6:	98 85       	ldd	r25, Y+8	; 0x08
    6db8:	9a 87       	std	Y+10, r25	; 0x0a
    6dba:	89 87       	std	Y+9, r24	; 0x09
        OSTmr_Lock();
        OSTmrTime++;                                             /* Increment the current time                        */
        spoke  = (INT16U)(OSTmrTime % OS_TMR_CFG_WHEEL_SIZE);    /* Position on current timer wheel entry             */
        pspoke = &OSTmrWheelTbl[spoke];
        ptmr   = pspoke->OSTmrFirst;
        while (ptmr != (OS_TMR *)0) {
    6dbc:	89 85       	ldd	r24, Y+9	; 0x09
    6dbe:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dc0:	00 97       	sbiw	r24, 0x00	; 0
    6dc2:	09 f0       	breq	.+2      	; 0x6dc6 <OSTmr_Task+0x136>
    6dc4:	b0 cf       	rjmp	.-160    	; 0x6d26 <OSTmr_Task+0x96>
                    ptmr->OSTmrState = OS_TMR_STATE_COMPLETED;   /* Indicate that the timer has completed             */
                }
            }
            ptmr = ptmr_next;
        }
        OSTmr_Unlock();
    6dc6:	0e 94 3b 36 	call	0x6c76	; 0x6c76 <OSTmr_Unlock>
    }
    6dca:	6e cf       	rjmp	.-292    	; 0x6ca8 <OSTmr_Task+0x18>

00006dcc <init_lego_interface>:
 * Timer 1, 4 and 5 are used to control the H-Bridges for Motor-control.
 * PORTF is used to interface to LEGO sensors.
 * PORTB pin 5, 6 and 7, PORTH pin 3, 4 and 5, PORTL pin 3 & 4 are all used to control the H-Bridges.
 *********************************************************************************************************
 */
void init_lego_interface(void) {
    6dcc:	df 93       	push	r29
    6dce:	cf 93       	push	r28
    6dd0:	cd b7       	in	r28, 0x3d	; 61
    6dd2:	de b7       	in	r29, 0x3e	; 62
	// Setup ADC
	// ref=AVCC
	ADMUX |= _BV(REFS0);
    6dd4:	8c e7       	ldi	r24, 0x7C	; 124
    6dd6:	90 e0       	ldi	r25, 0x00	; 0
    6dd8:	2c e7       	ldi	r18, 0x7C	; 124
    6dda:	30 e0       	ldi	r19, 0x00	; 0
    6ddc:	f9 01       	movw	r30, r18
    6dde:	20 81       	ld	r18, Z
    6de0:	20 64       	ori	r18, 0x40	; 64
    6de2:	fc 01       	movw	r30, r24
    6de4:	20 83       	st	Z, r18
	// Enable ADC
	ADCSRA |= _BV(ADEN);
    6de6:	8a e7       	ldi	r24, 0x7A	; 122
    6de8:	90 e0       	ldi	r25, 0x00	; 0
    6dea:	2a e7       	ldi	r18, 0x7A	; 122
    6dec:	30 e0       	ldi	r19, 0x00	; 0
    6dee:	f9 01       	movw	r30, r18
    6df0:	20 81       	ld	r18, Z
    6df2:	20 68       	ori	r18, 0x80	; 128
    6df4:	fc 01       	movw	r30, r24
    6df6:	20 83       	st	Z, r18
	// Enable ADC interrupt
	ADCSRA |= _BV(ADIE);
    6df8:	8a e7       	ldi	r24, 0x7A	; 122
    6dfa:	90 e0       	ldi	r25, 0x00	; 0
    6dfc:	2a e7       	ldi	r18, 0x7A	; 122
    6dfe:	30 e0       	ldi	r19, 0x00	; 0
    6e00:	f9 01       	movw	r30, r18
    6e02:	20 81       	ld	r18, Z
    6e04:	28 60       	ori	r18, 0x08	; 8
    6e06:	fc 01       	movw	r30, r24
    6e08:	20 83       	st	Z, r18
	// Prescaler = 1/64 => 156250hZ
	ADCSRA |= _BV(ADPS2) | _BV(ADPS1);
    6e0a:	8a e7       	ldi	r24, 0x7A	; 122
    6e0c:	90 e0       	ldi	r25, 0x00	; 0
    6e0e:	2a e7       	ldi	r18, 0x7A	; 122
    6e10:	30 e0       	ldi	r19, 0x00	; 0
    6e12:	f9 01       	movw	r30, r18
    6e14:	20 81       	ld	r18, Z
    6e16:	26 60       	ori	r18, 0x06	; 6
    6e18:	fc 01       	movw	r30, r24
    6e1a:	20 83       	st	Z, r18
	// Disable digital pin inputs on PORTF
	DIDR0 = 0xFF;
    6e1c:	8e e7       	ldi	r24, 0x7E	; 126
    6e1e:	90 e0       	ldi	r25, 0x00	; 0
    6e20:	2f ef       	ldi	r18, 0xFF	; 255
    6e22:	fc 01       	movw	r30, r24
    6e24:	20 83       	st	Z, r18

	// Timer 3 setup to TOP = 100mS
	// Mode 4: CTC => TOP = OCR3A
	TCCR3B |= _BV(WGM32);
    6e26:	81 e9       	ldi	r24, 0x91	; 145
    6e28:	90 e0       	ldi	r25, 0x00	; 0
    6e2a:	21 e9       	ldi	r18, 0x91	; 145
    6e2c:	30 e0       	ldi	r19, 0x00	; 0
    6e2e:	f9 01       	movw	r30, r18
    6e30:	20 81       	ld	r18, Z
    6e32:	28 60       	ori	r18, 0x08	; 8
    6e34:	fc 01       	movw	r30, r24
    6e36:	20 83       	st	Z, r18
	// TOP = OCR3A = 15624 => 100 ms @ CLKio = 10Mhz and prescaler = 1/8
	OCR3A = 15624;
    6e38:	88 e9       	ldi	r24, 0x98	; 152
    6e3a:	90 e0       	ldi	r25, 0x00	; 0
    6e3c:	28 e0       	ldi	r18, 0x08	; 8
    6e3e:	3d e3       	ldi	r19, 0x3D	; 61
    6e40:	fc 01       	movw	r30, r24
    6e42:	31 83       	std	Z+1, r19	; 0x01
    6e44:	20 83       	st	Z, r18
	// Enable OCR3A match interrupt. int every 100ms
	TIMSK3 |= _BV(OCIE3A);
    6e46:	81 e7       	ldi	r24, 0x71	; 113
    6e48:	90 e0       	ldi	r25, 0x00	; 0
    6e4a:	21 e7       	ldi	r18, 0x71	; 113
    6e4c:	30 e0       	ldi	r19, 0x00	; 0
    6e4e:	f9 01       	movw	r30, r18
    6e50:	20 81       	ld	r18, Z
    6e52:	22 60       	ori	r18, 0x02	; 2
    6e54:	fc 01       	movw	r30, r24
    6e56:	20 83       	st	Z, r18
	// reset timer reg
	TCNT3 = 0;
    6e58:	84 e9       	ldi	r24, 0x94	; 148
    6e5a:	90 e0       	ldi	r25, 0x00	; 0
    6e5c:	fc 01       	movw	r30, r24
    6e5e:	11 82       	std	Z+1, r1	; 0x01
    6e60:	10 82       	st	Z, r1
	// Prescaler = 1/64 => 100mS @ CLKio = 10Mhz and start timer 3
	TCCR3B |= _BV(CS31) | _BV(CS30);
    6e62:	81 e9       	ldi	r24, 0x91	; 145
    6e64:	90 e0       	ldi	r25, 0x00	; 0
    6e66:	21 e9       	ldi	r18, 0x91	; 145
    6e68:	30 e0       	ldi	r19, 0x00	; 0
    6e6a:	f9 01       	movw	r30, r18
    6e6c:	20 81       	ld	r18, Z
    6e6e:	23 60       	ori	r18, 0x03	; 3
    6e70:	fc 01       	movw	r30, r24
    6e72:	20 83       	st	Z, r18

	// PWM setup for motor control
	// Timer 1 setup to fast PWM for controlling H-Bridge 1/Motor 0 and half of H-Bridge 2/Motor 1
	// setup to output OC1A/PB5, OC1B/PB6 and OC1C/PB7 pins to output
	DDRB |= _BV(DDB5) | _BV(DDB6) | _BV(DDB7);
    6e74:	84 e2       	ldi	r24, 0x24	; 36
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	24 e2       	ldi	r18, 0x24	; 36
    6e7a:	30 e0       	ldi	r19, 0x00	; 0
    6e7c:	f9 01       	movw	r30, r18
    6e7e:	20 81       	ld	r18, Z
    6e80:	20 6e       	ori	r18, 0xE0	; 224
    6e82:	fc 01       	movw	r30, r24
    6e84:	20 83       	st	Z, r18
	// PB5 = PB6 = PB7 to 0 to be prepared for brake condition
	PORTB &= ~(_BV(PB5) | _BV(PB6) | _BV(PB7));
    6e86:	85 e2       	ldi	r24, 0x25	; 37
    6e88:	90 e0       	ldi	r25, 0x00	; 0
    6e8a:	25 e2       	ldi	r18, 0x25	; 37
    6e8c:	30 e0       	ldi	r19, 0x00	; 0
    6e8e:	f9 01       	movw	r30, r18
    6e90:	20 81       	ld	r18, Z
    6e92:	2f 71       	andi	r18, 0x1F	; 31
    6e94:	fc 01       	movw	r30, r24
    6e96:	20 83       	st	Z, r18
	// Mode 5: Fast PWM 8-bit, TOP = 0xFF
	TCCR1A |= _BV(WGM10);
    6e98:	80 e8       	ldi	r24, 0x80	; 128
    6e9a:	90 e0       	ldi	r25, 0x00	; 0
    6e9c:	20 e8       	ldi	r18, 0x80	; 128
    6e9e:	30 e0       	ldi	r19, 0x00	; 0
    6ea0:	f9 01       	movw	r30, r18
    6ea2:	20 81       	ld	r18, Z
    6ea4:	21 60       	ori	r18, 0x01	; 1
    6ea6:	fc 01       	movw	r30, r24
    6ea8:	20 83       	st	Z, r18
	TCCR1B |= _BV(WGM12);
    6eaa:	81 e8       	ldi	r24, 0x81	; 129
    6eac:	90 e0       	ldi	r25, 0x00	; 0
    6eae:	21 e8       	ldi	r18, 0x81	; 129
    6eb0:	30 e0       	ldi	r19, 0x00	; 0
    6eb2:	f9 01       	movw	r30, r18
    6eb4:	20 81       	ld	r18, Z
    6eb6:	28 60       	ori	r18, 0x08	; 8
    6eb8:	fc 01       	movw	r30, r24
    6eba:	20 83       	st	Z, r18
	// Compare output mode: Set OC1A on BOTTOM and clear OC1A, OC1B, OC1C on compare match
	TCCR1A |= _BV(COM1A1) | _BV(COM1B1) | _BV(COM1C1);
    6ebc:	80 e8       	ldi	r24, 0x80	; 128
    6ebe:	90 e0       	ldi	r25, 0x00	; 0
    6ec0:	20 e8       	ldi	r18, 0x80	; 128
    6ec2:	30 e0       	ldi	r19, 0x00	; 0
    6ec4:	f9 01       	movw	r30, r18
    6ec6:	20 81       	ld	r18, Z
    6ec8:	28 6a       	ori	r18, 0xA8	; 168
    6eca:	fc 01       	movw	r30, r24
    6ecc:	20 83       	st	Z, r18
	// set H-Bridge inputs to tri-state output => Motor free run
	OCR1A = OCR1B = OCR1C = 0xff;
    6ece:	48 e8       	ldi	r20, 0x88	; 136
    6ed0:	50 e0       	ldi	r21, 0x00	; 0
    6ed2:	8a e8       	ldi	r24, 0x8A	; 138
    6ed4:	90 e0       	ldi	r25, 0x00	; 0
    6ed6:	2c e8       	ldi	r18, 0x8C	; 140
    6ed8:	30 e0       	ldi	r19, 0x00	; 0
    6eda:	6f ef       	ldi	r22, 0xFF	; 255
    6edc:	70 e0       	ldi	r23, 0x00	; 0
    6ede:	f9 01       	movw	r30, r18
    6ee0:	71 83       	std	Z+1, r23	; 0x01
    6ee2:	60 83       	st	Z, r22
    6ee4:	f9 01       	movw	r30, r18
    6ee6:	20 81       	ld	r18, Z
    6ee8:	31 81       	ldd	r19, Z+1	; 0x01
    6eea:	fc 01       	movw	r30, r24
    6eec:	31 83       	std	Z+1, r19	; 0x01
    6eee:	20 83       	st	Z, r18
    6ef0:	fc 01       	movw	r30, r24
    6ef2:	80 81       	ld	r24, Z
    6ef4:	91 81       	ldd	r25, Z+1	; 0x01
    6ef6:	fa 01       	movw	r30, r20
    6ef8:	91 83       	std	Z+1, r25	; 0x01
    6efa:	80 83       	st	Z, r24
	// Prescaler 1/1 and start timer => PWM Freq = 39,216 khz @ CLKio = 10Mhz
	TCCR1B |= _BV(CS10);
    6efc:	81 e8       	ldi	r24, 0x81	; 129
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	21 e8       	ldi	r18, 0x81	; 129
    6f02:	30 e0       	ldi	r19, 0x00	; 0
    6f04:	f9 01       	movw	r30, r18
    6f06:	20 81       	ld	r18, Z
    6f08:	21 60       	ori	r18, 0x01	; 1
    6f0a:	fc 01       	movw	r30, r24
    6f0c:	20 83       	st	Z, r18

	// Timer 4 setup to fast PWM for controlling half of H-Bridge 2/Motor 1 and H-Bridge 3/Motor 2
	// setup to output OC4A/PH3, OC4B/PH4 and OC4C/PH5 pins to output
	DDRH |= _BV(DDH3) | _BV(DDH4) | _BV(DDH5);
    6f0e:	81 e0       	ldi	r24, 0x01	; 1
    6f10:	91 e0       	ldi	r25, 0x01	; 1
    6f12:	21 e0       	ldi	r18, 0x01	; 1
    6f14:	31 e0       	ldi	r19, 0x01	; 1
    6f16:	f9 01       	movw	r30, r18
    6f18:	20 81       	ld	r18, Z
    6f1a:	28 63       	ori	r18, 0x38	; 56
    6f1c:	fc 01       	movw	r30, r24
    6f1e:	20 83       	st	Z, r18
	// PH3, PH4 and PH5 to 0 to be prepared for brake condition
	PORTH &= ~(_BV(PH3) | _BV(PH4) | _BV(PH5));
    6f20:	82 e0       	ldi	r24, 0x02	; 2
    6f22:	91 e0       	ldi	r25, 0x01	; 1
    6f24:	22 e0       	ldi	r18, 0x02	; 2
    6f26:	31 e0       	ldi	r19, 0x01	; 1
    6f28:	f9 01       	movw	r30, r18
    6f2a:	20 81       	ld	r18, Z
    6f2c:	27 7c       	andi	r18, 0xC7	; 199
    6f2e:	fc 01       	movw	r30, r24
    6f30:	20 83       	st	Z, r18
	// Mode 5: Fast PWM 8-bit, TOP = 0xFF
	TCCR4A |= _BV(WGM40);
    6f32:	80 ea       	ldi	r24, 0xA0	; 160
    6f34:	90 e0       	ldi	r25, 0x00	; 0
    6f36:	20 ea       	ldi	r18, 0xA0	; 160
    6f38:	30 e0       	ldi	r19, 0x00	; 0
    6f3a:	f9 01       	movw	r30, r18
    6f3c:	20 81       	ld	r18, Z
    6f3e:	21 60       	ori	r18, 0x01	; 1
    6f40:	fc 01       	movw	r30, r24
    6f42:	20 83       	st	Z, r18
	TCCR4B |= _BV(WGM42);
    6f44:	81 ea       	ldi	r24, 0xA1	; 161
    6f46:	90 e0       	ldi	r25, 0x00	; 0
    6f48:	21 ea       	ldi	r18, 0xA1	; 161
    6f4a:	30 e0       	ldi	r19, 0x00	; 0
    6f4c:	f9 01       	movw	r30, r18
    6f4e:	20 81       	ld	r18, Z
    6f50:	28 60       	ori	r18, 0x08	; 8
    6f52:	fc 01       	movw	r30, r24
    6f54:	20 83       	st	Z, r18
	// Compare output mode: Set OCx on BOTTOM and clear OC1C, OC4A, O41B,  on compare match
	TCCR4A |= _BV(COM4A1) | _BV(COM4B1) | _BV(COM4C1);
    6f56:	80 ea       	ldi	r24, 0xA0	; 160
    6f58:	90 e0       	ldi	r25, 0x00	; 0
    6f5a:	20 ea       	ldi	r18, 0xA0	; 160
    6f5c:	30 e0       	ldi	r19, 0x00	; 0
    6f5e:	f9 01       	movw	r30, r18
    6f60:	20 81       	ld	r18, Z
    6f62:	28 6a       	ori	r18, 0xA8	; 168
    6f64:	fc 01       	movw	r30, r24
    6f66:	20 83       	st	Z, r18
	// set H-Bridge inputs to tri-state output => Motor free run
	OCR4A = OCR4B = OCR4C = 0xff;
    6f68:	48 ea       	ldi	r20, 0xA8	; 168
    6f6a:	50 e0       	ldi	r21, 0x00	; 0
    6f6c:	8a ea       	ldi	r24, 0xAA	; 170
    6f6e:	90 e0       	ldi	r25, 0x00	; 0
    6f70:	2c ea       	ldi	r18, 0xAC	; 172
    6f72:	30 e0       	ldi	r19, 0x00	; 0
    6f74:	6f ef       	ldi	r22, 0xFF	; 255
    6f76:	70 e0       	ldi	r23, 0x00	; 0
    6f78:	f9 01       	movw	r30, r18
    6f7a:	71 83       	std	Z+1, r23	; 0x01
    6f7c:	60 83       	st	Z, r22
    6f7e:	f9 01       	movw	r30, r18
    6f80:	20 81       	ld	r18, Z
    6f82:	31 81       	ldd	r19, Z+1	; 0x01
    6f84:	fc 01       	movw	r30, r24
    6f86:	31 83       	std	Z+1, r19	; 0x01
    6f88:	20 83       	st	Z, r18
    6f8a:	fc 01       	movw	r30, r24
    6f8c:	80 81       	ld	r24, Z
    6f8e:	91 81       	ldd	r25, Z+1	; 0x01
    6f90:	fa 01       	movw	r30, r20
    6f92:	91 83       	std	Z+1, r25	; 0x01
    6f94:	80 83       	st	Z, r24
	// Prescaler 1/1 and start timer => PWM Freq = 39,216 khz @ CLKio = 10Mhz
	TCCR4B |= _BV(CS40);
    6f96:	81 ea       	ldi	r24, 0xA1	; 161
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	21 ea       	ldi	r18, 0xA1	; 161
    6f9c:	30 e0       	ldi	r19, 0x00	; 0
    6f9e:	f9 01       	movw	r30, r18
    6fa0:	20 81       	ld	r18, Z
    6fa2:	21 60       	ori	r18, 0x01	; 1
    6fa4:	fc 01       	movw	r30, r24
    6fa6:	20 83       	st	Z, r18

	// Timer 5 setup to fast PWM for controlling H-Bridge 4/Motor 3
	// setup to output OC5A/PL3 and OC5B/PL4 pins to output
	DDRL |= _BV(DDL3) | _BV(DDL4);
    6fa8:	8a e0       	ldi	r24, 0x0A	; 10
    6faa:	91 e0       	ldi	r25, 0x01	; 1
    6fac:	2a e0       	ldi	r18, 0x0A	; 10
    6fae:	31 e0       	ldi	r19, 0x01	; 1
    6fb0:	f9 01       	movw	r30, r18
    6fb2:	20 81       	ld	r18, Z
    6fb4:	28 61       	ori	r18, 0x18	; 24
    6fb6:	fc 01       	movw	r30, r24
    6fb8:	20 83       	st	Z, r18
	// PL3 and PL4 to 0 to be prepared for brake condition
	PORTL &= ~(_BV(PL3) | _BV(PL4));
    6fba:	8b e0       	ldi	r24, 0x0B	; 11
    6fbc:	91 e0       	ldi	r25, 0x01	; 1
    6fbe:	2b e0       	ldi	r18, 0x0B	; 11
    6fc0:	31 e0       	ldi	r19, 0x01	; 1
    6fc2:	f9 01       	movw	r30, r18
    6fc4:	20 81       	ld	r18, Z
    6fc6:	27 7e       	andi	r18, 0xE7	; 231
    6fc8:	fc 01       	movw	r30, r24
    6fca:	20 83       	st	Z, r18
	// Mode 5: Fast PWM 8-bit, TOP = 0xFF
	TCCR5A |= _BV(WGM50);
    6fcc:	80 e2       	ldi	r24, 0x20	; 32
    6fce:	91 e0       	ldi	r25, 0x01	; 1
    6fd0:	20 e2       	ldi	r18, 0x20	; 32
    6fd2:	31 e0       	ldi	r19, 0x01	; 1
    6fd4:	f9 01       	movw	r30, r18
    6fd6:	20 81       	ld	r18, Z
    6fd8:	21 60       	ori	r18, 0x01	; 1
    6fda:	fc 01       	movw	r30, r24
    6fdc:	20 83       	st	Z, r18
	TCCR5B |= _BV(WGM52);
    6fde:	81 e2       	ldi	r24, 0x21	; 33
    6fe0:	91 e0       	ldi	r25, 0x01	; 1
    6fe2:	21 e2       	ldi	r18, 0x21	; 33
    6fe4:	31 e0       	ldi	r19, 0x01	; 1
    6fe6:	f9 01       	movw	r30, r18
    6fe8:	20 81       	ld	r18, Z
    6fea:	28 60       	ori	r18, 0x08	; 8
    6fec:	fc 01       	movw	r30, r24
    6fee:	20 83       	st	Z, r18
	// Compare output mode: Set OCx on BOTTOM and clear OC5A, OC5B on compare match
	TCCR5A |= _BV(COM5A1) | _BV(COM5B1);
    6ff0:	80 e2       	ldi	r24, 0x20	; 32
    6ff2:	91 e0       	ldi	r25, 0x01	; 1
    6ff4:	20 e2       	ldi	r18, 0x20	; 32
    6ff6:	31 e0       	ldi	r19, 0x01	; 1
    6ff8:	f9 01       	movw	r30, r18
    6ffa:	20 81       	ld	r18, Z
    6ffc:	20 6a       	ori	r18, 0xA0	; 160
    6ffe:	fc 01       	movw	r30, r24
    7000:	20 83       	st	Z, r18
	// set H-Bridge inputs to tri-state output => Motor free run
	OCR5A = OCR5B = 0xff;
    7002:	28 e2       	ldi	r18, 0x28	; 40
    7004:	31 e0       	ldi	r19, 0x01	; 1
    7006:	8a e2       	ldi	r24, 0x2A	; 42
    7008:	91 e0       	ldi	r25, 0x01	; 1
    700a:	4f ef       	ldi	r20, 0xFF	; 255
    700c:	50 e0       	ldi	r21, 0x00	; 0
    700e:	fc 01       	movw	r30, r24
    7010:	51 83       	std	Z+1, r21	; 0x01
    7012:	40 83       	st	Z, r20
    7014:	fc 01       	movw	r30, r24
    7016:	80 81       	ld	r24, Z
    7018:	91 81       	ldd	r25, Z+1	; 0x01
    701a:	f9 01       	movw	r30, r18
    701c:	91 83       	std	Z+1, r25	; 0x01
    701e:	80 83       	st	Z, r24
	// Prescaler 1/1 and start timer => PWM Freq = 39,216 khz @ CLKio = 10Mhz
	TCCR5B |= _BV(CS50);
    7020:	81 e2       	ldi	r24, 0x21	; 33
    7022:	91 e0       	ldi	r25, 0x01	; 1
    7024:	21 e2       	ldi	r18, 0x21	; 33
    7026:	31 e0       	ldi	r19, 0x01	; 1
    7028:	f9 01       	movw	r30, r18
    702a:	20 81       	ld	r18, Z
    702c:	21 60       	ori	r18, 0x01	; 1
    702e:	fc 01       	movw	r30, r24
    7030:	20 83       	st	Z, r18
}
    7032:	cf 91       	pop	r28
    7034:	df 91       	pop	r29
    7036:	08 95       	ret

00007038 <touch_sensor>:
 *	Read the actual value from the touch sensor connected to the specified sensor input.
 *	\param sensor_no specifies the sensor input on the interface board [0..7].
 *	\return the 10-bit value read on the sensor, or -1 if sensor_no out of range [0..7].
 *********************************************************************************************************
 */
INT16S touch_sensor(INT8U sensor_no) {
    7038:	df 93       	push	r29
    703a:	cf 93       	push	r28
    703c:	0f 92       	push	r0
    703e:	cd b7       	in	r28, 0x3d	; 61
    7040:	de b7       	in	r29, 0x3e	; 62
    7042:	89 83       	std	Y+1, r24	; 0x01
	if (sensor_no < 8) {
    7044:	89 81       	ldd	r24, Y+1	; 0x01
    7046:	88 30       	cpi	r24, 0x08	; 8
    7048:	58 f4       	brcc	.+22     	; 0x7060 <touch_sensor+0x28>
		return sensor_result[sensor_no];
    704a:	89 81       	ldd	r24, Y+1	; 0x01
    704c:	88 2f       	mov	r24, r24
    704e:	90 e0       	ldi	r25, 0x00	; 0
    7050:	88 0f       	add	r24, r24
    7052:	99 1f       	adc	r25, r25
    7054:	8d 52       	subi	r24, 0x2D	; 45
    7056:	9b 4f       	sbci	r25, 0xFB	; 251
    7058:	fc 01       	movw	r30, r24
    705a:	80 81       	ld	r24, Z
    705c:	91 81       	ldd	r25, Z+1	; 0x01
    705e:	02 c0       	rjmp	.+4      	; 0x7064 <touch_sensor+0x2c>
	} else {
		return -1;
    7060:	8f ef       	ldi	r24, 0xFF	; 255
    7062:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    7064:	0f 90       	pop	r0
    7066:	cf 91       	pop	r28
    7068:	df 91       	pop	r29
    706a:	08 95       	ret

0000706c <rotation_sensor>:
 *	Read the actual value from the rotation sensor connected to the specified sensor input.
 *	\param sensor_no specifies the sensor input on the interface board [0..7].
 *	\return the 10-bit value read on the sensor, or -1 if sensor_no out of range [0..7].
 *********************************************************************************************************
 */
INT16S rotation_sensor(INT8U sensor_no) {
    706c:	df 93       	push	r29
    706e:	cf 93       	push	r28
    7070:	0f 92       	push	r0
    7072:	cd b7       	in	r28, 0x3d	; 61
    7074:	de b7       	in	r29, 0x3e	; 62
    7076:	89 83       	std	Y+1, r24	; 0x01
	if (sensor_no < 8) {
    7078:	89 81       	ldd	r24, Y+1	; 0x01
    707a:	88 30       	cpi	r24, 0x08	; 8
    707c:	58 f4       	brcc	.+22     	; 0x7094 <rotation_sensor+0x28>
		return sensor_result[sensor_no];
    707e:	89 81       	ldd	r24, Y+1	; 0x01
    7080:	88 2f       	mov	r24, r24
    7082:	90 e0       	ldi	r25, 0x00	; 0
    7084:	88 0f       	add	r24, r24
    7086:	99 1f       	adc	r25, r25
    7088:	8d 52       	subi	r24, 0x2D	; 45
    708a:	9b 4f       	sbci	r25, 0xFB	; 251
    708c:	fc 01       	movw	r30, r24
    708e:	80 81       	ld	r24, Z
    7090:	91 81       	ldd	r25, Z+1	; 0x01
    7092:	02 c0       	rjmp	.+4      	; 0x7098 <rotation_sensor+0x2c>
	} else {
		return -1;
    7094:	8f ef       	ldi	r24, 0xFF	; 255
    7096:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    7098:	0f 90       	pop	r0
    709a:	cf 91       	pop	r28
    709c:	df 91       	pop	r29
    709e:	08 95       	ret

000070a0 <light_sensor>:
 *	Read the actual value from the light sensor connected to the specified sensor input.
 *	\param sensor_no specifies the sensor input on the interface board [0..7].
 *	\return the 10-bit value read on the sensor, or -1 if sensor_no out of range [0..7].
 *********************************************************************************************************
 */
INT16S light_sensor(INT8U sensor_no) {
    70a0:	df 93       	push	r29
    70a2:	cf 93       	push	r28
    70a4:	0f 92       	push	r0
    70a6:	cd b7       	in	r28, 0x3d	; 61
    70a8:	de b7       	in	r29, 0x3e	; 62
    70aa:	89 83       	std	Y+1, r24	; 0x01
	if (sensor_no < 8) {
    70ac:	89 81       	ldd	r24, Y+1	; 0x01
    70ae:	88 30       	cpi	r24, 0x08	; 8
    70b0:	58 f4       	brcc	.+22     	; 0x70c8 <light_sensor+0x28>
		return sensor_result[sensor_no];
    70b2:	89 81       	ldd	r24, Y+1	; 0x01
    70b4:	88 2f       	mov	r24, r24
    70b6:	90 e0       	ldi	r25, 0x00	; 0
    70b8:	88 0f       	add	r24, r24
    70ba:	99 1f       	adc	r25, r25
    70bc:	8d 52       	subi	r24, 0x2D	; 45
    70be:	9b 4f       	sbci	r25, 0xFB	; 251
    70c0:	fc 01       	movw	r30, r24
    70c2:	80 81       	ld	r24, Z
    70c4:	91 81       	ldd	r25, Z+1	; 0x01
    70c6:	02 c0       	rjmp	.+4      	; 0x70cc <light_sensor+0x2c>
	} else {
		return -1;
    70c8:	8f ef       	ldi	r24, 0xFF	; 255
    70ca:	9f ef       	ldi	r25, 0xFF	; 255
	}
}
    70cc:	0f 90       	pop	r0
    70ce:	cf 91       	pop	r28
    70d0:	df 91       	pop	r29
    70d2:	08 95       	ret

000070d4 <motor_speed>:
 *   0 will release the motor/free run. If the motor is braked the brake will automatically be released
 *   when this function is called.
 *	\see brake_motor
 *********************************************************************************************************
 */
void motor_speed(INT8U motor_no, INT8S speed) {
    70d4:	df 93       	push	r29
    70d6:	cf 93       	push	r28
    70d8:	00 d0       	rcall	.+0      	; 0x70da <motor_speed+0x6>
    70da:	0f 92       	push	r0
    70dc:	cd b7       	in	r28, 0x3d	; 61
    70de:	de b7       	in	r29, 0x3e	; 62
    70e0:	8b 83       	std	Y+3, r24	; 0x03
    70e2:	6c 83       	std	Y+4, r22	; 0x04
	if ((speed >= -100) && (speed <= 100)) {
    70e4:	8c 81       	ldd	r24, Y+4	; 0x04
    70e6:	8c 39       	cpi	r24, 0x9C	; 156
    70e8:	0c f4       	brge	.+2      	; 0x70ec <motor_speed+0x18>
    70ea:	bb c1       	rjmp	.+886    	; 0x7462 <motor_speed+0x38e>
    70ec:	8c 81       	ldd	r24, Y+4	; 0x04
    70ee:	85 36       	cpi	r24, 0x65	; 101
    70f0:	0c f0       	brlt	.+2      	; 0x70f4 <motor_speed+0x20>
    70f2:	b7 c1       	rjmp	.+878    	; 0x7462 <motor_speed+0x38e>
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
		OS_CPU_SR cpu_sr = 0;
    70f4:	1a 82       	std	Y+2, r1	; 0x02
#endif

		OS_ENTER_CRITICAL();
    70f6:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    70fa:	8a 83       	std	Y+2, r24	; 0x02

		INT8U ocrx_value = 255- (abs(speed) * 255 / 100);
    70fc:	8c 81       	ldd	r24, Y+4	; 0x04
    70fe:	99 27       	eor	r25, r25
    7100:	87 fd       	sbrc	r24, 7
    7102:	90 95       	com	r25
    7104:	99 23       	and	r25, r25
    7106:	1c f4       	brge	.+6      	; 0x710e <motor_speed+0x3a>
    7108:	90 95       	com	r25
    710a:	81 95       	neg	r24
    710c:	9f 4f       	sbci	r25, 0xFF	; 255
    710e:	9c 01       	movw	r18, r24
    7110:	a9 01       	movw	r20, r18
    7112:	44 0f       	add	r20, r20
    7114:	55 1f       	adc	r21, r21
    7116:	9a 01       	movw	r18, r20
    7118:	36 95       	lsr	r19
    711a:	32 2f       	mov	r19, r18
    711c:	22 27       	eor	r18, r18
    711e:	37 95       	ror	r19
    7120:	27 95       	ror	r18
    7122:	24 1b       	sub	r18, r20
    7124:	35 0b       	sbc	r19, r21
    7126:	82 0f       	add	r24, r18
    7128:	93 1f       	adc	r25, r19
    712a:	24 e6       	ldi	r18, 0x64	; 100
    712c:	30 e0       	ldi	r19, 0x00	; 0
    712e:	b9 01       	movw	r22, r18
    7130:	0e 94 72 40 	call	0x80e4	; 0x80e4 <__divmodhi4>
    7134:	cb 01       	movw	r24, r22
    7136:	80 95       	com	r24
    7138:	89 83       	std	Y+1, r24	; 0x01

		if (motor_braked[motor_no]) {
    713a:	8b 81       	ldd	r24, Y+3	; 0x03
    713c:	88 2f       	mov	r24, r24
    713e:	90 e0       	ldi	r25, 0x00	; 0
    7140:	8d 51       	subi	r24, 0x1D	; 29
    7142:	9b 4f       	sbci	r25, 0xFB	; 251
    7144:	fc 01       	movw	r30, r24
    7146:	80 81       	ld	r24, Z
    7148:	88 23       	and	r24, r24
    714a:	39 f0       	breq	.+14     	; 0x715a <motor_speed+0x86>
			motor_braked[motor_no] = 0;
    714c:	8b 81       	ldd	r24, Y+3	; 0x03
    714e:	88 2f       	mov	r24, r24
    7150:	90 e0       	ldi	r25, 0x00	; 0
    7152:	8d 51       	subi	r24, 0x1D	; 29
    7154:	9b 4f       	sbci	r25, 0xFB	; 251
    7156:	fc 01       	movw	r30, r24
    7158:	10 82       	st	Z, r1
		}

		switch (motor_no) {
    715a:	8b 81       	ldd	r24, Y+3	; 0x03
    715c:	88 2f       	mov	r24, r24
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	81 30       	cpi	r24, 0x01	; 1
    7162:	91 05       	cpc	r25, r1
    7164:	09 f4       	brne	.+2      	; 0x7168 <motor_speed+0x94>
    7166:	63 c0       	rjmp	.+198    	; 0x722e <motor_speed+0x15a>
    7168:	82 30       	cpi	r24, 0x02	; 2
    716a:	91 05       	cpc	r25, r1
    716c:	1c f4       	brge	.+6      	; 0x7174 <motor_speed+0xa0>
    716e:	00 97       	sbiw	r24, 0x00	; 0
    7170:	51 f0       	breq	.+20     	; 0x7186 <motor_speed+0xb2>
    7172:	74 c1       	rjmp	.+744    	; 0x745c <motor_speed+0x388>
    7174:	82 30       	cpi	r24, 0x02	; 2
    7176:	91 05       	cpc	r25, r1
    7178:	09 f4       	brne	.+2      	; 0x717c <motor_speed+0xa8>
    717a:	c8 c0       	rjmp	.+400    	; 0x730c <motor_speed+0x238>
    717c:	83 30       	cpi	r24, 0x03	; 3
    717e:	91 05       	cpc	r25, r1
    7180:	09 f4       	brne	.+2      	; 0x7184 <motor_speed+0xb0>
    7182:	18 c1       	rjmp	.+560    	; 0x73b4 <motor_speed+0x2e0>
    7184:	6b c1       	rjmp	.+726    	; 0x745c <motor_speed+0x388>
		case 0:
			if (speed > 0) {
    7186:	8c 81       	ldd	r24, Y+4	; 0x04
    7188:	18 16       	cp	r1, r24
    718a:	cc f4       	brge	.+50     	; 0x71be <motor_speed+0xea>
				// CW
				// New value in OCR1A register
				OCR1A = ocrx_value;
    718c:	88 e8       	ldi	r24, 0x88	; 136
    718e:	90 e0       	ldi	r25, 0x00	; 0
    7190:	29 81       	ldd	r18, Y+1	; 0x01
    7192:	22 2f       	mov	r18, r18
    7194:	30 e0       	ldi	r19, 0x00	; 0
    7196:	fc 01       	movw	r30, r24
    7198:	31 83       	std	Z+1, r19	; 0x01
    719a:	20 83       	st	Z, r18
				// Set OC1B high by setting OCR1B to TOP
				OCR1B = 0xFF;
    719c:	8a e8       	ldi	r24, 0x8A	; 138
    719e:	90 e0       	ldi	r25, 0x00	; 0
    71a0:	2f ef       	ldi	r18, 0xFF	; 255
    71a2:	30 e0       	ldi	r19, 0x00	; 0
    71a4:	fc 01       	movw	r30, r24
    71a6:	31 83       	std	Z+1, r19	; 0x01
    71a8:	20 83       	st	Z, r18
				//TCCR1A &= ~_BV(COM1B1);
				// set OC1A & OC1B to Clear on compare
				TCCR1A |= _BV(COM1A1) | _BV(COM1B1);
    71aa:	80 e8       	ldi	r24, 0x80	; 128
    71ac:	90 e0       	ldi	r25, 0x00	; 0
    71ae:	20 e8       	ldi	r18, 0x80	; 128
    71b0:	30 e0       	ldi	r19, 0x00	; 0
    71b2:	f9 01       	movw	r30, r18
    71b4:	20 81       	ld	r18, Z
    71b6:	20 6a       	ori	r18, 0xA0	; 160
    71b8:	fc 01       	movw	r30, r24
    71ba:	20 83       	st	Z, r18
    71bc:	34 c0       	rjmp	.+104    	; 0x7226 <motor_speed+0x152>
			} else if (speed == 0) {
    71be:	8c 81       	ldd	r24, Y+4	; 0x04
    71c0:	88 23       	and	r24, r24
    71c2:	c9 f4       	brne	.+50     	; 0x71f6 <motor_speed+0x122>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR1A = OCR1B = 0xFF;
    71c4:	28 e8       	ldi	r18, 0x88	; 136
    71c6:	30 e0       	ldi	r19, 0x00	; 0
    71c8:	8a e8       	ldi	r24, 0x8A	; 138
    71ca:	90 e0       	ldi	r25, 0x00	; 0
    71cc:	4f ef       	ldi	r20, 0xFF	; 255
    71ce:	50 e0       	ldi	r21, 0x00	; 0
    71d0:	fc 01       	movw	r30, r24
    71d2:	51 83       	std	Z+1, r21	; 0x01
    71d4:	40 83       	st	Z, r20
    71d6:	fc 01       	movw	r30, r24
    71d8:	80 81       	ld	r24, Z
    71da:	91 81       	ldd	r25, Z+1	; 0x01
    71dc:	f9 01       	movw	r30, r18
    71de:	91 83       	std	Z+1, r25	; 0x01
    71e0:	80 83       	st	Z, r24
				// Compare output mode: Set OC1A on BOTTOM and clear OC1A, OC1B on compare match
				TCCR1A |= _BV(COM1A1) | _BV(COM1B1);
    71e2:	80 e8       	ldi	r24, 0x80	; 128
    71e4:	90 e0       	ldi	r25, 0x00	; 0
    71e6:	20 e8       	ldi	r18, 0x80	; 128
    71e8:	30 e0       	ldi	r19, 0x00	; 0
    71ea:	f9 01       	movw	r30, r18
    71ec:	20 81       	ld	r18, Z
    71ee:	20 6a       	ori	r18, 0xA0	; 160
    71f0:	fc 01       	movw	r30, r24
    71f2:	20 83       	st	Z, r18
    71f4:	18 c0       	rjmp	.+48     	; 0x7226 <motor_speed+0x152>
			} else {
				// CCW
				// New value in OCR1B register
				OCR1B = ocrx_value;
    71f6:	8a e8       	ldi	r24, 0x8A	; 138
    71f8:	90 e0       	ldi	r25, 0x00	; 0
    71fa:	29 81       	ldd	r18, Y+1	; 0x01
    71fc:	22 2f       	mov	r18, r18
    71fe:	30 e0       	ldi	r19, 0x00	; 0
    7200:	fc 01       	movw	r30, r24
    7202:	31 83       	std	Z+1, r19	; 0x01
    7204:	20 83       	st	Z, r18
				// Set OC1A high by setting OCR1A to TOP
				OCR1A = 0xFF;
    7206:	88 e8       	ldi	r24, 0x88	; 136
    7208:	90 e0       	ldi	r25, 0x00	; 0
    720a:	2f ef       	ldi	r18, 0xFF	; 255
    720c:	30 e0       	ldi	r19, 0x00	; 0
    720e:	fc 01       	movw	r30, r24
    7210:	31 83       	std	Z+1, r19	; 0x01
    7212:	20 83       	st	Z, r18
				//TCCR1A &= ~_BV(COM1A1);
				// set OC1A & OC1B to Clear on compare
				TCCR1A |= _BV(COM1A1) | _BV(COM1B1);			}
    7214:	80 e8       	ldi	r24, 0x80	; 128
    7216:	90 e0       	ldi	r25, 0x00	; 0
    7218:	20 e8       	ldi	r18, 0x80	; 128
    721a:	30 e0       	ldi	r19, 0x00	; 0
    721c:	f9 01       	movw	r30, r18
    721e:	20 81       	ld	r18, Z
    7220:	20 6a       	ori	r18, 0xA0	; 160
    7222:	fc 01       	movw	r30, r24
    7224:	20 83       	st	Z, r18
			OS_EXIT_CRITICAL();
    7226:	8a 81       	ldd	r24, Y+2	; 0x02
    7228:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    722c:	1a c1       	rjmp	.+564    	; 0x7462 <motor_speed+0x38e>

		case 1:
			if (speed > 0) {
    722e:	8c 81       	ldd	r24, Y+4	; 0x04
    7230:	18 16       	cp	r1, r24
    7232:	14 f5       	brge	.+68     	; 0x7278 <motor_speed+0x1a4>
				// CW
				// New value in OCR1C register
				OCR1C = ocrx_value;
    7234:	8c e8       	ldi	r24, 0x8C	; 140
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	29 81       	ldd	r18, Y+1	; 0x01
    723a:	22 2f       	mov	r18, r18
    723c:	30 e0       	ldi	r19, 0x00	; 0
    723e:	fc 01       	movw	r30, r24
    7240:	31 83       	std	Z+1, r19	; 0x01
    7242:	20 83       	st	Z, r18
				// Set OC4A high by setting OCR4A to TOP
				OCR4A = 0xFF;
    7244:	88 ea       	ldi	r24, 0xA8	; 168
    7246:	90 e0       	ldi	r25, 0x00	; 0
    7248:	2f ef       	ldi	r18, 0xFF	; 255
    724a:	30 e0       	ldi	r19, 0x00	; 0
    724c:	fc 01       	movw	r30, r24
    724e:	31 83       	std	Z+1, r19	; 0x01
    7250:	20 83       	st	Z, r18
				// set OC1C & OC4A to Clear on compare
				TCCR1A |= _BV(COM1C1);
    7252:	80 e8       	ldi	r24, 0x80	; 128
    7254:	90 e0       	ldi	r25, 0x00	; 0
    7256:	20 e8       	ldi	r18, 0x80	; 128
    7258:	30 e0       	ldi	r19, 0x00	; 0
    725a:	f9 01       	movw	r30, r18
    725c:	20 81       	ld	r18, Z
    725e:	28 60       	ori	r18, 0x08	; 8
    7260:	fc 01       	movw	r30, r24
    7262:	20 83       	st	Z, r18
				TCCR4A |= _BV(COM4A1);
    7264:	80 ea       	ldi	r24, 0xA0	; 160
    7266:	90 e0       	ldi	r25, 0x00	; 0
    7268:	20 ea       	ldi	r18, 0xA0	; 160
    726a:	30 e0       	ldi	r19, 0x00	; 0
    726c:	f9 01       	movw	r30, r18
    726e:	20 81       	ld	r18, Z
    7270:	20 68       	ori	r18, 0x80	; 128
    7272:	fc 01       	movw	r30, r24
    7274:	20 83       	st	Z, r18
    7276:	46 c0       	rjmp	.+140    	; 0x7304 <motor_speed+0x230>
			} else if (speed == 0) {
    7278:	8c 81       	ldd	r24, Y+4	; 0x04
    727a:	88 23       	and	r24, r24
    727c:	11 f5       	brne	.+68     	; 0x72c2 <motor_speed+0x1ee>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR1C = OCR4A = 0xFF;
    727e:	2c e8       	ldi	r18, 0x8C	; 140
    7280:	30 e0       	ldi	r19, 0x00	; 0
    7282:	88 ea       	ldi	r24, 0xA8	; 168
    7284:	90 e0       	ldi	r25, 0x00	; 0
    7286:	4f ef       	ldi	r20, 0xFF	; 255
    7288:	50 e0       	ldi	r21, 0x00	; 0
    728a:	fc 01       	movw	r30, r24
    728c:	51 83       	std	Z+1, r21	; 0x01
    728e:	40 83       	st	Z, r20
    7290:	fc 01       	movw	r30, r24
    7292:	80 81       	ld	r24, Z
    7294:	91 81       	ldd	r25, Z+1	; 0x01
    7296:	f9 01       	movw	r30, r18
    7298:	91 83       	std	Z+1, r25	; 0x01
    729a:	80 83       	st	Z, r24
				// Compare output mode: Set OC1C on BOTTOM and clear OC1C, OC4A on compare match
				TCCR1A |= _BV(COM1C1);
    729c:	80 e8       	ldi	r24, 0x80	; 128
    729e:	90 e0       	ldi	r25, 0x00	; 0
    72a0:	20 e8       	ldi	r18, 0x80	; 128
    72a2:	30 e0       	ldi	r19, 0x00	; 0
    72a4:	f9 01       	movw	r30, r18
    72a6:	20 81       	ld	r18, Z
    72a8:	28 60       	ori	r18, 0x08	; 8
    72aa:	fc 01       	movw	r30, r24
    72ac:	20 83       	st	Z, r18
				TCCR4A |= _BV(COM4A1);
    72ae:	80 ea       	ldi	r24, 0xA0	; 160
    72b0:	90 e0       	ldi	r25, 0x00	; 0
    72b2:	20 ea       	ldi	r18, 0xA0	; 160
    72b4:	30 e0       	ldi	r19, 0x00	; 0
    72b6:	f9 01       	movw	r30, r18
    72b8:	20 81       	ld	r18, Z
    72ba:	20 68       	ori	r18, 0x80	; 128
    72bc:	fc 01       	movw	r30, r24
    72be:	20 83       	st	Z, r18
    72c0:	21 c0       	rjmp	.+66     	; 0x7304 <motor_speed+0x230>
			} else {
				// CCW
				// New value in OCR4A register
				OCR4A = ocrx_value;
    72c2:	88 ea       	ldi	r24, 0xA8	; 168
    72c4:	90 e0       	ldi	r25, 0x00	; 0
    72c6:	29 81       	ldd	r18, Y+1	; 0x01
    72c8:	22 2f       	mov	r18, r18
    72ca:	30 e0       	ldi	r19, 0x00	; 0
    72cc:	fc 01       	movw	r30, r24
    72ce:	31 83       	std	Z+1, r19	; 0x01
    72d0:	20 83       	st	Z, r18
				// Set OC1C high by setting OCR1C to TOP
				OCR1C = 0xFF;
    72d2:	8c e8       	ldi	r24, 0x8C	; 140
    72d4:	90 e0       	ldi	r25, 0x00	; 0
    72d6:	2f ef       	ldi	r18, 0xFF	; 255
    72d8:	30 e0       	ldi	r19, 0x00	; 0
    72da:	fc 01       	movw	r30, r24
    72dc:	31 83       	std	Z+1, r19	; 0x01
    72de:	20 83       	st	Z, r18
				// set OC1C & OC4A to Clear on compare
				TCCR1A |= _BV(COM1C1);
    72e0:	80 e8       	ldi	r24, 0x80	; 128
    72e2:	90 e0       	ldi	r25, 0x00	; 0
    72e4:	20 e8       	ldi	r18, 0x80	; 128
    72e6:	30 e0       	ldi	r19, 0x00	; 0
    72e8:	f9 01       	movw	r30, r18
    72ea:	20 81       	ld	r18, Z
    72ec:	28 60       	ori	r18, 0x08	; 8
    72ee:	fc 01       	movw	r30, r24
    72f0:	20 83       	st	Z, r18
				TCCR4A |= _BV(COM4A1);
    72f2:	80 ea       	ldi	r24, 0xA0	; 160
    72f4:	90 e0       	ldi	r25, 0x00	; 0
    72f6:	20 ea       	ldi	r18, 0xA0	; 160
    72f8:	30 e0       	ldi	r19, 0x00	; 0
    72fa:	f9 01       	movw	r30, r18
    72fc:	20 81       	ld	r18, Z
    72fe:	20 68       	ori	r18, 0x80	; 128
    7300:	fc 01       	movw	r30, r24
    7302:	20 83       	st	Z, r18
			}
			OS_EXIT_CRITICAL();
    7304:	8a 81       	ldd	r24, Y+2	; 0x02
    7306:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    730a:	ab c0       	rjmp	.+342    	; 0x7462 <motor_speed+0x38e>

		case 2:
			if (speed > 0) {
    730c:	8c 81       	ldd	r24, Y+4	; 0x04
    730e:	18 16       	cp	r1, r24
    7310:	cc f4       	brge	.+50     	; 0x7344 <motor_speed+0x270>
				// CW
				// New value in OCR4B register
				OCR4B = ocrx_value;
    7312:	8a ea       	ldi	r24, 0xAA	; 170
    7314:	90 e0       	ldi	r25, 0x00	; 0
    7316:	29 81       	ldd	r18, Y+1	; 0x01
    7318:	22 2f       	mov	r18, r18
    731a:	30 e0       	ldi	r19, 0x00	; 0
    731c:	fc 01       	movw	r30, r24
    731e:	31 83       	std	Z+1, r19	; 0x01
    7320:	20 83       	st	Z, r18
				// Set OC4C high by setting OCR4C to TOP
				OCR4C = 0xFF;
    7322:	8c ea       	ldi	r24, 0xAC	; 172
    7324:	90 e0       	ldi	r25, 0x00	; 0
    7326:	2f ef       	ldi	r18, 0xFF	; 255
    7328:	30 e0       	ldi	r19, 0x00	; 0
    732a:	fc 01       	movw	r30, r24
    732c:	31 83       	std	Z+1, r19	; 0x01
    732e:	20 83       	st	Z, r18
				// set OC4B & OC4C to Clear on compare
				TCCR4A |= _BV(COM4B1) | _BV(COM4C1);
    7330:	80 ea       	ldi	r24, 0xA0	; 160
    7332:	90 e0       	ldi	r25, 0x00	; 0
    7334:	20 ea       	ldi	r18, 0xA0	; 160
    7336:	30 e0       	ldi	r19, 0x00	; 0
    7338:	f9 01       	movw	r30, r18
    733a:	20 81       	ld	r18, Z
    733c:	28 62       	ori	r18, 0x28	; 40
    733e:	fc 01       	movw	r30, r24
    7340:	20 83       	st	Z, r18
    7342:	34 c0       	rjmp	.+104    	; 0x73ac <motor_speed+0x2d8>
			} else if (speed == 0) {
    7344:	8c 81       	ldd	r24, Y+4	; 0x04
    7346:	88 23       	and	r24, r24
    7348:	c9 f4       	brne	.+50     	; 0x737c <motor_speed+0x2a8>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR4B = OCR4C = 0xFF;
    734a:	2a ea       	ldi	r18, 0xAA	; 170
    734c:	30 e0       	ldi	r19, 0x00	; 0
    734e:	8c ea       	ldi	r24, 0xAC	; 172
    7350:	90 e0       	ldi	r25, 0x00	; 0
    7352:	4f ef       	ldi	r20, 0xFF	; 255
    7354:	50 e0       	ldi	r21, 0x00	; 0
    7356:	fc 01       	movw	r30, r24
    7358:	51 83       	std	Z+1, r21	; 0x01
    735a:	40 83       	st	Z, r20
    735c:	fc 01       	movw	r30, r24
    735e:	80 81       	ld	r24, Z
    7360:	91 81       	ldd	r25, Z+1	; 0x01
    7362:	f9 01       	movw	r30, r18
    7364:	91 83       	std	Z+1, r25	; 0x01
    7366:	80 83       	st	Z, r24
				// Compare output mode: Set OC4B, OC4C on BOTTOM and clear OC4B, OC4C on compare match
				TCCR4A |= _BV(COM4B1) | _BV(COM4C1);
    7368:	80 ea       	ldi	r24, 0xA0	; 160
    736a:	90 e0       	ldi	r25, 0x00	; 0
    736c:	20 ea       	ldi	r18, 0xA0	; 160
    736e:	30 e0       	ldi	r19, 0x00	; 0
    7370:	f9 01       	movw	r30, r18
    7372:	20 81       	ld	r18, Z
    7374:	28 62       	ori	r18, 0x28	; 40
    7376:	fc 01       	movw	r30, r24
    7378:	20 83       	st	Z, r18
    737a:	18 c0       	rjmp	.+48     	; 0x73ac <motor_speed+0x2d8>
			} else {
				// CCW
				// New value in OCR4C register
				OCR4C = ocrx_value;
    737c:	8c ea       	ldi	r24, 0xAC	; 172
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	29 81       	ldd	r18, Y+1	; 0x01
    7382:	22 2f       	mov	r18, r18
    7384:	30 e0       	ldi	r19, 0x00	; 0
    7386:	fc 01       	movw	r30, r24
    7388:	31 83       	std	Z+1, r19	; 0x01
    738a:	20 83       	st	Z, r18
				// Set OC4B high by setting OCR4B to TOP
				OCR4B = 0xFF;
    738c:	8a ea       	ldi	r24, 0xAA	; 170
    738e:	90 e0       	ldi	r25, 0x00	; 0
    7390:	2f ef       	ldi	r18, 0xFF	; 255
    7392:	30 e0       	ldi	r19, 0x00	; 0
    7394:	fc 01       	movw	r30, r24
    7396:	31 83       	std	Z+1, r19	; 0x01
    7398:	20 83       	st	Z, r18
				// set OC4B & OC4C to Clear on compare
				TCCR4A |= _BV(COM4B1) | _BV(COM4C1);
    739a:	80 ea       	ldi	r24, 0xA0	; 160
    739c:	90 e0       	ldi	r25, 0x00	; 0
    739e:	20 ea       	ldi	r18, 0xA0	; 160
    73a0:	30 e0       	ldi	r19, 0x00	; 0
    73a2:	f9 01       	movw	r30, r18
    73a4:	20 81       	ld	r18, Z
    73a6:	28 62       	ori	r18, 0x28	; 40
    73a8:	fc 01       	movw	r30, r24
    73aa:	20 83       	st	Z, r18
			}
			OS_EXIT_CRITICAL();
    73ac:	8a 81       	ldd	r24, Y+2	; 0x02
    73ae:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    73b2:	57 c0       	rjmp	.+174    	; 0x7462 <motor_speed+0x38e>

		case 3:
			if (speed > 0) {
    73b4:	8c 81       	ldd	r24, Y+4	; 0x04
    73b6:	18 16       	cp	r1, r24
    73b8:	cc f4       	brge	.+50     	; 0x73ec <motor_speed+0x318>
				// CW
				// New value in OCR5A register
				OCR5A = ocrx_value;
    73ba:	88 e2       	ldi	r24, 0x28	; 40
    73bc:	91 e0       	ldi	r25, 0x01	; 1
    73be:	29 81       	ldd	r18, Y+1	; 0x01
    73c0:	22 2f       	mov	r18, r18
    73c2:	30 e0       	ldi	r19, 0x00	; 0
    73c4:	fc 01       	movw	r30, r24
    73c6:	31 83       	std	Z+1, r19	; 0x01
    73c8:	20 83       	st	Z, r18
				// Set OC5B high by setting OCR5B to TOP
				OCR5B = 0xFF;
    73ca:	8a e2       	ldi	r24, 0x2A	; 42
    73cc:	91 e0       	ldi	r25, 0x01	; 1
    73ce:	2f ef       	ldi	r18, 0xFF	; 255
    73d0:	30 e0       	ldi	r19, 0x00	; 0
    73d2:	fc 01       	movw	r30, r24
    73d4:	31 83       	std	Z+1, r19	; 0x01
    73d6:	20 83       	st	Z, r18
				// set OC5A & OC5B to Clear on compare
				TCCR5A |= _BV(COM5A1) | _BV(COM5C1);
    73d8:	80 e2       	ldi	r24, 0x20	; 32
    73da:	91 e0       	ldi	r25, 0x01	; 1
    73dc:	20 e2       	ldi	r18, 0x20	; 32
    73de:	31 e0       	ldi	r19, 0x01	; 1
    73e0:	f9 01       	movw	r30, r18
    73e2:	20 81       	ld	r18, Z
    73e4:	28 68       	ori	r18, 0x88	; 136
    73e6:	fc 01       	movw	r30, r24
    73e8:	20 83       	st	Z, r18
    73ea:	34 c0       	rjmp	.+104    	; 0x7454 <motor_speed+0x380>
			} else if (speed == 0) {
    73ec:	8c 81       	ldd	r24, Y+4	; 0x04
    73ee:	88 23       	and	r24, r24
    73f0:	c9 f4       	brne	.+50     	; 0x7424 <motor_speed+0x350>
				// set both H-Bridge inputs to tri-state output => Motor free run
				OCR5A = OCR5B = 0xFF;
    73f2:	28 e2       	ldi	r18, 0x28	; 40
    73f4:	31 e0       	ldi	r19, 0x01	; 1
    73f6:	8a e2       	ldi	r24, 0x2A	; 42
    73f8:	91 e0       	ldi	r25, 0x01	; 1
    73fa:	4f ef       	ldi	r20, 0xFF	; 255
    73fc:	50 e0       	ldi	r21, 0x00	; 0
    73fe:	fc 01       	movw	r30, r24
    7400:	51 83       	std	Z+1, r21	; 0x01
    7402:	40 83       	st	Z, r20
    7404:	fc 01       	movw	r30, r24
    7406:	80 81       	ld	r24, Z
    7408:	91 81       	ldd	r25, Z+1	; 0x01
    740a:	f9 01       	movw	r30, r18
    740c:	91 83       	std	Z+1, r25	; 0x01
    740e:	80 83       	st	Z, r24
				// Compare output mode: Set OC5A, OC5B on BOTTOM and clear OC5A, OC5B on compare match
				TCCR5A |= _BV(COM5A1) | _BV(COM5B1);
    7410:	80 e2       	ldi	r24, 0x20	; 32
    7412:	91 e0       	ldi	r25, 0x01	; 1
    7414:	20 e2       	ldi	r18, 0x20	; 32
    7416:	31 e0       	ldi	r19, 0x01	; 1
    7418:	f9 01       	movw	r30, r18
    741a:	20 81       	ld	r18, Z
    741c:	20 6a       	ori	r18, 0xA0	; 160
    741e:	fc 01       	movw	r30, r24
    7420:	20 83       	st	Z, r18
    7422:	18 c0       	rjmp	.+48     	; 0x7454 <motor_speed+0x380>
			} else {
				// CCW
				// New value in OCR5B register
				OCR5B = ocrx_value;
    7424:	8a e2       	ldi	r24, 0x2A	; 42
    7426:	91 e0       	ldi	r25, 0x01	; 1
    7428:	29 81       	ldd	r18, Y+1	; 0x01
    742a:	22 2f       	mov	r18, r18
    742c:	30 e0       	ldi	r19, 0x00	; 0
    742e:	fc 01       	movw	r30, r24
    7430:	31 83       	std	Z+1, r19	; 0x01
    7432:	20 83       	st	Z, r18
				// Set OC5A high by setting OCR5A to TOP
				OCR5A = 0xFF;
    7434:	88 e2       	ldi	r24, 0x28	; 40
    7436:	91 e0       	ldi	r25, 0x01	; 1
    7438:	2f ef       	ldi	r18, 0xFF	; 255
    743a:	30 e0       	ldi	r19, 0x00	; 0
    743c:	fc 01       	movw	r30, r24
    743e:	31 83       	std	Z+1, r19	; 0x01
    7440:	20 83       	st	Z, r18
				// set OC5A & OC5B to Clear on compare
				TCCR5A |= _BV(COM5A1) | _BV(COM5C1);
    7442:	80 e2       	ldi	r24, 0x20	; 32
    7444:	91 e0       	ldi	r25, 0x01	; 1
    7446:	20 e2       	ldi	r18, 0x20	; 32
    7448:	31 e0       	ldi	r19, 0x01	; 1
    744a:	f9 01       	movw	r30, r18
    744c:	20 81       	ld	r18, Z
    744e:	28 68       	ori	r18, 0x88	; 136
    7450:	fc 01       	movw	r30, r24
    7452:	20 83       	st	Z, r18
			}
			OS_EXIT_CRITICAL();
    7454:	8a 81       	ldd	r24, Y+2	; 0x02
    7456:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    745a:	03 c0       	rjmp	.+6      	; 0x7462 <motor_speed+0x38e>

		default:
			OS_EXIT_CRITICAL();
    745c:	8a 81       	ldd	r24, Y+2	; 0x02
    745e:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
		}
	}
}
    7462:	0f 90       	pop	r0
    7464:	0f 90       	pop	r0
    7466:	0f 90       	pop	r0
    7468:	0f 90       	pop	r0
    746a:	cf 91       	pop	r28
    746c:	df 91       	pop	r29
    746e:	08 95       	ret

00007470 <brake_motor>:
 * Brakes the motor connected to the specified motor output/H-Bridge. The brake is established by
 * shorting the motor terminals with the H-Bridge.
 *	\param motor_no specifies the motor output on the interface board [0..3].
 *********************************************************************************************************
 */
void brake_motor(INT8U motor_no) {
    7470:	df 93       	push	r29
    7472:	cf 93       	push	r28
    7474:	0f 92       	push	r0
    7476:	0f 92       	push	r0
    7478:	cd b7       	in	r28, 0x3d	; 61
    747a:	de b7       	in	r29, 0x3e	; 62
    747c:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
	OS_CPU_SR cpu_sr = 0;
    747e:	19 82       	std	Y+1, r1	; 0x01
#endif

	OS_ENTER_CRITICAL();
    7480:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7484:	89 83       	std	Y+1, r24	; 0x01

	if (!motor_braked[motor_no]) {
    7486:	8a 81       	ldd	r24, Y+2	; 0x02
    7488:	88 2f       	mov	r24, r24
    748a:	90 e0       	ldi	r25, 0x00	; 0
    748c:	8d 51       	subi	r24, 0x1D	; 29
    748e:	9b 4f       	sbci	r25, 0xFB	; 251
    7490:	fc 01       	movw	r30, r24
    7492:	80 81       	ld	r24, Z
    7494:	88 23       	and	r24, r24
    7496:	09 f0       	breq	.+2      	; 0x749a <brake_motor+0x2a>
    7498:	5b c0       	rjmp	.+182    	; 0x7550 <brake_motor+0xe0>
		motor_braked[motor_no] = 1;
    749a:	8a 81       	ldd	r24, Y+2	; 0x02
    749c:	88 2f       	mov	r24, r24
    749e:	90 e0       	ldi	r25, 0x00	; 0
    74a0:	8d 51       	subi	r24, 0x1D	; 29
    74a2:	9b 4f       	sbci	r25, 0xFB	; 251
    74a4:	21 e0       	ldi	r18, 0x01	; 1
    74a6:	fc 01       	movw	r30, r24
    74a8:	20 83       	st	Z, r18

		switch (motor_no) {
    74aa:	8a 81       	ldd	r24, Y+2	; 0x02
    74ac:	88 2f       	mov	r24, r24
    74ae:	90 e0       	ldi	r25, 0x00	; 0
    74b0:	81 30       	cpi	r24, 0x01	; 1
    74b2:	91 05       	cpc	r25, r1
    74b4:	d1 f0       	breq	.+52     	; 0x74ea <brake_motor+0x7a>
    74b6:	82 30       	cpi	r24, 0x02	; 2
    74b8:	91 05       	cpc	r25, r1
    74ba:	1c f4       	brge	.+6      	; 0x74c2 <brake_motor+0x52>
    74bc:	00 97       	sbiw	r24, 0x00	; 0
    74be:	41 f0       	breq	.+16     	; 0x74d0 <brake_motor+0x60>
    74c0:	44 c0       	rjmp	.+136    	; 0x754a <brake_motor+0xda>
    74c2:	82 30       	cpi	r24, 0x02	; 2
    74c4:	91 05       	cpc	r25, r1
    74c6:	39 f1       	breq	.+78     	; 0x7516 <brake_motor+0xa6>
    74c8:	83 30       	cpi	r24, 0x03	; 3
    74ca:	91 05       	cpc	r25, r1
    74cc:	89 f1       	breq	.+98     	; 0x7530 <brake_motor+0xc0>
    74ce:	3d c0       	rjmp	.+122    	; 0x754a <brake_motor+0xda>
		case 0:
			// Normal port operation
			TCCR1A &= ~(_BV(COM1A1) | _BV(COM1B1));
    74d0:	80 e8       	ldi	r24, 0x80	; 128
    74d2:	90 e0       	ldi	r25, 0x00	; 0
    74d4:	20 e8       	ldi	r18, 0x80	; 128
    74d6:	30 e0       	ldi	r19, 0x00	; 0
    74d8:	f9 01       	movw	r30, r18
    74da:	20 81       	ld	r18, Z
    74dc:	2f 75       	andi	r18, 0x5F	; 95
    74de:	fc 01       	movw	r30, r24
    74e0:	20 83       	st	Z, r18
			OS_EXIT_CRITICAL();
    74e2:	89 81       	ldd	r24, Y+1	; 0x01
    74e4:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    74e8:	33 c0       	rjmp	.+102    	; 0x7550 <brake_motor+0xe0>

		case 1:
			// Normal port operation
			TCCR1A &= ~_BV(COM1C1);
    74ea:	80 e8       	ldi	r24, 0x80	; 128
    74ec:	90 e0       	ldi	r25, 0x00	; 0
    74ee:	20 e8       	ldi	r18, 0x80	; 128
    74f0:	30 e0       	ldi	r19, 0x00	; 0
    74f2:	f9 01       	movw	r30, r18
    74f4:	20 81       	ld	r18, Z
    74f6:	27 7f       	andi	r18, 0xF7	; 247
    74f8:	fc 01       	movw	r30, r24
    74fa:	20 83       	st	Z, r18
			TCCR4A &= ~_BV(COM4A1);
    74fc:	80 ea       	ldi	r24, 0xA0	; 160
    74fe:	90 e0       	ldi	r25, 0x00	; 0
    7500:	20 ea       	ldi	r18, 0xA0	; 160
    7502:	30 e0       	ldi	r19, 0x00	; 0
    7504:	f9 01       	movw	r30, r18
    7506:	20 81       	ld	r18, Z
    7508:	2f 77       	andi	r18, 0x7F	; 127
    750a:	fc 01       	movw	r30, r24
    750c:	20 83       	st	Z, r18
			OS_EXIT_CRITICAL();
    750e:	89 81       	ldd	r24, Y+1	; 0x01
    7510:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    7514:	1d c0       	rjmp	.+58     	; 0x7550 <brake_motor+0xe0>

		case 2:
			// Normal port operation
			TCCR4A &= ~(_BV(COM4B1) | _BV(COM4C1));
    7516:	80 ea       	ldi	r24, 0xA0	; 160
    7518:	90 e0       	ldi	r25, 0x00	; 0
    751a:	20 ea       	ldi	r18, 0xA0	; 160
    751c:	30 e0       	ldi	r19, 0x00	; 0
    751e:	f9 01       	movw	r30, r18
    7520:	20 81       	ld	r18, Z
    7522:	27 7d       	andi	r18, 0xD7	; 215
    7524:	fc 01       	movw	r30, r24
    7526:	20 83       	st	Z, r18
			OS_EXIT_CRITICAL();
    7528:	89 81       	ldd	r24, Y+1	; 0x01
    752a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    752e:	10 c0       	rjmp	.+32     	; 0x7550 <brake_motor+0xe0>

		case 3:
			// Normal port operation
			TCCR5A &= ~(_BV(COM5A1) | _BV(COM5B1));
    7530:	80 e2       	ldi	r24, 0x20	; 32
    7532:	91 e0       	ldi	r25, 0x01	; 1
    7534:	20 e2       	ldi	r18, 0x20	; 32
    7536:	31 e0       	ldi	r19, 0x01	; 1
    7538:	f9 01       	movw	r30, r18
    753a:	20 81       	ld	r18, Z
    753c:	2f 75       	andi	r18, 0x5F	; 95
    753e:	fc 01       	movw	r30, r24
    7540:	20 83       	st	Z, r18
			OS_EXIT_CRITICAL();
    7542:	89 81       	ldd	r24, Y+1	; 0x01
    7544:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
			break;
    7548:	03 c0       	rjmp	.+6      	; 0x7550 <brake_motor+0xe0>

		default:
			OS_EXIT_CRITICAL();
    754a:	89 81       	ldd	r24, Y+1	; 0x01
    754c:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
		}
	}
}
    7550:	0f 90       	pop	r0
    7552:	0f 90       	pop	r0
    7554:	cf 91       	pop	r28
    7556:	df 91       	pop	r29
    7558:	08 95       	ret

0000755a <__vector_32>:
 *	Handles the timing for start of the scanning of the sensor inputs via the ADC.
 *	First all sensors are powered of. Then the first conversion on ADC-channel/mux 0 is started.
 *********************************************************************************************************
 */
ISR(TIMER3_COMPA_vect)
{
    755a:	1f 92       	push	r1
    755c:	0f 92       	push	r0
    755e:	0f b6       	in	r0, 0x3f	; 63
    7560:	0f 92       	push	r0
    7562:	00 90 5b 00 	lds	r0, 0x005B
    7566:	0f 92       	push	r0
    7568:	11 24       	eor	r1, r1
    756a:	2f 93       	push	r18
    756c:	3f 93       	push	r19
    756e:	8f 93       	push	r24
    7570:	9f 93       	push	r25
    7572:	ef 93       	push	r30
    7574:	ff 93       	push	r31
    7576:	df 93       	push	r29
    7578:	cf 93       	push	r28
    757a:	cd b7       	in	r28, 0x3d	; 61
    757c:	de b7       	in	r29, 0x3e	; 62
	// Setup PORTF to input => means power off to sensors
	DDRF = 0x00;
    757e:	80 e3       	ldi	r24, 0x30	; 48
    7580:	90 e0       	ldi	r25, 0x00	; 0
    7582:	fc 01       	movw	r30, r24
    7584:	10 82       	st	Z, r1
	PORTF = 0x00;
    7586:	81 e3       	ldi	r24, 0x31	; 49
    7588:	90 e0       	ldi	r25, 0x00	; 0
    758a:	fc 01       	movw	r30, r24
    758c:	10 82       	st	Z, r1

	// Start conversion on next channel
	ADMUX = (ADMUX & 0b11111000) + sensor_channel;
    758e:	8c e7       	ldi	r24, 0x7C	; 124
    7590:	90 e0       	ldi	r25, 0x00	; 0
    7592:	2c e7       	ldi	r18, 0x7C	; 124
    7594:	30 e0       	ldi	r19, 0x00	; 0
    7596:	f9 01       	movw	r30, r18
    7598:	20 81       	ld	r18, Z
    759a:	32 2f       	mov	r19, r18
    759c:	38 7f       	andi	r19, 0xF8	; 248
    759e:	20 91 d2 04 	lds	r18, 0x04D2
    75a2:	23 0f       	add	r18, r19
    75a4:	fc 01       	movw	r30, r24
    75a6:	20 83       	st	Z, r18
	// Start conversion
	ADCSRA |= _BV(ADSC);
    75a8:	8a e7       	ldi	r24, 0x7A	; 122
    75aa:	90 e0       	ldi	r25, 0x00	; 0
    75ac:	2a e7       	ldi	r18, 0x7A	; 122
    75ae:	30 e0       	ldi	r19, 0x00	; 0
    75b0:	f9 01       	movw	r30, r18
    75b2:	20 81       	ld	r18, Z
    75b4:	20 64       	ori	r18, 0x40	; 64
    75b6:	fc 01       	movw	r30, r24
    75b8:	20 83       	st	Z, r18
}
    75ba:	cf 91       	pop	r28
    75bc:	df 91       	pop	r29
    75be:	ff 91       	pop	r31
    75c0:	ef 91       	pop	r30
    75c2:	9f 91       	pop	r25
    75c4:	8f 91       	pop	r24
    75c6:	3f 91       	pop	r19
    75c8:	2f 91       	pop	r18
    75ca:	0f 90       	pop	r0
    75cc:	00 92 5b 00 	sts	0x005B, r0
    75d0:	0f 90       	pop	r0
    75d2:	0f be       	out	0x3f, r0	; 63
    75d4:	0f 90       	pop	r0
    75d6:	1f 90       	pop	r1
    75d8:	18 95       	reti

000075da <__vector_29>:
 * sensor input and starts a new ADC conversion. If it was the last sensor that was scanned then
 * all sensors are powered on again.
 *********************************************************************************************************
 */
ISR(ADC_vect)
{
    75da:	1f 92       	push	r1
    75dc:	0f 92       	push	r0
    75de:	0f b6       	in	r0, 0x3f	; 63
    75e0:	0f 92       	push	r0
    75e2:	00 90 5b 00 	lds	r0, 0x005B
    75e6:	0f 92       	push	r0
    75e8:	11 24       	eor	r1, r1
    75ea:	2f 93       	push	r18
    75ec:	3f 93       	push	r19
    75ee:	8f 93       	push	r24
    75f0:	9f 93       	push	r25
    75f2:	ef 93       	push	r30
    75f4:	ff 93       	push	r31
    75f6:	df 93       	push	r29
    75f8:	cf 93       	push	r28
    75fa:	cd b7       	in	r28, 0x3d	; 61
    75fc:	de b7       	in	r29, 0x3e	; 62
	sensor_result[sensor_channel] = ADC;
    75fe:	80 91 d2 04 	lds	r24, 0x04D2
    7602:	88 2f       	mov	r24, r24
    7604:	90 e0       	ldi	r25, 0x00	; 0
    7606:	28 e7       	ldi	r18, 0x78	; 120
    7608:	30 e0       	ldi	r19, 0x00	; 0
    760a:	f9 01       	movw	r30, r18
    760c:	20 81       	ld	r18, Z
    760e:	31 81       	ldd	r19, Z+1	; 0x01
    7610:	88 0f       	add	r24, r24
    7612:	99 1f       	adc	r25, r25
    7614:	8d 52       	subi	r24, 0x2D	; 45
    7616:	9b 4f       	sbci	r25, 0xFB	; 251
    7618:	fc 01       	movw	r30, r24
    761a:	31 83       	std	Z+1, r19	; 0x01
    761c:	20 83       	st	Z, r18

	if (sensor_channel < 7) {
    761e:	80 91 d2 04 	lds	r24, 0x04D2
    7622:	87 30       	cpi	r24, 0x07	; 7
    7624:	e0 f4       	brcc	.+56     	; 0x765e <__vector_29+0x84>
		ADMUX = (ADMUX & 0b11111000) + ++sensor_channel;
    7626:	8c e7       	ldi	r24, 0x7C	; 124
    7628:	90 e0       	ldi	r25, 0x00	; 0
    762a:	2c e7       	ldi	r18, 0x7C	; 124
    762c:	30 e0       	ldi	r19, 0x00	; 0
    762e:	f9 01       	movw	r30, r18
    7630:	20 81       	ld	r18, Z
    7632:	32 2f       	mov	r19, r18
    7634:	38 7f       	andi	r19, 0xF8	; 248
    7636:	20 91 d2 04 	lds	r18, 0x04D2
    763a:	2f 5f       	subi	r18, 0xFF	; 255
    763c:	20 93 d2 04 	sts	0x04D2, r18
    7640:	20 91 d2 04 	lds	r18, 0x04D2
    7644:	23 0f       	add	r18, r19
    7646:	fc 01       	movw	r30, r24
    7648:	20 83       	st	Z, r18
		// Start conversion
		ADCSRA |= _BV(ADSC);
    764a:	8a e7       	ldi	r24, 0x7A	; 122
    764c:	90 e0       	ldi	r25, 0x00	; 0
    764e:	2a e7       	ldi	r18, 0x7A	; 122
    7650:	30 e0       	ldi	r19, 0x00	; 0
    7652:	f9 01       	movw	r30, r18
    7654:	20 81       	ld	r18, Z
    7656:	20 64       	ori	r18, 0x40	; 64
    7658:	fc 01       	movw	r30, r24
    765a:	20 83       	st	Z, r18
    765c:	0c c0       	rjmp	.+24     	; 0x7676 <__vector_29+0x9c>
	} else {
		// power on all sensors
		DDRF = 0xFF;
    765e:	80 e3       	ldi	r24, 0x30	; 48
    7660:	90 e0       	ldi	r25, 0x00	; 0
    7662:	2f ef       	ldi	r18, 0xFF	; 255
    7664:	fc 01       	movw	r30, r24
    7666:	20 83       	st	Z, r18
		PORTF = 0xFF;
    7668:	81 e3       	ldi	r24, 0x31	; 49
    766a:	90 e0       	ldi	r25, 0x00	; 0
    766c:	2f ef       	ldi	r18, 0xFF	; 255
    766e:	fc 01       	movw	r30, r24
    7670:	20 83       	st	Z, r18

		// Prepare next scan
		sensor_channel = 0;
    7672:	10 92 d2 04 	sts	0x04D2, r1
	}
}
    7676:	cf 91       	pop	r28
    7678:	df 91       	pop	r29
    767a:	ff 91       	pop	r31
    767c:	ef 91       	pop	r30
    767e:	9f 91       	pop	r25
    7680:	8f 91       	pop	r24
    7682:	3f 91       	pop	r19
    7684:	2f 91       	pop	r18
    7686:	0f 90       	pop	r0
    7688:	00 92 5b 00 	sts	0x005B, r0
    768c:	0f 90       	pop	r0
    768e:	0f be       	out	0x3f, r0	; 63
    7690:	0f 90       	pop	r0
    7692:	1f 90       	pop	r1
    7694:	18 95       	reti

00007696 <main>:
*             OS_CFG.H.
**************************************************************************************************************
*/

int  main (void)
{
    7696:	8f 92       	push	r8
    7698:	9f 92       	push	r9
    769a:	af 92       	push	r10
    769c:	bf 92       	push	r11
    769e:	cf 92       	push	r12
    76a0:	df 92       	push	r13
    76a2:	ef 92       	push	r14
    76a4:	ff 92       	push	r15
    76a6:	0f 93       	push	r16
    76a8:	1f 93       	push	r17
    76aa:	df 93       	push	r29
    76ac:	cf 93       	push	r28
    76ae:	cd b7       	in	r28, 0x3d	; 61
    76b0:	de b7       	in	r29, 0x3e	; 62


    /*---- Any initialization code prior to calling OSInit() goes HERE -------------------------------------*/

                                                     /* IMPORTANT: MUST be setup before calling 'OSInit()'  */
    OSTaskStkSize     = OS_TASK_IDLE_STK_SIZE;       /* Setup the default stack size                        */
    76b2:	8f ea       	ldi	r24, 0xAF	; 175
    76b4:	90 e0       	ldi	r25, 0x00	; 0
    76b6:	90 93 ec 04 	sts	0x04EC, r25
    76ba:	80 93 eb 04 	sts	0x04EB, r24
//    OSTaskStkSizeHard = OS_TASK_STK_SIZE_HARD;       /* Setup the default hardware stack size               */

    OSInit();                                        /* Initialize "uC/OS-II, The Real-Time Kernel"         */
    76be:	0e 94 4f 05 	call	0xa9e	; 0xa9e <OSInit>

    /*---- Any initialization code before starting multitasking --------------------------------------------*/
    OSTaskStkSize     = OS_TASK_START_STK_SIZE;
    76c2:	80 ef       	ldi	r24, 0xF0	; 240
    76c4:	90 e0       	ldi	r25, 0x00	; 0
    76c6:	90 93 ec 04 	sts	0x04EC, r25
    76ca:	80 93 eb 04 	sts	0x04EB, r24

    OSTaskCreateExt(Task1,
    76ce:	80 91 eb 04 	lds	r24, 0x04EB
    76d2:	90 91 ec 04 	lds	r25, 0x04EC
    76d6:	01 97       	sbiw	r24, 0x01	; 1
    76d8:	9c 01       	movw	r18, r24
    76da:	2a 50       	subi	r18, 0x0A	; 10
    76dc:	33 4f       	sbci	r19, 0xF3	; 243
    76de:	80 91 eb 04 	lds	r24, 0x04EB
    76e2:	90 91 ec 04 	lds	r25, 0x04EC
    76e6:	5c 01       	movw	r10, r24
    76e8:	cc 24       	eor	r12, r12
    76ea:	dd 24       	eor	r13, r13
    76ec:	0f 92       	push	r0
    76ee:	0f 92       	push	r0
    76f0:	4d b7       	in	r20, 0x3d	; 61
    76f2:	5e b7       	in	r21, 0x3e	; 62
    76f4:	4f 5f       	subi	r20, 0xFF	; 255
    76f6:	5f 4f       	sbci	r21, 0xFF	; 255
    76f8:	8b ea       	ldi	r24, 0xAB	; 171
    76fa:	9b e3       	ldi	r25, 0x3B	; 59
    76fc:	e6 ef       	ldi	r30, 0xF6	; 246
    76fe:	fc e0       	ldi	r31, 0x0C	; 12
    7700:	63 e0       	ldi	r22, 0x03	; 3
    7702:	70 e0       	ldi	r23, 0x00	; 0
    7704:	da 01       	movw	r26, r20
    7706:	6d 93       	st	X+, r22
    7708:	7c 93       	st	X, r23
    770a:	60 e0       	ldi	r22, 0x00	; 0
    770c:	70 e0       	ldi	r23, 0x00	; 0
    770e:	a9 01       	movw	r20, r18
    7710:	20 e0       	ldi	r18, 0x00	; 0
    7712:	00 e0       	ldi	r16, 0x00	; 0
    7714:	10 e0       	ldi	r17, 0x00	; 0
    7716:	7f 01       	movw	r14, r30
    7718:	88 24       	eor	r8, r8
    771a:	99 24       	eor	r9, r9
    771c:	0e 94 b2 11 	call	0x2364	; 0x2364 <OSTaskCreateExt>
    7720:	0f 90       	pop	r0
    7722:	0f 90       	pop	r0

#if (OS_TASK_NAME_SIZE > 14) && (OS_TASK_STAT_EN > 0)
    OSTaskNameSet(OS_TASK_START_PRIO, "Start Task", &err);
#endif

    a_sem = OSSemCreate(0);   // create a semaphore
    7724:	80 e0       	ldi	r24, 0x00	; 0
    7726:	90 e0       	ldi	r25, 0x00	; 0
    7728:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <OSSemCreate>
    772c:	90 93 e7 0d 	sts	0x0DE7, r25
    7730:	80 93 e6 0d 	sts	0x0DE6, r24

    /*---- Create any other task you want before we start multitasking -------------------------------------*/

    OSStart();                                       /* Start multitasking (i.e. give control to uC/OS-II)  */
    7734:	0e 94 34 06 	call	0xc68	; 0xc68 <OSStart>
    return 0;
    7738:	80 e0       	ldi	r24, 0x00	; 0
    773a:	90 e0       	ldi	r25, 0x00	; 0
}
    773c:	cf 91       	pop	r28
    773e:	df 91       	pop	r29
    7740:	1f 91       	pop	r17
    7742:	0f 91       	pop	r16
    7744:	ff 90       	pop	r15
    7746:	ef 90       	pop	r14
    7748:	df 90       	pop	r13
    774a:	cf 90       	pop	r12
    774c:	bf 90       	pop	r11
    774e:	af 90       	pop	r10
    7750:	9f 90       	pop	r9
    7752:	8f 90       	pop	r8
    7754:	08 95       	ret

00007756 <Task1>:
*                  used.  The compiler should not generate any code for this statement.
**************************************************************************************************************
*/

static void  Task1 (void *p_arg)
{
    7756:	df 93       	push	r29
    7758:	cf 93       	push	r28
    775a:	00 d0       	rcall	.+0      	; 0x775c <Task1+0x6>
    775c:	0f 92       	push	r0
    775e:	cd b7       	in	r28, 0x3d	; 61
    7760:	de b7       	in	r29, 0x3e	; 62
    7762:	9c 83       	std	Y+4, r25	; 0x04
    7764:	8b 83       	std	Y+3, r24	; 0x03

    (void)p_arg;                                 /* Prevent compiler warnings                          */

    BSP_Init();                                  /* Initialize the BSP                                 */
    7766:	0e 94 c1 3d 	call	0x7b82	; 0x7b82 <BSP_Init>
    init_lego_interface();						 /* Initalize LEGO_interface						   */
    776a:	0e 94 e6 36 	call	0x6dcc	; 0x6dcc <init_lego_interface>

    AppTaskCreate();
    776e:	0e 94 c6 3b 	call	0x778c	; 0x778c <AppTaskCreate>


    	motor_speed(motor_no, speed); */

    	INT16S light;
    	light = light_sensor(0);
    7772:	80 e0       	ldi	r24, 0x00	; 0
    7774:	0e 94 50 38 	call	0x70a0	; 0x70a0 <light_sensor>
    7778:	9a 83       	std	Y+2, r25	; 0x02
    777a:	89 83       	std	Y+1, r24	; 0x01
    	LED_Toggle(5);
    777c:	85 e0       	ldi	r24, 0x05	; 5
    777e:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <LED_Toggle>
    	OSTimeDly(OS_TICKS_PER_SEC / 5);
    7782:	84 e1       	ldi	r24, 0x14	; 20
    7784:	90 e0       	ldi	r25, 0x00	; 0
    7786:	0e 94 a1 14 	call	0x2942	; 0x2942 <OSTimeDly>
    }
    778a:	f3 cf       	rjmp	.-26     	; 0x7772 <Task1+0x1c>

0000778c <AppTaskCreate>:
*                  used.  The compiler should not generate any code for this statement.
**************************************************************************************************************
*/

static  void  AppTaskCreate (void)
{
    778c:	8f 92       	push	r8
    778e:	9f 92       	push	r9
    7790:	af 92       	push	r10
    7792:	bf 92       	push	r11
    7794:	cf 92       	push	r12
    7796:	df 92       	push	r13
    7798:	ef 92       	push	r14
    779a:	ff 92       	push	r15
    779c:	0f 93       	push	r16
    779e:	1f 93       	push	r17
    77a0:	df 93       	push	r29
    77a2:	cf 93       	push	r28
    77a4:	cd b7       	in	r28, 0x3d	; 61
    77a6:	de b7       	in	r29, 0x3e	; 62
    INT8U  err;
#endif


    /*---- Task initialization code goes HERE! --------------------------------------------------------*/
    OSTaskStkSize     = OS_TASK_1_STK_SIZE;        /* Setup the default stack size                     */
    77a8:	80 ef       	ldi	r24, 0xF0	; 240
    77aa:	90 e0       	ldi	r25, 0x00	; 0
    77ac:	90 93 ec 04 	sts	0x04EC, r25
    77b0:	80 93 eb 04 	sts	0x04EB, r24
//    OSTaskStkSizeHard = OS_TASK_STK_SIZE_HARD;     /* Setup the default hardware stack size            */
    OSTaskCreateExt(AppTask1,
    77b4:	80 91 eb 04 	lds	r24, 0x04EB
    77b8:	90 91 ec 04 	lds	r25, 0x04EC
    77bc:	01 97       	sbiw	r24, 0x01	; 1
    77be:	9c 01       	movw	r18, r24
    77c0:	2a 5f       	subi	r18, 0xFA	; 250
    77c2:	33 4f       	sbci	r19, 0xF3	; 243
    77c4:	80 91 eb 04 	lds	r24, 0x04EB
    77c8:	90 91 ec 04 	lds	r25, 0x04EC
    77cc:	5c 01       	movw	r10, r24
    77ce:	cc 24       	eor	r12, r12
    77d0:	dd 24       	eor	r13, r13
    77d2:	0f 92       	push	r0
    77d4:	0f 92       	push	r0
    77d6:	4d b7       	in	r20, 0x3d	; 61
    77d8:	5e b7       	in	r21, 0x3e	; 62
    77da:	4f 5f       	subi	r20, 0xFF	; 255
    77dc:	5f 4f       	sbci	r21, 0xFF	; 255
    77de:	83 e4       	ldi	r24, 0x43	; 67
    77e0:	9c e3       	ldi	r25, 0x3C	; 60
    77e2:	e6 e0       	ldi	r30, 0x06	; 6
    77e4:	fc e0       	ldi	r31, 0x0C	; 12
    77e6:	63 e0       	ldi	r22, 0x03	; 3
    77e8:	70 e0       	ldi	r23, 0x00	; 0
    77ea:	da 01       	movw	r26, r20
    77ec:	6d 93       	st	X+, r22
    77ee:	7c 93       	st	X, r23
    77f0:	60 e0       	ldi	r22, 0x00	; 0
    77f2:	70 e0       	ldi	r23, 0x00	; 0
    77f4:	a9 01       	movw	r20, r18
    77f6:	21 e0       	ldi	r18, 0x01	; 1
    77f8:	01 e0       	ldi	r16, 0x01	; 1
    77fa:	10 e0       	ldi	r17, 0x00	; 0
    77fc:	7f 01       	movw	r14, r30
    77fe:	88 24       	eor	r8, r8
    7800:	99 24       	eor	r9, r9
    7802:	0e 94 b2 11 	call	0x2364	; 0x2364 <OSTaskCreateExt>
    7806:	0f 90       	pop	r0
    7808:	0f 90       	pop	r0
#if (OS_TASK_NAME_SIZE > 14) && (OS_TASK_STAT_EN > 0)
    OSTaskNameSet(OS_TASK_1_PRIO, "Task 1", &err);
#endif

    /*---- Task initialization code goes HERE! --------------------------------------------------------*/
    OSTaskStkSize     = OS_TASK_2_STK_SIZE;        /* Setup the default stack size                     */
    780a:	80 ef       	ldi	r24, 0xF0	; 240
    780c:	90 e0       	ldi	r25, 0x00	; 0
    780e:	90 93 ec 04 	sts	0x04EC, r25
    7812:	80 93 eb 04 	sts	0x04EB, r24
    //OSTaskStkSizeHard = OS_TASK_STK_SIZE_HARD;     /* Setup the default hardware stack size            */
    OSTaskCreateExt(AppTask2,
    7816:	80 91 eb 04 	lds	r24, 0x04EB
    781a:	90 91 ec 04 	lds	r25, 0x04EC
    781e:	01 97       	sbiw	r24, 0x01	; 1
    7820:	9c 01       	movw	r18, r24
    7822:	28 51       	subi	r18, 0x18	; 24
    7824:	32 4f       	sbci	r19, 0xF2	; 242
    7826:	80 91 eb 04 	lds	r24, 0x04EB
    782a:	90 91 ec 04 	lds	r25, 0x04EC
    782e:	5c 01       	movw	r10, r24
    7830:	cc 24       	eor	r12, r12
    7832:	dd 24       	eor	r13, r13
    7834:	0f 92       	push	r0
    7836:	0f 92       	push	r0
    7838:	4d b7       	in	r20, 0x3d	; 61
    783a:	5e b7       	in	r21, 0x3e	; 62
    783c:	4f 5f       	subi	r20, 0xFF	; 255
    783e:	5f 4f       	sbci	r21, 0xFF	; 255
    7840:	8a e5       	ldi	r24, 0x5A	; 90
    7842:	9c e3       	ldi	r25, 0x3C	; 60
    7844:	e8 ee       	ldi	r30, 0xE8	; 232
    7846:	fd e0       	ldi	r31, 0x0D	; 13
    7848:	63 e0       	ldi	r22, 0x03	; 3
    784a:	70 e0       	ldi	r23, 0x00	; 0
    784c:	da 01       	movw	r26, r20
    784e:	6d 93       	st	X+, r22
    7850:	7c 93       	st	X, r23
    7852:	60 e0       	ldi	r22, 0x00	; 0
    7854:	70 e0       	ldi	r23, 0x00	; 0
    7856:	a9 01       	movw	r20, r18
    7858:	22 e0       	ldi	r18, 0x02	; 2
    785a:	02 e0       	ldi	r16, 0x02	; 2
    785c:	10 e0       	ldi	r17, 0x00	; 0
    785e:	7f 01       	movw	r14, r30
    7860:	88 24       	eor	r8, r8
    7862:	99 24       	eor	r9, r9
    7864:	0e 94 b2 11 	call	0x2364	; 0x2364 <OSTaskCreateExt>
    7868:	0f 90       	pop	r0
    786a:	0f 90       	pop	r0
                    (void *)0,
                    OS_TASK_OPT_STK_CHK | OS_TASK_OPT_STK_CLR);
#if (OS_TASK_NAME_SIZE > 14) && (OS_TASK_STAT_EN > 0)
    OSTaskNameSet(OS_TASK_2_PRIO, "Task 2", &err);
#endif
}
    786c:	cf 91       	pop	r28
    786e:	df 91       	pop	r29
    7870:	1f 91       	pop	r17
    7872:	0f 91       	pop	r16
    7874:	ff 90       	pop	r15
    7876:	ef 90       	pop	r14
    7878:	df 90       	pop	r13
    787a:	cf 90       	pop	r12
    787c:	bf 90       	pop	r11
    787e:	af 90       	pop	r10
    7880:	9f 90       	pop	r9
    7882:	8f 90       	pop	r8
    7884:	08 95       	ret

00007886 <AppTask1>:
*                                                   TASK #1
**************************************************************************************************************
*/

static void  AppTask1(void *p_arg)
{
    7886:	df 93       	push	r29
    7888:	cf 93       	push	r28
    788a:	00 d0       	rcall	.+0      	; 0x788c <AppTask1+0x6>
    788c:	0f 92       	push	r0
    788e:	cd b7       	in	r28, 0x3d	; 61
    7890:	de b7       	in	r29, 0x3e	; 62
    7892:	9c 83       	std	Y+4, r25	; 0x04
    7894:	8b 83       	std	Y+3, r24	; 0x03
    (void)p_arg;

    int i = 0;
    7896:	1a 82       	std	Y+2, r1	; 0x02
    7898:	19 82       	std	Y+1, r1	; 0x01
    while (1) {
        //LED_Toggle(7);
    	LED_show(++i);
    789a:	89 81       	ldd	r24, Y+1	; 0x01
    789c:	9a 81       	ldd	r25, Y+2	; 0x02
    789e:	01 96       	adiw	r24, 0x01	; 1
    78a0:	9a 83       	std	Y+2, r25	; 0x02
    78a2:	89 83       	std	Y+1, r24	; 0x01
    78a4:	89 81       	ldd	r24, Y+1	; 0x01
    78a6:	0e 94 b8 3c 	call	0x7970	; 0x7970 <LED_show>
        OSTimeDly(OS_TICKS_PER_SEC / 5);
    78aa:	84 e1       	ldi	r24, 0x14	; 20
    78ac:	90 e0       	ldi	r25, 0x00	; 0
    78ae:	0e 94 a1 14 	call	0x2942	; 0x2942 <OSTimeDly>
        //i = (i > 254) ? 0 : i;
    }
    78b2:	f3 cf       	rjmp	.-26     	; 0x789a <AppTask1+0x14>

000078b4 <AppTask2>:
*                                                  TASK #2
**************************************************************************************************************
*/

static void  AppTask2(void *p_arg)
{
    78b4:	df 93       	push	r29
    78b6:	cf 93       	push	r28
    78b8:	0f 92       	push	r0
    78ba:	0f 92       	push	r0
    78bc:	cd b7       	in	r28, 0x3d	; 61
    78be:	de b7       	in	r29, 0x3e	; 62
    78c0:	9a 83       	std	Y+2, r25	; 0x02
    78c2:	89 83       	std	Y+1, r24	; 0x01
    (void)p_arg;

    while (1) {
        LED_Toggle(8);
    78c4:	88 e0       	ldi	r24, 0x08	; 8
    78c6:	0e 94 b4 3f 	call	0x7f68	; 0x7f68 <LED_Toggle>
        OSTimeDly(OS_TICKS_PER_SEC / 5);
    78ca:	84 e1       	ldi	r24, 0x14	; 20
    78cc:	90 e0       	ldi	r25, 0x00	; 0
    78ce:	0e 94 a1 14 	call	0x2942	; 0x2942 <OSTimeDly>
    }
    78d2:	f8 cf       	rjmp	.-16     	; 0x78c4 <AppTask2+0x10>

000078d4 <App_TaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void App_TaskSwHook(void)  // TODO IHA Remove after test
{
    78d4:	df 93       	push	r29
    78d6:	cf 93       	push	r28
    78d8:	cd b7       	in	r28, 0x3d	; 61
    78da:	de b7       	in	r29, 0x3e	; 62
	PORTB = ~(OSTCBHighRdy->OSTCBPrio);
    78dc:	85 e2       	ldi	r24, 0x25	; 37
    78de:	90 e0       	ldi	r25, 0x00	; 0
    78e0:	20 91 96 07 	lds	r18, 0x0796
    78e4:	30 91 97 07 	lds	r19, 0x0797
    78e8:	f9 01       	movw	r30, r18
    78ea:	20 8d       	ldd	r18, Z+24	; 0x18
    78ec:	20 95       	com	r18
    78ee:	fc 01       	movw	r30, r24
    78f0:	20 83       	st	Z, r18
}
    78f2:	cf 91       	pop	r28
    78f4:	df 91       	pop	r29
    78f6:	08 95       	ret

000078f8 <App_TaskCreateHook>:

void App_TaskCreateHook(OS_TCB *ptcb){}
    78f8:	df 93       	push	r29
    78fa:	cf 93       	push	r28
    78fc:	0f 92       	push	r0
    78fe:	0f 92       	push	r0
    7900:	cd b7       	in	r28, 0x3d	; 61
    7902:	de b7       	in	r29, 0x3e	; 62
    7904:	9a 83       	std	Y+2, r25	; 0x02
    7906:	89 83       	std	Y+1, r24	; 0x01
    7908:	0f 90       	pop	r0
    790a:	0f 90       	pop	r0
    790c:	cf 91       	pop	r28
    790e:	df 91       	pop	r29
    7910:	08 95       	ret

00007912 <App_TaskDelHook>:
void App_TaskDelHook(OS_TCB *ptcb){}
    7912:	df 93       	push	r29
    7914:	cf 93       	push	r28
    7916:	0f 92       	push	r0
    7918:	0f 92       	push	r0
    791a:	cd b7       	in	r28, 0x3d	; 61
    791c:	de b7       	in	r29, 0x3e	; 62
    791e:	9a 83       	std	Y+2, r25	; 0x02
    7920:	89 83       	std	Y+1, r24	; 0x01
    7922:	0f 90       	pop	r0
    7924:	0f 90       	pop	r0
    7926:	cf 91       	pop	r28
    7928:	df 91       	pop	r29
    792a:	08 95       	ret

0000792c <App_TaskIdleHook>:
void App_TaskIdleHook(void){}
    792c:	df 93       	push	r29
    792e:	cf 93       	push	r28
    7930:	cd b7       	in	r28, 0x3d	; 61
    7932:	de b7       	in	r29, 0x3e	; 62
    7934:	cf 91       	pop	r28
    7936:	df 91       	pop	r29
    7938:	08 95       	ret

0000793a <App_TaskStatHook>:
void App_TaskStatHook(void){}
    793a:	df 93       	push	r29
    793c:	cf 93       	push	r28
    793e:	cd b7       	in	r28, 0x3d	; 61
    7940:	de b7       	in	r29, 0x3e	; 62
    7942:	cf 91       	pop	r28
    7944:	df 91       	pop	r29
    7946:	08 95       	ret

00007948 <App_TCBInitHook>:
void App_TCBInitHook(OS_TCB *ptcb){}
    7948:	df 93       	push	r29
    794a:	cf 93       	push	r28
    794c:	0f 92       	push	r0
    794e:	0f 92       	push	r0
    7950:	cd b7       	in	r28, 0x3d	; 61
    7952:	de b7       	in	r29, 0x3e	; 62
    7954:	9a 83       	std	Y+2, r25	; 0x02
    7956:	89 83       	std	Y+1, r24	; 0x01
    7958:	0f 90       	pop	r0
    795a:	0f 90       	pop	r0
    795c:	cf 91       	pop	r28
    795e:	df 91       	pop	r29
    7960:	08 95       	ret

00007962 <App_TimeTickHook>:
void App_TimeTickHook(void){}
    7962:	df 93       	push	r29
    7964:	cf 93       	push	r28
    7966:	cd b7       	in	r28, 0x3d	; 61
    7968:	de b7       	in	r29, 0x3e	; 62
    796a:	cf 91       	pop	r28
    796c:	df 91       	pop	r29
    796e:	08 95       	ret

00007970 <LED_show>:

/*
 * Custom functions
*/

void LED_show(unsigned char n){
    7970:	df 93       	push	r29
    7972:	cf 93       	push	r28
    7974:	00 d0       	rcall	.+0      	; 0x7976 <LED_show+0x6>
    7976:	0f 92       	push	r0
    7978:	0f 92       	push	r0
    797a:	cd b7       	in	r28, 0x3d	; 61
    797c:	de b7       	in	r29, 0x3e	; 62
    797e:	8d 83       	std	Y+5, r24	; 0x05
	/* Turn off all LEDs before switching them */
	for(int i = 0; i < 8; i++){
    7980:	1c 82       	std	Y+4, r1	; 0x04
    7982:	1b 82       	std	Y+3, r1	; 0x03
    7984:	08 c0       	rjmp	.+16     	; 0x7996 <LED_show+0x26>
		LED_Off(i);
    7986:	8b 81       	ldd	r24, Y+3	; 0x03
    7988:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <LED_Off>
 * Custom functions
*/

void LED_show(unsigned char n){
	/* Turn off all LEDs before switching them */
	for(int i = 0; i < 8; i++){
    798c:	8b 81       	ldd	r24, Y+3	; 0x03
    798e:	9c 81       	ldd	r25, Y+4	; 0x04
    7990:	01 96       	adiw	r24, 0x01	; 1
    7992:	9c 83       	std	Y+4, r25	; 0x04
    7994:	8b 83       	std	Y+3, r24	; 0x03
    7996:	8b 81       	ldd	r24, Y+3	; 0x03
    7998:	9c 81       	ldd	r25, Y+4	; 0x04
    799a:	88 30       	cpi	r24, 0x08	; 8
    799c:	91 05       	cpc	r25, r1
    799e:	9c f3       	brlt	.-26     	; 0x7986 <LED_show+0x16>
		LED_Off(i);
		//printf("%s%d\n", "Switching off LED #", i);
	}

	/* For all bits in datatype */
	for(int i = 0; i < sizeof(unsigned char)*8; i++){
    79a0:	1a 82       	std	Y+2, r1	; 0x02
    79a2:	19 82       	std	Y+1, r1	; 0x01
    79a4:	15 c0       	rjmp	.+42     	; 0x79d0 <LED_show+0x60>
		if(n & (1 << i))						/* Test if i^th bit is set in "n" */
    79a6:	8d 81       	ldd	r24, Y+5	; 0x05
    79a8:	88 2f       	mov	r24, r24
    79aa:	90 e0       	ldi	r25, 0x00	; 0
    79ac:	09 80       	ldd	r0, Y+1	; 0x01
    79ae:	02 c0       	rjmp	.+4      	; 0x79b4 <LED_show+0x44>
    79b0:	95 95       	asr	r25
    79b2:	87 95       	ror	r24
    79b4:	0a 94       	dec	r0
    79b6:	e2 f7       	brpl	.-8      	; 0x79b0 <LED_show+0x40>
    79b8:	81 70       	andi	r24, 0x01	; 1
    79ba:	90 70       	andi	r25, 0x00	; 0
    79bc:	88 23       	and	r24, r24
    79be:	19 f0       	breq	.+6      	; 0x79c6 <LED_show+0x56>
			LED_On(i);
    79c0:	89 81       	ldd	r24, Y+1	; 0x01
    79c2:	0e 94 91 3e 	call	0x7d22	; 0x7d22 <LED_On>
		LED_Off(i);
		//printf("%s%d\n", "Switching off LED #", i);
	}

	/* For all bits in datatype */
	for(int i = 0; i < sizeof(unsigned char)*8; i++){
    79c6:	89 81       	ldd	r24, Y+1	; 0x01
    79c8:	9a 81       	ldd	r25, Y+2	; 0x02
    79ca:	01 96       	adiw	r24, 0x01	; 1
    79cc:	9a 83       	std	Y+2, r25	; 0x02
    79ce:	89 83       	std	Y+1, r24	; 0x01
    79d0:	89 81       	ldd	r24, Y+1	; 0x01
    79d2:	9a 81       	ldd	r25, Y+2	; 0x02
    79d4:	88 30       	cpi	r24, 0x08	; 8
    79d6:	91 05       	cpc	r25, r1
    79d8:	30 f3       	brcs	.-52     	; 0x79a6 <LED_show+0x36>
		if(n & (1 << i))						/* Test if i^th bit is set in "n" */
			LED_On(i);
			//printf("%s%d\n", "Switching on LED #", i); /* if yes, turn on the i^th LED */
	}
}
    79da:	0f 90       	pop	r0
    79dc:	0f 90       	pop	r0
    79de:	0f 90       	pop	r0
    79e0:	0f 90       	pop	r0
    79e2:	0f 90       	pop	r0
    79e4:	cf 91       	pop	r28
    79e6:	df 91       	pop	r29
    79e8:	08 95       	ret

000079ea <__vector_21>:
    79ea:	0f 92       	push	r0
    79ec:	1f 92       	push	r1
    79ee:	2f 92       	push	r2
    79f0:	3f 92       	push	r3
    79f2:	4f 92       	push	r4
    79f4:	5f 92       	push	r5
    79f6:	6f 92       	push	r6
    79f8:	7f 92       	push	r7
    79fa:	8f 92       	push	r8
    79fc:	9f 92       	push	r9
    79fe:	af 92       	push	r10
    7a00:	bf 92       	push	r11
    7a02:	cf 92       	push	r12
    7a04:	df 92       	push	r13
    7a06:	ef 92       	push	r14
    7a08:	ff 92       	push	r15
    7a0a:	0f 93       	push	r16
    7a0c:	1f 93       	push	r17
    7a0e:	2f 93       	push	r18
    7a10:	3f 93       	push	r19
    7a12:	4f 93       	push	r20
    7a14:	5f 93       	push	r21
    7a16:	6f 93       	push	r22
    7a18:	7f 93       	push	r23
    7a1a:	8f 93       	push	r24
    7a1c:	9f 93       	push	r25
    7a1e:	af 93       	push	r26
    7a20:	bf 93       	push	r27
    7a22:	cf 93       	push	r28
    7a24:	df 93       	push	r29
    7a26:	ef 93       	push	r30
    7a28:	ff 93       	push	r31
    7a2a:	0b b7       	in	r16, 0x3b	; 59
    7a2c:	0f 93       	push	r16
    7a2e:	0f b7       	in	r16, 0x3f	; 63
    7a30:	00 68       	ori	r16, 0x80	; 128
    7a32:	0f 93       	push	r16
    7a34:	00 91 4c 08 	lds	r16, 0x084C
    7a38:	03 95       	inc	r16
    7a3a:	00 93 4c 08 	sts	0x084C, r16
    7a3e:	01 30       	cpi	r16, 0x01	; 1
    7a40:	41 f4       	brne	.+16     	; 0x7a52 <BSP_TickISR_1>
    7a42:	e0 91 4d 08 	lds	r30, 0x084D
    7a46:	f0 91 4e 08 	lds	r31, 0x084E
    7a4a:	cd b7       	in	r28, 0x3d	; 61
    7a4c:	c1 93       	st	Z+, r28
    7a4e:	de b7       	in	r29, 0x3e	; 62
    7a50:	d1 93       	st	Z+, r29

00007a52 <BSP_TickISR_1>:
    7a52:	0e 94 6c 3e 	call	0x7cd8	; 0x7cd8 <BSP_TickISR_Handler>
    7a56:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <OSIntExit>
    7a5a:	e0 91 4d 08 	lds	r30, 0x084D
    7a5e:	f0 91 4e 08 	lds	r31, 0x084E
    7a62:	c1 91       	ld	r28, Z+
    7a64:	cd bf       	out	0x3d, r28	; 61
    7a66:	d1 91       	ld	r29, Z+
    7a68:	de bf       	out	0x3e, r29	; 62
    7a6a:	0f 91       	pop	r16
    7a6c:	0f 77       	andi	r16, 0x7F	; 127
    7a6e:	0f bf       	out	0x3f, r16	; 63
    7a70:	0f 91       	pop	r16
    7a72:	0b bf       	out	0x3b, r16	; 59
    7a74:	ff 91       	pop	r31
    7a76:	ef 91       	pop	r30
    7a78:	df 91       	pop	r29
    7a7a:	cf 91       	pop	r28
    7a7c:	bf 91       	pop	r27
    7a7e:	af 91       	pop	r26
    7a80:	9f 91       	pop	r25
    7a82:	8f 91       	pop	r24
    7a84:	7f 91       	pop	r23
    7a86:	6f 91       	pop	r22
    7a88:	5f 91       	pop	r21
    7a8a:	4f 91       	pop	r20
    7a8c:	3f 91       	pop	r19
    7a8e:	2f 91       	pop	r18
    7a90:	1f 91       	pop	r17
    7a92:	0f 91       	pop	r16
    7a94:	ff 90       	pop	r15
    7a96:	ef 90       	pop	r14
    7a98:	df 90       	pop	r13
    7a9a:	cf 90       	pop	r12
    7a9c:	bf 90       	pop	r11
    7a9e:	af 90       	pop	r10
    7aa0:	9f 90       	pop	r9
    7aa2:	8f 90       	pop	r8
    7aa4:	7f 90       	pop	r7
    7aa6:	6f 90       	pop	r6
    7aa8:	5f 90       	pop	r5
    7aaa:	4f 90       	pop	r4
    7aac:	3f 90       	pop	r3
    7aae:	2f 90       	pop	r2
    7ab0:	1f 90       	pop	r1
    7ab2:	0f 90       	pop	r0
    7ab4:	18 95       	reti

00007ab6 <__vector_1>:
    7ab6:	0f 92       	push	r0
    7ab8:	1f 92       	push	r1
    7aba:	2f 92       	push	r2
    7abc:	3f 92       	push	r3
    7abe:	4f 92       	push	r4
    7ac0:	5f 92       	push	r5
    7ac2:	6f 92       	push	r6
    7ac4:	7f 92       	push	r7
    7ac6:	8f 92       	push	r8
    7ac8:	9f 92       	push	r9
    7aca:	af 92       	push	r10
    7acc:	bf 92       	push	r11
    7ace:	cf 92       	push	r12
    7ad0:	df 92       	push	r13
    7ad2:	ef 92       	push	r14
    7ad4:	ff 92       	push	r15
    7ad6:	0f 93       	push	r16
    7ad8:	1f 93       	push	r17
    7ada:	2f 93       	push	r18
    7adc:	3f 93       	push	r19
    7ade:	4f 93       	push	r20
    7ae0:	5f 93       	push	r21
    7ae2:	6f 93       	push	r22
    7ae4:	7f 93       	push	r23
    7ae6:	8f 93       	push	r24
    7ae8:	9f 93       	push	r25
    7aea:	af 93       	push	r26
    7aec:	bf 93       	push	r27
    7aee:	cf 93       	push	r28
    7af0:	df 93       	push	r29
    7af2:	ef 93       	push	r30
    7af4:	ff 93       	push	r31
    7af6:	0b b7       	in	r16, 0x3b	; 59
    7af8:	0f 93       	push	r16
    7afa:	0f b7       	in	r16, 0x3f	; 63
    7afc:	00 68       	ori	r16, 0x80	; 128
    7afe:	0f 93       	push	r16
    7b00:	00 91 4c 08 	lds	r16, 0x084C
    7b04:	03 95       	inc	r16
    7b06:	00 93 4c 08 	sts	0x084C, r16
    7b0a:	01 30       	cpi	r16, 0x01	; 1
    7b0c:	41 f4       	brne	.+16     	; 0x7b1e <BSP_Int0ISR_1>
    7b0e:	e0 91 4d 08 	lds	r30, 0x084D
    7b12:	f0 91 4e 08 	lds	r31, 0x084E
    7b16:	cd b7       	in	r28, 0x3d	; 61
    7b18:	c1 93       	st	Z+, r28
    7b1a:	de b7       	in	r29, 0x3e	; 62
    7b1c:	d1 93       	st	Z+, r29

00007b1e <BSP_Int0ISR_1>:
    7b1e:	0e 94 75 3e 	call	0x7cea	; 0x7cea <BSP_Int0ISR_Handler>
    7b22:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <OSIntExit>
    7b26:	e0 91 4d 08 	lds	r30, 0x084D
    7b2a:	f0 91 4e 08 	lds	r31, 0x084E
    7b2e:	c1 91       	ld	r28, Z+
    7b30:	cd bf       	out	0x3d, r28	; 61
    7b32:	d1 91       	ld	r29, Z+
    7b34:	de bf       	out	0x3e, r29	; 62
    7b36:	0f 91       	pop	r16
    7b38:	0f 77       	andi	r16, 0x7F	; 127
    7b3a:	0f bf       	out	0x3f, r16	; 63
    7b3c:	0f 91       	pop	r16
    7b3e:	0b bf       	out	0x3b, r16	; 59
    7b40:	ff 91       	pop	r31
    7b42:	ef 91       	pop	r30
    7b44:	df 91       	pop	r29
    7b46:	cf 91       	pop	r28
    7b48:	bf 91       	pop	r27
    7b4a:	af 91       	pop	r26
    7b4c:	9f 91       	pop	r25
    7b4e:	8f 91       	pop	r24
    7b50:	7f 91       	pop	r23
    7b52:	6f 91       	pop	r22
    7b54:	5f 91       	pop	r21
    7b56:	4f 91       	pop	r20
    7b58:	3f 91       	pop	r19
    7b5a:	2f 91       	pop	r18
    7b5c:	1f 91       	pop	r17
    7b5e:	0f 91       	pop	r16
    7b60:	ff 90       	pop	r15
    7b62:	ef 90       	pop	r14
    7b64:	df 90       	pop	r13
    7b66:	cf 90       	pop	r12
    7b68:	bf 90       	pop	r11
    7b6a:	af 90       	pop	r10
    7b6c:	9f 90       	pop	r9
    7b6e:	8f 90       	pop	r8
    7b70:	7f 90       	pop	r7
    7b72:	6f 90       	pop	r6
    7b74:	5f 90       	pop	r5
    7b76:	4f 90       	pop	r4
    7b78:	3f 90       	pop	r3
    7b7a:	2f 90       	pop	r2
    7b7c:	1f 90       	pop	r1
    7b7e:	0f 90       	pop	r0
    7b80:	18 95       	reti

00007b82 <BSP_Init>:
* Arguments   : none
*********************************************************************************************************
*/

void  BSP_Init (void)
{
    7b82:	df 93       	push	r29
    7b84:	cf 93       	push	r28
    7b86:	cd b7       	in	r28, 0x3d	; 61
    7b88:	de b7       	in	r29, 0x3e	; 62
    LED_Init();
    7b8a:	0e 94 82 3e 	call	0x7d04	; 0x7d04 <LED_Init>

    BSP_InitTickISR();
    7b8e:	0e 94 ce 3d 	call	0x7b9c	; 0x7b9c <BSP_InitTickISR>
    BSP_InitInt0ISR();
    7b92:	0e 94 02 3e 	call	0x7c04	; 0x7c04 <BSP_InitInt0ISR>
}
    7b96:	cf 91       	pop	r28
    7b98:	df 91       	pop	r29
    7b9a:	08 95       	ret

00007b9c <BSP_InitTickISR>:
*             in integer math, this is equivalent to adding 0.5
*********************************************************************************************************
*/

static  void  BSP_InitTickISR (void)
{
    7b9c:	df 93       	push	r29
    7b9e:	cf 93       	push	r28
    7ba0:	cd b7       	in	r28, 0x3d	; 61
    7ba2:	de b7       	in	r29, 0x3e	; 62
    TCCR0A  |= _BV(WGM01);            									/* Set TIMER0 to CTC Mode              */
    7ba4:	84 e4       	ldi	r24, 0x44	; 68
    7ba6:	90 e0       	ldi	r25, 0x00	; 0
    7ba8:	24 e4       	ldi	r18, 0x44	; 68
    7baa:	30 e0       	ldi	r19, 0x00	; 0
    7bac:	f9 01       	movw	r30, r18
    7bae:	20 81       	ld	r18, Z
    7bb0:	22 60       	ori	r18, 0x02	; 2
    7bb2:	fc 01       	movw	r30, r24
    7bb4:	20 83       	st	Z, r18
    TCCR0B |= _BV(CS02) | _BV(CS00); 				   					/* Set TIMER0 prescaler CLK/1024       */
    7bb6:	85 e4       	ldi	r24, 0x45	; 69
    7bb8:	90 e0       	ldi	r25, 0x00	; 0
    7bba:	25 e4       	ldi	r18, 0x45	; 69
    7bbc:	30 e0       	ldi	r19, 0x00	; 0
    7bbe:	f9 01       	movw	r30, r18
    7bc0:	20 81       	ld	r18, Z
    7bc2:	25 60       	ori	r18, 0x05	; 5
    7bc4:	fc 01       	movw	r30, r24
    7bc6:	20 83       	st	Z, r18
    TCNT0  =    0;                                                      /* Start TCNT at 0 for a new cycle                          */
    7bc8:	86 e4       	ldi	r24, 0x46	; 70
    7bca:	90 e0       	ldi	r25, 0x00	; 0
    7bcc:	fc 01       	movw	r30, r24
    7bce:	10 82       	st	Z, r1
    OCR0A = CPU_CLK_FREQ / OS_TICKS_PER_SEC / 1024 - 1;
    7bd0:	87 e4       	ldi	r24, 0x47	; 71
    7bd2:	90 e0       	ldi	r25, 0x00	; 0
    7bd4:	2b e9       	ldi	r18, 0x9B	; 155
    7bd6:	fc 01       	movw	r30, r24
    7bd8:	20 83       	st	Z, r18
    TIFR0  |= _BV(OCF0A);                                               /* Clear  TIMER0 compare Interrupt Flag                     */
    7bda:	85 e3       	ldi	r24, 0x35	; 53
    7bdc:	90 e0       	ldi	r25, 0x00	; 0
    7bde:	25 e3       	ldi	r18, 0x35	; 53
    7be0:	30 e0       	ldi	r19, 0x00	; 0
    7be2:	f9 01       	movw	r30, r18
    7be4:	20 81       	ld	r18, Z
    7be6:	22 60       	ori	r18, 0x02	; 2
    7be8:	fc 01       	movw	r30, r24
    7bea:	20 83       	st	Z, r18
    TIMSK0 |= _BV(OCIE0A);                                              /* Enable TIMER0 compare Interrupt                          */
    7bec:	8e e6       	ldi	r24, 0x6E	; 110
    7bee:	90 e0       	ldi	r25, 0x00	; 0
    7bf0:	2e e6       	ldi	r18, 0x6E	; 110
    7bf2:	30 e0       	ldi	r19, 0x00	; 0
    7bf4:	f9 01       	movw	r30, r18
    7bf6:	20 81       	ld	r18, Z
    7bf8:	22 60       	ori	r18, 0x02	; 2
    7bfa:	fc 01       	movw	r30, r24
    7bfc:	20 83       	st	Z, r18
}
    7bfe:	cf 91       	pop	r28
    7c00:	df 91       	pop	r29
    7c02:	08 95       	ret

00007c04 <BSP_InitInt0ISR>:
* Interrupt on rising edge of INT0
*********************************************************************************************************
*/

static void  BSP_InitInt0ISR (void)
{
    7c04:	df 93       	push	r29
    7c06:	cf 93       	push	r28
    7c08:	cd b7       	in	r28, 0x3d	; 61
    7c0a:	de b7       	in	r29, 0x3e	; 62
	EICRA |= _BV(ISC00) | _BV(ISC01);
    7c0c:	89 e6       	ldi	r24, 0x69	; 105
    7c0e:	90 e0       	ldi	r25, 0x00	; 0
    7c10:	29 e6       	ldi	r18, 0x69	; 105
    7c12:	30 e0       	ldi	r19, 0x00	; 0
    7c14:	f9 01       	movw	r30, r18
    7c16:	20 81       	ld	r18, Z
    7c18:	23 60       	ori	r18, 0x03	; 3
    7c1a:	fc 01       	movw	r30, r24
    7c1c:	20 83       	st	Z, r18
	EIMSK |= _BV(INT0);
    7c1e:	8d e3       	ldi	r24, 0x3D	; 61
    7c20:	90 e0       	ldi	r25, 0x00	; 0
    7c22:	2d e3       	ldi	r18, 0x3D	; 61
    7c24:	30 e0       	ldi	r19, 0x00	; 0
    7c26:	f9 01       	movw	r30, r18
    7c28:	20 81       	ld	r18, Z
    7c2a:	21 60       	ori	r18, 0x01	; 1
    7c2c:	fc 01       	movw	r30, r24
    7c2e:	20 83       	st	Z, r18
}
    7c30:	cf 91       	pop	r28
    7c32:	df 91       	pop	r29
    7c34:	08 95       	ret

00007c36 <BSP_Int0_Disable>:
*********************************************************************************************************
* Disable INT0 interrupt
*********************************************************************************************************
*/
void  inline BSP_Int0_Disable(void)
{
    7c36:	df 93       	push	r29
    7c38:	cf 93       	push	r28
    7c3a:	cd b7       	in	r28, 0x3d	; 61
    7c3c:	de b7       	in	r29, 0x3e	; 62
	EIMSK &= ~_BV(INT0);
    7c3e:	8d e3       	ldi	r24, 0x3D	; 61
    7c40:	90 e0       	ldi	r25, 0x00	; 0
    7c42:	2d e3       	ldi	r18, 0x3D	; 61
    7c44:	30 e0       	ldi	r19, 0x00	; 0
    7c46:	f9 01       	movw	r30, r18
    7c48:	20 81       	ld	r18, Z
    7c4a:	2e 7f       	andi	r18, 0xFE	; 254
    7c4c:	fc 01       	movw	r30, r24
    7c4e:	20 83       	st	Z, r18
}
    7c50:	cf 91       	pop	r28
    7c52:	df 91       	pop	r29
    7c54:	08 95       	ret

00007c56 <BSP_Int0_Enable>:
* Enable INT0 interrupt
* \param clear_pending true: clears pending INT0 interrupt before enabling
*********************************************************************************************************
*/
void  inline BSP_Int0_Enable(uint8_t clear_pending)
{
    7c56:	df 93       	push	r29
    7c58:	cf 93       	push	r28
    7c5a:	0f 92       	push	r0
    7c5c:	cd b7       	in	r28, 0x3d	; 61
    7c5e:	de b7       	in	r29, 0x3e	; 62
    7c60:	89 83       	std	Y+1, r24	; 0x01
	if (clear_pending)
    7c62:	89 81       	ldd	r24, Y+1	; 0x01
    7c64:	88 23       	and	r24, r24
    7c66:	49 f0       	breq	.+18     	; 0x7c7a <BSP_Int0_Enable+0x24>
	{
		EIFR &= ~_BV(INTF0); // Clear INT0 Flag
    7c68:	8c e3       	ldi	r24, 0x3C	; 60
    7c6a:	90 e0       	ldi	r25, 0x00	; 0
    7c6c:	2c e3       	ldi	r18, 0x3C	; 60
    7c6e:	30 e0       	ldi	r19, 0x00	; 0
    7c70:	f9 01       	movw	r30, r18
    7c72:	20 81       	ld	r18, Z
    7c74:	2e 7f       	andi	r18, 0xFE	; 254
    7c76:	fc 01       	movw	r30, r24
    7c78:	20 83       	st	Z, r18
	}
	EIMSK |= _BV(INT0);
    7c7a:	8d e3       	ldi	r24, 0x3D	; 61
    7c7c:	90 e0       	ldi	r25, 0x00	; 0
    7c7e:	2d e3       	ldi	r18, 0x3D	; 61
    7c80:	30 e0       	ldi	r19, 0x00	; 0
    7c82:	f9 01       	movw	r30, r18
    7c84:	20 81       	ld	r18, Z
    7c86:	21 60       	ori	r18, 0x01	; 1
    7c88:	fc 01       	movw	r30, r24
    7c8a:	20 83       	st	Z, r18
}
    7c8c:	0f 90       	pop	r0
    7c8e:	cf 91       	pop	r28
    7c90:	df 91       	pop	r29
    7c92:	08 95       	ret

00007c94 <SW_in>:
* \param sw switch to read the status of. [1..8]
* \return 0: switch is not activated, <>0: switch is activated.
*********************************************************************************************************
*/
INT8U  SW_in(INT8U sw)
{
    7c94:	df 93       	push	r29
    7c96:	cf 93       	push	r28
    7c98:	0f 92       	push	r0
    7c9a:	cd b7       	in	r28, 0x3d	; 61
    7c9c:	de b7       	in	r29, 0x3e	; 62
    7c9e:	89 83       	std	Y+1, r24	; 0x01
	return (PIND & _BV(--sw)) == 0;
    7ca0:	89 e2       	ldi	r24, 0x29	; 41
    7ca2:	90 e0       	ldi	r25, 0x00	; 0
    7ca4:	fc 01       	movw	r30, r24
    7ca6:	80 81       	ld	r24, Z
    7ca8:	88 2f       	mov	r24, r24
    7caa:	90 e0       	ldi	r25, 0x00	; 0
    7cac:	29 81       	ldd	r18, Y+1	; 0x01
    7cae:	21 50       	subi	r18, 0x01	; 1
    7cb0:	29 83       	std	Y+1, r18	; 0x01
    7cb2:	29 81       	ldd	r18, Y+1	; 0x01
    7cb4:	22 2f       	mov	r18, r18
    7cb6:	30 e0       	ldi	r19, 0x00	; 0
    7cb8:	02 c0       	rjmp	.+4      	; 0x7cbe <SW_in+0x2a>
    7cba:	95 95       	asr	r25
    7cbc:	87 95       	ror	r24
    7cbe:	2a 95       	dec	r18
    7cc0:	e2 f7       	brpl	.-8      	; 0x7cba <SW_in+0x26>
    7cc2:	81 70       	andi	r24, 0x01	; 1
    7cc4:	90 70       	andi	r25, 0x00	; 0
    7cc6:	20 e0       	ldi	r18, 0x00	; 0
    7cc8:	00 97       	sbiw	r24, 0x00	; 0
    7cca:	09 f4       	brne	.+2      	; 0x7cce <SW_in+0x3a>
    7ccc:	21 e0       	ldi	r18, 0x01	; 1
    7cce:	82 2f       	mov	r24, r18
}
    7cd0:	0f 90       	pop	r0
    7cd2:	cf 91       	pop	r28
    7cd4:	df 91       	pop	r29
    7cd6:	08 95       	ret

00007cd8 <BSP_TickISR_Handler>:
*             the interrupt is automatically cleared in hardware when the ISR runs.
*********************************************************************************************************
*/

void  BSP_TickISR_Handler(void)
{
    7cd8:	df 93       	push	r29
    7cda:	cf 93       	push	r28
    7cdc:	cd b7       	in	r28, 0x3d	; 61
    7cde:	de b7       	in	r29, 0x3e	; 62
    OSTimeTick();
    7ce0:	0e 94 5e 06 	call	0xcbc	; 0xcbc <OSTimeTick>
}
    7ce4:	cf 91       	pop	r28
    7ce6:	df 91       	pop	r29
    7ce8:	08 95       	ret

00007cea <BSP_Int0ISR_Handler>:
*             the interrupt is automatically cleared in hardware when the ISR runs.
*********************************************************************************************************
*/

void  BSP_Int0ISR_Handler(void)
{
    7cea:	df 93       	push	r29
    7cec:	cf 93       	push	r28
    7cee:	cd b7       	in	r28, 0x3d	; 61
    7cf0:	de b7       	in	r29, 0x3e	; 62
	OSSemPost(a_sem);
    7cf2:	80 91 e6 0d 	lds	r24, 0x0DE6
    7cf6:	90 91 e7 0d 	lds	r25, 0x0DE7
    7cfa:	0e 94 21 10 	call	0x2042	; 0x2042 <OSSemPost>
}
    7cfe:	cf 91       	pop	r28
    7d00:	df 91       	pop	r29
    7d02:	08 95       	ret

00007d04 <LED_Init>:
* Arguments   : none
*********************************************************************************************************
*/

static  void  LED_Init (void)
{
    7d04:	df 93       	push	r29
    7d06:	cf 93       	push	r28
    7d08:	cd b7       	in	r28, 0x3d	; 61
    7d0a:	de b7       	in	r29, 0x3e	; 62
    DDRA  = 0xFF;                                                       /* All PORTA pins are outputs                               */
    7d0c:	81 e2       	ldi	r24, 0x21	; 33
    7d0e:	90 e0       	ldi	r25, 0x00	; 0
    7d10:	2f ef       	ldi	r18, 0xFF	; 255
    7d12:	fc 01       	movw	r30, r24
    7d14:	20 83       	st	Z, r18
    LED_Off(0);                                                         /* Turn ON all the LEDs                                     */
    7d16:	80 e0       	ldi	r24, 0x00	; 0
    7d18:	0e 94 22 3f 	call	0x7e44	; 0x7e44 <LED_Off>
}
    7d1c:	cf 91       	pop	r28
    7d1e:	df 91       	pop	r29
    7d20:	08 95       	ret

00007d22 <LED_On>:
*                      8    turns ON LED8 on the board
*********************************************************************************************************
*/

void  LED_On (INT8U led)
{
    7d22:	df 93       	push	r29
    7d24:	cf 93       	push	r28
    7d26:	0f 92       	push	r0
    7d28:	0f 92       	push	r0
    7d2a:	cd b7       	in	r28, 0x3d	; 61
    7d2c:	de b7       	in	r29, 0x3e	; 62
    7d2e:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
    7d30:	19 82       	std	Y+1, r1	; 0x01
#endif


    OS_ENTER_CRITICAL();
    7d32:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7d36:	89 83       	std	Y+1, r24	; 0x01
    switch (led) {
    7d38:	8a 81       	ldd	r24, Y+2	; 0x02
    7d3a:	88 2f       	mov	r24, r24
    7d3c:	90 e0       	ldi	r25, 0x00	; 0
    7d3e:	84 30       	cpi	r24, 0x04	; 4
    7d40:	91 05       	cpc	r25, r1
    7d42:	09 f4       	brne	.+2      	; 0x7d46 <LED_On+0x24>
    7d44:	46 c0       	rjmp	.+140    	; 0x7dd2 <LED_On+0xb0>
    7d46:	85 30       	cpi	r24, 0x05	; 5
    7d48:	91 05       	cpc	r25, r1
    7d4a:	84 f4       	brge	.+32     	; 0x7d6c <LED_On+0x4a>
    7d4c:	81 30       	cpi	r24, 0x01	; 1
    7d4e:	91 05       	cpc	r25, r1
    7d50:	11 f1       	breq	.+68     	; 0x7d96 <LED_On+0x74>
    7d52:	82 30       	cpi	r24, 0x02	; 2
    7d54:	91 05       	cpc	r25, r1
    7d56:	1c f4       	brge	.+6      	; 0x7d5e <LED_On+0x3c>
    7d58:	00 97       	sbiw	r24, 0x00	; 0
    7d5a:	c1 f0       	breq	.+48     	; 0x7d8c <LED_On+0x6a>
    7d5c:	6b c0       	rjmp	.+214    	; 0x7e34 <LED_On+0x112>
    7d5e:	82 30       	cpi	r24, 0x02	; 2
    7d60:	91 05       	cpc	r25, r1
    7d62:	19 f1       	breq	.+70     	; 0x7daa <LED_On+0x88>
    7d64:	83 30       	cpi	r24, 0x03	; 3
    7d66:	91 05       	cpc	r25, r1
    7d68:	51 f1       	breq	.+84     	; 0x7dbe <LED_On+0x9c>
    7d6a:	64 c0       	rjmp	.+200    	; 0x7e34 <LED_On+0x112>
    7d6c:	86 30       	cpi	r24, 0x06	; 6
    7d6e:	91 05       	cpc	r25, r1
    7d70:	09 f4       	brne	.+2      	; 0x7d74 <LED_On+0x52>
    7d72:	43 c0       	rjmp	.+134    	; 0x7dfa <LED_On+0xd8>
    7d74:	86 30       	cpi	r24, 0x06	; 6
    7d76:	91 05       	cpc	r25, r1
    7d78:	b4 f1       	brlt	.+108    	; 0x7de6 <LED_On+0xc4>
    7d7a:	87 30       	cpi	r24, 0x07	; 7
    7d7c:	91 05       	cpc	r25, r1
    7d7e:	09 f4       	brne	.+2      	; 0x7d82 <LED_On+0x60>
    7d80:	46 c0       	rjmp	.+140    	; 0x7e0e <LED_On+0xec>
    7d82:	88 30       	cpi	r24, 0x08	; 8
    7d84:	91 05       	cpc	r25, r1
    7d86:	09 f4       	brne	.+2      	; 0x7d8a <LED_On+0x68>
    7d88:	4c c0       	rjmp	.+152    	; 0x7e22 <LED_On+0x100>
    7d8a:	54 c0       	rjmp	.+168    	; 0x7e34 <LED_On+0x112>
        case 0:
             PORTA  =  0x00;
    7d8c:	82 e2       	ldi	r24, 0x22	; 34
    7d8e:	90 e0       	ldi	r25, 0x00	; 0
    7d90:	fc 01       	movw	r30, r24
    7d92:	10 82       	st	Z, r1
             break;
    7d94:	4f c0       	rjmp	.+158    	; 0x7e34 <LED_On+0x112>

        case 1:
             PORTA &= ~0x01;
    7d96:	82 e2       	ldi	r24, 0x22	; 34
    7d98:	90 e0       	ldi	r25, 0x00	; 0
    7d9a:	22 e2       	ldi	r18, 0x22	; 34
    7d9c:	30 e0       	ldi	r19, 0x00	; 0
    7d9e:	f9 01       	movw	r30, r18
    7da0:	20 81       	ld	r18, Z
    7da2:	2e 7f       	andi	r18, 0xFE	; 254
    7da4:	fc 01       	movw	r30, r24
    7da6:	20 83       	st	Z, r18
             break;
    7da8:	45 c0       	rjmp	.+138    	; 0x7e34 <LED_On+0x112>

        case 2:
             PORTA &= ~0x02;
    7daa:	82 e2       	ldi	r24, 0x22	; 34
    7dac:	90 e0       	ldi	r25, 0x00	; 0
    7dae:	22 e2       	ldi	r18, 0x22	; 34
    7db0:	30 e0       	ldi	r19, 0x00	; 0
    7db2:	f9 01       	movw	r30, r18
    7db4:	20 81       	ld	r18, Z
    7db6:	2d 7f       	andi	r18, 0xFD	; 253
    7db8:	fc 01       	movw	r30, r24
    7dba:	20 83       	st	Z, r18
             break;
    7dbc:	3b c0       	rjmp	.+118    	; 0x7e34 <LED_On+0x112>

        case 3:
             PORTA &= ~0x04;
    7dbe:	82 e2       	ldi	r24, 0x22	; 34
    7dc0:	90 e0       	ldi	r25, 0x00	; 0
    7dc2:	22 e2       	ldi	r18, 0x22	; 34
    7dc4:	30 e0       	ldi	r19, 0x00	; 0
    7dc6:	f9 01       	movw	r30, r18
    7dc8:	20 81       	ld	r18, Z
    7dca:	2b 7f       	andi	r18, 0xFB	; 251
    7dcc:	fc 01       	movw	r30, r24
    7dce:	20 83       	st	Z, r18
             break;
    7dd0:	31 c0       	rjmp	.+98     	; 0x7e34 <LED_On+0x112>

        case 4:
             PORTA &= ~0x08;
    7dd2:	82 e2       	ldi	r24, 0x22	; 34
    7dd4:	90 e0       	ldi	r25, 0x00	; 0
    7dd6:	22 e2       	ldi	r18, 0x22	; 34
    7dd8:	30 e0       	ldi	r19, 0x00	; 0
    7dda:	f9 01       	movw	r30, r18
    7ddc:	20 81       	ld	r18, Z
    7dde:	27 7f       	andi	r18, 0xF7	; 247
    7de0:	fc 01       	movw	r30, r24
    7de2:	20 83       	st	Z, r18
             break;
    7de4:	27 c0       	rjmp	.+78     	; 0x7e34 <LED_On+0x112>

        case 5:
             PORTA &= ~0x10;
    7de6:	82 e2       	ldi	r24, 0x22	; 34
    7de8:	90 e0       	ldi	r25, 0x00	; 0
    7dea:	22 e2       	ldi	r18, 0x22	; 34
    7dec:	30 e0       	ldi	r19, 0x00	; 0
    7dee:	f9 01       	movw	r30, r18
    7df0:	20 81       	ld	r18, Z
    7df2:	2f 7e       	andi	r18, 0xEF	; 239
    7df4:	fc 01       	movw	r30, r24
    7df6:	20 83       	st	Z, r18
             break;
    7df8:	1d c0       	rjmp	.+58     	; 0x7e34 <LED_On+0x112>

        case 6:
             PORTA &= ~0x20;
    7dfa:	82 e2       	ldi	r24, 0x22	; 34
    7dfc:	90 e0       	ldi	r25, 0x00	; 0
    7dfe:	22 e2       	ldi	r18, 0x22	; 34
    7e00:	30 e0       	ldi	r19, 0x00	; 0
    7e02:	f9 01       	movw	r30, r18
    7e04:	20 81       	ld	r18, Z
    7e06:	2f 7d       	andi	r18, 0xDF	; 223
    7e08:	fc 01       	movw	r30, r24
    7e0a:	20 83       	st	Z, r18
             break;
    7e0c:	13 c0       	rjmp	.+38     	; 0x7e34 <LED_On+0x112>

        case 7:
             PORTA &= ~0x40;
    7e0e:	82 e2       	ldi	r24, 0x22	; 34
    7e10:	90 e0       	ldi	r25, 0x00	; 0
    7e12:	22 e2       	ldi	r18, 0x22	; 34
    7e14:	30 e0       	ldi	r19, 0x00	; 0
    7e16:	f9 01       	movw	r30, r18
    7e18:	20 81       	ld	r18, Z
    7e1a:	2f 7b       	andi	r18, 0xBF	; 191
    7e1c:	fc 01       	movw	r30, r24
    7e1e:	20 83       	st	Z, r18
             break;
    7e20:	09 c0       	rjmp	.+18     	; 0x7e34 <LED_On+0x112>

        case 8:
             PORTA &= ~0x80;
    7e22:	82 e2       	ldi	r24, 0x22	; 34
    7e24:	90 e0       	ldi	r25, 0x00	; 0
    7e26:	22 e2       	ldi	r18, 0x22	; 34
    7e28:	30 e0       	ldi	r19, 0x00	; 0
    7e2a:	f9 01       	movw	r30, r18
    7e2c:	20 81       	ld	r18, Z
    7e2e:	2f 77       	andi	r18, 0x7F	; 127
    7e30:	fc 01       	movw	r30, r24
    7e32:	20 83       	st	Z, r18
             break;
    }
    OS_EXIT_CRITICAL();
    7e34:	89 81       	ldd	r24, Y+1	; 0x01
    7e36:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    7e3a:	0f 90       	pop	r0
    7e3c:	0f 90       	pop	r0
    7e3e:	cf 91       	pop	r28
    7e40:	df 91       	pop	r29
    7e42:	08 95       	ret

00007e44 <LED_Off>:
*                      8    turns OFF LED8 on the board
*********************************************************************************************************
*/

void  LED_Off (INT8U led)
{
    7e44:	df 93       	push	r29
    7e46:	cf 93       	push	r28
    7e48:	0f 92       	push	r0
    7e4a:	0f 92       	push	r0
    7e4c:	cd b7       	in	r28, 0x3d	; 61
    7e4e:	de b7       	in	r29, 0x3e	; 62
    7e50:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
    7e52:	19 82       	std	Y+1, r1	; 0x01
#endif


    OS_ENTER_CRITICAL();
    7e54:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7e58:	89 83       	std	Y+1, r24	; 0x01
    switch (led) {
    7e5a:	8a 81       	ldd	r24, Y+2	; 0x02
    7e5c:	88 2f       	mov	r24, r24
    7e5e:	90 e0       	ldi	r25, 0x00	; 0
    7e60:	84 30       	cpi	r24, 0x04	; 4
    7e62:	91 05       	cpc	r25, r1
    7e64:	09 f4       	brne	.+2      	; 0x7e68 <LED_Off+0x24>
    7e66:	47 c0       	rjmp	.+142    	; 0x7ef6 <LED_Off+0xb2>
    7e68:	85 30       	cpi	r24, 0x05	; 5
    7e6a:	91 05       	cpc	r25, r1
    7e6c:	84 f4       	brge	.+32     	; 0x7e8e <LED_Off+0x4a>
    7e6e:	81 30       	cpi	r24, 0x01	; 1
    7e70:	91 05       	cpc	r25, r1
    7e72:	19 f1       	breq	.+70     	; 0x7eba <LED_Off+0x76>
    7e74:	82 30       	cpi	r24, 0x02	; 2
    7e76:	91 05       	cpc	r25, r1
    7e78:	1c f4       	brge	.+6      	; 0x7e80 <LED_Off+0x3c>
    7e7a:	00 97       	sbiw	r24, 0x00	; 0
    7e7c:	c1 f0       	breq	.+48     	; 0x7eae <LED_Off+0x6a>
    7e7e:	6c c0       	rjmp	.+216    	; 0x7f58 <LED_Off+0x114>
    7e80:	82 30       	cpi	r24, 0x02	; 2
    7e82:	91 05       	cpc	r25, r1
    7e84:	21 f1       	breq	.+72     	; 0x7ece <LED_Off+0x8a>
    7e86:	83 30       	cpi	r24, 0x03	; 3
    7e88:	91 05       	cpc	r25, r1
    7e8a:	59 f1       	breq	.+86     	; 0x7ee2 <LED_Off+0x9e>
    7e8c:	65 c0       	rjmp	.+202    	; 0x7f58 <LED_Off+0x114>
    7e8e:	86 30       	cpi	r24, 0x06	; 6
    7e90:	91 05       	cpc	r25, r1
    7e92:	09 f4       	brne	.+2      	; 0x7e96 <LED_Off+0x52>
    7e94:	44 c0       	rjmp	.+136    	; 0x7f1e <LED_Off+0xda>
    7e96:	86 30       	cpi	r24, 0x06	; 6
    7e98:	91 05       	cpc	r25, r1
    7e9a:	bc f1       	brlt	.+110    	; 0x7f0a <LED_Off+0xc6>
    7e9c:	87 30       	cpi	r24, 0x07	; 7
    7e9e:	91 05       	cpc	r25, r1
    7ea0:	09 f4       	brne	.+2      	; 0x7ea4 <LED_Off+0x60>
    7ea2:	47 c0       	rjmp	.+142    	; 0x7f32 <LED_Off+0xee>
    7ea4:	88 30       	cpi	r24, 0x08	; 8
    7ea6:	91 05       	cpc	r25, r1
    7ea8:	09 f4       	brne	.+2      	; 0x7eac <LED_Off+0x68>
    7eaa:	4d c0       	rjmp	.+154    	; 0x7f46 <LED_Off+0x102>
    7eac:	55 c0       	rjmp	.+170    	; 0x7f58 <LED_Off+0x114>
        case 0:
             PORTA  =  0xFF;
    7eae:	82 e2       	ldi	r24, 0x22	; 34
    7eb0:	90 e0       	ldi	r25, 0x00	; 0
    7eb2:	2f ef       	ldi	r18, 0xFF	; 255
    7eb4:	fc 01       	movw	r30, r24
    7eb6:	20 83       	st	Z, r18
             break;
    7eb8:	4f c0       	rjmp	.+158    	; 0x7f58 <LED_Off+0x114>

        case 1:
             PORTA |=  0x01;
    7eba:	82 e2       	ldi	r24, 0x22	; 34
    7ebc:	90 e0       	ldi	r25, 0x00	; 0
    7ebe:	22 e2       	ldi	r18, 0x22	; 34
    7ec0:	30 e0       	ldi	r19, 0x00	; 0
    7ec2:	f9 01       	movw	r30, r18
    7ec4:	20 81       	ld	r18, Z
    7ec6:	21 60       	ori	r18, 0x01	; 1
    7ec8:	fc 01       	movw	r30, r24
    7eca:	20 83       	st	Z, r18
             break;
    7ecc:	45 c0       	rjmp	.+138    	; 0x7f58 <LED_Off+0x114>

        case 2:
             PORTA |=  0x02;
    7ece:	82 e2       	ldi	r24, 0x22	; 34
    7ed0:	90 e0       	ldi	r25, 0x00	; 0
    7ed2:	22 e2       	ldi	r18, 0x22	; 34
    7ed4:	30 e0       	ldi	r19, 0x00	; 0
    7ed6:	f9 01       	movw	r30, r18
    7ed8:	20 81       	ld	r18, Z
    7eda:	22 60       	ori	r18, 0x02	; 2
    7edc:	fc 01       	movw	r30, r24
    7ede:	20 83       	st	Z, r18
             break;
    7ee0:	3b c0       	rjmp	.+118    	; 0x7f58 <LED_Off+0x114>

        case 3:
             PORTA |=  0x04;
    7ee2:	82 e2       	ldi	r24, 0x22	; 34
    7ee4:	90 e0       	ldi	r25, 0x00	; 0
    7ee6:	22 e2       	ldi	r18, 0x22	; 34
    7ee8:	30 e0       	ldi	r19, 0x00	; 0
    7eea:	f9 01       	movw	r30, r18
    7eec:	20 81       	ld	r18, Z
    7eee:	24 60       	ori	r18, 0x04	; 4
    7ef0:	fc 01       	movw	r30, r24
    7ef2:	20 83       	st	Z, r18
             break;
    7ef4:	31 c0       	rjmp	.+98     	; 0x7f58 <LED_Off+0x114>

        case 4:
             PORTA |=  0x08;
    7ef6:	82 e2       	ldi	r24, 0x22	; 34
    7ef8:	90 e0       	ldi	r25, 0x00	; 0
    7efa:	22 e2       	ldi	r18, 0x22	; 34
    7efc:	30 e0       	ldi	r19, 0x00	; 0
    7efe:	f9 01       	movw	r30, r18
    7f00:	20 81       	ld	r18, Z
    7f02:	28 60       	ori	r18, 0x08	; 8
    7f04:	fc 01       	movw	r30, r24
    7f06:	20 83       	st	Z, r18
             break;
    7f08:	27 c0       	rjmp	.+78     	; 0x7f58 <LED_Off+0x114>

        case 5:
             PORTA |=  0x10;
    7f0a:	82 e2       	ldi	r24, 0x22	; 34
    7f0c:	90 e0       	ldi	r25, 0x00	; 0
    7f0e:	22 e2       	ldi	r18, 0x22	; 34
    7f10:	30 e0       	ldi	r19, 0x00	; 0
    7f12:	f9 01       	movw	r30, r18
    7f14:	20 81       	ld	r18, Z
    7f16:	20 61       	ori	r18, 0x10	; 16
    7f18:	fc 01       	movw	r30, r24
    7f1a:	20 83       	st	Z, r18
             break;
    7f1c:	1d c0       	rjmp	.+58     	; 0x7f58 <LED_Off+0x114>

        case 6:
             PORTA |=  0x20;
    7f1e:	82 e2       	ldi	r24, 0x22	; 34
    7f20:	90 e0       	ldi	r25, 0x00	; 0
    7f22:	22 e2       	ldi	r18, 0x22	; 34
    7f24:	30 e0       	ldi	r19, 0x00	; 0
    7f26:	f9 01       	movw	r30, r18
    7f28:	20 81       	ld	r18, Z
    7f2a:	20 62       	ori	r18, 0x20	; 32
    7f2c:	fc 01       	movw	r30, r24
    7f2e:	20 83       	st	Z, r18
             break;
    7f30:	13 c0       	rjmp	.+38     	; 0x7f58 <LED_Off+0x114>

        case 7:
             PORTA |=  0x40;
    7f32:	82 e2       	ldi	r24, 0x22	; 34
    7f34:	90 e0       	ldi	r25, 0x00	; 0
    7f36:	22 e2       	ldi	r18, 0x22	; 34
    7f38:	30 e0       	ldi	r19, 0x00	; 0
    7f3a:	f9 01       	movw	r30, r18
    7f3c:	20 81       	ld	r18, Z
    7f3e:	20 64       	ori	r18, 0x40	; 64
    7f40:	fc 01       	movw	r30, r24
    7f42:	20 83       	st	Z, r18
             break;
    7f44:	09 c0       	rjmp	.+18     	; 0x7f58 <LED_Off+0x114>

        case 8:
             PORTA |=  0x80;
    7f46:	82 e2       	ldi	r24, 0x22	; 34
    7f48:	90 e0       	ldi	r25, 0x00	; 0
    7f4a:	22 e2       	ldi	r18, 0x22	; 34
    7f4c:	30 e0       	ldi	r19, 0x00	; 0
    7f4e:	f9 01       	movw	r30, r18
    7f50:	20 81       	ld	r18, Z
    7f52:	20 68       	ori	r18, 0x80	; 128
    7f54:	fc 01       	movw	r30, r24
    7f56:	20 83       	st	Z, r18
             break;
    }
    OS_EXIT_CRITICAL();
    7f58:	89 81       	ldd	r24, Y+1	; 0x01
    7f5a:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    7f5e:	0f 90       	pop	r0
    7f60:	0f 90       	pop	r0
    7f62:	cf 91       	pop	r28
    7f64:	df 91       	pop	r29
    7f66:	08 95       	ret

00007f68 <LED_Toggle>:
*                      8    Toggle LED7 on the board
*********************************************************************************************************
*/

void  LED_Toggle (INT8U led)
{
    7f68:	df 93       	push	r29
    7f6a:	cf 93       	push	r28
    7f6c:	0f 92       	push	r0
    7f6e:	0f 92       	push	r0
    7f70:	cd b7       	in	r28, 0x3d	; 61
    7f72:	de b7       	in	r29, 0x3e	; 62
    7f74:	8a 83       	std	Y+2, r24	; 0x02
#if OS_CRITICAL_METHOD == 3                                             /* Allocate storage for CPU status register                 */
    OS_CPU_SR  cpu_sr = 0;
    7f76:	19 82       	std	Y+1, r1	; 0x01
#endif


    OS_ENTER_CRITICAL();
    7f78:	0e 94 c3 00 	call	0x186	; 0x186 <OS_CPU_SR_Save>
    7f7c:	89 83       	std	Y+1, r24	; 0x01
    switch (led) {
    7f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    7f80:	88 2f       	mov	r24, r24
    7f82:	90 e0       	ldi	r25, 0x00	; 0
    7f84:	84 30       	cpi	r24, 0x04	; 4
    7f86:	91 05       	cpc	r25, r1
    7f88:	09 f4       	brne	.+2      	; 0x7f8c <LED_Toggle+0x24>
    7f8a:	4f c0       	rjmp	.+158    	; 0x802a <LED_Toggle+0xc2>
    7f8c:	85 30       	cpi	r24, 0x05	; 5
    7f8e:	91 05       	cpc	r25, r1
    7f90:	84 f4       	brge	.+32     	; 0x7fb2 <LED_Toggle+0x4a>
    7f92:	81 30       	cpi	r24, 0x01	; 1
    7f94:	91 05       	cpc	r25, r1
    7f96:	41 f1       	breq	.+80     	; 0x7fe8 <LED_Toggle+0x80>
    7f98:	82 30       	cpi	r24, 0x02	; 2
    7f9a:	91 05       	cpc	r25, r1
    7f9c:	1c f4       	brge	.+6      	; 0x7fa4 <LED_Toggle+0x3c>
    7f9e:	00 97       	sbiw	r24, 0x00	; 0
    7fa0:	c9 f0       	breq	.+50     	; 0x7fd4 <LED_Toggle+0x6c>
    7fa2:	79 c0       	rjmp	.+242    	; 0x8096 <LED_Toggle+0x12e>
    7fa4:	82 30       	cpi	r24, 0x02	; 2
    7fa6:	91 05       	cpc	r25, r1
    7fa8:	51 f1       	breq	.+84     	; 0x7ffe <LED_Toggle+0x96>
    7faa:	83 30       	cpi	r24, 0x03	; 3
    7fac:	91 05       	cpc	r25, r1
    7fae:	91 f1       	breq	.+100    	; 0x8014 <LED_Toggle+0xac>
    7fb0:	72 c0       	rjmp	.+228    	; 0x8096 <LED_Toggle+0x12e>
    7fb2:	86 30       	cpi	r24, 0x06	; 6
    7fb4:	91 05       	cpc	r25, r1
    7fb6:	09 f4       	brne	.+2      	; 0x7fba <LED_Toggle+0x52>
    7fb8:	4e c0       	rjmp	.+156    	; 0x8056 <LED_Toggle+0xee>
    7fba:	86 30       	cpi	r24, 0x06	; 6
    7fbc:	91 05       	cpc	r25, r1
    7fbe:	0c f4       	brge	.+2      	; 0x7fc2 <LED_Toggle+0x5a>
    7fc0:	3f c0       	rjmp	.+126    	; 0x8040 <LED_Toggle+0xd8>
    7fc2:	87 30       	cpi	r24, 0x07	; 7
    7fc4:	91 05       	cpc	r25, r1
    7fc6:	09 f4       	brne	.+2      	; 0x7fca <LED_Toggle+0x62>
    7fc8:	51 c0       	rjmp	.+162    	; 0x806c <LED_Toggle+0x104>
    7fca:	88 30       	cpi	r24, 0x08	; 8
    7fcc:	91 05       	cpc	r25, r1
    7fce:	09 f4       	brne	.+2      	; 0x7fd2 <LED_Toggle+0x6a>
    7fd0:	58 c0       	rjmp	.+176    	; 0x8082 <LED_Toggle+0x11a>
    7fd2:	61 c0       	rjmp	.+194    	; 0x8096 <LED_Toggle+0x12e>
        case 0:
             PORTA ^=  0xFF;
    7fd4:	82 e2       	ldi	r24, 0x22	; 34
    7fd6:	90 e0       	ldi	r25, 0x00	; 0
    7fd8:	22 e2       	ldi	r18, 0x22	; 34
    7fda:	30 e0       	ldi	r19, 0x00	; 0
    7fdc:	f9 01       	movw	r30, r18
    7fde:	20 81       	ld	r18, Z
    7fe0:	20 95       	com	r18
    7fe2:	fc 01       	movw	r30, r24
    7fe4:	20 83       	st	Z, r18
             break;
    7fe6:	57 c0       	rjmp	.+174    	; 0x8096 <LED_Toggle+0x12e>

        case 1:
             PORTA ^=  0x01;
    7fe8:	82 e2       	ldi	r24, 0x22	; 34
    7fea:	90 e0       	ldi	r25, 0x00	; 0
    7fec:	22 e2       	ldi	r18, 0x22	; 34
    7fee:	30 e0       	ldi	r19, 0x00	; 0
    7ff0:	f9 01       	movw	r30, r18
    7ff2:	30 81       	ld	r19, Z
    7ff4:	21 e0       	ldi	r18, 0x01	; 1
    7ff6:	23 27       	eor	r18, r19
    7ff8:	fc 01       	movw	r30, r24
    7ffa:	20 83       	st	Z, r18
             break;
    7ffc:	4c c0       	rjmp	.+152    	; 0x8096 <LED_Toggle+0x12e>

        case 2:
             PORTA ^=  0x02;
    7ffe:	82 e2       	ldi	r24, 0x22	; 34
    8000:	90 e0       	ldi	r25, 0x00	; 0
    8002:	22 e2       	ldi	r18, 0x22	; 34
    8004:	30 e0       	ldi	r19, 0x00	; 0
    8006:	f9 01       	movw	r30, r18
    8008:	30 81       	ld	r19, Z
    800a:	22 e0       	ldi	r18, 0x02	; 2
    800c:	23 27       	eor	r18, r19
    800e:	fc 01       	movw	r30, r24
    8010:	20 83       	st	Z, r18
             break;
    8012:	41 c0       	rjmp	.+130    	; 0x8096 <LED_Toggle+0x12e>

        case 3:
             PORTA ^=  0x04;
    8014:	82 e2       	ldi	r24, 0x22	; 34
    8016:	90 e0       	ldi	r25, 0x00	; 0
    8018:	22 e2       	ldi	r18, 0x22	; 34
    801a:	30 e0       	ldi	r19, 0x00	; 0
    801c:	f9 01       	movw	r30, r18
    801e:	30 81       	ld	r19, Z
    8020:	24 e0       	ldi	r18, 0x04	; 4
    8022:	23 27       	eor	r18, r19
    8024:	fc 01       	movw	r30, r24
    8026:	20 83       	st	Z, r18
             break;
    8028:	36 c0       	rjmp	.+108    	; 0x8096 <LED_Toggle+0x12e>

        case 4:
             PORTA ^=  0x08;
    802a:	82 e2       	ldi	r24, 0x22	; 34
    802c:	90 e0       	ldi	r25, 0x00	; 0
    802e:	22 e2       	ldi	r18, 0x22	; 34
    8030:	30 e0       	ldi	r19, 0x00	; 0
    8032:	f9 01       	movw	r30, r18
    8034:	30 81       	ld	r19, Z
    8036:	28 e0       	ldi	r18, 0x08	; 8
    8038:	23 27       	eor	r18, r19
    803a:	fc 01       	movw	r30, r24
    803c:	20 83       	st	Z, r18
             break;
    803e:	2b c0       	rjmp	.+86     	; 0x8096 <LED_Toggle+0x12e>

        case 5:
             PORTA ^=  0x10;
    8040:	82 e2       	ldi	r24, 0x22	; 34
    8042:	90 e0       	ldi	r25, 0x00	; 0
    8044:	22 e2       	ldi	r18, 0x22	; 34
    8046:	30 e0       	ldi	r19, 0x00	; 0
    8048:	f9 01       	movw	r30, r18
    804a:	30 81       	ld	r19, Z
    804c:	20 e1       	ldi	r18, 0x10	; 16
    804e:	23 27       	eor	r18, r19
    8050:	fc 01       	movw	r30, r24
    8052:	20 83       	st	Z, r18
             break;
    8054:	20 c0       	rjmp	.+64     	; 0x8096 <LED_Toggle+0x12e>

        case 6:
             PORTA ^=  0x20;
    8056:	82 e2       	ldi	r24, 0x22	; 34
    8058:	90 e0       	ldi	r25, 0x00	; 0
    805a:	22 e2       	ldi	r18, 0x22	; 34
    805c:	30 e0       	ldi	r19, 0x00	; 0
    805e:	f9 01       	movw	r30, r18
    8060:	30 81       	ld	r19, Z
    8062:	20 e2       	ldi	r18, 0x20	; 32
    8064:	23 27       	eor	r18, r19
    8066:	fc 01       	movw	r30, r24
    8068:	20 83       	st	Z, r18
             break;
    806a:	15 c0       	rjmp	.+42     	; 0x8096 <LED_Toggle+0x12e>

        case 7:
             PORTA ^=  0x40;
    806c:	82 e2       	ldi	r24, 0x22	; 34
    806e:	90 e0       	ldi	r25, 0x00	; 0
    8070:	22 e2       	ldi	r18, 0x22	; 34
    8072:	30 e0       	ldi	r19, 0x00	; 0
    8074:	f9 01       	movw	r30, r18
    8076:	30 81       	ld	r19, Z
    8078:	20 e4       	ldi	r18, 0x40	; 64
    807a:	23 27       	eor	r18, r19
    807c:	fc 01       	movw	r30, r24
    807e:	20 83       	st	Z, r18
             break;
    8080:	0a c0       	rjmp	.+20     	; 0x8096 <LED_Toggle+0x12e>

        case 8:
             PORTA ^=  0x80;
    8082:	82 e2       	ldi	r24, 0x22	; 34
    8084:	90 e0       	ldi	r25, 0x00	; 0
    8086:	22 e2       	ldi	r18, 0x22	; 34
    8088:	30 e0       	ldi	r19, 0x00	; 0
    808a:	f9 01       	movw	r30, r18
    808c:	30 81       	ld	r19, Z
    808e:	20 e8       	ldi	r18, 0x80	; 128
    8090:	23 27       	eor	r18, r19
    8092:	fc 01       	movw	r30, r24
    8094:	20 83       	st	Z, r18
             break;
    }
    OS_EXIT_CRITICAL();
    8096:	89 81       	ldd	r24, Y+1	; 0x01
    8098:	0e 94 c6 00 	call	0x18c	; 0x18c <OS_CPU_SR_Restore>
}
    809c:	0f 90       	pop	r0
    809e:	0f 90       	pop	r0
    80a0:	cf 91       	pop	r28
    80a2:	df 91       	pop	r29
    80a4:	08 95       	ret

000080a6 <__mulsi3>:
    80a6:	62 9f       	mul	r22, r18
    80a8:	d0 01       	movw	r26, r0
    80aa:	73 9f       	mul	r23, r19
    80ac:	f0 01       	movw	r30, r0
    80ae:	82 9f       	mul	r24, r18
    80b0:	e0 0d       	add	r30, r0
    80b2:	f1 1d       	adc	r31, r1
    80b4:	64 9f       	mul	r22, r20
    80b6:	e0 0d       	add	r30, r0
    80b8:	f1 1d       	adc	r31, r1
    80ba:	92 9f       	mul	r25, r18
    80bc:	f0 0d       	add	r31, r0
    80be:	83 9f       	mul	r24, r19
    80c0:	f0 0d       	add	r31, r0
    80c2:	74 9f       	mul	r23, r20
    80c4:	f0 0d       	add	r31, r0
    80c6:	65 9f       	mul	r22, r21
    80c8:	f0 0d       	add	r31, r0
    80ca:	99 27       	eor	r25, r25
    80cc:	72 9f       	mul	r23, r18
    80ce:	b0 0d       	add	r27, r0
    80d0:	e1 1d       	adc	r30, r1
    80d2:	f9 1f       	adc	r31, r25
    80d4:	63 9f       	mul	r22, r19
    80d6:	b0 0d       	add	r27, r0
    80d8:	e1 1d       	adc	r30, r1
    80da:	f9 1f       	adc	r31, r25
    80dc:	bd 01       	movw	r22, r26
    80de:	cf 01       	movw	r24, r30
    80e0:	11 24       	eor	r1, r1
    80e2:	08 95       	ret

000080e4 <__divmodhi4>:
    80e4:	97 fb       	bst	r25, 7
    80e6:	09 2e       	mov	r0, r25
    80e8:	07 26       	eor	r0, r23
    80ea:	0a d0       	rcall	.+20     	; 0x8100 <__divmodhi4_neg1>
    80ec:	77 fd       	sbrc	r23, 7
    80ee:	04 d0       	rcall	.+8      	; 0x80f8 <__divmodhi4_neg2>
    80f0:	2e d0       	rcall	.+92     	; 0x814e <__udivmodhi4>
    80f2:	06 d0       	rcall	.+12     	; 0x8100 <__divmodhi4_neg1>
    80f4:	00 20       	and	r0, r0
    80f6:	1a f4       	brpl	.+6      	; 0x80fe <__divmodhi4_exit>

000080f8 <__divmodhi4_neg2>:
    80f8:	70 95       	com	r23
    80fa:	61 95       	neg	r22
    80fc:	7f 4f       	sbci	r23, 0xFF	; 255

000080fe <__divmodhi4_exit>:
    80fe:	08 95       	ret

00008100 <__divmodhi4_neg1>:
    8100:	f6 f7       	brtc	.-4      	; 0x80fe <__divmodhi4_exit>
    8102:	90 95       	com	r25
    8104:	81 95       	neg	r24
    8106:	9f 4f       	sbci	r25, 0xFF	; 255
    8108:	08 95       	ret

0000810a <__udivmodsi4>:
    810a:	a1 e2       	ldi	r26, 0x21	; 33
    810c:	1a 2e       	mov	r1, r26
    810e:	aa 1b       	sub	r26, r26
    8110:	bb 1b       	sub	r27, r27
    8112:	fd 01       	movw	r30, r26
    8114:	0d c0       	rjmp	.+26     	; 0x8130 <__udivmodsi4_ep>

00008116 <__udivmodsi4_loop>:
    8116:	aa 1f       	adc	r26, r26
    8118:	bb 1f       	adc	r27, r27
    811a:	ee 1f       	adc	r30, r30
    811c:	ff 1f       	adc	r31, r31
    811e:	a2 17       	cp	r26, r18
    8120:	b3 07       	cpc	r27, r19
    8122:	e4 07       	cpc	r30, r20
    8124:	f5 07       	cpc	r31, r21
    8126:	20 f0       	brcs	.+8      	; 0x8130 <__udivmodsi4_ep>
    8128:	a2 1b       	sub	r26, r18
    812a:	b3 0b       	sbc	r27, r19
    812c:	e4 0b       	sbc	r30, r20
    812e:	f5 0b       	sbc	r31, r21

00008130 <__udivmodsi4_ep>:
    8130:	66 1f       	adc	r22, r22
    8132:	77 1f       	adc	r23, r23
    8134:	88 1f       	adc	r24, r24
    8136:	99 1f       	adc	r25, r25
    8138:	1a 94       	dec	r1
    813a:	69 f7       	brne	.-38     	; 0x8116 <__udivmodsi4_loop>
    813c:	60 95       	com	r22
    813e:	70 95       	com	r23
    8140:	80 95       	com	r24
    8142:	90 95       	com	r25
    8144:	9b 01       	movw	r18, r22
    8146:	ac 01       	movw	r20, r24
    8148:	bd 01       	movw	r22, r26
    814a:	cf 01       	movw	r24, r30
    814c:	08 95       	ret

0000814e <__udivmodhi4>:
    814e:	aa 1b       	sub	r26, r26
    8150:	bb 1b       	sub	r27, r27
    8152:	51 e1       	ldi	r21, 0x11	; 17
    8154:	07 c0       	rjmp	.+14     	; 0x8164 <__udivmodhi4_ep>

00008156 <__udivmodhi4_loop>:
    8156:	aa 1f       	adc	r26, r26
    8158:	bb 1f       	adc	r27, r27
    815a:	a6 17       	cp	r26, r22
    815c:	b7 07       	cpc	r27, r23
    815e:	10 f0       	brcs	.+4      	; 0x8164 <__udivmodhi4_ep>
    8160:	a6 1b       	sub	r26, r22
    8162:	b7 0b       	sbc	r27, r23

00008164 <__udivmodhi4_ep>:
    8164:	88 1f       	adc	r24, r24
    8166:	99 1f       	adc	r25, r25
    8168:	5a 95       	dec	r21
    816a:	a9 f7       	brne	.-22     	; 0x8156 <__udivmodhi4_loop>
    816c:	80 95       	com	r24
    816e:	90 95       	com	r25
    8170:	bc 01       	movw	r22, r24
    8172:	cd 01       	movw	r24, r26
    8174:	08 95       	ret

00008176 <_exit>:
    8176:	f8 94       	cli

00008178 <__stop_program>:
    8178:	ff cf       	rjmp	.-2      	; 0x8178 <__stop_program>
